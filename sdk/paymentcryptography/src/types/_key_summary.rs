// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata about an Amazon Web Services Payment Cryptography key.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeySummary {
    /// <p>The Amazon Resource Name (ARN) of the key.</p>
    pub key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of an Amazon Web Services Payment Cryptography that is being created or deleted.</p>
    pub key_state: ::std::option::Option<crate::types::KeyState>,
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub key_attributes: ::std::option::Option<crate::types::KeyAttributes>,
    /// <p>The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub key_check_value: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the key is exportable. This data is immutable after the key is created.</p>
    pub exportable: ::std::option::Option<bool>,
    /// <p>Specifies whether the key is enabled. </p>
    pub enabled: ::std::option::Option<bool>,
}
impl KeySummary {
    /// <p>The Amazon Resource Name (ARN) of the key.</p>
    pub fn key_arn(&self) -> ::std::option::Option<&str> {
        self.key_arn.as_deref()
    }
    /// <p>The state of an Amazon Web Services Payment Cryptography that is being created or deleted.</p>
    pub fn key_state(&self) -> ::std::option::Option<&crate::types::KeyState> {
        self.key_state.as_ref()
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn key_attributes(&self) -> ::std::option::Option<&crate::types::KeyAttributes> {
        self.key_attributes.as_ref()
    }
    /// <p>The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn key_check_value(&self) -> ::std::option::Option<&str> {
        self.key_check_value.as_deref()
    }
    /// <p>Specifies whether the key is exportable. This data is immutable after the key is created.</p>
    pub fn exportable(&self) -> ::std::option::Option<bool> {
        self.exportable
    }
    /// <p>Specifies whether the key is enabled. </p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
}
impl KeySummary {
    /// Creates a new builder-style object to manufacture [`KeySummary`](crate::types::KeySummary).
    pub fn builder() -> crate::types::builders::KeySummaryBuilder {
        crate::types::builders::KeySummaryBuilder::default()
    }
}

/// A builder for [`KeySummary`](crate::types::KeySummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeySummaryBuilder {
    pub(crate) key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) key_state: ::std::option::Option<crate::types::KeyState>,
    pub(crate) key_attributes: ::std::option::Option<crate::types::KeyAttributes>,
    pub(crate) key_check_value: ::std::option::Option<::std::string::String>,
    pub(crate) exportable: ::std::option::Option<bool>,
    pub(crate) enabled: ::std::option::Option<bool>,
}
impl KeySummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the key.</p>
    pub fn key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the key.</p>
    pub fn set_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the key.</p>
    pub fn get_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_arn
    }
    /// <p>The state of an Amazon Web Services Payment Cryptography that is being created or deleted.</p>
    pub fn key_state(mut self, input: crate::types::KeyState) -> Self {
        self.key_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of an Amazon Web Services Payment Cryptography that is being created or deleted.</p>
    pub fn set_key_state(mut self, input: ::std::option::Option<crate::types::KeyState>) -> Self {
        self.key_state = input;
        self
    }
    /// <p>The state of an Amazon Web Services Payment Cryptography that is being created or deleted.</p>
    pub fn get_key_state(&self) -> &::std::option::Option<crate::types::KeyState> {
        &self.key_state
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn key_attributes(mut self, input: crate::types::KeyAttributes) -> Self {
        self.key_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn set_key_attributes(mut self, input: ::std::option::Option<crate::types::KeyAttributes>) -> Self {
        self.key_attributes = input;
        self
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn get_key_attributes(&self) -> &::std::option::Option<crate::types::KeyAttributes> {
        &self.key_attributes
    }
    /// <p>The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn key_check_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_check_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn set_key_check_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_check_value = input;
        self
    }
    /// <p>The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn get_key_check_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_check_value
    }
    /// <p>Specifies whether the key is exportable. This data is immutable after the key is created.</p>
    pub fn exportable(mut self, input: bool) -> Self {
        self.exportable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the key is exportable. This data is immutable after the key is created.</p>
    pub fn set_exportable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exportable = input;
        self
    }
    /// <p>Specifies whether the key is exportable. This data is immutable after the key is created.</p>
    pub fn get_exportable(&self) -> &::std::option::Option<bool> {
        &self.exportable
    }
    /// <p>Specifies whether the key is enabled. </p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the key is enabled. </p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether the key is enabled. </p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Consumes the builder and constructs a [`KeySummary`](crate::types::KeySummary).
    pub fn build(self) -> crate::types::KeySummary {
        crate::types::KeySummary {
            key_arn: self.key_arn,
            key_state: self.key_state,
            key_attributes: self.key_attributes,
            key_check_value: self.key_check_value,
            exportable: self.exportable,
            enabled: self.enabled,
        }
    }
}
