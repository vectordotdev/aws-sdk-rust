// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyAttributes {
    /// <p>The cryptographic usage of an Amazon Web Services Payment Cryptography key as deﬁned in section A.5.2 of the TR-31 spec.</p>
    pub key_usage: ::std::option::Option<crate::types::KeyUsage>,
    /// <p>The type of Amazon Web Services Payment Cryptography key to create, which determines the classiﬁcation of the cryptographic method and whether Amazon Web Services Payment Cryptography key contains a symmetric key or an asymmetric key pair.</p>
    pub key_class: ::std::option::Option<crate::types::KeyClass>,
    /// <p>The key algorithm to be use during creation of an Amazon Web Services Payment Cryptography key.</p>
    /// <p>For symmetric keys, Amazon Web Services Payment Cryptography supports <code>AES</code> and <code>TDES</code> algorithms. For asymmetric keys, Amazon Web Services Payment Cryptography supports <code>RSA</code> and <code>ECC_NIST</code> algorithms.</p>
    pub key_algorithm: ::std::option::Option<crate::types::KeyAlgorithm>,
    /// <p>The list of cryptographic operations that you can perform using the key.</p>
    pub key_modes_of_use: ::std::option::Option<crate::types::KeyModesOfUse>,
}
impl KeyAttributes {
    /// <p>The cryptographic usage of an Amazon Web Services Payment Cryptography key as deﬁned in section A.5.2 of the TR-31 spec.</p>
    pub fn key_usage(&self) -> ::std::option::Option<&crate::types::KeyUsage> {
        self.key_usage.as_ref()
    }
    /// <p>The type of Amazon Web Services Payment Cryptography key to create, which determines the classiﬁcation of the cryptographic method and whether Amazon Web Services Payment Cryptography key contains a symmetric key or an asymmetric key pair.</p>
    pub fn key_class(&self) -> ::std::option::Option<&crate::types::KeyClass> {
        self.key_class.as_ref()
    }
    /// <p>The key algorithm to be use during creation of an Amazon Web Services Payment Cryptography key.</p>
    /// <p>For symmetric keys, Amazon Web Services Payment Cryptography supports <code>AES</code> and <code>TDES</code> algorithms. For asymmetric keys, Amazon Web Services Payment Cryptography supports <code>RSA</code> and <code>ECC_NIST</code> algorithms.</p>
    pub fn key_algorithm(&self) -> ::std::option::Option<&crate::types::KeyAlgorithm> {
        self.key_algorithm.as_ref()
    }
    /// <p>The list of cryptographic operations that you can perform using the key.</p>
    pub fn key_modes_of_use(&self) -> ::std::option::Option<&crate::types::KeyModesOfUse> {
        self.key_modes_of_use.as_ref()
    }
}
impl KeyAttributes {
    /// Creates a new builder-style object to manufacture [`KeyAttributes`](crate::types::KeyAttributes).
    pub fn builder() -> crate::types::builders::KeyAttributesBuilder {
        crate::types::builders::KeyAttributesBuilder::default()
    }
}

/// A builder for [`KeyAttributes`](crate::types::KeyAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeyAttributesBuilder {
    pub(crate) key_usage: ::std::option::Option<crate::types::KeyUsage>,
    pub(crate) key_class: ::std::option::Option<crate::types::KeyClass>,
    pub(crate) key_algorithm: ::std::option::Option<crate::types::KeyAlgorithm>,
    pub(crate) key_modes_of_use: ::std::option::Option<crate::types::KeyModesOfUse>,
}
impl KeyAttributesBuilder {
    /// <p>The cryptographic usage of an Amazon Web Services Payment Cryptography key as deﬁned in section A.5.2 of the TR-31 spec.</p>
    pub fn key_usage(mut self, input: crate::types::KeyUsage) -> Self {
        self.key_usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cryptographic usage of an Amazon Web Services Payment Cryptography key as deﬁned in section A.5.2 of the TR-31 spec.</p>
    pub fn set_key_usage(mut self, input: ::std::option::Option<crate::types::KeyUsage>) -> Self {
        self.key_usage = input;
        self
    }
    /// <p>The cryptographic usage of an Amazon Web Services Payment Cryptography key as deﬁned in section A.5.2 of the TR-31 spec.</p>
    pub fn get_key_usage(&self) -> &::std::option::Option<crate::types::KeyUsage> {
        &self.key_usage
    }
    /// <p>The type of Amazon Web Services Payment Cryptography key to create, which determines the classiﬁcation of the cryptographic method and whether Amazon Web Services Payment Cryptography key contains a symmetric key or an asymmetric key pair.</p>
    pub fn key_class(mut self, input: crate::types::KeyClass) -> Self {
        self.key_class = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of Amazon Web Services Payment Cryptography key to create, which determines the classiﬁcation of the cryptographic method and whether Amazon Web Services Payment Cryptography key contains a symmetric key or an asymmetric key pair.</p>
    pub fn set_key_class(mut self, input: ::std::option::Option<crate::types::KeyClass>) -> Self {
        self.key_class = input;
        self
    }
    /// <p>The type of Amazon Web Services Payment Cryptography key to create, which determines the classiﬁcation of the cryptographic method and whether Amazon Web Services Payment Cryptography key contains a symmetric key or an asymmetric key pair.</p>
    pub fn get_key_class(&self) -> &::std::option::Option<crate::types::KeyClass> {
        &self.key_class
    }
    /// <p>The key algorithm to be use during creation of an Amazon Web Services Payment Cryptography key.</p>
    /// <p>For symmetric keys, Amazon Web Services Payment Cryptography supports <code>AES</code> and <code>TDES</code> algorithms. For asymmetric keys, Amazon Web Services Payment Cryptography supports <code>RSA</code> and <code>ECC_NIST</code> algorithms.</p>
    pub fn key_algorithm(mut self, input: crate::types::KeyAlgorithm) -> Self {
        self.key_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The key algorithm to be use during creation of an Amazon Web Services Payment Cryptography key.</p>
    /// <p>For symmetric keys, Amazon Web Services Payment Cryptography supports <code>AES</code> and <code>TDES</code> algorithms. For asymmetric keys, Amazon Web Services Payment Cryptography supports <code>RSA</code> and <code>ECC_NIST</code> algorithms.</p>
    pub fn set_key_algorithm(mut self, input: ::std::option::Option<crate::types::KeyAlgorithm>) -> Self {
        self.key_algorithm = input;
        self
    }
    /// <p>The key algorithm to be use during creation of an Amazon Web Services Payment Cryptography key.</p>
    /// <p>For symmetric keys, Amazon Web Services Payment Cryptography supports <code>AES</code> and <code>TDES</code> algorithms. For asymmetric keys, Amazon Web Services Payment Cryptography supports <code>RSA</code> and <code>ECC_NIST</code> algorithms.</p>
    pub fn get_key_algorithm(&self) -> &::std::option::Option<crate::types::KeyAlgorithm> {
        &self.key_algorithm
    }
    /// <p>The list of cryptographic operations that you can perform using the key.</p>
    pub fn key_modes_of_use(mut self, input: crate::types::KeyModesOfUse) -> Self {
        self.key_modes_of_use = ::std::option::Option::Some(input);
        self
    }
    /// <p>The list of cryptographic operations that you can perform using the key.</p>
    pub fn set_key_modes_of_use(mut self, input: ::std::option::Option<crate::types::KeyModesOfUse>) -> Self {
        self.key_modes_of_use = input;
        self
    }
    /// <p>The list of cryptographic operations that you can perform using the key.</p>
    pub fn get_key_modes_of_use(&self) -> &::std::option::Option<crate::types::KeyModesOfUse> {
        &self.key_modes_of_use
    }
    /// Consumes the builder and constructs a [`KeyAttributes`](crate::types::KeyAttributes).
    pub fn build(self) -> crate::types::KeyAttributes {
        crate::types::KeyAttributes {
            key_usage: self.key_usage,
            key_class: self.key_class,
            key_algorithm: self.key_algorithm,
            key_modes_of_use: self.key_modes_of_use,
        }
    }
}
