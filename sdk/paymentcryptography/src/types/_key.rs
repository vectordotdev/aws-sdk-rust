// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata about an Amazon Web Services Payment Cryptography key.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Key {
    /// <p>The Amazon Resource Name (ARN) of the key.</p>
    pub key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub key_attributes: ::std::option::Option<crate::types::KeyAttributes>,
    /// <p>The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub key_check_value: ::std::option::Option<::std::string::String>,
    /// <p>The algorithm used for calculating key check value (KCV) for DES and AES keys. For a DES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '00', with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For an AES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '01', with the key to be checked and retaining the 3 highest order bytes of the encrypted result.</p>
    pub key_check_value_algorithm: ::std::option::Option<crate::types::KeyCheckValueAlgorithm>,
    /// <p>Specifies whether the key is enabled. </p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>Specifies whether the key is exportable. This data is immutable after the key is created.</p>
    pub exportable: ::std::option::Option<bool>,
    /// <p>The state of key that is being created or deleted.</p>
    pub key_state: ::std::option::Option<crate::types::KeyState>,
    /// <p>The source of the key material. For keys created within Amazon Web Services Payment Cryptography, the value is <code>AWS_PAYMENT_CRYPTOGRAPHY</code>. For keys imported into Amazon Web Services Payment Cryptography, the value is <code>EXTERNAL</code>.</p>
    pub key_origin: ::std::option::Option<crate::types::KeyOrigin>,
    /// <p>The date and time when the key was created.</p>
    pub create_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will start using the key material for cryptographic operations.</p>
    pub usage_start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will stop using the key material for cryptographic operations.</p>
    pub usage_stop_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when <code>KeyState</code> is <code>DELETE_PENDING</code> and the key is scheduled for deletion.</p>
    pub delete_pending_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when when the <code>KeyState</code> is <code>DELETE_COMPLETE</code> and the Amazon Web Services Payment Cryptography key is deleted.</p>
    pub delete_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Key {
    /// <p>The Amazon Resource Name (ARN) of the key.</p>
    pub fn key_arn(&self) -> ::std::option::Option<&str> {
        self.key_arn.as_deref()
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn key_attributes(&self) -> ::std::option::Option<&crate::types::KeyAttributes> {
        self.key_attributes.as_ref()
    }
    /// <p>The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn key_check_value(&self) -> ::std::option::Option<&str> {
        self.key_check_value.as_deref()
    }
    /// <p>The algorithm used for calculating key check value (KCV) for DES and AES keys. For a DES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '00', with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For an AES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '01', with the key to be checked and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn key_check_value_algorithm(&self) -> ::std::option::Option<&crate::types::KeyCheckValueAlgorithm> {
        self.key_check_value_algorithm.as_ref()
    }
    /// <p>Specifies whether the key is enabled. </p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>Specifies whether the key is exportable. This data is immutable after the key is created.</p>
    pub fn exportable(&self) -> ::std::option::Option<bool> {
        self.exportable
    }
    /// <p>The state of key that is being created or deleted.</p>
    pub fn key_state(&self) -> ::std::option::Option<&crate::types::KeyState> {
        self.key_state.as_ref()
    }
    /// <p>The source of the key material. For keys created within Amazon Web Services Payment Cryptography, the value is <code>AWS_PAYMENT_CRYPTOGRAPHY</code>. For keys imported into Amazon Web Services Payment Cryptography, the value is <code>EXTERNAL</code>.</p>
    pub fn key_origin(&self) -> ::std::option::Option<&crate::types::KeyOrigin> {
        self.key_origin.as_ref()
    }
    /// <p>The date and time when the key was created.</p>
    pub fn create_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_timestamp.as_ref()
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will start using the key material for cryptographic operations.</p>
    pub fn usage_start_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.usage_start_timestamp.as_ref()
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will stop using the key material for cryptographic operations.</p>
    pub fn usage_stop_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.usage_stop_timestamp.as_ref()
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when <code>KeyState</code> is <code>DELETE_PENDING</code> and the key is scheduled for deletion.</p>
    pub fn delete_pending_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.delete_pending_timestamp.as_ref()
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when when the <code>KeyState</code> is <code>DELETE_COMPLETE</code> and the Amazon Web Services Payment Cryptography key is deleted.</p>
    pub fn delete_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.delete_timestamp.as_ref()
    }
}
impl Key {
    /// Creates a new builder-style object to manufacture [`Key`](crate::types::Key).
    pub fn builder() -> crate::types::builders::KeyBuilder {
        crate::types::builders::KeyBuilder::default()
    }
}

/// A builder for [`Key`](crate::types::Key).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeyBuilder {
    pub(crate) key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) key_attributes: ::std::option::Option<crate::types::KeyAttributes>,
    pub(crate) key_check_value: ::std::option::Option<::std::string::String>,
    pub(crate) key_check_value_algorithm: ::std::option::Option<crate::types::KeyCheckValueAlgorithm>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) exportable: ::std::option::Option<bool>,
    pub(crate) key_state: ::std::option::Option<crate::types::KeyState>,
    pub(crate) key_origin: ::std::option::Option<crate::types::KeyOrigin>,
    pub(crate) create_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) usage_start_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) usage_stop_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) delete_pending_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) delete_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl KeyBuilder {
    /// <p>The Amazon Resource Name (ARN) of the key.</p>
    pub fn key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the key.</p>
    pub fn set_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the key.</p>
    pub fn get_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_arn
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn key_attributes(mut self, input: crate::types::KeyAttributes) -> Self {
        self.key_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn set_key_attributes(mut self, input: ::std::option::Option<crate::types::KeyAttributes>) -> Self {
        self.key_attributes = input;
        self
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p>
    pub fn get_key_attributes(&self) -> &::std::option::Option<crate::types::KeyAttributes> {
        &self.key_attributes
    }
    /// <p>The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn key_check_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_check_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn set_key_check_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_check_value = input;
        self
    }
    /// <p>The key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn get_key_check_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_check_value
    }
    /// <p>The algorithm used for calculating key check value (KCV) for DES and AES keys. For a DES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '00', with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For an AES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '01', with the key to be checked and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn key_check_value_algorithm(mut self, input: crate::types::KeyCheckValueAlgorithm) -> Self {
        self.key_check_value_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The algorithm used for calculating key check value (KCV) for DES and AES keys. For a DES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '00', with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For an AES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '01', with the key to be checked and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn set_key_check_value_algorithm(mut self, input: ::std::option::Option<crate::types::KeyCheckValueAlgorithm>) -> Self {
        self.key_check_value_algorithm = input;
        self
    }
    /// <p>The algorithm used for calculating key check value (KCV) for DES and AES keys. For a DES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '00', with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For an AES key, Amazon Web Services Payment Cryptography computes the KCV by encrypting 8 bytes, each with value '01', with the key to be checked and retaining the 3 highest order bytes of the encrypted result.</p>
    pub fn get_key_check_value_algorithm(&self) -> &::std::option::Option<crate::types::KeyCheckValueAlgorithm> {
        &self.key_check_value_algorithm
    }
    /// <p>Specifies whether the key is enabled. </p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the key is enabled. </p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether the key is enabled. </p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>Specifies whether the key is exportable. This data is immutable after the key is created.</p>
    pub fn exportable(mut self, input: bool) -> Self {
        self.exportable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the key is exportable. This data is immutable after the key is created.</p>
    pub fn set_exportable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exportable = input;
        self
    }
    /// <p>Specifies whether the key is exportable. This data is immutable after the key is created.</p>
    pub fn get_exportable(&self) -> &::std::option::Option<bool> {
        &self.exportable
    }
    /// <p>The state of key that is being created or deleted.</p>
    pub fn key_state(mut self, input: crate::types::KeyState) -> Self {
        self.key_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of key that is being created or deleted.</p>
    pub fn set_key_state(mut self, input: ::std::option::Option<crate::types::KeyState>) -> Self {
        self.key_state = input;
        self
    }
    /// <p>The state of key that is being created or deleted.</p>
    pub fn get_key_state(&self) -> &::std::option::Option<crate::types::KeyState> {
        &self.key_state
    }
    /// <p>The source of the key material. For keys created within Amazon Web Services Payment Cryptography, the value is <code>AWS_PAYMENT_CRYPTOGRAPHY</code>. For keys imported into Amazon Web Services Payment Cryptography, the value is <code>EXTERNAL</code>.</p>
    pub fn key_origin(mut self, input: crate::types::KeyOrigin) -> Self {
        self.key_origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the key material. For keys created within Amazon Web Services Payment Cryptography, the value is <code>AWS_PAYMENT_CRYPTOGRAPHY</code>. For keys imported into Amazon Web Services Payment Cryptography, the value is <code>EXTERNAL</code>.</p>
    pub fn set_key_origin(mut self, input: ::std::option::Option<crate::types::KeyOrigin>) -> Self {
        self.key_origin = input;
        self
    }
    /// <p>The source of the key material. For keys created within Amazon Web Services Payment Cryptography, the value is <code>AWS_PAYMENT_CRYPTOGRAPHY</code>. For keys imported into Amazon Web Services Payment Cryptography, the value is <code>EXTERNAL</code>.</p>
    pub fn get_key_origin(&self) -> &::std::option::Option<crate::types::KeyOrigin> {
        &self.key_origin
    }
    /// <p>The date and time when the key was created.</p>
    pub fn create_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the key was created.</p>
    pub fn set_create_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_timestamp = input;
        self
    }
    /// <p>The date and time when the key was created.</p>
    pub fn get_create_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_timestamp
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will start using the key material for cryptographic operations.</p>
    pub fn usage_start_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.usage_start_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will start using the key material for cryptographic operations.</p>
    pub fn set_usage_start_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.usage_start_timestamp = input;
        self
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will start using the key material for cryptographic operations.</p>
    pub fn get_usage_start_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.usage_start_timestamp
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will stop using the key material for cryptographic operations.</p>
    pub fn usage_stop_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.usage_stop_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will stop using the key material for cryptographic operations.</p>
    pub fn set_usage_stop_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.usage_stop_timestamp = input;
        self
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will stop using the key material for cryptographic operations.</p>
    pub fn get_usage_stop_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.usage_stop_timestamp
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when <code>KeyState</code> is <code>DELETE_PENDING</code> and the key is scheduled for deletion.</p>
    pub fn delete_pending_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.delete_pending_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when <code>KeyState</code> is <code>DELETE_PENDING</code> and the key is scheduled for deletion.</p>
    pub fn set_delete_pending_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.delete_pending_timestamp = input;
        self
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when <code>KeyState</code> is <code>DELETE_PENDING</code> and the key is scheduled for deletion.</p>
    pub fn get_delete_pending_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.delete_pending_timestamp
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when when the <code>KeyState</code> is <code>DELETE_COMPLETE</code> and the Amazon Web Services Payment Cryptography key is deleted.</p>
    pub fn delete_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.delete_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when when the <code>KeyState</code> is <code>DELETE_COMPLETE</code> and the Amazon Web Services Payment Cryptography key is deleted.</p>
    pub fn set_delete_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.delete_timestamp = input;
        self
    }
    /// <p>The date and time after which Amazon Web Services Payment Cryptography will delete the key. This value is present only when when the <code>KeyState</code> is <code>DELETE_COMPLETE</code> and the Amazon Web Services Payment Cryptography key is deleted.</p>
    pub fn get_delete_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.delete_timestamp
    }
    /// Consumes the builder and constructs a [`Key`](crate::types::Key).
    pub fn build(self) -> crate::types::Key {
        crate::types::Key {
            key_arn: self.key_arn,
            key_attributes: self.key_attributes,
            key_check_value: self.key_check_value,
            key_check_value_algorithm: self.key_check_value_algorithm,
            enabled: self.enabled,
            exportable: self.exportable,
            key_state: self.key_state,
            key_origin: self.key_origin,
            create_timestamp: self.create_timestamp,
            usage_start_timestamp: self.usage_start_timestamp,
            usage_stop_timestamp: self.usage_stop_timestamp,
            delete_pending_timestamp: self.delete_pending_timestamp,
            delete_timestamp: self.delete_timestamp,
        }
    }
}
