// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyModesOfUse {
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to encrypt data.</p>
    pub encrypt: bool,
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to decrypt data.</p>
    pub decrypt: bool,
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to wrap other keys.</p>
    pub wrap: bool,
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to unwrap other keys.</p>
    pub unwrap: bool,
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to generate and verify other card and PIN verification keys.</p>
    pub generate: bool,
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used for signing.</p>
    pub sign: bool,
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to verify signatures.</p>
    pub verify: bool,
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to derive new keys.</p>
    pub derive_key: bool,
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key has no special restrictions other than the restrictions implied by <code>KeyUsage</code>.</p>
    pub no_restrictions: bool,
}
impl KeyModesOfUse {
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to encrypt data.</p>
    pub fn encrypt(&self) -> bool {
        self.encrypt
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to decrypt data.</p>
    pub fn decrypt(&self) -> bool {
        self.decrypt
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to wrap other keys.</p>
    pub fn wrap(&self) -> bool {
        self.wrap
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to unwrap other keys.</p>
    pub fn unwrap(&self) -> bool {
        self.unwrap
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to generate and verify other card and PIN verification keys.</p>
    pub fn generate(&self) -> bool {
        self.generate
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used for signing.</p>
    pub fn sign(&self) -> bool {
        self.sign
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to verify signatures.</p>
    pub fn verify(&self) -> bool {
        self.verify
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to derive new keys.</p>
    pub fn derive_key(&self) -> bool {
        self.derive_key
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key has no special restrictions other than the restrictions implied by <code>KeyUsage</code>.</p>
    pub fn no_restrictions(&self) -> bool {
        self.no_restrictions
    }
}
impl KeyModesOfUse {
    /// Creates a new builder-style object to manufacture [`KeyModesOfUse`](crate::types::KeyModesOfUse).
    pub fn builder() -> crate::types::builders::KeyModesOfUseBuilder {
        crate::types::builders::KeyModesOfUseBuilder::default()
    }
}

/// A builder for [`KeyModesOfUse`](crate::types::KeyModesOfUse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeyModesOfUseBuilder {
    pub(crate) encrypt: ::std::option::Option<bool>,
    pub(crate) decrypt: ::std::option::Option<bool>,
    pub(crate) wrap: ::std::option::Option<bool>,
    pub(crate) unwrap: ::std::option::Option<bool>,
    pub(crate) generate: ::std::option::Option<bool>,
    pub(crate) sign: ::std::option::Option<bool>,
    pub(crate) verify: ::std::option::Option<bool>,
    pub(crate) derive_key: ::std::option::Option<bool>,
    pub(crate) no_restrictions: ::std::option::Option<bool>,
}
impl KeyModesOfUseBuilder {
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to encrypt data.</p>
    pub fn encrypt(mut self, input: bool) -> Self {
        self.encrypt = ::std::option::Option::Some(input);
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to encrypt data.</p>
    pub fn set_encrypt(mut self, input: ::std::option::Option<bool>) -> Self {
        self.encrypt = input;
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to encrypt data.</p>
    pub fn get_encrypt(&self) -> &::std::option::Option<bool> {
        &self.encrypt
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to decrypt data.</p>
    pub fn decrypt(mut self, input: bool) -> Self {
        self.decrypt = ::std::option::Option::Some(input);
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to decrypt data.</p>
    pub fn set_decrypt(mut self, input: ::std::option::Option<bool>) -> Self {
        self.decrypt = input;
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to decrypt data.</p>
    pub fn get_decrypt(&self) -> &::std::option::Option<bool> {
        &self.decrypt
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to wrap other keys.</p>
    pub fn wrap(mut self, input: bool) -> Self {
        self.wrap = ::std::option::Option::Some(input);
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to wrap other keys.</p>
    pub fn set_wrap(mut self, input: ::std::option::Option<bool>) -> Self {
        self.wrap = input;
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to wrap other keys.</p>
    pub fn get_wrap(&self) -> &::std::option::Option<bool> {
        &self.wrap
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to unwrap other keys.</p>
    pub fn unwrap(mut self, input: bool) -> Self {
        self.unwrap = ::std::option::Option::Some(input);
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to unwrap other keys.</p>
    pub fn set_unwrap(mut self, input: ::std::option::Option<bool>) -> Self {
        self.unwrap = input;
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to unwrap other keys.</p>
    pub fn get_unwrap(&self) -> &::std::option::Option<bool> {
        &self.unwrap
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to generate and verify other card and PIN verification keys.</p>
    pub fn generate(mut self, input: bool) -> Self {
        self.generate = ::std::option::Option::Some(input);
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to generate and verify other card and PIN verification keys.</p>
    pub fn set_generate(mut self, input: ::std::option::Option<bool>) -> Self {
        self.generate = input;
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to generate and verify other card and PIN verification keys.</p>
    pub fn get_generate(&self) -> &::std::option::Option<bool> {
        &self.generate
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used for signing.</p>
    pub fn sign(mut self, input: bool) -> Self {
        self.sign = ::std::option::Option::Some(input);
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used for signing.</p>
    pub fn set_sign(mut self, input: ::std::option::Option<bool>) -> Self {
        self.sign = input;
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used for signing.</p>
    pub fn get_sign(&self) -> &::std::option::Option<bool> {
        &self.sign
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to verify signatures.</p>
    pub fn verify(mut self, input: bool) -> Self {
        self.verify = ::std::option::Option::Some(input);
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to verify signatures.</p>
    pub fn set_verify(mut self, input: ::std::option::Option<bool>) -> Self {
        self.verify = input;
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to verify signatures.</p>
    pub fn get_verify(&self) -> &::std::option::Option<bool> {
        &self.verify
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to derive new keys.</p>
    pub fn derive_key(mut self, input: bool) -> Self {
        self.derive_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to derive new keys.</p>
    pub fn set_derive_key(mut self, input: ::std::option::Option<bool>) -> Self {
        self.derive_key = input;
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to derive new keys.</p>
    pub fn get_derive_key(&self) -> &::std::option::Option<bool> {
        &self.derive_key
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key has no special restrictions other than the restrictions implied by <code>KeyUsage</code>.</p>
    pub fn no_restrictions(mut self, input: bool) -> Self {
        self.no_restrictions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key has no special restrictions other than the restrictions implied by <code>KeyUsage</code>.</p>
    pub fn set_no_restrictions(mut self, input: ::std::option::Option<bool>) -> Self {
        self.no_restrictions = input;
        self
    }
    /// <p>Speciﬁes whether an Amazon Web Services Payment Cryptography key has no special restrictions other than the restrictions implied by <code>KeyUsage</code>.</p>
    pub fn get_no_restrictions(&self) -> &::std::option::Option<bool> {
        &self.no_restrictions
    }
    /// Consumes the builder and constructs a [`KeyModesOfUse`](crate::types::KeyModesOfUse).
    pub fn build(self) -> crate::types::KeyModesOfUse {
        crate::types::KeyModesOfUse {
            encrypt: self.encrypt.unwrap_or_default(),
            decrypt: self.decrypt.unwrap_or_default(),
            wrap: self.wrap.unwrap_or_default(),
            unwrap: self.unwrap.unwrap_or_default(),
            generate: self.generate.unwrap_or_default(),
            sign: self.sign.unwrap_or_default(),
            verify: self.verify.unwrap_or_default(),
            derive_key: self.derive_key.unwrap_or_default(),
            no_restrictions: self.no_restrictions.unwrap_or_default(),
        }
    }
}
