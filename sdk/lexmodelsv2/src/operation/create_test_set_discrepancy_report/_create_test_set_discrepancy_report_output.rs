// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTestSetDiscrepancyReportOutput {
    /// <p>The unique identifier of the test set discrepancy report to describe.</p>
    pub test_set_discrepancy_report_id: ::std::option::Option<::std::string::String>,
    /// <p>The creation date and time for the test set discrepancy report.</p>
    pub creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The test set Id for the test set discrepancy report.</p>
    pub test_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The target bot for the test set discrepancy report.</p>
    pub target: ::std::option::Option<crate::types::TestSetDiscrepancyReportResourceTarget>,
    _request_id: Option<String>,
}
impl CreateTestSetDiscrepancyReportOutput {
    /// <p>The unique identifier of the test set discrepancy report to describe.</p>
    pub fn test_set_discrepancy_report_id(&self) -> ::std::option::Option<&str> {
        self.test_set_discrepancy_report_id.as_deref()
    }
    /// <p>The creation date and time for the test set discrepancy report.</p>
    pub fn creation_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The test set Id for the test set discrepancy report.</p>
    pub fn test_set_id(&self) -> ::std::option::Option<&str> {
        self.test_set_id.as_deref()
    }
    /// <p>The target bot for the test set discrepancy report.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::TestSetDiscrepancyReportResourceTarget> {
        self.target.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for CreateTestSetDiscrepancyReportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateTestSetDiscrepancyReportOutput {
    /// Creates a new builder-style object to manufacture [`CreateTestSetDiscrepancyReportOutput`](crate::operation::create_test_set_discrepancy_report::CreateTestSetDiscrepancyReportOutput).
    pub fn builder() -> crate::operation::create_test_set_discrepancy_report::builders::CreateTestSetDiscrepancyReportOutputBuilder {
        crate::operation::create_test_set_discrepancy_report::builders::CreateTestSetDiscrepancyReportOutputBuilder::default()
    }
}

/// A builder for [`CreateTestSetDiscrepancyReportOutput`](crate::operation::create_test_set_discrepancy_report::CreateTestSetDiscrepancyReportOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateTestSetDiscrepancyReportOutputBuilder {
    pub(crate) test_set_discrepancy_report_id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) test_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) target: ::std::option::Option<crate::types::TestSetDiscrepancyReportResourceTarget>,
    _request_id: Option<String>,
}
impl CreateTestSetDiscrepancyReportOutputBuilder {
    /// <p>The unique identifier of the test set discrepancy report to describe.</p>
    pub fn test_set_discrepancy_report_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_set_discrepancy_report_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the test set discrepancy report to describe.</p>
    pub fn set_test_set_discrepancy_report_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_set_discrepancy_report_id = input;
        self
    }
    /// <p>The unique identifier of the test set discrepancy report to describe.</p>
    pub fn get_test_set_discrepancy_report_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_set_discrepancy_report_id
    }
    /// <p>The creation date and time for the test set discrepancy report.</p>
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation date and time for the test set discrepancy report.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The creation date and time for the test set discrepancy report.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>The test set Id for the test set discrepancy report.</p>
    pub fn test_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The test set Id for the test set discrepancy report.</p>
    pub fn set_test_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_set_id = input;
        self
    }
    /// <p>The test set Id for the test set discrepancy report.</p>
    pub fn get_test_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_set_id
    }
    /// <p>The target bot for the test set discrepancy report.</p>
    pub fn target(mut self, input: crate::types::TestSetDiscrepancyReportResourceTarget) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target bot for the test set discrepancy report.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::TestSetDiscrepancyReportResourceTarget>) -> Self {
        self.target = input;
        self
    }
    /// <p>The target bot for the test set discrepancy report.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::TestSetDiscrepancyReportResourceTarget> {
        &self.target
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateTestSetDiscrepancyReportOutput`](crate::operation::create_test_set_discrepancy_report::CreateTestSetDiscrepancyReportOutput).
    pub fn build(self) -> crate::operation::create_test_set_discrepancy_report::CreateTestSetDiscrepancyReportOutput {
        crate::operation::create_test_set_discrepancy_report::CreateTestSetDiscrepancyReportOutput {
            test_set_discrepancy_report_id: self.test_set_discrepancy_report_id,
            creation_date_time: self.creation_date_time,
            test_set_id: self.test_set_id,
            target: self.target,
            _request_id: self._request_id,
        }
    }
}
