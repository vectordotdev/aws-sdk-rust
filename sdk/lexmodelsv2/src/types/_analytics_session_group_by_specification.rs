// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the category by which to group the sessions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsSessionGroupBySpecification {
    /// <p>Specifies whether to group the session by their end state or their locale.</p>
    pub name: ::std::option::Option<crate::types::AnalyticsSessionField>,
}
impl AnalyticsSessionGroupBySpecification {
    /// <p>Specifies whether to group the session by their end state or their locale.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::AnalyticsSessionField> {
        self.name.as_ref()
    }
}
impl AnalyticsSessionGroupBySpecification {
    /// Creates a new builder-style object to manufacture [`AnalyticsSessionGroupBySpecification`](crate::types::AnalyticsSessionGroupBySpecification).
    pub fn builder() -> crate::types::builders::AnalyticsSessionGroupBySpecificationBuilder {
        crate::types::builders::AnalyticsSessionGroupBySpecificationBuilder::default()
    }
}

/// A builder for [`AnalyticsSessionGroupBySpecification`](crate::types::AnalyticsSessionGroupBySpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyticsSessionGroupBySpecificationBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AnalyticsSessionField>,
}
impl AnalyticsSessionGroupBySpecificationBuilder {
    /// <p>Specifies whether to group the session by their end state or their locale.</p>
    pub fn name(mut self, input: crate::types::AnalyticsSessionField) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to group the session by their end state or their locale.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AnalyticsSessionField>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies whether to group the session by their end state or their locale.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AnalyticsSessionField> {
        &self.name
    }
    /// Consumes the builder and constructs a [`AnalyticsSessionGroupBySpecification`](crate::types::AnalyticsSessionGroupBySpecification).
    pub fn build(self) -> crate::types::AnalyticsSessionGroupBySpecification {
        crate::types::AnalyticsSessionGroupBySpecification { name: self.name }
    }
}
