// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that specifies the last used intent at the time of the utterance as an attribute to return.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsUtteranceAttribute {
    /// <p>An attribute to return. The only available attribute is the intent that the bot mapped the utterance to.</p>
    pub name: ::std::option::Option<crate::types::AnalyticsUtteranceAttributeName>,
}
impl AnalyticsUtteranceAttribute {
    /// <p>An attribute to return. The only available attribute is the intent that the bot mapped the utterance to.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::AnalyticsUtteranceAttributeName> {
        self.name.as_ref()
    }
}
impl AnalyticsUtteranceAttribute {
    /// Creates a new builder-style object to manufacture [`AnalyticsUtteranceAttribute`](crate::types::AnalyticsUtteranceAttribute).
    pub fn builder() -> crate::types::builders::AnalyticsUtteranceAttributeBuilder {
        crate::types::builders::AnalyticsUtteranceAttributeBuilder::default()
    }
}

/// A builder for [`AnalyticsUtteranceAttribute`](crate::types::AnalyticsUtteranceAttribute).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyticsUtteranceAttributeBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AnalyticsUtteranceAttributeName>,
}
impl AnalyticsUtteranceAttributeBuilder {
    /// <p>An attribute to return. The only available attribute is the intent that the bot mapped the utterance to.</p>
    pub fn name(mut self, input: crate::types::AnalyticsUtteranceAttributeName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>An attribute to return. The only available attribute is the intent that the bot mapped the utterance to.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AnalyticsUtteranceAttributeName>) -> Self {
        self.name = input;
        self
    }
    /// <p>An attribute to return. The only available attribute is the intent that the bot mapped the utterance to.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AnalyticsUtteranceAttributeName> {
        &self.name
    }
    /// Consumes the builder and constructs a [`AnalyticsUtteranceAttribute`](crate::types::AnalyticsUtteranceAttribute).
    pub fn build(self) -> crate::types::AnalyticsUtteranceAttribute {
        crate::types::AnalyticsUtteranceAttribute { name: self.name }
    }
}
