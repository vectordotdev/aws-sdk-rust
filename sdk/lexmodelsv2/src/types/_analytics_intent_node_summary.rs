// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing information about the requested path.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsIntentNodeSummary {
    /// <p>The name of the intent at the end of the requested path.</p>
    pub intent_name: ::std::option::Option<::std::string::String>,
    /// <p>The path.</p>
    pub intent_path: ::std::option::Option<::std::string::String>,
    /// <p>The total number of sessions that follow the given path to the given intent.</p>
    pub intent_count: ::std::option::Option<i32>,
    /// <p>The number of intents up to and including the requested path.</p>
    pub intent_level: ::std::option::Option<i32>,
    /// <p>Specifies whether the node is the end of a path (<code>Exit</code>) or not (<code>Inner</code>).</p>
    pub node_type: ::std::option::Option<crate::types::AnalyticsNodeType>,
}
impl AnalyticsIntentNodeSummary {
    /// <p>The name of the intent at the end of the requested path.</p>
    pub fn intent_name(&self) -> ::std::option::Option<&str> {
        self.intent_name.as_deref()
    }
    /// <p>The path.</p>
    pub fn intent_path(&self) -> ::std::option::Option<&str> {
        self.intent_path.as_deref()
    }
    /// <p>The total number of sessions that follow the given path to the given intent.</p>
    pub fn intent_count(&self) -> ::std::option::Option<i32> {
        self.intent_count
    }
    /// <p>The number of intents up to and including the requested path.</p>
    pub fn intent_level(&self) -> ::std::option::Option<i32> {
        self.intent_level
    }
    /// <p>Specifies whether the node is the end of a path (<code>Exit</code>) or not (<code>Inner</code>).</p>
    pub fn node_type(&self) -> ::std::option::Option<&crate::types::AnalyticsNodeType> {
        self.node_type.as_ref()
    }
}
impl AnalyticsIntentNodeSummary {
    /// Creates a new builder-style object to manufacture [`AnalyticsIntentNodeSummary`](crate::types::AnalyticsIntentNodeSummary).
    pub fn builder() -> crate::types::builders::AnalyticsIntentNodeSummaryBuilder {
        crate::types::builders::AnalyticsIntentNodeSummaryBuilder::default()
    }
}

/// A builder for [`AnalyticsIntentNodeSummary`](crate::types::AnalyticsIntentNodeSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyticsIntentNodeSummaryBuilder {
    pub(crate) intent_name: ::std::option::Option<::std::string::String>,
    pub(crate) intent_path: ::std::option::Option<::std::string::String>,
    pub(crate) intent_count: ::std::option::Option<i32>,
    pub(crate) intent_level: ::std::option::Option<i32>,
    pub(crate) node_type: ::std::option::Option<crate::types::AnalyticsNodeType>,
}
impl AnalyticsIntentNodeSummaryBuilder {
    /// <p>The name of the intent at the end of the requested path.</p>
    pub fn intent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.intent_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the intent at the end of the requested path.</p>
    pub fn set_intent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.intent_name = input;
        self
    }
    /// <p>The name of the intent at the end of the requested path.</p>
    pub fn get_intent_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.intent_name
    }
    /// <p>The path.</p>
    pub fn intent_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.intent_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path.</p>
    pub fn set_intent_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.intent_path = input;
        self
    }
    /// <p>The path.</p>
    pub fn get_intent_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.intent_path
    }
    /// <p>The total number of sessions that follow the given path to the given intent.</p>
    pub fn intent_count(mut self, input: i32) -> Self {
        self.intent_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of sessions that follow the given path to the given intent.</p>
    pub fn set_intent_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.intent_count = input;
        self
    }
    /// <p>The total number of sessions that follow the given path to the given intent.</p>
    pub fn get_intent_count(&self) -> &::std::option::Option<i32> {
        &self.intent_count
    }
    /// <p>The number of intents up to and including the requested path.</p>
    pub fn intent_level(mut self, input: i32) -> Self {
        self.intent_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of intents up to and including the requested path.</p>
    pub fn set_intent_level(mut self, input: ::std::option::Option<i32>) -> Self {
        self.intent_level = input;
        self
    }
    /// <p>The number of intents up to and including the requested path.</p>
    pub fn get_intent_level(&self) -> &::std::option::Option<i32> {
        &self.intent_level
    }
    /// <p>Specifies whether the node is the end of a path (<code>Exit</code>) or not (<code>Inner</code>).</p>
    pub fn node_type(mut self, input: crate::types::AnalyticsNodeType) -> Self {
        self.node_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the node is the end of a path (<code>Exit</code>) or not (<code>Inner</code>).</p>
    pub fn set_node_type(mut self, input: ::std::option::Option<crate::types::AnalyticsNodeType>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>Specifies whether the node is the end of a path (<code>Exit</code>) or not (<code>Inner</code>).</p>
    pub fn get_node_type(&self) -> &::std::option::Option<crate::types::AnalyticsNodeType> {
        &self.node_type
    }
    /// Consumes the builder and constructs a [`AnalyticsIntentNodeSummary`](crate::types::AnalyticsIntentNodeSummary).
    pub fn build(self) -> crate::types::AnalyticsIntentNodeSummary {
        crate::types::AnalyticsIntentNodeSummary {
            intent_name: self.intent_name,
            intent_path: self.intent_path,
            intent_count: self.intent_count,
            intent_level: self.intent_level,
            node_type: self.node_type,
        }
    }
}
