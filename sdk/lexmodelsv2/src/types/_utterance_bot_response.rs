// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains a response to the utterance from the bot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UtteranceBotResponse {
    /// <p>The text of the response to the utterance from the bot.</p>
    pub content: ::std::option::Option<::std::string::String>,
    /// <p>The type of the response. The following values are possible:</p>
    /// <ul>
    /// <li> <p> <code>PlainText</code> – A plain text string.</p> </li>
    /// <li> <p> <code>CustomPayload</code> – A response string that you can customize to include data or metadata for your application.</p> </li>
    /// <li> <p> <code>SSML</code> – A string that includes Speech Synthesis Markup Language to customize the audio response.</p> </li>
    /// <li> <p> <code>ImageResponseCard</code> – An image with buttons that the customer can select. See <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_ImageResponseCard.html">ImageResponseCard</a> for more information.</p> </li>
    /// </ul>
    pub content_type: ::std::option::Option<crate::types::UtteranceContentType>,
    /// <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p>
    /// <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
    pub image_response_card: ::std::option::Option<crate::types::ImageResponseCard>,
}
impl UtteranceBotResponse {
    /// <p>The text of the response to the utterance from the bot.</p>
    pub fn content(&self) -> ::std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>The type of the response. The following values are possible:</p>
    /// <ul>
    /// <li> <p> <code>PlainText</code> – A plain text string.</p> </li>
    /// <li> <p> <code>CustomPayload</code> – A response string that you can customize to include data or metadata for your application.</p> </li>
    /// <li> <p> <code>SSML</code> – A string that includes Speech Synthesis Markup Language to customize the audio response.</p> </li>
    /// <li> <p> <code>ImageResponseCard</code> – An image with buttons that the customer can select. See <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_ImageResponseCard.html">ImageResponseCard</a> for more information.</p> </li>
    /// </ul>
    pub fn content_type(&self) -> ::std::option::Option<&crate::types::UtteranceContentType> {
        self.content_type.as_ref()
    }
    /// <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p>
    /// <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
    pub fn image_response_card(&self) -> ::std::option::Option<&crate::types::ImageResponseCard> {
        self.image_response_card.as_ref()
    }
}
impl UtteranceBotResponse {
    /// Creates a new builder-style object to manufacture [`UtteranceBotResponse`](crate::types::UtteranceBotResponse).
    pub fn builder() -> crate::types::builders::UtteranceBotResponseBuilder {
        crate::types::builders::UtteranceBotResponseBuilder::default()
    }
}

/// A builder for [`UtteranceBotResponse`](crate::types::UtteranceBotResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UtteranceBotResponseBuilder {
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<crate::types::UtteranceContentType>,
    pub(crate) image_response_card: ::std::option::Option<crate::types::ImageResponseCard>,
}
impl UtteranceBotResponseBuilder {
    /// <p>The text of the response to the utterance from the bot.</p>
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text of the response to the utterance from the bot.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The text of the response to the utterance from the bot.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// <p>The type of the response. The following values are possible:</p>
    /// <ul>
    /// <li> <p> <code>PlainText</code> – A plain text string.</p> </li>
    /// <li> <p> <code>CustomPayload</code> – A response string that you can customize to include data or metadata for your application.</p> </li>
    /// <li> <p> <code>SSML</code> – A string that includes Speech Synthesis Markup Language to customize the audio response.</p> </li>
    /// <li> <p> <code>ImageResponseCard</code> – An image with buttons that the customer can select. See <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_ImageResponseCard.html">ImageResponseCard</a> for more information.</p> </li>
    /// </ul>
    pub fn content_type(mut self, input: crate::types::UtteranceContentType) -> Self {
        self.content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the response. The following values are possible:</p>
    /// <ul>
    /// <li> <p> <code>PlainText</code> – A plain text string.</p> </li>
    /// <li> <p> <code>CustomPayload</code> – A response string that you can customize to include data or metadata for your application.</p> </li>
    /// <li> <p> <code>SSML</code> – A string that includes Speech Synthesis Markup Language to customize the audio response.</p> </li>
    /// <li> <p> <code>ImageResponseCard</code> – An image with buttons that the customer can select. See <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_ImageResponseCard.html">ImageResponseCard</a> for more information.</p> </li>
    /// </ul>
    pub fn set_content_type(mut self, input: ::std::option::Option<crate::types::UtteranceContentType>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The type of the response. The following values are possible:</p>
    /// <ul>
    /// <li> <p> <code>PlainText</code> – A plain text string.</p> </li>
    /// <li> <p> <code>CustomPayload</code> – A response string that you can customize to include data or metadata for your application.</p> </li>
    /// <li> <p> <code>SSML</code> – A string that includes Speech Synthesis Markup Language to customize the audio response.</p> </li>
    /// <li> <p> <code>ImageResponseCard</code> – An image with buttons that the customer can select. See <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_runtime_ImageResponseCard.html">ImageResponseCard</a> for more information.</p> </li>
    /// </ul>
    pub fn get_content_type(&self) -> &::std::option::Option<crate::types::UtteranceContentType> {
        &self.content_type
    }
    /// <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p>
    /// <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
    pub fn image_response_card(mut self, input: crate::types::ImageResponseCard) -> Self {
        self.image_response_card = ::std::option::Option::Some(input);
        self
    }
    /// <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p>
    /// <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
    pub fn set_image_response_card(mut self, input: ::std::option::Option<crate::types::ImageResponseCard>) -> Self {
        self.image_response_card = input;
        self
    }
    /// <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p>
    /// <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
    pub fn get_image_response_card(&self) -> &::std::option::Option<crate::types::ImageResponseCard> {
        &self.image_response_card
    }
    /// Consumes the builder and constructs a [`UtteranceBotResponse`](crate::types::UtteranceBotResponse).
    pub fn build(self) -> crate::types::UtteranceBotResponse {
        crate::types::UtteranceBotResponse {
            content: self.content,
            content_type: self.content_type,
            image_response_card: self.image_response_card,
        }
    }
}
