// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing the name of an intent that was invoked.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvokedIntentSample {
    /// <p>The name of an intent that was invoked.</p>
    pub intent_name: ::std::option::Option<::std::string::String>,
}
impl InvokedIntentSample {
    /// <p>The name of an intent that was invoked.</p>
    pub fn intent_name(&self) -> ::std::option::Option<&str> {
        self.intent_name.as_deref()
    }
}
impl InvokedIntentSample {
    /// Creates a new builder-style object to manufacture [`InvokedIntentSample`](crate::types::InvokedIntentSample).
    pub fn builder() -> crate::types::builders::InvokedIntentSampleBuilder {
        crate::types::builders::InvokedIntentSampleBuilder::default()
    }
}

/// A builder for [`InvokedIntentSample`](crate::types::InvokedIntentSample).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InvokedIntentSampleBuilder {
    pub(crate) intent_name: ::std::option::Option<::std::string::String>,
}
impl InvokedIntentSampleBuilder {
    /// <p>The name of an intent that was invoked.</p>
    pub fn intent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.intent_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an intent that was invoked.</p>
    pub fn set_intent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.intent_name = input;
        self
    }
    /// <p>The name of an intent that was invoked.</p>
    pub fn get_intent_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.intent_name
    }
    /// Consumes the builder and constructs a [`InvokedIntentSample`](crate::types::InvokedIntentSample).
    pub fn build(self) -> crate::types::InvokedIntentSample {
        crate::types::InvokedIntentSample {
            intent_name: self.intent_name,
        }
    }
}
