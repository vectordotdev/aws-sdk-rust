// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The selected data source to filter the conversation log.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConversationLogsDataSourceFilterBy {
    /// <p>The start time for the conversation log.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end time for the conversation log.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The selection to filter by input mode for the conversation logs. </p>
    pub input_mode: ::std::option::Option<crate::types::ConversationLogsInputModeFilter>,
}
impl ConversationLogsDataSourceFilterBy {
    /// <p>The start time for the conversation log.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time for the conversation log.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The selection to filter by input mode for the conversation logs. </p>
    pub fn input_mode(&self) -> ::std::option::Option<&crate::types::ConversationLogsInputModeFilter> {
        self.input_mode.as_ref()
    }
}
impl ConversationLogsDataSourceFilterBy {
    /// Creates a new builder-style object to manufacture [`ConversationLogsDataSourceFilterBy`](crate::types::ConversationLogsDataSourceFilterBy).
    pub fn builder() -> crate::types::builders::ConversationLogsDataSourceFilterByBuilder {
        crate::types::builders::ConversationLogsDataSourceFilterByBuilder::default()
    }
}

/// A builder for [`ConversationLogsDataSourceFilterBy`](crate::types::ConversationLogsDataSourceFilterBy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConversationLogsDataSourceFilterByBuilder {
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) input_mode: ::std::option::Option<crate::types::ConversationLogsInputModeFilter>,
}
impl ConversationLogsDataSourceFilterByBuilder {
    /// <p>The start time for the conversation log.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time for the conversation log.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time for the conversation log.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time for the conversation log.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time for the conversation log.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time for the conversation log.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The selection to filter by input mode for the conversation logs. </p>
    pub fn input_mode(mut self, input: crate::types::ConversationLogsInputModeFilter) -> Self {
        self.input_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The selection to filter by input mode for the conversation logs. </p>
    pub fn set_input_mode(mut self, input: ::std::option::Option<crate::types::ConversationLogsInputModeFilter>) -> Self {
        self.input_mode = input;
        self
    }
    /// <p>The selection to filter by input mode for the conversation logs. </p>
    pub fn get_input_mode(&self) -> &::std::option::Option<crate::types::ConversationLogsInputModeFilter> {
        &self.input_mode
    }
    /// Consumes the builder and constructs a [`ConversationLogsDataSourceFilterBy`](crate::types::ConversationLogsDataSourceFilterBy).
    pub fn build(self) -> crate::types::ConversationLogsDataSourceFilterBy {
        crate::types::ConversationLogsDataSourceFilterBy {
            start_time: self.start_time,
            end_time: self.end_time,
            input_mode: self.input_mode,
        }
    }
}
