// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the category by which to group the intents.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsIntentGroupBySpecification {
    /// <p>Specifies whether to group the intent stages by their name or their end state.</p>
    pub name: ::std::option::Option<crate::types::AnalyticsIntentField>,
}
impl AnalyticsIntentGroupBySpecification {
    /// <p>Specifies whether to group the intent stages by their name or their end state.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::AnalyticsIntentField> {
        self.name.as_ref()
    }
}
impl AnalyticsIntentGroupBySpecification {
    /// Creates a new builder-style object to manufacture [`AnalyticsIntentGroupBySpecification`](crate::types::AnalyticsIntentGroupBySpecification).
    pub fn builder() -> crate::types::builders::AnalyticsIntentGroupBySpecificationBuilder {
        crate::types::builders::AnalyticsIntentGroupBySpecificationBuilder::default()
    }
}

/// A builder for [`AnalyticsIntentGroupBySpecification`](crate::types::AnalyticsIntentGroupBySpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyticsIntentGroupBySpecificationBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AnalyticsIntentField>,
}
impl AnalyticsIntentGroupBySpecificationBuilder {
    /// <p>Specifies whether to group the intent stages by their name or their end state.</p>
    pub fn name(mut self, input: crate::types::AnalyticsIntentField) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to group the intent stages by their name or their end state.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AnalyticsIntentField>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies whether to group the intent stages by their name or their end state.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AnalyticsIntentField> {
        &self.name
    }
    /// Consumes the builder and constructs a [`AnalyticsIntentGroupBySpecification`](crate::types::AnalyticsIntentGroupBySpecification).
    pub fn build(self) -> crate::types::AnalyticsIntentGroupBySpecification {
        crate::types::AnalyticsIntentGroupBySpecification { name: self.name }
    }
}
