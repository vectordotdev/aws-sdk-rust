// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The specification of an agent turn.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentTurnSpecification {
    /// <p>The agent prompt for the agent turn in a test set.</p>
    pub agent_prompt: ::std::option::Option<::std::string::String>,
}
impl AgentTurnSpecification {
    /// <p>The agent prompt for the agent turn in a test set.</p>
    pub fn agent_prompt(&self) -> ::std::option::Option<&str> {
        self.agent_prompt.as_deref()
    }
}
impl AgentTurnSpecification {
    /// Creates a new builder-style object to manufacture [`AgentTurnSpecification`](crate::types::AgentTurnSpecification).
    pub fn builder() -> crate::types::builders::AgentTurnSpecificationBuilder {
        crate::types::builders::AgentTurnSpecificationBuilder::default()
    }
}

/// A builder for [`AgentTurnSpecification`](crate::types::AgentTurnSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AgentTurnSpecificationBuilder {
    pub(crate) agent_prompt: ::std::option::Option<::std::string::String>,
}
impl AgentTurnSpecificationBuilder {
    /// <p>The agent prompt for the agent turn in a test set.</p>
    pub fn agent_prompt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_prompt = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The agent prompt for the agent turn in a test set.</p>
    pub fn set_agent_prompt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_prompt = input;
        self
    }
    /// <p>The agent prompt for the agent turn in a test set.</p>
    pub fn get_agent_prompt(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_prompt
    }
    /// Consumes the builder and constructs a [`AgentTurnSpecification`](crate::types::AgentTurnSpecification).
    pub fn build(self) -> crate::types::AgentTurnSpecification {
        crate::types::AgentTurnSpecification {
            agent_prompt: self.agent_prompt,
        }
    }
}
