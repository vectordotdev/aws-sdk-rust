// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the bot alias used for the test set discrepancy report.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestSetDiscrepancyReportBotAliasTarget {
    /// <p>The unique identifier for the bot alias.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the bot associated with the bot alias.</p>
    pub bot_alias_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the locale associated with the bot alias.</p>
    pub locale_id: ::std::option::Option<::std::string::String>,
}
impl TestSetDiscrepancyReportBotAliasTarget {
    /// <p>The unique identifier for the bot alias.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The unique identifier for the bot associated with the bot alias.</p>
    pub fn bot_alias_id(&self) -> ::std::option::Option<&str> {
        self.bot_alias_id.as_deref()
    }
    /// <p>The unique identifier of the locale associated with the bot alias.</p>
    pub fn locale_id(&self) -> ::std::option::Option<&str> {
        self.locale_id.as_deref()
    }
}
impl TestSetDiscrepancyReportBotAliasTarget {
    /// Creates a new builder-style object to manufacture [`TestSetDiscrepancyReportBotAliasTarget`](crate::types::TestSetDiscrepancyReportBotAliasTarget).
    pub fn builder() -> crate::types::builders::TestSetDiscrepancyReportBotAliasTargetBuilder {
        crate::types::builders::TestSetDiscrepancyReportBotAliasTargetBuilder::default()
    }
}

/// A builder for [`TestSetDiscrepancyReportBotAliasTarget`](crate::types::TestSetDiscrepancyReportBotAliasTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestSetDiscrepancyReportBotAliasTargetBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
}
impl TestSetDiscrepancyReportBotAliasTargetBuilder {
    /// <p>The unique identifier for the bot alias.</p>
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the bot alias.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The unique identifier for the bot alias.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The unique identifier for the bot associated with the bot alias.</p>
    pub fn bot_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the bot associated with the bot alias.</p>
    pub fn set_bot_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_alias_id = input;
        self
    }
    /// <p>The unique identifier for the bot associated with the bot alias.</p>
    pub fn get_bot_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_alias_id
    }
    /// <p>The unique identifier of the locale associated with the bot alias.</p>
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the locale associated with the bot alias.</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The unique identifier of the locale associated with the bot alias.</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// Consumes the builder and constructs a [`TestSetDiscrepancyReportBotAliasTarget`](crate::types::TestSetDiscrepancyReportBotAliasTarget).
    pub fn build(self) -> crate::types::TestSetDiscrepancyReportBotAliasTarget {
        crate::types::TestSetDiscrepancyReportBotAliasTarget {
            bot_id: self.bot_id,
            bot_alias_id: self.bot_alias_id,
            locale_id: self.locale_id,
        }
    }
}
