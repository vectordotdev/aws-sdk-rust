// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the methods by which to sort the test set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestSetSortBy {
    /// <p>Specifies whether to sort the test sets by name or by the time they were last updated.</p>
    pub attribute: ::std::option::Option<crate::types::TestSetSortAttribute>,
    /// <p>Specifies whether to sort in ascending or descending order.</p>
    pub order: ::std::option::Option<crate::types::SortOrder>,
}
impl TestSetSortBy {
    /// <p>Specifies whether to sort the test sets by name or by the time they were last updated.</p>
    pub fn attribute(&self) -> ::std::option::Option<&crate::types::TestSetSortAttribute> {
        self.attribute.as_ref()
    }
    /// <p>Specifies whether to sort in ascending or descending order.</p>
    pub fn order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.order.as_ref()
    }
}
impl TestSetSortBy {
    /// Creates a new builder-style object to manufacture [`TestSetSortBy`](crate::types::TestSetSortBy).
    pub fn builder() -> crate::types::builders::TestSetSortByBuilder {
        crate::types::builders::TestSetSortByBuilder::default()
    }
}

/// A builder for [`TestSetSortBy`](crate::types::TestSetSortBy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestSetSortByBuilder {
    pub(crate) attribute: ::std::option::Option<crate::types::TestSetSortAttribute>,
    pub(crate) order: ::std::option::Option<crate::types::SortOrder>,
}
impl TestSetSortByBuilder {
    /// <p>Specifies whether to sort the test sets by name or by the time they were last updated.</p>
    pub fn attribute(mut self, input: crate::types::TestSetSortAttribute) -> Self {
        self.attribute = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to sort the test sets by name or by the time they were last updated.</p>
    pub fn set_attribute(mut self, input: ::std::option::Option<crate::types::TestSetSortAttribute>) -> Self {
        self.attribute = input;
        self
    }
    /// <p>Specifies whether to sort the test sets by name or by the time they were last updated.</p>
    pub fn get_attribute(&self) -> &::std::option::Option<crate::types::TestSetSortAttribute> {
        &self.attribute
    }
    /// <p>Specifies whether to sort in ascending or descending order.</p>
    pub fn order(mut self, input: crate::types::SortOrder) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to sort in ascending or descending order.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.order = input;
        self
    }
    /// <p>Specifies whether to sort in ascending or descending order.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.order
    }
    /// Consumes the builder and constructs a [`TestSetSortBy`](crate::types::TestSetSortBy).
    pub fn build(self) -> crate::types::TestSetSortBy {
        crate::types::TestSetSortBy {
            attribute: self.attribute,
            order: self.order,
        }
    }
}
