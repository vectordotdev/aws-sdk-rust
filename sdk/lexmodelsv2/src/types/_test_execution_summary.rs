// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summarizes metadata about the test execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestExecutionSummary {
    /// <p>The unique identifier of the test execution.</p>
    pub test_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time at which the test execution was created.</p>
    pub creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time at which the test execution was last updated.</p>
    pub last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current status of the test execution.</p>
    pub test_execution_status: ::std::option::Option<crate::types::TestExecutionStatus>,
    /// <p>The unique identifier of the test set used in the test execution.</p>
    pub test_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the test set used in the test execution.</p>
    pub test_set_name: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the bot used for the test execution..</p>
    pub target: ::std::option::Option<crate::types::TestExecutionTarget>,
    /// <p>Specifies whether the API mode for the test execution is streaming or non-streaming.</p>
    pub api_mode: ::std::option::Option<crate::types::TestExecutionApiMode>,
    /// <p>Specifies whether the data used for the test execution is written or spoken.</p>
    pub test_execution_modality: ::std::option::Option<crate::types::TestExecutionModality>,
}
impl TestExecutionSummary {
    /// <p>The unique identifier of the test execution.</p>
    pub fn test_execution_id(&self) -> ::std::option::Option<&str> {
        self.test_execution_id.as_deref()
    }
    /// <p>The date and time at which the test execution was created.</p>
    pub fn creation_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time at which the test execution was last updated.</p>
    pub fn last_updated_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>The current status of the test execution.</p>
    pub fn test_execution_status(&self) -> ::std::option::Option<&crate::types::TestExecutionStatus> {
        self.test_execution_status.as_ref()
    }
    /// <p>The unique identifier of the test set used in the test execution.</p>
    pub fn test_set_id(&self) -> ::std::option::Option<&str> {
        self.test_set_id.as_deref()
    }
    /// <p>The name of the test set used in the test execution.</p>
    pub fn test_set_name(&self) -> ::std::option::Option<&str> {
        self.test_set_name.as_deref()
    }
    /// <p>Contains information about the bot used for the test execution..</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::TestExecutionTarget> {
        self.target.as_ref()
    }
    /// <p>Specifies whether the API mode for the test execution is streaming or non-streaming.</p>
    pub fn api_mode(&self) -> ::std::option::Option<&crate::types::TestExecutionApiMode> {
        self.api_mode.as_ref()
    }
    /// <p>Specifies whether the data used for the test execution is written or spoken.</p>
    pub fn test_execution_modality(&self) -> ::std::option::Option<&crate::types::TestExecutionModality> {
        self.test_execution_modality.as_ref()
    }
}
impl TestExecutionSummary {
    /// Creates a new builder-style object to manufacture [`TestExecutionSummary`](crate::types::TestExecutionSummary).
    pub fn builder() -> crate::types::builders::TestExecutionSummaryBuilder {
        crate::types::builders::TestExecutionSummaryBuilder::default()
    }
}

/// A builder for [`TestExecutionSummary`](crate::types::TestExecutionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestExecutionSummaryBuilder {
    pub(crate) test_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) test_execution_status: ::std::option::Option<crate::types::TestExecutionStatus>,
    pub(crate) test_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) test_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) target: ::std::option::Option<crate::types::TestExecutionTarget>,
    pub(crate) api_mode: ::std::option::Option<crate::types::TestExecutionApiMode>,
    pub(crate) test_execution_modality: ::std::option::Option<crate::types::TestExecutionModality>,
}
impl TestExecutionSummaryBuilder {
    /// <p>The unique identifier of the test execution.</p>
    pub fn test_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the test execution.</p>
    pub fn set_test_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_execution_id = input;
        self
    }
    /// <p>The unique identifier of the test execution.</p>
    pub fn get_test_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_execution_id
    }
    /// <p>The date and time at which the test execution was created.</p>
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the test execution was created.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The date and time at which the test execution was created.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>The date and time at which the test execution was last updated.</p>
    pub fn last_updated_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the test execution was last updated.</p>
    pub fn set_last_updated_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>The date and time at which the test execution was last updated.</p>
    pub fn get_last_updated_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date_time
    }
    /// <p>The current status of the test execution.</p>
    pub fn test_execution_status(mut self, input: crate::types::TestExecutionStatus) -> Self {
        self.test_execution_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the test execution.</p>
    pub fn set_test_execution_status(mut self, input: ::std::option::Option<crate::types::TestExecutionStatus>) -> Self {
        self.test_execution_status = input;
        self
    }
    /// <p>The current status of the test execution.</p>
    pub fn get_test_execution_status(&self) -> &::std::option::Option<crate::types::TestExecutionStatus> {
        &self.test_execution_status
    }
    /// <p>The unique identifier of the test set used in the test execution.</p>
    pub fn test_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the test set used in the test execution.</p>
    pub fn set_test_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_set_id = input;
        self
    }
    /// <p>The unique identifier of the test set used in the test execution.</p>
    pub fn get_test_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_set_id
    }
    /// <p>The name of the test set used in the test execution.</p>
    pub fn test_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the test set used in the test execution.</p>
    pub fn set_test_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_set_name = input;
        self
    }
    /// <p>The name of the test set used in the test execution.</p>
    pub fn get_test_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_set_name
    }
    /// <p>Contains information about the bot used for the test execution..</p>
    pub fn target(mut self, input: crate::types::TestExecutionTarget) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the bot used for the test execution..</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::TestExecutionTarget>) -> Self {
        self.target = input;
        self
    }
    /// <p>Contains information about the bot used for the test execution..</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::TestExecutionTarget> {
        &self.target
    }
    /// <p>Specifies whether the API mode for the test execution is streaming or non-streaming.</p>
    pub fn api_mode(mut self, input: crate::types::TestExecutionApiMode) -> Self {
        self.api_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the API mode for the test execution is streaming or non-streaming.</p>
    pub fn set_api_mode(mut self, input: ::std::option::Option<crate::types::TestExecutionApiMode>) -> Self {
        self.api_mode = input;
        self
    }
    /// <p>Specifies whether the API mode for the test execution is streaming or non-streaming.</p>
    pub fn get_api_mode(&self) -> &::std::option::Option<crate::types::TestExecutionApiMode> {
        &self.api_mode
    }
    /// <p>Specifies whether the data used for the test execution is written or spoken.</p>
    pub fn test_execution_modality(mut self, input: crate::types::TestExecutionModality) -> Self {
        self.test_execution_modality = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the data used for the test execution is written or spoken.</p>
    pub fn set_test_execution_modality(mut self, input: ::std::option::Option<crate::types::TestExecutionModality>) -> Self {
        self.test_execution_modality = input;
        self
    }
    /// <p>Specifies whether the data used for the test execution is written or spoken.</p>
    pub fn get_test_execution_modality(&self) -> &::std::option::Option<crate::types::TestExecutionModality> {
        &self.test_execution_modality
    }
    /// Consumes the builder and constructs a [`TestExecutionSummary`](crate::types::TestExecutionSummary).
    pub fn build(self) -> crate::types::TestExecutionSummary {
        crate::types::TestExecutionSummary {
            test_execution_id: self.test_execution_id,
            creation_date_time: self.creation_date_time,
            last_updated_date_time: self.last_updated_date_time,
            test_execution_status: self.test_execution_status,
            test_set_id: self.test_set_id,
            test_set_name: self.test_set_name,
            target: self.target,
            api_mode: self.api_mode,
            test_execution_modality: self.test_execution_modality,
        }
    }
}
