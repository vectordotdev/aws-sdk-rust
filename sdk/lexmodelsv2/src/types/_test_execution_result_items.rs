// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the results of the test execution, grouped by type of results. See <a href="https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html">Test result details"&gt;Test results details</a> for details about different types of results.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestExecutionResultItems {
    /// <p>Overall results for the test execution, including the breakdown of conversations and single-input utterances.</p>
    pub overall_test_results: ::std::option::Option<crate::types::OverallTestResults>,
    /// <p>Results related to conversations in the test set, including metrics about success and failure of conversations and intent and slot failures.</p>
    pub conversation_level_test_results: ::std::option::Option<crate::types::ConversationLevelTestResults>,
    /// <p>Intent recognition results aggregated by intent name. The aggregated results contain success and failure rates of intent recognition, speech transcriptions, and end-to-end conversations.</p>
    pub intent_classification_test_results: ::std::option::Option<crate::types::IntentClassificationTestResults>,
    /// <p>Slot resolution results aggregated by intent and slot name. The aggregated results contain success and failure rates of slot resolution, speech transcriptions, and end-to-end conversations</p>
    pub intent_level_slot_resolution_test_results: ::std::option::Option<crate::types::IntentLevelSlotResolutionTestResults>,
    /// <p>Results related to utterances in the test set.</p>
    pub utterance_level_test_results: ::std::option::Option<crate::types::UtteranceLevelTestResults>,
}
impl TestExecutionResultItems {
    /// <p>Overall results for the test execution, including the breakdown of conversations and single-input utterances.</p>
    pub fn overall_test_results(&self) -> ::std::option::Option<&crate::types::OverallTestResults> {
        self.overall_test_results.as_ref()
    }
    /// <p>Results related to conversations in the test set, including metrics about success and failure of conversations and intent and slot failures.</p>
    pub fn conversation_level_test_results(&self) -> ::std::option::Option<&crate::types::ConversationLevelTestResults> {
        self.conversation_level_test_results.as_ref()
    }
    /// <p>Intent recognition results aggregated by intent name. The aggregated results contain success and failure rates of intent recognition, speech transcriptions, and end-to-end conversations.</p>
    pub fn intent_classification_test_results(&self) -> ::std::option::Option<&crate::types::IntentClassificationTestResults> {
        self.intent_classification_test_results.as_ref()
    }
    /// <p>Slot resolution results aggregated by intent and slot name. The aggregated results contain success and failure rates of slot resolution, speech transcriptions, and end-to-end conversations</p>
    pub fn intent_level_slot_resolution_test_results(&self) -> ::std::option::Option<&crate::types::IntentLevelSlotResolutionTestResults> {
        self.intent_level_slot_resolution_test_results.as_ref()
    }
    /// <p>Results related to utterances in the test set.</p>
    pub fn utterance_level_test_results(&self) -> ::std::option::Option<&crate::types::UtteranceLevelTestResults> {
        self.utterance_level_test_results.as_ref()
    }
}
impl TestExecutionResultItems {
    /// Creates a new builder-style object to manufacture [`TestExecutionResultItems`](crate::types::TestExecutionResultItems).
    pub fn builder() -> crate::types::builders::TestExecutionResultItemsBuilder {
        crate::types::builders::TestExecutionResultItemsBuilder::default()
    }
}

/// A builder for [`TestExecutionResultItems`](crate::types::TestExecutionResultItems).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestExecutionResultItemsBuilder {
    pub(crate) overall_test_results: ::std::option::Option<crate::types::OverallTestResults>,
    pub(crate) conversation_level_test_results: ::std::option::Option<crate::types::ConversationLevelTestResults>,
    pub(crate) intent_classification_test_results: ::std::option::Option<crate::types::IntentClassificationTestResults>,
    pub(crate) intent_level_slot_resolution_test_results: ::std::option::Option<crate::types::IntentLevelSlotResolutionTestResults>,
    pub(crate) utterance_level_test_results: ::std::option::Option<crate::types::UtteranceLevelTestResults>,
}
impl TestExecutionResultItemsBuilder {
    /// <p>Overall results for the test execution, including the breakdown of conversations and single-input utterances.</p>
    pub fn overall_test_results(mut self, input: crate::types::OverallTestResults) -> Self {
        self.overall_test_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Overall results for the test execution, including the breakdown of conversations and single-input utterances.</p>
    pub fn set_overall_test_results(mut self, input: ::std::option::Option<crate::types::OverallTestResults>) -> Self {
        self.overall_test_results = input;
        self
    }
    /// <p>Overall results for the test execution, including the breakdown of conversations and single-input utterances.</p>
    pub fn get_overall_test_results(&self) -> &::std::option::Option<crate::types::OverallTestResults> {
        &self.overall_test_results
    }
    /// <p>Results related to conversations in the test set, including metrics about success and failure of conversations and intent and slot failures.</p>
    pub fn conversation_level_test_results(mut self, input: crate::types::ConversationLevelTestResults) -> Self {
        self.conversation_level_test_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Results related to conversations in the test set, including metrics about success and failure of conversations and intent and slot failures.</p>
    pub fn set_conversation_level_test_results(mut self, input: ::std::option::Option<crate::types::ConversationLevelTestResults>) -> Self {
        self.conversation_level_test_results = input;
        self
    }
    /// <p>Results related to conversations in the test set, including metrics about success and failure of conversations and intent and slot failures.</p>
    pub fn get_conversation_level_test_results(&self) -> &::std::option::Option<crate::types::ConversationLevelTestResults> {
        &self.conversation_level_test_results
    }
    /// <p>Intent recognition results aggregated by intent name. The aggregated results contain success and failure rates of intent recognition, speech transcriptions, and end-to-end conversations.</p>
    pub fn intent_classification_test_results(mut self, input: crate::types::IntentClassificationTestResults) -> Self {
        self.intent_classification_test_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Intent recognition results aggregated by intent name. The aggregated results contain success and failure rates of intent recognition, speech transcriptions, and end-to-end conversations.</p>
    pub fn set_intent_classification_test_results(mut self, input: ::std::option::Option<crate::types::IntentClassificationTestResults>) -> Self {
        self.intent_classification_test_results = input;
        self
    }
    /// <p>Intent recognition results aggregated by intent name. The aggregated results contain success and failure rates of intent recognition, speech transcriptions, and end-to-end conversations.</p>
    pub fn get_intent_classification_test_results(&self) -> &::std::option::Option<crate::types::IntentClassificationTestResults> {
        &self.intent_classification_test_results
    }
    /// <p>Slot resolution results aggregated by intent and slot name. The aggregated results contain success and failure rates of slot resolution, speech transcriptions, and end-to-end conversations</p>
    pub fn intent_level_slot_resolution_test_results(mut self, input: crate::types::IntentLevelSlotResolutionTestResults) -> Self {
        self.intent_level_slot_resolution_test_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Slot resolution results aggregated by intent and slot name. The aggregated results contain success and failure rates of slot resolution, speech transcriptions, and end-to-end conversations</p>
    pub fn set_intent_level_slot_resolution_test_results(
        mut self,
        input: ::std::option::Option<crate::types::IntentLevelSlotResolutionTestResults>,
    ) -> Self {
        self.intent_level_slot_resolution_test_results = input;
        self
    }
    /// <p>Slot resolution results aggregated by intent and slot name. The aggregated results contain success and failure rates of slot resolution, speech transcriptions, and end-to-end conversations</p>
    pub fn get_intent_level_slot_resolution_test_results(&self) -> &::std::option::Option<crate::types::IntentLevelSlotResolutionTestResults> {
        &self.intent_level_slot_resolution_test_results
    }
    /// <p>Results related to utterances in the test set.</p>
    pub fn utterance_level_test_results(mut self, input: crate::types::UtteranceLevelTestResults) -> Self {
        self.utterance_level_test_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Results related to utterances in the test set.</p>
    pub fn set_utterance_level_test_results(mut self, input: ::std::option::Option<crate::types::UtteranceLevelTestResults>) -> Self {
        self.utterance_level_test_results = input;
        self
    }
    /// <p>Results related to utterances in the test set.</p>
    pub fn get_utterance_level_test_results(&self) -> &::std::option::Option<crate::types::UtteranceLevelTestResults> {
        &self.utterance_level_test_results
    }
    /// Consumes the builder and constructs a [`TestExecutionResultItems`](crate::types::TestExecutionResultItems).
    pub fn build(self) -> crate::types::TestExecutionResultItems {
        crate::types::TestExecutionResultItems {
            overall_test_results: self.overall_test_results,
            conversation_level_test_results: self.conversation_level_test_results,
            intent_classification_test_results: self.intent_classification_test_results,
            intent_level_slot_resolution_test_results: self.intent_level_slot_resolution_test_results,
            utterance_level_test_results: self.utterance_level_test_results,
        }
    }
}
