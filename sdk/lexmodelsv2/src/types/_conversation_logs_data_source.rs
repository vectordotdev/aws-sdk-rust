// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data source that uses conversation logs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConversationLogsDataSource {
    /// <p>The bot Id from the conversation logs.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The bot alias Id from the conversation logs.</p>
    pub bot_alias_id: ::std::option::Option<::std::string::String>,
    /// <p>The locale Id of the conversation log.</p>
    pub locale_id: ::std::option::Option<::std::string::String>,
    /// <p>The filter for the data source of the conversation log.</p>
    pub filter: ::std::option::Option<crate::types::ConversationLogsDataSourceFilterBy>,
}
impl ConversationLogsDataSource {
    /// <p>The bot Id from the conversation logs.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The bot alias Id from the conversation logs.</p>
    pub fn bot_alias_id(&self) -> ::std::option::Option<&str> {
        self.bot_alias_id.as_deref()
    }
    /// <p>The locale Id of the conversation log.</p>
    pub fn locale_id(&self) -> ::std::option::Option<&str> {
        self.locale_id.as_deref()
    }
    /// <p>The filter for the data source of the conversation log.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::ConversationLogsDataSourceFilterBy> {
        self.filter.as_ref()
    }
}
impl ConversationLogsDataSource {
    /// Creates a new builder-style object to manufacture [`ConversationLogsDataSource`](crate::types::ConversationLogsDataSource).
    pub fn builder() -> crate::types::builders::ConversationLogsDataSourceBuilder {
        crate::types::builders::ConversationLogsDataSourceBuilder::default()
    }
}

/// A builder for [`ConversationLogsDataSource`](crate::types::ConversationLogsDataSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConversationLogsDataSourceBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
    pub(crate) filter: ::std::option::Option<crate::types::ConversationLogsDataSourceFilterBy>,
}
impl ConversationLogsDataSourceBuilder {
    /// <p>The bot Id from the conversation logs.</p>
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The bot Id from the conversation logs.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The bot Id from the conversation logs.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The bot alias Id from the conversation logs.</p>
    pub fn bot_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The bot alias Id from the conversation logs.</p>
    pub fn set_bot_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_alias_id = input;
        self
    }
    /// <p>The bot alias Id from the conversation logs.</p>
    pub fn get_bot_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_alias_id
    }
    /// <p>The locale Id of the conversation log.</p>
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The locale Id of the conversation log.</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>The locale Id of the conversation log.</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// <p>The filter for the data source of the conversation log.</p>
    pub fn filter(mut self, input: crate::types::ConversationLogsDataSourceFilterBy) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter for the data source of the conversation log.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::ConversationLogsDataSourceFilterBy>) -> Self {
        self.filter = input;
        self
    }
    /// <p>The filter for the data source of the conversation log.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::ConversationLogsDataSourceFilterBy> {
        &self.filter
    }
    /// Consumes the builder and constructs a [`ConversationLogsDataSource`](crate::types::ConversationLogsDataSource).
    pub fn build(self) -> crate::types::ConversationLogsDataSource {
        crate::types::ConversationLogsDataSource {
            bot_id: self.bot_id,
            bot_alias_id: self.bot_alias_id,
            locale_id: self.locale_id,
            filter: self.filter,
        }
    }
}
