// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the results of the analysis of a turn in the test set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestSetTurnResult {
    /// <p>Contains information about the agent messages in the turn.</p>
    pub agent: ::std::option::Option<crate::types::AgentTurnResult>,
    /// <p>Contains information about the user messages in the turn.</p>
    pub user: ::std::option::Option<crate::types::UserTurnResult>,
}
impl TestSetTurnResult {
    /// <p>Contains information about the agent messages in the turn.</p>
    pub fn agent(&self) -> ::std::option::Option<&crate::types::AgentTurnResult> {
        self.agent.as_ref()
    }
    /// <p>Contains information about the user messages in the turn.</p>
    pub fn user(&self) -> ::std::option::Option<&crate::types::UserTurnResult> {
        self.user.as_ref()
    }
}
impl TestSetTurnResult {
    /// Creates a new builder-style object to manufacture [`TestSetTurnResult`](crate::types::TestSetTurnResult).
    pub fn builder() -> crate::types::builders::TestSetTurnResultBuilder {
        crate::types::builders::TestSetTurnResultBuilder::default()
    }
}

/// A builder for [`TestSetTurnResult`](crate::types::TestSetTurnResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestSetTurnResultBuilder {
    pub(crate) agent: ::std::option::Option<crate::types::AgentTurnResult>,
    pub(crate) user: ::std::option::Option<crate::types::UserTurnResult>,
}
impl TestSetTurnResultBuilder {
    /// <p>Contains information about the agent messages in the turn.</p>
    pub fn agent(mut self, input: crate::types::AgentTurnResult) -> Self {
        self.agent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the agent messages in the turn.</p>
    pub fn set_agent(mut self, input: ::std::option::Option<crate::types::AgentTurnResult>) -> Self {
        self.agent = input;
        self
    }
    /// <p>Contains information about the agent messages in the turn.</p>
    pub fn get_agent(&self) -> &::std::option::Option<crate::types::AgentTurnResult> {
        &self.agent
    }
    /// <p>Contains information about the user messages in the turn.</p>
    pub fn user(mut self, input: crate::types::UserTurnResult) -> Self {
        self.user = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the user messages in the turn.</p>
    pub fn set_user(mut self, input: ::std::option::Option<crate::types::UserTurnResult>) -> Self {
        self.user = input;
        self
    }
    /// <p>Contains information about the user messages in the turn.</p>
    pub fn get_user(&self) -> &::std::option::Option<crate::types::UserTurnResult> {
        &self.user
    }
    /// Consumes the builder and constructs a [`TestSetTurnResult`](crate::types::TestSetTurnResult).
    pub fn build(self) -> crate::types::TestSetTurnResult {
        crate::types::TestSetTurnResult {
            agent: self.agent,
            user: self.user,
        }
    }
}
