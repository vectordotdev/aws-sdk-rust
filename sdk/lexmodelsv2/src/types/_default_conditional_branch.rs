// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of actions that Amazon Lex should run if none of the other conditions are met.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultConditionalBranch {
    /// <p>The next step in the conversation.</p>
    pub next_step: ::std::option::Option<crate::types::DialogState>,
    /// <p>Specifies a list of message groups that Amazon Lex uses to respond the user input.</p>
    pub response: ::std::option::Option<crate::types::ResponseSpecification>,
}
impl DefaultConditionalBranch {
    /// <p>The next step in the conversation.</p>
    pub fn next_step(&self) -> ::std::option::Option<&crate::types::DialogState> {
        self.next_step.as_ref()
    }
    /// <p>Specifies a list of message groups that Amazon Lex uses to respond the user input.</p>
    pub fn response(&self) -> ::std::option::Option<&crate::types::ResponseSpecification> {
        self.response.as_ref()
    }
}
impl DefaultConditionalBranch {
    /// Creates a new builder-style object to manufacture [`DefaultConditionalBranch`](crate::types::DefaultConditionalBranch).
    pub fn builder() -> crate::types::builders::DefaultConditionalBranchBuilder {
        crate::types::builders::DefaultConditionalBranchBuilder::default()
    }
}

/// A builder for [`DefaultConditionalBranch`](crate::types::DefaultConditionalBranch).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultConditionalBranchBuilder {
    pub(crate) next_step: ::std::option::Option<crate::types::DialogState>,
    pub(crate) response: ::std::option::Option<crate::types::ResponseSpecification>,
}
impl DefaultConditionalBranchBuilder {
    /// <p>The next step in the conversation.</p>
    pub fn next_step(mut self, input: crate::types::DialogState) -> Self {
        self.next_step = ::std::option::Option::Some(input);
        self
    }
    /// <p>The next step in the conversation.</p>
    pub fn set_next_step(mut self, input: ::std::option::Option<crate::types::DialogState>) -> Self {
        self.next_step = input;
        self
    }
    /// <p>The next step in the conversation.</p>
    pub fn get_next_step(&self) -> &::std::option::Option<crate::types::DialogState> {
        &self.next_step
    }
    /// <p>Specifies a list of message groups that Amazon Lex uses to respond the user input.</p>
    pub fn response(mut self, input: crate::types::ResponseSpecification) -> Self {
        self.response = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a list of message groups that Amazon Lex uses to respond the user input.</p>
    pub fn set_response(mut self, input: ::std::option::Option<crate::types::ResponseSpecification>) -> Self {
        self.response = input;
        self
    }
    /// <p>Specifies a list of message groups that Amazon Lex uses to respond the user input.</p>
    pub fn get_response(&self) -> &::std::option::Option<crate::types::ResponseSpecification> {
        &self.response
    }
    /// Consumes the builder and constructs a [`DefaultConditionalBranch`](crate::types::DefaultConditionalBranch).
    pub fn build(self) -> crate::types::DefaultConditionalBranch {
        crate::types::DefaultConditionalBranch {
            next_step: self.next_step,
            response: self.response,
        }
    }
}
