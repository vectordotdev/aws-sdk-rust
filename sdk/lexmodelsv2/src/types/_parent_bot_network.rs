// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A network of bots.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParentBotNetwork {
    /// <p>The identifier of the network of bots assigned by Amazon Lex.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the network of bots.</p>
    pub bot_version: ::std::option::Option<::std::string::String>,
}
impl ParentBotNetwork {
    /// <p>The identifier of the network of bots assigned by Amazon Lex.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The version of the network of bots.</p>
    pub fn bot_version(&self) -> ::std::option::Option<&str> {
        self.bot_version.as_deref()
    }
}
impl ParentBotNetwork {
    /// Creates a new builder-style object to manufacture [`ParentBotNetwork`](crate::types::ParentBotNetwork).
    pub fn builder() -> crate::types::builders::ParentBotNetworkBuilder {
        crate::types::builders::ParentBotNetworkBuilder::default()
    }
}

/// A builder for [`ParentBotNetwork`](crate::types::ParentBotNetwork).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParentBotNetworkBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_version: ::std::option::Option<::std::string::String>,
}
impl ParentBotNetworkBuilder {
    /// <p>The identifier of the network of bots assigned by Amazon Lex.</p>
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the network of bots assigned by Amazon Lex.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier of the network of bots assigned by Amazon Lex.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The version of the network of bots.</p>
    pub fn bot_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the network of bots.</p>
    pub fn set_bot_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// <p>The version of the network of bots.</p>
    pub fn get_bot_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_version
    }
    /// Consumes the builder and constructs a [`ParentBotNetwork`](crate::types::ParentBotNetwork).
    pub fn build(self) -> crate::types::ParentBotNetwork {
        crate::types::ParentBotNetwork {
            bot_id: self.bot_id,
            bot_version: self.bot_version,
        }
    }
}
