// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the location in which the test set is stored.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestSetStorageLocation {
    /// <p>The name of the Amazon S3 bucket in which the test set is stored.</p>
    pub s3_bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The path inside the Amazon S3 bucket where the test set is stored.</p>
    pub s3_path: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services Key Management Service (KMS) key for encrypting the test set.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl TestSetStorageLocation {
    /// <p>The name of the Amazon S3 bucket in which the test set is stored.</p>
    pub fn s3_bucket_name(&self) -> ::std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>The path inside the Amazon S3 bucket where the test set is stored.</p>
    pub fn s3_path(&self) -> ::std::option::Option<&str> {
        self.s3_path.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services Key Management Service (KMS) key for encrypting the test set.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
}
impl TestSetStorageLocation {
    /// Creates a new builder-style object to manufacture [`TestSetStorageLocation`](crate::types::TestSetStorageLocation).
    pub fn builder() -> crate::types::builders::TestSetStorageLocationBuilder {
        crate::types::builders::TestSetStorageLocationBuilder::default()
    }
}

/// A builder for [`TestSetStorageLocation`](crate::types::TestSetStorageLocation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestSetStorageLocationBuilder {
    pub(crate) s3_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) s3_path: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
}
impl TestSetStorageLocationBuilder {
    /// <p>The name of the Amazon S3 bucket in which the test set is stored.</p>
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket in which the test set is stored.</p>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket in which the test set is stored.</p>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_name
    }
    /// <p>The path inside the Amazon S3 bucket where the test set is stored.</p>
    pub fn s3_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path inside the Amazon S3 bucket where the test set is stored.</p>
    pub fn set_s3_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_path = input;
        self
    }
    /// <p>The path inside the Amazon S3 bucket where the test set is stored.</p>
    pub fn get_s3_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_path
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services Key Management Service (KMS) key for encrypting the test set.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services Key Management Service (KMS) key for encrypting the test set.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services Key Management Service (KMS) key for encrypting the test set.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// Consumes the builder and constructs a [`TestSetStorageLocation`](crate::types::TestSetStorageLocation).
    pub fn build(self) -> crate::types::TestSetStorageLocation {
        crate::types::TestSetStorageLocation {
            s3_bucket_name: self.s3_bucket_name,
            s3_path: self.s3_path,
            kms_key_arn: self.kms_key_arn,
        }
    }
}
