// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates the success or failure of slots at the intent level.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IntentLevelSlotResolutionTestResults {
    /// <p>Indicates the items for the slot level resolution for the intents.</p>
    pub items: ::std::option::Option<::std::vec::Vec<crate::types::IntentLevelSlotResolutionTestResultItem>>,
}
impl IntentLevelSlotResolutionTestResults {
    /// <p>Indicates the items for the slot level resolution for the intents.</p>
    pub fn items(&self) -> ::std::option::Option<&[crate::types::IntentLevelSlotResolutionTestResultItem]> {
        self.items.as_deref()
    }
}
impl IntentLevelSlotResolutionTestResults {
    /// Creates a new builder-style object to manufacture [`IntentLevelSlotResolutionTestResults`](crate::types::IntentLevelSlotResolutionTestResults).
    pub fn builder() -> crate::types::builders::IntentLevelSlotResolutionTestResultsBuilder {
        crate::types::builders::IntentLevelSlotResolutionTestResultsBuilder::default()
    }
}

/// A builder for [`IntentLevelSlotResolutionTestResults`](crate::types::IntentLevelSlotResolutionTestResults).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IntentLevelSlotResolutionTestResultsBuilder {
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::IntentLevelSlotResolutionTestResultItem>>,
}
impl IntentLevelSlotResolutionTestResultsBuilder {
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>Indicates the items for the slot level resolution for the intents.</p>
    pub fn items(mut self, input: crate::types::IntentLevelSlotResolutionTestResultItem) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates the items for the slot level resolution for the intents.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IntentLevelSlotResolutionTestResultItem>>) -> Self {
        self.items = input;
        self
    }
    /// <p>Indicates the items for the slot level resolution for the intents.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IntentLevelSlotResolutionTestResultItem>> {
        &self.items
    }
    /// Consumes the builder and constructs a [`IntentLevelSlotResolutionTestResults`](crate::types::IntentLevelSlotResolutionTestResults).
    pub fn build(self) -> crate::types::IntentLevelSlotResolutionTestResults {
        crate::types::IntentLevelSlotResolutionTestResults { items: self.items }
    }
}
