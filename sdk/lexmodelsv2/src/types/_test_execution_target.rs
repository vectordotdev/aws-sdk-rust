// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the bot used for the test execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestExecutionTarget {
    /// <p>Contains information about the bot alias used for the test execution.</p>
    pub bot_alias_target: ::std::option::Option<crate::types::BotAliasTestExecutionTarget>,
}
impl TestExecutionTarget {
    /// <p>Contains information about the bot alias used for the test execution.</p>
    pub fn bot_alias_target(&self) -> ::std::option::Option<&crate::types::BotAliasTestExecutionTarget> {
        self.bot_alias_target.as_ref()
    }
}
impl TestExecutionTarget {
    /// Creates a new builder-style object to manufacture [`TestExecutionTarget`](crate::types::TestExecutionTarget).
    pub fn builder() -> crate::types::builders::TestExecutionTargetBuilder {
        crate::types::builders::TestExecutionTargetBuilder::default()
    }
}

/// A builder for [`TestExecutionTarget`](crate::types::TestExecutionTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestExecutionTargetBuilder {
    pub(crate) bot_alias_target: ::std::option::Option<crate::types::BotAliasTestExecutionTarget>,
}
impl TestExecutionTargetBuilder {
    /// <p>Contains information about the bot alias used for the test execution.</p>
    pub fn bot_alias_target(mut self, input: crate::types::BotAliasTestExecutionTarget) -> Self {
        self.bot_alias_target = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the bot alias used for the test execution.</p>
    pub fn set_bot_alias_target(mut self, input: ::std::option::Option<crate::types::BotAliasTestExecutionTarget>) -> Self {
        self.bot_alias_target = input;
        self
    }
    /// <p>Contains information about the bot alias used for the test execution.</p>
    pub fn get_bot_alias_target(&self) -> &::std::option::Option<crate::types::BotAliasTestExecutionTarget> {
        &self.bot_alias_target
    }
    /// Consumes the builder and constructs a [`TestExecutionTarget`](crate::types::TestExecutionTarget).
    pub fn build(self) -> crate::types::TestExecutionTarget {
        crate::types::TestExecutionTarget {
            bot_alias_target: self.bot_alias_target,
        }
    }
}
