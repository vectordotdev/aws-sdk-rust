// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the bot or bot locale that you want to import. You can specify the <code>botImportSpecification</code> or the <code>botLocaleImportSpecification</code>, but not both.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportResourceSpecification {
    /// <p>Parameters for importing a bot.</p>
    pub bot_import_specification: ::std::option::Option<crate::types::BotImportSpecification>,
    /// <p>Parameters for importing a bot locale.</p>
    pub bot_locale_import_specification: ::std::option::Option<crate::types::BotLocaleImportSpecification>,
    /// <p>Provides the parameters required for importing a custom vocabulary.</p>
    pub custom_vocabulary_import_specification: ::std::option::Option<crate::types::CustomVocabularyImportSpecification>,
    /// <p>Specifications for the test set that is imported.</p>
    pub test_set_import_resource_specification: ::std::option::Option<crate::types::TestSetImportResourceSpecification>,
}
impl ImportResourceSpecification {
    /// <p>Parameters for importing a bot.</p>
    pub fn bot_import_specification(&self) -> ::std::option::Option<&crate::types::BotImportSpecification> {
        self.bot_import_specification.as_ref()
    }
    /// <p>Parameters for importing a bot locale.</p>
    pub fn bot_locale_import_specification(&self) -> ::std::option::Option<&crate::types::BotLocaleImportSpecification> {
        self.bot_locale_import_specification.as_ref()
    }
    /// <p>Provides the parameters required for importing a custom vocabulary.</p>
    pub fn custom_vocabulary_import_specification(&self) -> ::std::option::Option<&crate::types::CustomVocabularyImportSpecification> {
        self.custom_vocabulary_import_specification.as_ref()
    }
    /// <p>Specifications for the test set that is imported.</p>
    pub fn test_set_import_resource_specification(&self) -> ::std::option::Option<&crate::types::TestSetImportResourceSpecification> {
        self.test_set_import_resource_specification.as_ref()
    }
}
impl ImportResourceSpecification {
    /// Creates a new builder-style object to manufacture [`ImportResourceSpecification`](crate::types::ImportResourceSpecification).
    pub fn builder() -> crate::types::builders::ImportResourceSpecificationBuilder {
        crate::types::builders::ImportResourceSpecificationBuilder::default()
    }
}

/// A builder for [`ImportResourceSpecification`](crate::types::ImportResourceSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportResourceSpecificationBuilder {
    pub(crate) bot_import_specification: ::std::option::Option<crate::types::BotImportSpecification>,
    pub(crate) bot_locale_import_specification: ::std::option::Option<crate::types::BotLocaleImportSpecification>,
    pub(crate) custom_vocabulary_import_specification: ::std::option::Option<crate::types::CustomVocabularyImportSpecification>,
    pub(crate) test_set_import_resource_specification: ::std::option::Option<crate::types::TestSetImportResourceSpecification>,
}
impl ImportResourceSpecificationBuilder {
    /// <p>Parameters for importing a bot.</p>
    pub fn bot_import_specification(mut self, input: crate::types::BotImportSpecification) -> Self {
        self.bot_import_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Parameters for importing a bot.</p>
    pub fn set_bot_import_specification(mut self, input: ::std::option::Option<crate::types::BotImportSpecification>) -> Self {
        self.bot_import_specification = input;
        self
    }
    /// <p>Parameters for importing a bot.</p>
    pub fn get_bot_import_specification(&self) -> &::std::option::Option<crate::types::BotImportSpecification> {
        &self.bot_import_specification
    }
    /// <p>Parameters for importing a bot locale.</p>
    pub fn bot_locale_import_specification(mut self, input: crate::types::BotLocaleImportSpecification) -> Self {
        self.bot_locale_import_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Parameters for importing a bot locale.</p>
    pub fn set_bot_locale_import_specification(mut self, input: ::std::option::Option<crate::types::BotLocaleImportSpecification>) -> Self {
        self.bot_locale_import_specification = input;
        self
    }
    /// <p>Parameters for importing a bot locale.</p>
    pub fn get_bot_locale_import_specification(&self) -> &::std::option::Option<crate::types::BotLocaleImportSpecification> {
        &self.bot_locale_import_specification
    }
    /// <p>Provides the parameters required for importing a custom vocabulary.</p>
    pub fn custom_vocabulary_import_specification(mut self, input: crate::types::CustomVocabularyImportSpecification) -> Self {
        self.custom_vocabulary_import_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the parameters required for importing a custom vocabulary.</p>
    pub fn set_custom_vocabulary_import_specification(
        mut self,
        input: ::std::option::Option<crate::types::CustomVocabularyImportSpecification>,
    ) -> Self {
        self.custom_vocabulary_import_specification = input;
        self
    }
    /// <p>Provides the parameters required for importing a custom vocabulary.</p>
    pub fn get_custom_vocabulary_import_specification(&self) -> &::std::option::Option<crate::types::CustomVocabularyImportSpecification> {
        &self.custom_vocabulary_import_specification
    }
    /// <p>Specifications for the test set that is imported.</p>
    pub fn test_set_import_resource_specification(mut self, input: crate::types::TestSetImportResourceSpecification) -> Self {
        self.test_set_import_resource_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifications for the test set that is imported.</p>
    pub fn set_test_set_import_resource_specification(
        mut self,
        input: ::std::option::Option<crate::types::TestSetImportResourceSpecification>,
    ) -> Self {
        self.test_set_import_resource_specification = input;
        self
    }
    /// <p>Specifications for the test set that is imported.</p>
    pub fn get_test_set_import_resource_specification(&self) -> &::std::option::Option<crate::types::TestSetImportResourceSpecification> {
        &self.test_set_import_resource_specification
    }
    /// Consumes the builder and constructs a [`ImportResourceSpecification`](crate::types::ImportResourceSpecification).
    pub fn build(self) -> crate::types::ImportResourceSpecification {
        crate::types::ImportResourceSpecification {
            bot_import_specification: self.bot_import_specification,
            bot_locale_import_specification: self.bot_locale_import_specification,
            custom_vocabulary_import_specification: self.custom_vocabulary_import_specification,
            test_set_import_resource_specification: self.test_set_import_resource_specification,
        }
    }
}
