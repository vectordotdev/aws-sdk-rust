// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The slots used for the slot resolution in the conversation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConversationLevelSlotResolutionResultItem {
    /// <p>The intents used in the slots list for the slot resolution details.</p>
    pub intent_name: ::std::option::Option<::std::string::String>,
    /// <p>The slot name in the slots list for the slot resolution details.</p>
    pub slot_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of matching slots used in the slots listings for the slot resolution evaluation.</p>
    pub match_result: ::std::option::Option<crate::types::TestResultMatchStatus>,
}
impl ConversationLevelSlotResolutionResultItem {
    /// <p>The intents used in the slots list for the slot resolution details.</p>
    pub fn intent_name(&self) -> ::std::option::Option<&str> {
        self.intent_name.as_deref()
    }
    /// <p>The slot name in the slots list for the slot resolution details.</p>
    pub fn slot_name(&self) -> ::std::option::Option<&str> {
        self.slot_name.as_deref()
    }
    /// <p>The number of matching slots used in the slots listings for the slot resolution evaluation.</p>
    pub fn match_result(&self) -> ::std::option::Option<&crate::types::TestResultMatchStatus> {
        self.match_result.as_ref()
    }
}
impl ConversationLevelSlotResolutionResultItem {
    /// Creates a new builder-style object to manufacture [`ConversationLevelSlotResolutionResultItem`](crate::types::ConversationLevelSlotResolutionResultItem).
    pub fn builder() -> crate::types::builders::ConversationLevelSlotResolutionResultItemBuilder {
        crate::types::builders::ConversationLevelSlotResolutionResultItemBuilder::default()
    }
}

/// A builder for [`ConversationLevelSlotResolutionResultItem`](crate::types::ConversationLevelSlotResolutionResultItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConversationLevelSlotResolutionResultItemBuilder {
    pub(crate) intent_name: ::std::option::Option<::std::string::String>,
    pub(crate) slot_name: ::std::option::Option<::std::string::String>,
    pub(crate) match_result: ::std::option::Option<crate::types::TestResultMatchStatus>,
}
impl ConversationLevelSlotResolutionResultItemBuilder {
    /// <p>The intents used in the slots list for the slot resolution details.</p>
    pub fn intent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.intent_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The intents used in the slots list for the slot resolution details.</p>
    pub fn set_intent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.intent_name = input;
        self
    }
    /// <p>The intents used in the slots list for the slot resolution details.</p>
    pub fn get_intent_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.intent_name
    }
    /// <p>The slot name in the slots list for the slot resolution details.</p>
    pub fn slot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The slot name in the slots list for the slot resolution details.</p>
    pub fn set_slot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slot_name = input;
        self
    }
    /// <p>The slot name in the slots list for the slot resolution details.</p>
    pub fn get_slot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.slot_name
    }
    /// <p>The number of matching slots used in the slots listings for the slot resolution evaluation.</p>
    pub fn match_result(mut self, input: crate::types::TestResultMatchStatus) -> Self {
        self.match_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of matching slots used in the slots listings for the slot resolution evaluation.</p>
    pub fn set_match_result(mut self, input: ::std::option::Option<crate::types::TestResultMatchStatus>) -> Self {
        self.match_result = input;
        self
    }
    /// <p>The number of matching slots used in the slots listings for the slot resolution evaluation.</p>
    pub fn get_match_result(&self) -> &::std::option::Option<crate::types::TestResultMatchStatus> {
        &self.match_result
    }
    /// Consumes the builder and constructs a [`ConversationLevelSlotResolutionResultItem`](crate::types::ConversationLevelSlotResolutionResultItem).
    pub fn build(self) -> crate::types::ConversationLevelSlotResolutionResultItem {
        crate::types::ConversationLevelSlotResolutionResultItem {
            intent_name: self.intent_name,
            slot_name: self.slot_name,
            match_result: self.match_result,
        }
    }
}
