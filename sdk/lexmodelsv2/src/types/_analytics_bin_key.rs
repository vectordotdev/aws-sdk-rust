// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing the criterion by which to bin the results and the value that defines that bin.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalyticsBinKey {
    /// <p>The criterion by which to bin the results.</p>
    pub name: ::std::option::Option<crate::types::AnalyticsBinByName>,
    /// <p>The value of the criterion that defines the bin.</p>
    pub value: ::std::option::Option<i64>,
}
impl AnalyticsBinKey {
    /// <p>The criterion by which to bin the results.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::AnalyticsBinByName> {
        self.name.as_ref()
    }
    /// <p>The value of the criterion that defines the bin.</p>
    pub fn value(&self) -> ::std::option::Option<i64> {
        self.value
    }
}
impl AnalyticsBinKey {
    /// Creates a new builder-style object to manufacture [`AnalyticsBinKey`](crate::types::AnalyticsBinKey).
    pub fn builder() -> crate::types::builders::AnalyticsBinKeyBuilder {
        crate::types::builders::AnalyticsBinKeyBuilder::default()
    }
}

/// A builder for [`AnalyticsBinKey`](crate::types::AnalyticsBinKey).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalyticsBinKeyBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AnalyticsBinByName>,
    pub(crate) value: ::std::option::Option<i64>,
}
impl AnalyticsBinKeyBuilder {
    /// <p>The criterion by which to bin the results.</p>
    pub fn name(mut self, input: crate::types::AnalyticsBinByName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The criterion by which to bin the results.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AnalyticsBinByName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The criterion by which to bin the results.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AnalyticsBinByName> {
        &self.name
    }
    /// <p>The value of the criterion that defines the bin.</p>
    pub fn value(mut self, input: i64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the criterion that defines the bin.</p>
    pub fn set_value(mut self, input: ::std::option::Option<i64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the criterion that defines the bin.</p>
    pub fn get_value(&self) -> &::std::option::Option<i64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`AnalyticsBinKey`](crate::types::AnalyticsBinKey).
    pub fn build(self) -> crate::types::AnalyticsBinKey {
        crate::types::AnalyticsBinKey {
            name: self.name,
            value: self.value,
        }
    }
}
