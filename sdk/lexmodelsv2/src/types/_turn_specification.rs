// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the messages in the turn.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TurnSpecification {
    /// <p>Contains information about the agent messages in the turn.</p>
    pub agent_turn: ::std::option::Option<crate::types::AgentTurnSpecification>,
    /// <p>Contains information about the user messages in the turn.</p>
    pub user_turn: ::std::option::Option<crate::types::UserTurnSpecification>,
}
impl TurnSpecification {
    /// <p>Contains information about the agent messages in the turn.</p>
    pub fn agent_turn(&self) -> ::std::option::Option<&crate::types::AgentTurnSpecification> {
        self.agent_turn.as_ref()
    }
    /// <p>Contains information about the user messages in the turn.</p>
    pub fn user_turn(&self) -> ::std::option::Option<&crate::types::UserTurnSpecification> {
        self.user_turn.as_ref()
    }
}
impl TurnSpecification {
    /// Creates a new builder-style object to manufacture [`TurnSpecification`](crate::types::TurnSpecification).
    pub fn builder() -> crate::types::builders::TurnSpecificationBuilder {
        crate::types::builders::TurnSpecificationBuilder::default()
    }
}

/// A builder for [`TurnSpecification`](crate::types::TurnSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TurnSpecificationBuilder {
    pub(crate) agent_turn: ::std::option::Option<crate::types::AgentTurnSpecification>,
    pub(crate) user_turn: ::std::option::Option<crate::types::UserTurnSpecification>,
}
impl TurnSpecificationBuilder {
    /// <p>Contains information about the agent messages in the turn.</p>
    pub fn agent_turn(mut self, input: crate::types::AgentTurnSpecification) -> Self {
        self.agent_turn = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the agent messages in the turn.</p>
    pub fn set_agent_turn(mut self, input: ::std::option::Option<crate::types::AgentTurnSpecification>) -> Self {
        self.agent_turn = input;
        self
    }
    /// <p>Contains information about the agent messages in the turn.</p>
    pub fn get_agent_turn(&self) -> &::std::option::Option<crate::types::AgentTurnSpecification> {
        &self.agent_turn
    }
    /// <p>Contains information about the user messages in the turn.</p>
    pub fn user_turn(mut self, input: crate::types::UserTurnSpecification) -> Self {
        self.user_turn = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the user messages in the turn.</p>
    pub fn set_user_turn(mut self, input: ::std::option::Option<crate::types::UserTurnSpecification>) -> Self {
        self.user_turn = input;
        self
    }
    /// <p>Contains information about the user messages in the turn.</p>
    pub fn get_user_turn(&self) -> &::std::option::Option<crate::types::UserTurnSpecification> {
        &self.user_turn
    }
    /// Consumes the builder and constructs a [`TurnSpecification`](crate::types::TurnSpecification).
    pub fn build(self) -> crate::types::TurnSpecification {
        crate::types::TurnSpecification {
            agent_turn: self.agent_turn,
            user_turn: self.user_turn,
        }
    }
}
