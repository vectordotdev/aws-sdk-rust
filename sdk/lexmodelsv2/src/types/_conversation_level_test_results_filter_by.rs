// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The selection to filter the test set results data at the conversation level.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConversationLevelTestResultsFilterBy {
    /// <p>The selection of matched or mismatched end-to-end status to filter test set results data at the conversation level.</p>
    pub end_to_end_result: ::std::option::Option<crate::types::TestResultMatchStatus>,
}
impl ConversationLevelTestResultsFilterBy {
    /// <p>The selection of matched or mismatched end-to-end status to filter test set results data at the conversation level.</p>
    pub fn end_to_end_result(&self) -> ::std::option::Option<&crate::types::TestResultMatchStatus> {
        self.end_to_end_result.as_ref()
    }
}
impl ConversationLevelTestResultsFilterBy {
    /// Creates a new builder-style object to manufacture [`ConversationLevelTestResultsFilterBy`](crate::types::ConversationLevelTestResultsFilterBy).
    pub fn builder() -> crate::types::builders::ConversationLevelTestResultsFilterByBuilder {
        crate::types::builders::ConversationLevelTestResultsFilterByBuilder::default()
    }
}

/// A builder for [`ConversationLevelTestResultsFilterBy`](crate::types::ConversationLevelTestResultsFilterBy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConversationLevelTestResultsFilterByBuilder {
    pub(crate) end_to_end_result: ::std::option::Option<crate::types::TestResultMatchStatus>,
}
impl ConversationLevelTestResultsFilterByBuilder {
    /// <p>The selection of matched or mismatched end-to-end status to filter test set results data at the conversation level.</p>
    pub fn end_to_end_result(mut self, input: crate::types::TestResultMatchStatus) -> Self {
        self.end_to_end_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The selection of matched or mismatched end-to-end status to filter test set results data at the conversation level.</p>
    pub fn set_end_to_end_result(mut self, input: ::std::option::Option<crate::types::TestResultMatchStatus>) -> Self {
        self.end_to_end_result = input;
        self
    }
    /// <p>The selection of matched or mismatched end-to-end status to filter test set results data at the conversation level.</p>
    pub fn get_end_to_end_result(&self) -> &::std::option::Option<crate::types::TestResultMatchStatus> {
        &self.end_to_end_result
    }
    /// Consumes the builder and constructs a [`ConversationLevelTestResultsFilterBy`](crate::types::ConversationLevelTestResultsFilterBy).
    pub fn build(self) -> crate::types::ConversationLevelTestResultsFilterBy {
        crate::types::ConversationLevelTestResultsFilterBy {
            end_to_end_result: self.end_to_end_result,
        }
    }
}
