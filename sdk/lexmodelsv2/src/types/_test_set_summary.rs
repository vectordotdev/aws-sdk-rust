// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains summary information about the test set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TestSetSummary {
    /// <p>The unique identifier of the test set.</p>
    pub test_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the test set.</p>
    pub test_set_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the test set.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the test set contains written or spoken data.</p>
    pub modality: ::std::option::Option<crate::types::TestSetModality>,
    /// <p>The status of the test set.</p>
    pub status: ::std::option::Option<crate::types::TestSetStatus>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permission to access the test set.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The number of turns in the test set.</p>
    pub num_turns: ::std::option::Option<i32>,
    /// <p>Contains information about the location at which the test set is stored.</p>
    pub storage_location: ::std::option::Option<crate::types::TestSetStorageLocation>,
    /// <p>The date and time at which the test set was created.</p>
    pub creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time at which the test set was last updated.</p>
    pub last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TestSetSummary {
    /// <p>The unique identifier of the test set.</p>
    pub fn test_set_id(&self) -> ::std::option::Option<&str> {
        self.test_set_id.as_deref()
    }
    /// <p>The name of the test set.</p>
    pub fn test_set_name(&self) -> ::std::option::Option<&str> {
        self.test_set_name.as_deref()
    }
    /// <p>The description of the test set.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether the test set contains written or spoken data.</p>
    pub fn modality(&self) -> ::std::option::Option<&crate::types::TestSetModality> {
        self.modality.as_ref()
    }
    /// <p>The status of the test set.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TestSetStatus> {
        self.status.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permission to access the test set.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The number of turns in the test set.</p>
    pub fn num_turns(&self) -> ::std::option::Option<i32> {
        self.num_turns
    }
    /// <p>Contains information about the location at which the test set is stored.</p>
    pub fn storage_location(&self) -> ::std::option::Option<&crate::types::TestSetStorageLocation> {
        self.storage_location.as_ref()
    }
    /// <p>The date and time at which the test set was created.</p>
    pub fn creation_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date_time.as_ref()
    }
    /// <p>The date and time at which the test set was last updated.</p>
    pub fn last_updated_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
}
impl TestSetSummary {
    /// Creates a new builder-style object to manufacture [`TestSetSummary`](crate::types::TestSetSummary).
    pub fn builder() -> crate::types::builders::TestSetSummaryBuilder {
        crate::types::builders::TestSetSummaryBuilder::default()
    }
}

/// A builder for [`TestSetSummary`](crate::types::TestSetSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TestSetSummaryBuilder {
    pub(crate) test_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) test_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) modality: ::std::option::Option<crate::types::TestSetModality>,
    pub(crate) status: ::std::option::Option<crate::types::TestSetStatus>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) num_turns: ::std::option::Option<i32>,
    pub(crate) storage_location: ::std::option::Option<crate::types::TestSetStorageLocation>,
    pub(crate) creation_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TestSetSummaryBuilder {
    /// <p>The unique identifier of the test set.</p>
    pub fn test_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the test set.</p>
    pub fn set_test_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_set_id = input;
        self
    }
    /// <p>The unique identifier of the test set.</p>
    pub fn get_test_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_set_id
    }
    /// <p>The name of the test set.</p>
    pub fn test_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the test set.</p>
    pub fn set_test_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_set_name = input;
        self
    }
    /// <p>The name of the test set.</p>
    pub fn get_test_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_set_name
    }
    /// <p>The description of the test set.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the test set.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the test set.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies whether the test set contains written or spoken data.</p>
    pub fn modality(mut self, input: crate::types::TestSetModality) -> Self {
        self.modality = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the test set contains written or spoken data.</p>
    pub fn set_modality(mut self, input: ::std::option::Option<crate::types::TestSetModality>) -> Self {
        self.modality = input;
        self
    }
    /// <p>Specifies whether the test set contains written or spoken data.</p>
    pub fn get_modality(&self) -> &::std::option::Option<crate::types::TestSetModality> {
        &self.modality
    }
    /// <p>The status of the test set.</p>
    pub fn status(mut self, input: crate::types::TestSetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the test set.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TestSetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the test set.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TestSetStatus> {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permission to access the test set.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permission to access the test set.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that has permission to access the test set.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The number of turns in the test set.</p>
    pub fn num_turns(mut self, input: i32) -> Self {
        self.num_turns = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of turns in the test set.</p>
    pub fn set_num_turns(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_turns = input;
        self
    }
    /// <p>The number of turns in the test set.</p>
    pub fn get_num_turns(&self) -> &::std::option::Option<i32> {
        &self.num_turns
    }
    /// <p>Contains information about the location at which the test set is stored.</p>
    pub fn storage_location(mut self, input: crate::types::TestSetStorageLocation) -> Self {
        self.storage_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the location at which the test set is stored.</p>
    pub fn set_storage_location(mut self, input: ::std::option::Option<crate::types::TestSetStorageLocation>) -> Self {
        self.storage_location = input;
        self
    }
    /// <p>Contains information about the location at which the test set is stored.</p>
    pub fn get_storage_location(&self) -> &::std::option::Option<crate::types::TestSetStorageLocation> {
        &self.storage_location
    }
    /// <p>The date and time at which the test set was created.</p>
    pub fn creation_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the test set was created.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>The date and time at which the test set was created.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date_time
    }
    /// <p>The date and time at which the test set was last updated.</p>
    pub fn last_updated_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the test set was last updated.</p>
    pub fn set_last_updated_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>The date and time at which the test set was last updated.</p>
    pub fn get_last_updated_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date_time
    }
    /// Consumes the builder and constructs a [`TestSetSummary`](crate::types::TestSetSummary).
    pub fn build(self) -> crate::types::TestSetSummary {
        crate::types::TestSetSummary {
            test_set_id: self.test_set_id,
            test_set_name: self.test_set_name,
            description: self.description,
            modality: self.modality,
            status: self.status,
            role_arn: self.role_arn,
            num_turns: self.num_turns,
            storage_location: self.storage_location,
            creation_date_time: self.creation_date_time,
            last_updated_date_time: self.last_updated_date_time,
        }
    }
}
