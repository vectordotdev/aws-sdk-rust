// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for one clip in a composition. All jobs in a playlist must have the same clip settings.</p>
#[deprecated]
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Clip {
    /// <p>Settings that determine when a clip begins and how long it lasts.</p>
    pub time_span: ::std::option::Option<crate::types::TimeSpan>,
}
impl Clip {
    /// <p>Settings that determine when a clip begins and how long it lasts.</p>
    pub fn time_span(&self) -> ::std::option::Option<&crate::types::TimeSpan> {
        self.time_span.as_ref()
    }
}
impl Clip {
    /// Creates a new builder-style object to manufacture [`Clip`](crate::types::Clip).
    pub fn builder() -> crate::types::builders::ClipBuilder {
        crate::types::builders::ClipBuilder::default()
    }
}

/// A builder for [`Clip`](crate::types::Clip).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClipBuilder {
    pub(crate) time_span: ::std::option::Option<crate::types::TimeSpan>,
}
impl ClipBuilder {
    /// <p>Settings that determine when a clip begins and how long it lasts.</p>
    pub fn time_span(mut self, input: crate::types::TimeSpan) -> Self {
        self.time_span = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings that determine when a clip begins and how long it lasts.</p>
    pub fn set_time_span(mut self, input: ::std::option::Option<crate::types::TimeSpan>) -> Self {
        self.time_span = input;
        self
    }
    /// <p>Settings that determine when a clip begins and how long it lasts.</p>
    pub fn get_time_span(&self) -> &::std::option::Option<crate::types::TimeSpan> {
        &self.time_span
    }
    /// Consumes the builder and constructs a [`Clip`](crate::types::Clip).
    pub fn build(self) -> crate::types::Clip {
        crate::types::Clip { time_span: self.time_span }
    }
}
