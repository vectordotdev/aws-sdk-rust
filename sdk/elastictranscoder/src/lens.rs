// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_jobs_by_pipeline_output_next_page_token(
    input: &crate::operation::list_jobs_by_pipeline::ListJobsByPipelineOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_page_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_jobs_by_status_output_next_page_token(
    input: &crate::operation::list_jobs_by_status::ListJobsByStatusOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_page_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_pipelines_output_next_page_token(
    input: &crate::operation::list_pipelines::ListPipelinesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_page_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_presets_output_next_page_token(
    input: &crate::operation::list_presets::ListPresetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_page_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_jobs_by_pipeline_output_jobs(
    input: crate::operation::list_jobs_by_pipeline::ListJobsByPipelineOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Job>> {
    let input = match input.jobs {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_jobs_by_status_output_jobs(
    input: crate::operation::list_jobs_by_status::ListJobsByStatusOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Job>> {
    let input = match input.jobs {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_pipelines_output_pipelines(
    input: crate::operation::list_pipelines::ListPipelinesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Pipeline>> {
    let input = match input.pipelines {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_presets_output_presets(
    input: crate::operation::list_presets::ListPresetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Preset>> {
    let input = match input.presets {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
