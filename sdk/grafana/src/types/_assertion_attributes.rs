// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that defines which attributes in the IdP assertion are to be used to define information about the users authenticated by the IdP to use the workspace.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssertionAttributes {
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for SAML users.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the attribute within the SAML assertion to use as the login names for SAML users.</p>
    pub login: ::std::option::Option<::std::string::String>,
    /// <p>The name of the attribute within the SAML assertion to use as the email names for SAML users.</p>
    pub email: ::std::option::Option<::std::string::String>,
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for user groups.</p>
    pub groups: ::std::option::Option<::std::string::String>,
    /// <p>The name of the attribute within the SAML assertion to use as the user roles.</p>
    pub role: ::std::option::Option<::std::string::String>,
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for the users' organizations.</p>
    pub org: ::std::option::Option<::std::string::String>,
}
impl AssertionAttributes {
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for SAML users.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the attribute within the SAML assertion to use as the login names for SAML users.</p>
    pub fn login(&self) -> ::std::option::Option<&str> {
        self.login.as_deref()
    }
    /// <p>The name of the attribute within the SAML assertion to use as the email names for SAML users.</p>
    pub fn email(&self) -> ::std::option::Option<&str> {
        self.email.as_deref()
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for user groups.</p>
    pub fn groups(&self) -> ::std::option::Option<&str> {
        self.groups.as_deref()
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user roles.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for the users' organizations.</p>
    pub fn org(&self) -> ::std::option::Option<&str> {
        self.org.as_deref()
    }
}
impl AssertionAttributes {
    /// Creates a new builder-style object to manufacture [`AssertionAttributes`](crate::types::AssertionAttributes).
    pub fn builder() -> crate::types::builders::AssertionAttributesBuilder {
        crate::types::builders::AssertionAttributesBuilder::default()
    }
}

/// A builder for [`AssertionAttributes`](crate::types::AssertionAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssertionAttributesBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) login: ::std::option::Option<::std::string::String>,
    pub(crate) email: ::std::option::Option<::std::string::String>,
    pub(crate) groups: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
    pub(crate) org: ::std::option::Option<::std::string::String>,
}
impl AssertionAttributesBuilder {
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for SAML users.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for SAML users.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for SAML users.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the attribute within the SAML assertion to use as the login names for SAML users.</p>
    pub fn login(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.login = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the login names for SAML users.</p>
    pub fn set_login(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.login = input;
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the login names for SAML users.</p>
    pub fn get_login(&self) -> &::std::option::Option<::std::string::String> {
        &self.login
    }
    /// <p>The name of the attribute within the SAML assertion to use as the email names for SAML users.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the email names for SAML users.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the email names for SAML users.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for user groups.</p>
    pub fn groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.groups = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for user groups.</p>
    pub fn set_groups(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.groups = input;
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for user groups.</p>
    pub fn get_groups(&self) -> &::std::option::Option<::std::string::String> {
        &self.groups
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user roles.</p>
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user roles.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user roles.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for the users' organizations.</p>
    pub fn org(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.org = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for the users' organizations.</p>
    pub fn set_org(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.org = input;
        self
    }
    /// <p>The name of the attribute within the SAML assertion to use as the user full "friendly" names for the users' organizations.</p>
    pub fn get_org(&self) -> &::std::option::Option<::std::string::String> {
        &self.org
    }
    /// Consumes the builder and constructs a [`AssertionAttributes`](crate::types::AssertionAttributes).
    pub fn build(self) -> crate::types::AssertionAttributes {
        crate::types::AssertionAttributes {
            name: self.name,
            login: self.login,
            email: self.email,
            groups: self.groups,
            role: self.role,
            org: self.org,
        }
    }
}
