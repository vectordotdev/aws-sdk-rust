// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information on a package that is associated with a domain.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DomainPackageDetails {
    /// <p>Internal ID of the package.</p>
    pub package_id: ::std::option::Option<::std::string::String>,
    /// <p>User specified name of the package.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>Currently supports only TXT-DICTIONARY.</p>
    pub package_type: ::std::option::Option<crate::types::PackageType>,
    /// <p>Timestamp of the most-recent update to the association status.</p>
    pub last_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Name of the domain you've associated a package with.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.</p>
    pub domain_package_status: ::std::option::Option<crate::types::DomainPackageStatus>,
    #[allow(missing_docs)] // documentation missing in model
    pub package_version: ::std::option::Option<::std::string::String>,
    /// <p>The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.</p>
    pub reference_path: ::std::option::Option<::std::string::String>,
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    pub error_details: ::std::option::Option<crate::types::ErrorDetails>,
}
impl DomainPackageDetails {
    /// <p>Internal ID of the package.</p>
    pub fn package_id(&self) -> ::std::option::Option<&str> {
        self.package_id.as_deref()
    }
    /// <p>User specified name of the package.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>Currently supports only TXT-DICTIONARY.</p>
    pub fn package_type(&self) -> ::std::option::Option<&crate::types::PackageType> {
        self.package_type.as_ref()
    }
    /// <p>Timestamp of the most-recent update to the association status.</p>
    pub fn last_updated(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
    /// <p>Name of the domain you've associated a package with.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.</p>
    pub fn domain_package_status(&self) -> ::std::option::Option<&crate::types::DomainPackageStatus> {
        self.domain_package_status.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn package_version(&self) -> ::std::option::Option<&str> {
        self.package_version.as_deref()
    }
    /// <p>The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.</p>
    pub fn reference_path(&self) -> ::std::option::Option<&str> {
        self.reference_path.as_deref()
    }
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    pub fn error_details(&self) -> ::std::option::Option<&crate::types::ErrorDetails> {
        self.error_details.as_ref()
    }
}
impl DomainPackageDetails {
    /// Creates a new builder-style object to manufacture [`DomainPackageDetails`](crate::types::DomainPackageDetails).
    pub fn builder() -> crate::types::builders::DomainPackageDetailsBuilder {
        crate::types::builders::DomainPackageDetailsBuilder::default()
    }
}

/// A builder for [`DomainPackageDetails`](crate::types::DomainPackageDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DomainPackageDetailsBuilder {
    pub(crate) package_id: ::std::option::Option<::std::string::String>,
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) package_type: ::std::option::Option<crate::types::PackageType>,
    pub(crate) last_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_package_status: ::std::option::Option<crate::types::DomainPackageStatus>,
    pub(crate) package_version: ::std::option::Option<::std::string::String>,
    pub(crate) reference_path: ::std::option::Option<::std::string::String>,
    pub(crate) error_details: ::std::option::Option<crate::types::ErrorDetails>,
}
impl DomainPackageDetailsBuilder {
    /// <p>Internal ID of the package.</p>
    pub fn package_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Internal ID of the package.</p>
    pub fn set_package_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_id = input;
        self
    }
    /// <p>Internal ID of the package.</p>
    pub fn get_package_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_id
    }
    /// <p>User specified name of the package.</p>
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>User specified name of the package.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>User specified name of the package.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>Currently supports only TXT-DICTIONARY.</p>
    pub fn package_type(mut self, input: crate::types::PackageType) -> Self {
        self.package_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Currently supports only TXT-DICTIONARY.</p>
    pub fn set_package_type(mut self, input: ::std::option::Option<crate::types::PackageType>) -> Self {
        self.package_type = input;
        self
    }
    /// <p>Currently supports only TXT-DICTIONARY.</p>
    pub fn get_package_type(&self) -> &::std::option::Option<crate::types::PackageType> {
        &self.package_type
    }
    /// <p>Timestamp of the most-recent update to the association status.</p>
    pub fn last_updated(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp of the most-recent update to the association status.</p>
    pub fn set_last_updated(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated = input;
        self
    }
    /// <p>Timestamp of the most-recent update to the association status.</p>
    pub fn get_last_updated(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated
    }
    /// <p>Name of the domain you've associated a package with.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the domain you've associated a package with.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>Name of the domain you've associated a package with.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.</p>
    pub fn domain_package_status(mut self, input: crate::types::DomainPackageStatus) -> Self {
        self.domain_package_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.</p>
    pub fn set_domain_package_status(mut self, input: ::std::option::Option<crate::types::DomainPackageStatus>) -> Self {
        self.domain_package_status = input;
        self
    }
    /// <p>State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.</p>
    pub fn get_domain_package_status(&self) -> &::std::option::Option<crate::types::DomainPackageStatus> {
        &self.domain_package_status
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn package_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_version = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_package_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_version = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_package_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_version
    }
    /// <p>The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.</p>
    pub fn reference_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reference_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.</p>
    pub fn set_reference_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reference_path = input;
        self
    }
    /// <p>The relative path on Amazon ES nodes, which can be used as synonym_path when the package is synonym file.</p>
    pub fn get_reference_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.reference_path
    }
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    pub fn error_details(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>Additional information if the package is in an error state. Null otherwise.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<crate::types::ErrorDetails> {
        &self.error_details
    }
    /// Consumes the builder and constructs a [`DomainPackageDetails`](crate::types::DomainPackageDetails).
    pub fn build(self) -> crate::types::DomainPackageDetails {
        crate::types::DomainPackageDetails {
            package_id: self.package_id,
            package_name: self.package_name,
            package_type: self.package_type,
            last_updated: self.last_updated,
            domain_name: self.domain_name,
            domain_package_status: self.domain_package_status,
            package_version: self.package_version,
            reference_path: self.reference_path,
            error_details: self.error_details,
        }
    }
}
