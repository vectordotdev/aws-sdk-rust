// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A PartiQL predicate.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RowFilter {
    /// <p>A filter expression.</p>
    pub filter_expression: ::std::option::Option<::std::string::String>,
    /// <p>A wildcard for all rows.</p>
    pub all_rows_wildcard: ::std::option::Option<crate::types::AllRowsWildcard>,
}
impl RowFilter {
    /// <p>A filter expression.</p>
    pub fn filter_expression(&self) -> ::std::option::Option<&str> {
        self.filter_expression.as_deref()
    }
    /// <p>A wildcard for all rows.</p>
    pub fn all_rows_wildcard(&self) -> ::std::option::Option<&crate::types::AllRowsWildcard> {
        self.all_rows_wildcard.as_ref()
    }
}
impl RowFilter {
    /// Creates a new builder-style object to manufacture [`RowFilter`](crate::types::RowFilter).
    pub fn builder() -> crate::types::builders::RowFilterBuilder {
        crate::types::builders::RowFilterBuilder::default()
    }
}

/// A builder for [`RowFilter`](crate::types::RowFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RowFilterBuilder {
    pub(crate) filter_expression: ::std::option::Option<::std::string::String>,
    pub(crate) all_rows_wildcard: ::std::option::Option<crate::types::AllRowsWildcard>,
}
impl RowFilterBuilder {
    /// <p>A filter expression.</p>
    pub fn filter_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter expression.</p>
    pub fn set_filter_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_expression = input;
        self
    }
    /// <p>A filter expression.</p>
    pub fn get_filter_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_expression
    }
    /// <p>A wildcard for all rows.</p>
    pub fn all_rows_wildcard(mut self, input: crate::types::AllRowsWildcard) -> Self {
        self.all_rows_wildcard = ::std::option::Option::Some(input);
        self
    }
    /// <p>A wildcard for all rows.</p>
    pub fn set_all_rows_wildcard(mut self, input: ::std::option::Option<crate::types::AllRowsWildcard>) -> Self {
        self.all_rows_wildcard = input;
        self
    }
    /// <p>A wildcard for all rows.</p>
    pub fn get_all_rows_wildcard(&self) -> &::std::option::Option<crate::types::AllRowsWildcard> {
        &self.all_rows_wildcard
    }
    /// Consumes the builder and constructs a [`RowFilter`](crate::types::RowFilter).
    pub fn build(self) -> crate::types::RowFilter {
        crate::types::RowFilter {
            filter_expression: self.filter_expression,
            all_rows_wildcard: self.all_rows_wildcard,
        }
    }
}
