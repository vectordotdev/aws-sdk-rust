// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of an IoT SiteWise error.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ErrorDetails {
    /// <p>The error code.</p>
    pub code: ::std::option::Option<crate::types::ErrorCode>,
    /// <p>The error message.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p> A list of detailed errors. </p>
    pub details: ::std::option::Option<::std::vec::Vec<crate::types::DetailedError>>,
}
impl ErrorDetails {
    /// <p>The error code.</p>
    pub fn code(&self) -> ::std::option::Option<&crate::types::ErrorCode> {
        self.code.as_ref()
    }
    /// <p>The error message.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p> A list of detailed errors. </p>
    pub fn details(&self) -> ::std::option::Option<&[crate::types::DetailedError]> {
        self.details.as_deref()
    }
}
impl ErrorDetails {
    /// Creates a new builder-style object to manufacture [`ErrorDetails`](crate::types::ErrorDetails).
    pub fn builder() -> crate::types::builders::ErrorDetailsBuilder {
        crate::types::builders::ErrorDetailsBuilder::default()
    }
}

/// A builder for [`ErrorDetails`](crate::types::ErrorDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ErrorDetailsBuilder {
    pub(crate) code: ::std::option::Option<crate::types::ErrorCode>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) details: ::std::option::Option<::std::vec::Vec<crate::types::DetailedError>>,
}
impl ErrorDetailsBuilder {
    /// <p>The error code.</p>
    pub fn code(mut self, input: crate::types::ErrorCode) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::ErrorCode>) -> Self {
        self.code = input;
        self
    }
    /// <p>The error code.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::ErrorCode> {
        &self.code
    }
    /// <p>The error message.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The error message.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Appends an item to `details`.
    ///
    /// To override the contents of this collection use [`set_details`](Self::set_details).
    ///
    /// <p> A list of detailed errors. </p>
    pub fn details(mut self, input: crate::types::DetailedError) -> Self {
        let mut v = self.details.unwrap_or_default();
        v.push(input);
        self.details = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of detailed errors. </p>
    pub fn set_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DetailedError>>) -> Self {
        self.details = input;
        self
    }
    /// <p> A list of detailed errors. </p>
    pub fn get_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DetailedError>> {
        &self.details
    }
    /// Consumes the builder and constructs a [`ErrorDetails`](crate::types::ErrorDetails).
    pub fn build(self) -> crate::types::ErrorDetails {
        crate::types::ErrorDetails {
            code: self.code,
            message: self.message,
            details: self.details,
        }
    }
}
