// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains error details for the requested associate project asset action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetErrorDetails {
    /// <p>The ID of the asset.</p>
    pub asset_id: ::std::option::Option<::std::string::String>,
    /// <p>The error code.</p>
    pub code: ::std::option::Option<crate::types::AssetErrorCode>,
    /// <p>The error message.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl AssetErrorDetails {
    /// <p>The ID of the asset.</p>
    pub fn asset_id(&self) -> ::std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The error code.</p>
    pub fn code(&self) -> ::std::option::Option<&crate::types::AssetErrorCode> {
        self.code.as_ref()
    }
    /// <p>The error message.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl AssetErrorDetails {
    /// Creates a new builder-style object to manufacture [`AssetErrorDetails`](crate::types::AssetErrorDetails).
    pub fn builder() -> crate::types::builders::AssetErrorDetailsBuilder {
        crate::types::builders::AssetErrorDetailsBuilder::default()
    }
}

/// A builder for [`AssetErrorDetails`](crate::types::AssetErrorDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetErrorDetailsBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<crate::types::AssetErrorCode>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl AssetErrorDetailsBuilder {
    /// <p>The ID of the asset.</p>
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The error code.</p>
    pub fn code(mut self, input: crate::types::AssetErrorCode) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::AssetErrorCode>) -> Self {
        self.code = input;
        self
    }
    /// <p>The error code.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::AssetErrorCode> {
        &self.code
    }
    /// <p>The error message.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The error message.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`AssetErrorDetails`](crate::types::AssetErrorDetails).
    pub fn build(self) -> crate::types::AssetErrorDetails {
        crate::types::AssetErrorDetails {
            asset_id: self.asset_id,
            code: self.code,
            message: self.message,
        }
    }
}
