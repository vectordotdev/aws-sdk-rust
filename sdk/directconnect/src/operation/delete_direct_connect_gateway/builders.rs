// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_direct_connect_gateway::_delete_direct_connect_gateway_output::DeleteDirectConnectGatewayOutputBuilder;

pub use crate::operation::delete_direct_connect_gateway::_delete_direct_connect_gateway_input::DeleteDirectConnectGatewayInputBuilder;

impl DeleteDirectConnectGatewayInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_direct_connect_gateway::DeleteDirectConnectGatewayOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_direct_connect_gateway::DeleteDirectConnectGatewayError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_direct_connect_gateway();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteDirectConnectGateway`.
///
/// <p>Deletes the specified Direct Connect gateway. You must first delete all virtual interfaces that are attached to the Direct Connect gateway and disassociate all virtual private gateways associated with the Direct Connect gateway.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteDirectConnectGatewayFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_direct_connect_gateway::builders::DeleteDirectConnectGatewayInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl DeleteDirectConnectGatewayFluentBuilder {
    /// Creates a new `DeleteDirectConnectGateway`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteDirectConnectGateway as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_direct_connect_gateway::builders::DeleteDirectConnectGatewayInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_direct_connect_gateway::DeleteDirectConnectGatewayOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_direct_connect_gateway::DeleteDirectConnectGatewayError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_direct_connect_gateway::DeleteDirectConnectGateway::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_direct_connect_gateway::DeleteDirectConnectGateway::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::delete_direct_connect_gateway::DeleteDirectConnectGatewayOutput,
            crate::operation::delete_direct_connect_gateway::DeleteDirectConnectGatewayError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::delete_direct_connect_gateway::DeleteDirectConnectGatewayError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.direct_connect_gateway_id(input.into());
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn set_direct_connect_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_direct_connect_gateway_id(input);
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn get_direct_connect_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_direct_connect_gateway_id()
    }
}
