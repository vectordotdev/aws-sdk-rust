// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a single attribute item specified in the mathematical expression.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttributeItem {
    /// <p>The name of an attribute defined in a profile object type.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl AttributeItem {
    /// <p>The name of an attribute defined in a profile object type.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl AttributeItem {
    /// Creates a new builder-style object to manufacture [`AttributeItem`](crate::types::AttributeItem).
    pub fn builder() -> crate::types::builders::AttributeItemBuilder {
        crate::types::builders::AttributeItemBuilder::default()
    }
}

/// A builder for [`AttributeItem`](crate::types::AttributeItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AttributeItemBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl AttributeItemBuilder {
    /// <p>The name of an attribute defined in a profile object type.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an attribute defined in a profile object type.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of an attribute defined in a profile object type.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`AttributeItem`](crate::types::AttributeItem).
    pub fn build(self) -> crate::types::AttributeItem {
        crate::types::AttributeItem { name: self.name }
    }
}
