// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the destination being used for the EventStream.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventStreamDestinationDetails {
    /// <p>The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name.</p>
    pub uri: ::std::option::Option<::std::string::String>,
    /// <p>The status of enabling the Kinesis stream as a destination for export.</p>
    pub status: ::std::option::Option<crate::types::EventStreamDestinationStatus>,
    /// <p>The timestamp when the status last changed to <code>UNHEALHY</code>.</p>
    pub unhealthy_since: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The human-readable string that corresponds to the error or success while enabling the streaming destination.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl EventStreamDestinationDetails {
    /// <p>The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name.</p>
    pub fn uri(&self) -> ::std::option::Option<&str> {
        self.uri.as_deref()
    }
    /// <p>The status of enabling the Kinesis stream as a destination for export.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::EventStreamDestinationStatus> {
        self.status.as_ref()
    }
    /// <p>The timestamp when the status last changed to <code>UNHEALHY</code>.</p>
    pub fn unhealthy_since(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.unhealthy_since.as_ref()
    }
    /// <p>The human-readable string that corresponds to the error or success while enabling the streaming destination.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl EventStreamDestinationDetails {
    /// Creates a new builder-style object to manufacture [`EventStreamDestinationDetails`](crate::types::EventStreamDestinationDetails).
    pub fn builder() -> crate::types::builders::EventStreamDestinationDetailsBuilder {
        crate::types::builders::EventStreamDestinationDetailsBuilder::default()
    }
}

/// A builder for [`EventStreamDestinationDetails`](crate::types::EventStreamDestinationDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventStreamDestinationDetailsBuilder {
    pub(crate) uri: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::EventStreamDestinationStatus>,
    pub(crate) unhealthy_since: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl EventStreamDestinationDetailsBuilder {
    /// <p>The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name.</p>
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name.</p>
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name.</p>
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// <p>The status of enabling the Kinesis stream as a destination for export.</p>
    pub fn status(mut self, input: crate::types::EventStreamDestinationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of enabling the Kinesis stream as a destination for export.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::EventStreamDestinationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of enabling the Kinesis stream as a destination for export.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::EventStreamDestinationStatus> {
        &self.status
    }
    /// <p>The timestamp when the status last changed to <code>UNHEALHY</code>.</p>
    pub fn unhealthy_since(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.unhealthy_since = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the status last changed to <code>UNHEALHY</code>.</p>
    pub fn set_unhealthy_since(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.unhealthy_since = input;
        self
    }
    /// <p>The timestamp when the status last changed to <code>UNHEALHY</code>.</p>
    pub fn get_unhealthy_since(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.unhealthy_since
    }
    /// <p>The human-readable string that corresponds to the error or success while enabling the streaming destination.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The human-readable string that corresponds to the error or success while enabling the streaming destination.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The human-readable string that corresponds to the error or success while enabling the streaming destination.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`EventStreamDestinationDetails`](crate::types::EventStreamDestinationDetails).
    pub fn build(self) -> crate::types::EventStreamDestinationDetails {
        crate::types::EventStreamDestinationDetails {
            uri: self.uri,
            status: self.status,
            unhealthy_since: self.unhealthy_since,
            message: self.message,
        }
    }
}
