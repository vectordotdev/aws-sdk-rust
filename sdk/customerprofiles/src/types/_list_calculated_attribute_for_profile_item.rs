// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a single calculated attribute for a profile.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCalculatedAttributeForProfileItem {
    /// <p>The unique name of the calculated attribute.</p>
    pub calculated_attribute_name: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the calculated attribute.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the calculated attribute’s value is based on partial data. If data is partial, it is set to true.</p>
    pub is_data_partial: ::std::option::Option<::std::string::String>,
    /// <p>The value of the calculated attribute.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl ListCalculatedAttributeForProfileItem {
    /// <p>The unique name of the calculated attribute.</p>
    pub fn calculated_attribute_name(&self) -> ::std::option::Option<&str> {
        self.calculated_attribute_name.as_deref()
    }
    /// <p>The display name of the calculated attribute.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>Indicates whether the calculated attribute’s value is based on partial data. If data is partial, it is set to true.</p>
    pub fn is_data_partial(&self) -> ::std::option::Option<&str> {
        self.is_data_partial.as_deref()
    }
    /// <p>The value of the calculated attribute.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ListCalculatedAttributeForProfileItem {
    /// Creates a new builder-style object to manufacture [`ListCalculatedAttributeForProfileItem`](crate::types::ListCalculatedAttributeForProfileItem).
    pub fn builder() -> crate::types::builders::ListCalculatedAttributeForProfileItemBuilder {
        crate::types::builders::ListCalculatedAttributeForProfileItemBuilder::default()
    }
}

/// A builder for [`ListCalculatedAttributeForProfileItem`](crate::types::ListCalculatedAttributeForProfileItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCalculatedAttributeForProfileItemBuilder {
    pub(crate) calculated_attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) is_data_partial: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl ListCalculatedAttributeForProfileItemBuilder {
    /// <p>The unique name of the calculated attribute.</p>
    pub fn calculated_attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.calculated_attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the calculated attribute.</p>
    pub fn set_calculated_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.calculated_attribute_name = input;
        self
    }
    /// <p>The unique name of the calculated attribute.</p>
    pub fn get_calculated_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.calculated_attribute_name
    }
    /// <p>The display name of the calculated attribute.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the calculated attribute.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the calculated attribute.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>Indicates whether the calculated attribute’s value is based on partial data. If data is partial, it is set to true.</p>
    pub fn is_data_partial(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.is_data_partial = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates whether the calculated attribute’s value is based on partial data. If data is partial, it is set to true.</p>
    pub fn set_is_data_partial(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.is_data_partial = input;
        self
    }
    /// <p>Indicates whether the calculated attribute’s value is based on partial data. If data is partial, it is set to true.</p>
    pub fn get_is_data_partial(&self) -> &::std::option::Option<::std::string::String> {
        &self.is_data_partial
    }
    /// <p>The value of the calculated attribute.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the calculated attribute.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the calculated attribute.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`ListCalculatedAttributeForProfileItem`](crate::types::ListCalculatedAttributeForProfileItem).
    pub fn build(self) -> crate::types::ListCalculatedAttributeForProfileItem {
        crate::types::ListCalculatedAttributeForProfileItem {
            calculated_attribute_name: self.calculated_attribute_name,
            display_name: self.display_name,
            is_data_partial: self.is_data_partial,
            value: self.value,
        }
    }
}
