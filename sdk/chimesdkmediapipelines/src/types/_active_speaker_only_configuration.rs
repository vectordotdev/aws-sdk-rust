// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the configuration for an <code>ActiveSpeakerOnly</code> video tile.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActiveSpeakerOnlyConfiguration {
    /// <p>The position of the <code>ActiveSpeakerOnly</code> video tile.</p>
    pub active_speaker_position: ::std::option::Option<crate::types::ActiveSpeakerPosition>,
}
impl ActiveSpeakerOnlyConfiguration {
    /// <p>The position of the <code>ActiveSpeakerOnly</code> video tile.</p>
    pub fn active_speaker_position(&self) -> ::std::option::Option<&crate::types::ActiveSpeakerPosition> {
        self.active_speaker_position.as_ref()
    }
}
impl ActiveSpeakerOnlyConfiguration {
    /// Creates a new builder-style object to manufacture [`ActiveSpeakerOnlyConfiguration`](crate::types::ActiveSpeakerOnlyConfiguration).
    pub fn builder() -> crate::types::builders::ActiveSpeakerOnlyConfigurationBuilder {
        crate::types::builders::ActiveSpeakerOnlyConfigurationBuilder::default()
    }
}

/// A builder for [`ActiveSpeakerOnlyConfiguration`](crate::types::ActiveSpeakerOnlyConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ActiveSpeakerOnlyConfigurationBuilder {
    pub(crate) active_speaker_position: ::std::option::Option<crate::types::ActiveSpeakerPosition>,
}
impl ActiveSpeakerOnlyConfigurationBuilder {
    /// <p>The position of the <code>ActiveSpeakerOnly</code> video tile.</p>
    pub fn active_speaker_position(mut self, input: crate::types::ActiveSpeakerPosition) -> Self {
        self.active_speaker_position = ::std::option::Option::Some(input);
        self
    }
    /// <p>The position of the <code>ActiveSpeakerOnly</code> video tile.</p>
    pub fn set_active_speaker_position(mut self, input: ::std::option::Option<crate::types::ActiveSpeakerPosition>) -> Self {
        self.active_speaker_position = input;
        self
    }
    /// <p>The position of the <code>ActiveSpeakerOnly</code> video tile.</p>
    pub fn get_active_speaker_position(&self) -> &::std::option::Option<crate::types::ActiveSpeakerPosition> {
        &self.active_speaker_position
    }
    /// Consumes the builder and constructs a [`ActiveSpeakerOnlyConfiguration`](crate::types::ActiveSpeakerOnlyConfiguration).
    pub fn build(self) -> crate::types::ActiveSpeakerOnlyConfiguration {
        crate::types::ActiveSpeakerOnlyConfiguration {
            active_speaker_position: self.active_speaker_position,
        }
    }
}
