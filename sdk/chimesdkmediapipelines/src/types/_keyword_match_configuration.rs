// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the settings for a keyword match task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeywordMatchConfiguration {
    /// <p>The name of the keyword match rule.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The keywords or phrases that you want to match.</p>
    pub keywords: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Matches keywords or phrases on their presence or absence. If set to <code>TRUE</code>, the rule matches when all the specified keywords or phrases are absent. Default: <code>FALSE</code>.</p>
    pub negate: bool,
}
impl KeywordMatchConfiguration {
    /// <p>The name of the keyword match rule.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>The keywords or phrases that you want to match.</p>
    pub fn keywords(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.keywords.as_deref()
    }
    /// <p>Matches keywords or phrases on their presence or absence. If set to <code>TRUE</code>, the rule matches when all the specified keywords or phrases are absent. Default: <code>FALSE</code>.</p>
    pub fn negate(&self) -> bool {
        self.negate
    }
}
impl KeywordMatchConfiguration {
    /// Creates a new builder-style object to manufacture [`KeywordMatchConfiguration`](crate::types::KeywordMatchConfiguration).
    pub fn builder() -> crate::types::builders::KeywordMatchConfigurationBuilder {
        crate::types::builders::KeywordMatchConfigurationBuilder::default()
    }
}

/// A builder for [`KeywordMatchConfiguration`](crate::types::KeywordMatchConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeywordMatchConfigurationBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) keywords: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) negate: ::std::option::Option<bool>,
}
impl KeywordMatchConfigurationBuilder {
    /// <p>The name of the keyword match rule.</p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the keyword match rule.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the keyword match rule.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// Appends an item to `keywords`.
    ///
    /// To override the contents of this collection use [`set_keywords`](Self::set_keywords).
    ///
    /// <p>The keywords or phrases that you want to match.</p>
    pub fn keywords(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.keywords.unwrap_or_default();
        v.push(input.into());
        self.keywords = ::std::option::Option::Some(v);
        self
    }
    /// <p>The keywords or phrases that you want to match.</p>
    pub fn set_keywords(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.keywords = input;
        self
    }
    /// <p>The keywords or phrases that you want to match.</p>
    pub fn get_keywords(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.keywords
    }
    /// <p>Matches keywords or phrases on their presence or absence. If set to <code>TRUE</code>, the rule matches when all the specified keywords or phrases are absent. Default: <code>FALSE</code>.</p>
    pub fn negate(mut self, input: bool) -> Self {
        self.negate = ::std::option::Option::Some(input);
        self
    }
    /// <p>Matches keywords or phrases on their presence or absence. If set to <code>TRUE</code>, the rule matches when all the specified keywords or phrases are absent. Default: <code>FALSE</code>.</p>
    pub fn set_negate(mut self, input: ::std::option::Option<bool>) -> Self {
        self.negate = input;
        self
    }
    /// <p>Matches keywords or phrases on their presence or absence. If set to <code>TRUE</code>, the rule matches when all the specified keywords or phrases are absent. Default: <code>FALSE</code>.</p>
    pub fn get_negate(&self) -> &::std::option::Option<bool> {
        &self.negate
    }
    /// Consumes the builder and constructs a [`KeywordMatchConfiguration`](crate::types::KeywordMatchConfiguration).
    pub fn build(self) -> crate::types::KeywordMatchConfiguration {
        crate::types::KeywordMatchConfiguration {
            rule_name: self.rule_name,
            keywords: self.keywords,
            negate: self.negate.unwrap_or_default(),
        }
    }
}
