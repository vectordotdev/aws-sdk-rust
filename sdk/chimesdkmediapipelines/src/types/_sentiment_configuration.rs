// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains the configuration settings for a sentiment analysis task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SentimentConfiguration {
    /// <p>The name of the rule in the sentiment configuration.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of sentiment, <code>POSITIVE</code>, <code>NEGATIVE</code>, or <code>NEUTRAL</code>.</p>
    pub sentiment_type: ::std::option::Option<crate::types::SentimentType>,
    /// <p>Specifies the analysis interval.</p>
    pub time_period: i32,
}
impl SentimentConfiguration {
    /// <p>The name of the rule in the sentiment configuration.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>The type of sentiment, <code>POSITIVE</code>, <code>NEGATIVE</code>, or <code>NEUTRAL</code>.</p>
    pub fn sentiment_type(&self) -> ::std::option::Option<&crate::types::SentimentType> {
        self.sentiment_type.as_ref()
    }
    /// <p>Specifies the analysis interval.</p>
    pub fn time_period(&self) -> i32 {
        self.time_period
    }
}
impl SentimentConfiguration {
    /// Creates a new builder-style object to manufacture [`SentimentConfiguration`](crate::types::SentimentConfiguration).
    pub fn builder() -> crate::types::builders::SentimentConfigurationBuilder {
        crate::types::builders::SentimentConfigurationBuilder::default()
    }
}

/// A builder for [`SentimentConfiguration`](crate::types::SentimentConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SentimentConfigurationBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) sentiment_type: ::std::option::Option<crate::types::SentimentType>,
    pub(crate) time_period: ::std::option::Option<i32>,
}
impl SentimentConfigurationBuilder {
    /// <p>The name of the rule in the sentiment configuration.</p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule in the sentiment configuration.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the rule in the sentiment configuration.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>The type of sentiment, <code>POSITIVE</code>, <code>NEGATIVE</code>, or <code>NEUTRAL</code>.</p>
    pub fn sentiment_type(mut self, input: crate::types::SentimentType) -> Self {
        self.sentiment_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of sentiment, <code>POSITIVE</code>, <code>NEGATIVE</code>, or <code>NEUTRAL</code>.</p>
    pub fn set_sentiment_type(mut self, input: ::std::option::Option<crate::types::SentimentType>) -> Self {
        self.sentiment_type = input;
        self
    }
    /// <p>The type of sentiment, <code>POSITIVE</code>, <code>NEGATIVE</code>, or <code>NEUTRAL</code>.</p>
    pub fn get_sentiment_type(&self) -> &::std::option::Option<crate::types::SentimentType> {
        &self.sentiment_type
    }
    /// <p>Specifies the analysis interval.</p>
    pub fn time_period(mut self, input: i32) -> Self {
        self.time_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the analysis interval.</p>
    pub fn set_time_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.time_period = input;
        self
    }
    /// <p>Specifies the analysis interval.</p>
    pub fn get_time_period(&self) -> &::std::option::Option<i32> {
        &self.time_period
    }
    /// Consumes the builder and constructs a [`SentimentConfiguration`](crate::types::SentimentConfiguration).
    pub fn build(self) -> crate::types::SentimentConfiguration {
        crate::types::SentimentConfiguration {
            rule_name: self.rule_name,
            sentiment_type: self.sentiment_type,
            time_period: self.time_period.unwrap_or_default(),
        }
    }
}
