// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_media_insights_pipeline_configuration_element(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MediaInsightsPipelineConfigurationElement,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.r#type {
        object.key("Type").string(var_1.as_str());
    }
    if let Some(var_2) = &input.amazon_transcribe_call_analytics_processor_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("AmazonTranscribeCallAnalyticsProcessorConfiguration").start_object();
        crate::protocol_serde::shape_amazon_transcribe_call_analytics_processor_configuration::ser_amazon_transcribe_call_analytics_processor_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.amazon_transcribe_processor_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("AmazonTranscribeProcessorConfiguration").start_object();
        crate::protocol_serde::shape_amazon_transcribe_processor_configuration::ser_amazon_transcribe_processor_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.kinesis_data_stream_sink_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("KinesisDataStreamSinkConfiguration").start_object();
        crate::protocol_serde::shape_kinesis_data_stream_sink_configuration::ser_kinesis_data_stream_sink_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.s3_recording_sink_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("S3RecordingSinkConfiguration").start_object();
        crate::protocol_serde::shape_s3_recording_sink_configuration::ser_s3_recording_sink_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.voice_analytics_processor_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("VoiceAnalyticsProcessorConfiguration").start_object();
        crate::protocol_serde::shape_voice_analytics_processor_configuration::ser_voice_analytics_processor_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.lambda_function_sink_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("LambdaFunctionSinkConfiguration").start_object();
        crate::protocol_serde::shape_lambda_function_sink_configuration::ser_lambda_function_sink_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.sqs_queue_sink_configuration {
        #[allow(unused_mut)]
        let mut object_15 = object.key("SqsQueueSinkConfiguration").start_object();
        crate::protocol_serde::shape_sqs_queue_sink_configuration::ser_sqs_queue_sink_configuration(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.sns_topic_sink_configuration {
        #[allow(unused_mut)]
        let mut object_17 = object.key("SnsTopicSinkConfiguration").start_object();
        crate::protocol_serde::shape_sns_topic_sink_configuration::ser_sns_topic_sink_configuration(&mut object_17, var_16)?;
        object_17.finish();
    }
    Ok(())
}

pub(crate) fn de_media_insights_pipeline_configuration_element<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::MediaInsightsPipelineConfigurationElement>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MediaInsightsPipelineConfigurationElementBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Type" => {
                                builder = builder.set_type(
                                    ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                        .map(|s| {
                                            s.to_unescaped()
                                                .map(|u| crate::types::MediaInsightsPipelineConfigurationElementType::from(u.as_ref()))
                                        })
                                        .transpose()?,
                                );
                            }
                            "AmazonTranscribeCallAnalyticsProcessorConfiguration" => {
                                builder = builder.set_amazon_transcribe_call_analytics_processor_configuration(
                                    crate::protocol_serde::shape_amazon_transcribe_call_analytics_processor_configuration::de_amazon_transcribe_call_analytics_processor_configuration(tokens)?
                                );
                            }
                            "AmazonTranscribeProcessorConfiguration" => {
                                builder = builder.set_amazon_transcribe_processor_configuration(
                                    crate::protocol_serde::shape_amazon_transcribe_processor_configuration::de_amazon_transcribe_processor_configuration(tokens)?
                                );
                            }
                            "KinesisDataStreamSinkConfiguration" => {
                                builder = builder.set_kinesis_data_stream_sink_configuration(
                                    crate::protocol_serde::shape_kinesis_data_stream_sink_configuration::de_kinesis_data_stream_sink_configuration(
                                        tokens,
                                    )?,
                                );
                            }
                            "S3RecordingSinkConfiguration" => {
                                builder = builder.set_s3_recording_sink_configuration(
                                    crate::protocol_serde::shape_s3_recording_sink_configuration::de_s3_recording_sink_configuration(tokens)?,
                                );
                            }
                            "VoiceAnalyticsProcessorConfiguration" => {
                                builder = builder.set_voice_analytics_processor_configuration(
                                    crate::protocol_serde::shape_voice_analytics_processor_configuration::de_voice_analytics_processor_configuration(
                                        tokens,
                                    )?,
                                );
                            }
                            "LambdaFunctionSinkConfiguration" => {
                                builder = builder.set_lambda_function_sink_configuration(
                                    crate::protocol_serde::shape_lambda_function_sink_configuration::de_lambda_function_sink_configuration(tokens)?,
                                );
                            }
                            "SqsQueueSinkConfiguration" => {
                                builder = builder.set_sqs_queue_sink_configuration(
                                    crate::protocol_serde::shape_sqs_queue_sink_configuration::de_sqs_queue_sink_configuration(tokens)?,
                                );
                            }
                            "SnsTopicSinkConfiguration" => {
                                builder = builder.set_sns_topic_sink_configuration(
                                    crate::protocol_serde::shape_sns_topic_sink_configuration::de_sns_topic_sink_configuration(tokens)?,
                                );
                            }
                            _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
