// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifying information about the device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeviceSummary {
    /// <p>The ID of the device.</p>
    pub managed_device_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub managed_device_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the job used to order the device.</p>
    pub associated_with_job: ::std::option::Option<::std::string::String>,
    /// <p>Optional metadata that you assign to a resource. You can use tags to categorize a resource in different ways, such as by purpose, owner, or environment.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl DeviceSummary {
    /// <p>The ID of the device.</p>
    pub fn managed_device_id(&self) -> ::std::option::Option<&str> {
        self.managed_device_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn managed_device_arn(&self) -> ::std::option::Option<&str> {
        self.managed_device_arn.as_deref()
    }
    /// <p>The ID of the job used to order the device.</p>
    pub fn associated_with_job(&self) -> ::std::option::Option<&str> {
        self.associated_with_job.as_deref()
    }
    /// <p>Optional metadata that you assign to a resource. You can use tags to categorize a resource in different ways, such as by purpose, owner, or environment.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl DeviceSummary {
    /// Creates a new builder-style object to manufacture [`DeviceSummary`](crate::types::DeviceSummary).
    pub fn builder() -> crate::types::builders::DeviceSummaryBuilder {
        crate::types::builders::DeviceSummaryBuilder::default()
    }
}

/// A builder for [`DeviceSummary`](crate::types::DeviceSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeviceSummaryBuilder {
    pub(crate) managed_device_id: ::std::option::Option<::std::string::String>,
    pub(crate) managed_device_arn: ::std::option::Option<::std::string::String>,
    pub(crate) associated_with_job: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl DeviceSummaryBuilder {
    /// <p>The ID of the device.</p>
    pub fn managed_device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_device_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the device.</p>
    pub fn set_managed_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_device_id = input;
        self
    }
    /// <p>The ID of the device.</p>
    pub fn get_managed_device_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_device_id
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn managed_device_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_device_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn set_managed_device_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_device_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the device.</p>
    pub fn get_managed_device_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_device_arn
    }
    /// <p>The ID of the job used to order the device.</p>
    pub fn associated_with_job(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associated_with_job = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job used to order the device.</p>
    pub fn set_associated_with_job(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associated_with_job = input;
        self
    }
    /// <p>The ID of the job used to order the device.</p>
    pub fn get_associated_with_job(&self) -> &::std::option::Option<::std::string::String> {
        &self.associated_with_job
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Optional metadata that you assign to a resource. You can use tags to categorize a resource in different ways, such as by purpose, owner, or environment.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Optional metadata that you assign to a resource. You can use tags to categorize a resource in different ways, such as by purpose, owner, or environment.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Optional metadata that you assign to a resource. You can use tags to categorize a resource in different ways, such as by purpose, owner, or environment.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`DeviceSummary`](crate::types::DeviceSummary).
    pub fn build(self) -> crate::types::DeviceSummary {
        crate::types::DeviceSummary {
            managed_device_id: self.managed_device_id,
            managed_device_arn: self.managed_device_arn,
            associated_with_job: self.associated_with_job,
            tags: self.tags,
        }
    }
}
