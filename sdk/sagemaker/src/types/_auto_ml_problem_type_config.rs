// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of settings specific to the problem type used to configure an AutoML job V2. There must be one and only one config of the following type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AutoMlProblemTypeConfig {
    /// <p>Settings used to configure an AutoML job V2 for the image classification problem type.</p>
    ImageClassificationJobConfig(crate::types::ImageClassificationJobConfig),
    /// <p>Settings used to configure an AutoML job V2 for a tabular problem type (regression, classification).</p>
    TabularJobConfig(crate::types::TabularJobConfig),
    /// <p>Settings used to configure an AutoML job V2 for the text classification problem type.</p>
    TextClassificationJobConfig(crate::types::TextClassificationJobConfig),
    /// <p>Settings used to configure an AutoML job V2 for a time-series forecasting problem type.</p> <note>
    /// <p>The <code>TimeSeriesForecastingJobConfig</code> problem type is only available in private beta. Contact Amazon Web Services Support or your account manager to learn more about access privileges.</p>
    /// </note>
    TimeSeriesForecastingJobConfig(crate::types::TimeSeriesForecastingJobConfig),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AutoMlProblemTypeConfig {
    /// Tries to convert the enum instance into [`ImageClassificationJobConfig`](crate::types::AutoMlProblemTypeConfig::ImageClassificationJobConfig), extracting the inner [`ImageClassificationJobConfig`](crate::types::ImageClassificationJobConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_image_classification_job_config(&self) -> ::std::result::Result<&crate::types::ImageClassificationJobConfig, &Self> {
        if let AutoMlProblemTypeConfig::ImageClassificationJobConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ImageClassificationJobConfig`](crate::types::AutoMlProblemTypeConfig::ImageClassificationJobConfig).
    pub fn is_image_classification_job_config(&self) -> bool {
        self.as_image_classification_job_config().is_ok()
    }
    /// Tries to convert the enum instance into [`TabularJobConfig`](crate::types::AutoMlProblemTypeConfig::TabularJobConfig), extracting the inner [`TabularJobConfig`](crate::types::TabularJobConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_tabular_job_config(&self) -> ::std::result::Result<&crate::types::TabularJobConfig, &Self> {
        if let AutoMlProblemTypeConfig::TabularJobConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`TabularJobConfig`](crate::types::AutoMlProblemTypeConfig::TabularJobConfig).
    pub fn is_tabular_job_config(&self) -> bool {
        self.as_tabular_job_config().is_ok()
    }
    /// Tries to convert the enum instance into [`TextClassificationJobConfig`](crate::types::AutoMlProblemTypeConfig::TextClassificationJobConfig), extracting the inner [`TextClassificationJobConfig`](crate::types::TextClassificationJobConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_text_classification_job_config(&self) -> ::std::result::Result<&crate::types::TextClassificationJobConfig, &Self> {
        if let AutoMlProblemTypeConfig::TextClassificationJobConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`TextClassificationJobConfig`](crate::types::AutoMlProblemTypeConfig::TextClassificationJobConfig).
    pub fn is_text_classification_job_config(&self) -> bool {
        self.as_text_classification_job_config().is_ok()
    }
    /// Tries to convert the enum instance into [`TimeSeriesForecastingJobConfig`](crate::types::AutoMlProblemTypeConfig::TimeSeriesForecastingJobConfig), extracting the inner [`TimeSeriesForecastingJobConfig`](crate::types::TimeSeriesForecastingJobConfig).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_time_series_forecasting_job_config(&self) -> ::std::result::Result<&crate::types::TimeSeriesForecastingJobConfig, &Self> {
        if let AutoMlProblemTypeConfig::TimeSeriesForecastingJobConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`TimeSeriesForecastingJobConfig`](crate::types::AutoMlProblemTypeConfig::TimeSeriesForecastingJobConfig).
    pub fn is_time_series_forecasting_job_config(&self) -> bool {
        self.as_time_series_forecasting_job_config().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
