// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserContext {
    /// <p>The Amazon Resource Name (ARN) of the user's profile.</p>
    pub user_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the user's profile.</p>
    pub user_profile_name: ::std::option::Option<::std::string::String>,
    /// <p>The domain associated with the user.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The IAM Identity details associated with the user. These details are associated with model package groups, model packages, and project entities only.</p>
    pub iam_identity: ::std::option::Option<crate::types::IamIdentity>,
}
impl UserContext {
    /// <p>The Amazon Resource Name (ARN) of the user's profile.</p>
    pub fn user_profile_arn(&self) -> ::std::option::Option<&str> {
        self.user_profile_arn.as_deref()
    }
    /// <p>The name of the user's profile.</p>
    pub fn user_profile_name(&self) -> ::std::option::Option<&str> {
        self.user_profile_name.as_deref()
    }
    /// <p>The domain associated with the user.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The IAM Identity details associated with the user. These details are associated with model package groups, model packages, and project entities only.</p>
    pub fn iam_identity(&self) -> ::std::option::Option<&crate::types::IamIdentity> {
        self.iam_identity.as_ref()
    }
}
impl UserContext {
    /// Creates a new builder-style object to manufacture [`UserContext`](crate::types::UserContext).
    pub fn builder() -> crate::types::builders::UserContextBuilder {
        crate::types::builders::UserContextBuilder::default()
    }
}

/// A builder for [`UserContext`](crate::types::UserContext).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserContextBuilder {
    pub(crate) user_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) user_profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) iam_identity: ::std::option::Option<crate::types::IamIdentity>,
}
impl UserContextBuilder {
    /// <p>The Amazon Resource Name (ARN) of the user's profile.</p>
    pub fn user_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user's profile.</p>
    pub fn set_user_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_profile_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the user's profile.</p>
    pub fn get_user_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_profile_arn
    }
    /// <p>The name of the user's profile.</p>
    pub fn user_profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user's profile.</p>
    pub fn set_user_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_profile_name = input;
        self
    }
    /// <p>The name of the user's profile.</p>
    pub fn get_user_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_profile_name
    }
    /// <p>The domain associated with the user.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain associated with the user.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The domain associated with the user.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The IAM Identity details associated with the user. These details are associated with model package groups, model packages, and project entities only.</p>
    pub fn iam_identity(mut self, input: crate::types::IamIdentity) -> Self {
        self.iam_identity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IAM Identity details associated with the user. These details are associated with model package groups, model packages, and project entities only.</p>
    pub fn set_iam_identity(mut self, input: ::std::option::Option<crate::types::IamIdentity>) -> Self {
        self.iam_identity = input;
        self
    }
    /// <p>The IAM Identity details associated with the user. These details are associated with model package groups, model packages, and project entities only.</p>
    pub fn get_iam_identity(&self) -> &::std::option::Option<crate::types::IamIdentity> {
        &self.iam_identity
    }
    /// Consumes the builder and constructs a [`UserContext`](crate::types::UserContext).
    pub fn build(self) -> crate::types::UserContext {
        crate::types::UserContext {
            user_profile_arn: self.user_profile_arn,
            user_profile_name: self.user_profile_name,
            domain_id: self.domain_id,
            iam_identity: self.iam_identity,
        }
    }
}
