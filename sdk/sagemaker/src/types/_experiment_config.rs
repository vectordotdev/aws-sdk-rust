// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:</p>
/// <ul>
/// <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html">CreateProcessingJob</a> </p> </li>
/// <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html">CreateTrainingJob</a> </p> </li>
/// <li> <p> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html">CreateTransformJob</a> </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExperimentConfig {
    /// <p>The name of an existing experiment to associate with the trial component.</p>
    pub experiment_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of an existing trial to associate the trial component with. If not specified, a new trial is created.</p>
    pub trial_name: ::std::option::Option<::std::string::String>,
    /// <p>The display name for the trial component. If this key isn't specified, the display name is the trial component name.</p>
    pub trial_component_display_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the experiment run to associate with the trial component.</p>
    pub run_name: ::std::option::Option<::std::string::String>,
}
impl ExperimentConfig {
    /// <p>The name of an existing experiment to associate with the trial component.</p>
    pub fn experiment_name(&self) -> ::std::option::Option<&str> {
        self.experiment_name.as_deref()
    }
    /// <p>The name of an existing trial to associate the trial component with. If not specified, a new trial is created.</p>
    pub fn trial_name(&self) -> ::std::option::Option<&str> {
        self.trial_name.as_deref()
    }
    /// <p>The display name for the trial component. If this key isn't specified, the display name is the trial component name.</p>
    pub fn trial_component_display_name(&self) -> ::std::option::Option<&str> {
        self.trial_component_display_name.as_deref()
    }
    /// <p>The name of the experiment run to associate with the trial component.</p>
    pub fn run_name(&self) -> ::std::option::Option<&str> {
        self.run_name.as_deref()
    }
}
impl ExperimentConfig {
    /// Creates a new builder-style object to manufacture [`ExperimentConfig`](crate::types::ExperimentConfig).
    pub fn builder() -> crate::types::builders::ExperimentConfigBuilder {
        crate::types::builders::ExperimentConfigBuilder::default()
    }
}

/// A builder for [`ExperimentConfig`](crate::types::ExperimentConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExperimentConfigBuilder {
    pub(crate) experiment_name: ::std::option::Option<::std::string::String>,
    pub(crate) trial_name: ::std::option::Option<::std::string::String>,
    pub(crate) trial_component_display_name: ::std::option::Option<::std::string::String>,
    pub(crate) run_name: ::std::option::Option<::std::string::String>,
}
impl ExperimentConfigBuilder {
    /// <p>The name of an existing experiment to associate with the trial component.</p>
    pub fn experiment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.experiment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an existing experiment to associate with the trial component.</p>
    pub fn set_experiment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.experiment_name = input;
        self
    }
    /// <p>The name of an existing experiment to associate with the trial component.</p>
    pub fn get_experiment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.experiment_name
    }
    /// <p>The name of an existing trial to associate the trial component with. If not specified, a new trial is created.</p>
    pub fn trial_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trial_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an existing trial to associate the trial component with. If not specified, a new trial is created.</p>
    pub fn set_trial_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trial_name = input;
        self
    }
    /// <p>The name of an existing trial to associate the trial component with. If not specified, a new trial is created.</p>
    pub fn get_trial_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.trial_name
    }
    /// <p>The display name for the trial component. If this key isn't specified, the display name is the trial component name.</p>
    pub fn trial_component_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trial_component_display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name for the trial component. If this key isn't specified, the display name is the trial component name.</p>
    pub fn set_trial_component_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trial_component_display_name = input;
        self
    }
    /// <p>The display name for the trial component. If this key isn't specified, the display name is the trial component name.</p>
    pub fn get_trial_component_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.trial_component_display_name
    }
    /// <p>The name of the experiment run to associate with the trial component.</p>
    pub fn run_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the experiment run to associate with the trial component.</p>
    pub fn set_run_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_name = input;
        self
    }
    /// <p>The name of the experiment run to associate with the trial component.</p>
    pub fn get_run_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_name
    }
    /// Consumes the builder and constructs a [`ExperimentConfig`](crate::types::ExperimentConfig).
    pub fn build(self) -> crate::types::ExperimentConfig {
        crate::types::ExperimentConfig {
            experiment_name: self.experiment_name,
            trial_name: self.trial_name,
            trial_component_display_name: self.trial_component_display_name,
            run_name: self.run_name,
        }
    }
}
