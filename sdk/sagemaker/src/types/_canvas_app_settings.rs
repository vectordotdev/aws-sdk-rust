// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SageMaker Canvas application settings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CanvasAppSettings {
    /// <p>Time series forecast settings for the Canvas application.</p>
    pub time_series_forecasting_settings: ::std::option::Option<crate::types::TimeSeriesForecastingSettings>,
    /// <p>The model registry settings for the SageMaker Canvas application.</p>
    pub model_register_settings: ::std::option::Option<crate::types::ModelRegisterSettings>,
    /// <p>The workspace settings for the SageMaker Canvas application.</p>
    pub workspace_settings: ::std::option::Option<crate::types::WorkspaceSettings>,
}
impl CanvasAppSettings {
    /// <p>Time series forecast settings for the Canvas application.</p>
    pub fn time_series_forecasting_settings(&self) -> ::std::option::Option<&crate::types::TimeSeriesForecastingSettings> {
        self.time_series_forecasting_settings.as_ref()
    }
    /// <p>The model registry settings for the SageMaker Canvas application.</p>
    pub fn model_register_settings(&self) -> ::std::option::Option<&crate::types::ModelRegisterSettings> {
        self.model_register_settings.as_ref()
    }
    /// <p>The workspace settings for the SageMaker Canvas application.</p>
    pub fn workspace_settings(&self) -> ::std::option::Option<&crate::types::WorkspaceSettings> {
        self.workspace_settings.as_ref()
    }
}
impl CanvasAppSettings {
    /// Creates a new builder-style object to manufacture [`CanvasAppSettings`](crate::types::CanvasAppSettings).
    pub fn builder() -> crate::types::builders::CanvasAppSettingsBuilder {
        crate::types::builders::CanvasAppSettingsBuilder::default()
    }
}

/// A builder for [`CanvasAppSettings`](crate::types::CanvasAppSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CanvasAppSettingsBuilder {
    pub(crate) time_series_forecasting_settings: ::std::option::Option<crate::types::TimeSeriesForecastingSettings>,
    pub(crate) model_register_settings: ::std::option::Option<crate::types::ModelRegisterSettings>,
    pub(crate) workspace_settings: ::std::option::Option<crate::types::WorkspaceSettings>,
}
impl CanvasAppSettingsBuilder {
    /// <p>Time series forecast settings for the Canvas application.</p>
    pub fn time_series_forecasting_settings(mut self, input: crate::types::TimeSeriesForecastingSettings) -> Self {
        self.time_series_forecasting_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time series forecast settings for the Canvas application.</p>
    pub fn set_time_series_forecasting_settings(mut self, input: ::std::option::Option<crate::types::TimeSeriesForecastingSettings>) -> Self {
        self.time_series_forecasting_settings = input;
        self
    }
    /// <p>Time series forecast settings for the Canvas application.</p>
    pub fn get_time_series_forecasting_settings(&self) -> &::std::option::Option<crate::types::TimeSeriesForecastingSettings> {
        &self.time_series_forecasting_settings
    }
    /// <p>The model registry settings for the SageMaker Canvas application.</p>
    pub fn model_register_settings(mut self, input: crate::types::ModelRegisterSettings) -> Self {
        self.model_register_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The model registry settings for the SageMaker Canvas application.</p>
    pub fn set_model_register_settings(mut self, input: ::std::option::Option<crate::types::ModelRegisterSettings>) -> Self {
        self.model_register_settings = input;
        self
    }
    /// <p>The model registry settings for the SageMaker Canvas application.</p>
    pub fn get_model_register_settings(&self) -> &::std::option::Option<crate::types::ModelRegisterSettings> {
        &self.model_register_settings
    }
    /// <p>The workspace settings for the SageMaker Canvas application.</p>
    pub fn workspace_settings(mut self, input: crate::types::WorkspaceSettings) -> Self {
        self.workspace_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The workspace settings for the SageMaker Canvas application.</p>
    pub fn set_workspace_settings(mut self, input: ::std::option::Option<crate::types::WorkspaceSettings>) -> Self {
        self.workspace_settings = input;
        self
    }
    /// <p>The workspace settings for the SageMaker Canvas application.</p>
    pub fn get_workspace_settings(&self) -> &::std::option::Option<crate::types::WorkspaceSettings> {
        &self.workspace_settings
    }
    /// Consumes the builder and constructs a [`CanvasAppSettings`](crate::types::CanvasAppSettings).
    pub fn build(self) -> crate::types::CanvasAppSettings {
        crate::types::CanvasAppSettings {
            time_series_forecasting_settings: self.time_series_forecasting_settings,
            model_register_settings: self.model_register_settings,
            workspace_settings: self.workspace_settings,
        }
    }
}
