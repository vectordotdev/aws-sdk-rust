// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an Amazon SageMaker app.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AppDetails {
    /// <p>The domain ID.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The user profile name.</p>
    pub user_profile_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of app.</p>
    pub app_type: ::std::option::Option<crate::types::AppType>,
    /// <p>The name of the app.</p>
    pub app_name: ::std::option::Option<::std::string::String>,
    /// <p>The status.</p>
    pub status: ::std::option::Option<crate::types::AppStatus>,
    /// <p>The creation time.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the space.</p>
    pub space_name: ::std::option::Option<::std::string::String>,
}
impl AppDetails {
    /// <p>The domain ID.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(&self) -> ::std::option::Option<&str> {
        self.user_profile_name.as_deref()
    }
    /// <p>The type of app.</p>
    pub fn app_type(&self) -> ::std::option::Option<&crate::types::AppType> {
        self.app_type.as_ref()
    }
    /// <p>The name of the app.</p>
    pub fn app_name(&self) -> ::std::option::Option<&str> {
        self.app_name.as_deref()
    }
    /// <p>The status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AppStatus> {
        self.status.as_ref()
    }
    /// <p>The creation time.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The name of the space.</p>
    pub fn space_name(&self) -> ::std::option::Option<&str> {
        self.space_name.as_deref()
    }
}
impl AppDetails {
    /// Creates a new builder-style object to manufacture [`AppDetails`](crate::types::AppDetails).
    pub fn builder() -> crate::types::builders::AppDetailsBuilder {
        crate::types::builders::AppDetailsBuilder::default()
    }
}

/// A builder for [`AppDetails`](crate::types::AppDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AppDetailsBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) app_type: ::std::option::Option<crate::types::AppType>,
    pub(crate) app_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AppStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) space_name: ::std::option::Option<::std::string::String>,
}
impl AppDetailsBuilder {
    /// <p>The domain ID.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain ID.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The domain ID.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user profile name.</p>
    pub fn set_user_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_profile_name = input;
        self
    }
    /// <p>The user profile name.</p>
    pub fn get_user_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_profile_name
    }
    /// <p>The type of app.</p>
    pub fn app_type(mut self, input: crate::types::AppType) -> Self {
        self.app_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of app.</p>
    pub fn set_app_type(mut self, input: ::std::option::Option<crate::types::AppType>) -> Self {
        self.app_type = input;
        self
    }
    /// <p>The type of app.</p>
    pub fn get_app_type(&self) -> &::std::option::Option<crate::types::AppType> {
        &self.app_type
    }
    /// <p>The name of the app.</p>
    pub fn app_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the app.</p>
    pub fn set_app_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_name = input;
        self
    }
    /// <p>The name of the app.</p>
    pub fn get_app_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_name
    }
    /// <p>The status.</p>
    pub fn status(mut self, input: crate::types::AppStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AppStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AppStatus> {
        &self.status
    }
    /// <p>The creation time.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The name of the space.</p>
    pub fn space_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the space.</p>
    pub fn set_space_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_name = input;
        self
    }
    /// <p>The name of the space.</p>
    pub fn get_space_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_name
    }
    /// Consumes the builder and constructs a [`AppDetails`](crate::types::AppDetails).
    pub fn build(self) -> crate::types::AppDetails {
        crate::types::AppDetails {
            domain_id: self.domain_id,
            user_profile_name: self.user_profile_name,
            app_type: self.app_type,
            app_name: self.app_name,
            status: self.status,
            creation_time: self.creation_time,
            space_name: self.space_name,
        }
    }
}
