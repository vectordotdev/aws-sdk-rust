// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the serverless update concurrency configuration for an endpoint variant.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProductionVariantServerlessUpdateConfig {
    /// <p>The updated maximum number of concurrent invocations your serverless endpoint can process.</p>
    pub max_concurrency: ::std::option::Option<i32>,
    /// <p>The updated amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to <code>MaxConcurrency</code>.</p>
    pub provisioned_concurrency: ::std::option::Option<i32>,
}
impl ProductionVariantServerlessUpdateConfig {
    /// <p>The updated maximum number of concurrent invocations your serverless endpoint can process.</p>
    pub fn max_concurrency(&self) -> ::std::option::Option<i32> {
        self.max_concurrency
    }
    /// <p>The updated amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to <code>MaxConcurrency</code>.</p>
    pub fn provisioned_concurrency(&self) -> ::std::option::Option<i32> {
        self.provisioned_concurrency
    }
}
impl ProductionVariantServerlessUpdateConfig {
    /// Creates a new builder-style object to manufacture [`ProductionVariantServerlessUpdateConfig`](crate::types::ProductionVariantServerlessUpdateConfig).
    pub fn builder() -> crate::types::builders::ProductionVariantServerlessUpdateConfigBuilder {
        crate::types::builders::ProductionVariantServerlessUpdateConfigBuilder::default()
    }
}

/// A builder for [`ProductionVariantServerlessUpdateConfig`](crate::types::ProductionVariantServerlessUpdateConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProductionVariantServerlessUpdateConfigBuilder {
    pub(crate) max_concurrency: ::std::option::Option<i32>,
    pub(crate) provisioned_concurrency: ::std::option::Option<i32>,
}
impl ProductionVariantServerlessUpdateConfigBuilder {
    /// <p>The updated maximum number of concurrent invocations your serverless endpoint can process.</p>
    pub fn max_concurrency(mut self, input: i32) -> Self {
        self.max_concurrency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated maximum number of concurrent invocations your serverless endpoint can process.</p>
    pub fn set_max_concurrency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_concurrency = input;
        self
    }
    /// <p>The updated maximum number of concurrent invocations your serverless endpoint can process.</p>
    pub fn get_max_concurrency(&self) -> &::std::option::Option<i32> {
        &self.max_concurrency
    }
    /// <p>The updated amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to <code>MaxConcurrency</code>.</p>
    pub fn provisioned_concurrency(mut self, input: i32) -> Self {
        self.provisioned_concurrency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to <code>MaxConcurrency</code>.</p>
    pub fn set_provisioned_concurrency(mut self, input: ::std::option::Option<i32>) -> Self {
        self.provisioned_concurrency = input;
        self
    }
    /// <p>The updated amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to <code>MaxConcurrency</code>.</p>
    pub fn get_provisioned_concurrency(&self) -> &::std::option::Option<i32> {
        &self.provisioned_concurrency
    }
    /// Consumes the builder and constructs a [`ProductionVariantServerlessUpdateConfig`](crate::types::ProductionVariantServerlessUpdateConfig).
    pub fn build(self) -> crate::types::ProductionVariantServerlessUpdateConfig {
        crate::types::ProductionVariantServerlessUpdateConfig {
            max_concurrency: self.max_concurrency,
            provisioned_concurrency: self.provisioned_concurrency,
        }
    }
}
