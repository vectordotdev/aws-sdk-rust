// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or <code>KMSKeyId</code>, for at rest data encryption. You can turn <code>OnlineStore</code> on or off by specifying the <code>EnableOnlineStore</code> flag at General Assembly.</p>
/// <p>The default value is <code>False</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OnlineStoreConfig {
    /// <p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your <code>OnlineStore</code>.</p>
    pub security_config: ::std::option::Option<crate::types::OnlineStoreSecurityConfig>,
    /// <p>Turn <code>OnlineStore</code> off by specifying <code>False</code> for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag. </p>
    /// <p>The default value is <code>False</code>.</p>
    pub enable_online_store: bool,
    /// <p>Time to live duration, where the record is hard deleted after the expiration time is reached; <code>ExpiresAt</code> = <code>EventTime</code> + <code>TtlDuration</code>. For information on HardDelete, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a> API in the Amazon SageMaker API Reference guide.</p>
    pub ttl_duration: ::std::option::Option<crate::types::TtlDuration>,
}
impl OnlineStoreConfig {
    /// <p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your <code>OnlineStore</code>.</p>
    pub fn security_config(&self) -> ::std::option::Option<&crate::types::OnlineStoreSecurityConfig> {
        self.security_config.as_ref()
    }
    /// <p>Turn <code>OnlineStore</code> off by specifying <code>False</code> for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag. </p>
    /// <p>The default value is <code>False</code>.</p>
    pub fn enable_online_store(&self) -> bool {
        self.enable_online_store
    }
    /// <p>Time to live duration, where the record is hard deleted after the expiration time is reached; <code>ExpiresAt</code> = <code>EventTime</code> + <code>TtlDuration</code>. For information on HardDelete, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a> API in the Amazon SageMaker API Reference guide.</p>
    pub fn ttl_duration(&self) -> ::std::option::Option<&crate::types::TtlDuration> {
        self.ttl_duration.as_ref()
    }
}
impl OnlineStoreConfig {
    /// Creates a new builder-style object to manufacture [`OnlineStoreConfig`](crate::types::OnlineStoreConfig).
    pub fn builder() -> crate::types::builders::OnlineStoreConfigBuilder {
        crate::types::builders::OnlineStoreConfigBuilder::default()
    }
}

/// A builder for [`OnlineStoreConfig`](crate::types::OnlineStoreConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OnlineStoreConfigBuilder {
    pub(crate) security_config: ::std::option::Option<crate::types::OnlineStoreSecurityConfig>,
    pub(crate) enable_online_store: ::std::option::Option<bool>,
    pub(crate) ttl_duration: ::std::option::Option<crate::types::TtlDuration>,
}
impl OnlineStoreConfigBuilder {
    /// <p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your <code>OnlineStore</code>.</p>
    pub fn security_config(mut self, input: crate::types::OnlineStoreSecurityConfig) -> Self {
        self.security_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your <code>OnlineStore</code>.</p>
    pub fn set_security_config(mut self, input: ::std::option::Option<crate::types::OnlineStoreSecurityConfig>) -> Self {
        self.security_config = input;
        self
    }
    /// <p>Use to specify KMS Key ID (<code>KMSKeyId</code>) for at-rest encryption of your <code>OnlineStore</code>.</p>
    pub fn get_security_config(&self) -> &::std::option::Option<crate::types::OnlineStoreSecurityConfig> {
        &self.security_config
    }
    /// <p>Turn <code>OnlineStore</code> off by specifying <code>False</code> for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag. </p>
    /// <p>The default value is <code>False</code>.</p>
    pub fn enable_online_store(mut self, input: bool) -> Self {
        self.enable_online_store = ::std::option::Option::Some(input);
        self
    }
    /// <p>Turn <code>OnlineStore</code> off by specifying <code>False</code> for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag. </p>
    /// <p>The default value is <code>False</code>.</p>
    pub fn set_enable_online_store(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_online_store = input;
        self
    }
    /// <p>Turn <code>OnlineStore</code> off by specifying <code>False</code> for the <code>EnableOnlineStore</code> flag. Turn <code>OnlineStore</code> on by specifying <code>True</code> for the <code>EnableOnlineStore</code> flag. </p>
    /// <p>The default value is <code>False</code>.</p>
    pub fn get_enable_online_store(&self) -> &::std::option::Option<bool> {
        &self.enable_online_store
    }
    /// <p>Time to live duration, where the record is hard deleted after the expiration time is reached; <code>ExpiresAt</code> = <code>EventTime</code> + <code>TtlDuration</code>. For information on HardDelete, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a> API in the Amazon SageMaker API Reference guide.</p>
    pub fn ttl_duration(mut self, input: crate::types::TtlDuration) -> Self {
        self.ttl_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time to live duration, where the record is hard deleted after the expiration time is reached; <code>ExpiresAt</code> = <code>EventTime</code> + <code>TtlDuration</code>. For information on HardDelete, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a> API in the Amazon SageMaker API Reference guide.</p>
    pub fn set_ttl_duration(mut self, input: ::std::option::Option<crate::types::TtlDuration>) -> Self {
        self.ttl_duration = input;
        self
    }
    /// <p>Time to live duration, where the record is hard deleted after the expiration time is reached; <code>ExpiresAt</code> = <code>EventTime</code> + <code>TtlDuration</code>. For information on HardDelete, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a> API in the Amazon SageMaker API Reference guide.</p>
    pub fn get_ttl_duration(&self) -> &::std::option::Option<crate::types::TtlDuration> {
        &self.ttl_duration
    }
    /// Consumes the builder and constructs a [`OnlineStoreConfig`](crate::types::OnlineStoreConfig).
    pub fn build(self) -> crate::types::OnlineStoreConfig {
        crate::types::OnlineStoreConfig {
            security_config: self.security_config,
            enable_online_store: self.enable_online_store.unwrap_or_default(),
            ttl_duration: self.ttl_duration,
        }
    }
}
