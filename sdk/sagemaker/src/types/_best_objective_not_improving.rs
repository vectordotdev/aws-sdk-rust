// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that keeps track of which training jobs launched by your hyperparameter tuning job are not improving model performance as evaluated against an objective function.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BestObjectiveNotImproving {
    /// <p>The number of training jobs that have failed to improve model performance by 1% or greater over prior training jobs as evaluated against an objective function.</p>
    pub max_number_of_training_jobs_not_improving: ::std::option::Option<i32>,
}
impl BestObjectiveNotImproving {
    /// <p>The number of training jobs that have failed to improve model performance by 1% or greater over prior training jobs as evaluated against an objective function.</p>
    pub fn max_number_of_training_jobs_not_improving(&self) -> ::std::option::Option<i32> {
        self.max_number_of_training_jobs_not_improving
    }
}
impl BestObjectiveNotImproving {
    /// Creates a new builder-style object to manufacture [`BestObjectiveNotImproving`](crate::types::BestObjectiveNotImproving).
    pub fn builder() -> crate::types::builders::BestObjectiveNotImprovingBuilder {
        crate::types::builders::BestObjectiveNotImprovingBuilder::default()
    }
}

/// A builder for [`BestObjectiveNotImproving`](crate::types::BestObjectiveNotImproving).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BestObjectiveNotImprovingBuilder {
    pub(crate) max_number_of_training_jobs_not_improving: ::std::option::Option<i32>,
}
impl BestObjectiveNotImprovingBuilder {
    /// <p>The number of training jobs that have failed to improve model performance by 1% or greater over prior training jobs as evaluated against an objective function.</p>
    pub fn max_number_of_training_jobs_not_improving(mut self, input: i32) -> Self {
        self.max_number_of_training_jobs_not_improving = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of training jobs that have failed to improve model performance by 1% or greater over prior training jobs as evaluated against an objective function.</p>
    pub fn set_max_number_of_training_jobs_not_improving(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_number_of_training_jobs_not_improving = input;
        self
    }
    /// <p>The number of training jobs that have failed to improve model performance by 1% or greater over prior training jobs as evaluated against an objective function.</p>
    pub fn get_max_number_of_training_jobs_not_improving(&self) -> &::std::option::Option<i32> {
        &self.max_number_of_training_jobs_not_improving
    }
    /// Consumes the builder and constructs a [`BestObjectiveNotImproving`](crate::types::BestObjectiveNotImproving).
    pub fn build(self) -> crate::types::BestObjectiveNotImproving {
        crate::types::BestObjectiveNotImproving {
            max_number_of_training_jobs_not_improving: self.max_number_of_training_jobs_not_improving,
        }
    }
}
