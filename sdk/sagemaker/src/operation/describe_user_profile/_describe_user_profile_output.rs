// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeUserProfileOutput {
    /// <p>The ID of the domain that contains the profile.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The user profile Amazon Resource Name (ARN).</p>
    pub user_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The user profile name.</p>
    pub user_profile_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the user's profile in the Amazon Elastic File System (EFS) volume.</p>
    pub home_efs_file_system_uid: ::std::option::Option<::std::string::String>,
    /// <p>The status.</p>
    pub status: ::std::option::Option<crate::types::UserProfileStatus>,
    /// <p>The last modified time.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The creation time.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The failure reason.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The IAM Identity Center user identifier.</p>
    pub single_sign_on_user_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The IAM Identity Center user value.</p>
    pub single_sign_on_user_value: ::std::option::Option<::std::string::String>,
    /// <p>A collection of settings.</p>
    pub user_settings: ::std::option::Option<crate::types::UserSettings>,
    _request_id: Option<String>,
}
impl DescribeUserProfileOutput {
    /// <p>The ID of the domain that contains the profile.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The user profile Amazon Resource Name (ARN).</p>
    pub fn user_profile_arn(&self) -> ::std::option::Option<&str> {
        self.user_profile_arn.as_deref()
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(&self) -> ::std::option::Option<&str> {
        self.user_profile_name.as_deref()
    }
    /// <p>The ID of the user's profile in the Amazon Elastic File System (EFS) volume.</p>
    pub fn home_efs_file_system_uid(&self) -> ::std::option::Option<&str> {
        self.home_efs_file_system_uid.as_deref()
    }
    /// <p>The status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::UserProfileStatus> {
        self.status.as_ref()
    }
    /// <p>The last modified time.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The creation time.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The failure reason.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The IAM Identity Center user identifier.</p>
    pub fn single_sign_on_user_identifier(&self) -> ::std::option::Option<&str> {
        self.single_sign_on_user_identifier.as_deref()
    }
    /// <p>The IAM Identity Center user value.</p>
    pub fn single_sign_on_user_value(&self) -> ::std::option::Option<&str> {
        self.single_sign_on_user_value.as_deref()
    }
    /// <p>A collection of settings.</p>
    pub fn user_settings(&self) -> ::std::option::Option<&crate::types::UserSettings> {
        self.user_settings.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeUserProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeUserProfileOutput {
    /// Creates a new builder-style object to manufacture [`DescribeUserProfileOutput`](crate::operation::describe_user_profile::DescribeUserProfileOutput).
    pub fn builder() -> crate::operation::describe_user_profile::builders::DescribeUserProfileOutputBuilder {
        crate::operation::describe_user_profile::builders::DescribeUserProfileOutputBuilder::default()
    }
}

/// A builder for [`DescribeUserProfileOutput`](crate::operation::describe_user_profile::DescribeUserProfileOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeUserProfileOutputBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) user_profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) home_efs_file_system_uid: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::UserProfileStatus>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) single_sign_on_user_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) single_sign_on_user_value: ::std::option::Option<::std::string::String>,
    pub(crate) user_settings: ::std::option::Option<crate::types::UserSettings>,
    _request_id: Option<String>,
}
impl DescribeUserProfileOutputBuilder {
    /// <p>The ID of the domain that contains the profile.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain that contains the profile.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the domain that contains the profile.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The user profile Amazon Resource Name (ARN).</p>
    pub fn user_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user profile Amazon Resource Name (ARN).</p>
    pub fn set_user_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_profile_arn = input;
        self
    }
    /// <p>The user profile Amazon Resource Name (ARN).</p>
    pub fn get_user_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_profile_arn
    }
    /// <p>The user profile name.</p>
    pub fn user_profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user profile name.</p>
    pub fn set_user_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_profile_name = input;
        self
    }
    /// <p>The user profile name.</p>
    pub fn get_user_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_profile_name
    }
    /// <p>The ID of the user's profile in the Amazon Elastic File System (EFS) volume.</p>
    pub fn home_efs_file_system_uid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.home_efs_file_system_uid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user's profile in the Amazon Elastic File System (EFS) volume.</p>
    pub fn set_home_efs_file_system_uid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.home_efs_file_system_uid = input;
        self
    }
    /// <p>The ID of the user's profile in the Amazon Elastic File System (EFS) volume.</p>
    pub fn get_home_efs_file_system_uid(&self) -> &::std::option::Option<::std::string::String> {
        &self.home_efs_file_system_uid
    }
    /// <p>The status.</p>
    pub fn status(mut self, input: crate::types::UserProfileStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::UserProfileStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::UserProfileStatus> {
        &self.status
    }
    /// <p>The last modified time.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last modified time.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The last modified time.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The creation time.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The failure reason.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure reason.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The failure reason.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The IAM Identity Center user identifier.</p>
    pub fn single_sign_on_user_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.single_sign_on_user_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM Identity Center user identifier.</p>
    pub fn set_single_sign_on_user_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.single_sign_on_user_identifier = input;
        self
    }
    /// <p>The IAM Identity Center user identifier.</p>
    pub fn get_single_sign_on_user_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.single_sign_on_user_identifier
    }
    /// <p>The IAM Identity Center user value.</p>
    pub fn single_sign_on_user_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.single_sign_on_user_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM Identity Center user value.</p>
    pub fn set_single_sign_on_user_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.single_sign_on_user_value = input;
        self
    }
    /// <p>The IAM Identity Center user value.</p>
    pub fn get_single_sign_on_user_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.single_sign_on_user_value
    }
    /// <p>A collection of settings.</p>
    pub fn user_settings(mut self, input: crate::types::UserSettings) -> Self {
        self.user_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>A collection of settings.</p>
    pub fn set_user_settings(mut self, input: ::std::option::Option<crate::types::UserSettings>) -> Self {
        self.user_settings = input;
        self
    }
    /// <p>A collection of settings.</p>
    pub fn get_user_settings(&self) -> &::std::option::Option<crate::types::UserSettings> {
        &self.user_settings
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeUserProfileOutput`](crate::operation::describe_user_profile::DescribeUserProfileOutput).
    pub fn build(self) -> crate::operation::describe_user_profile::DescribeUserProfileOutput {
        crate::operation::describe_user_profile::DescribeUserProfileOutput {
            domain_id: self.domain_id,
            user_profile_arn: self.user_profile_arn,
            user_profile_name: self.user_profile_name,
            home_efs_file_system_uid: self.home_efs_file_system_uid,
            status: self.status,
            last_modified_time: self.last_modified_time,
            creation_time: self.creation_time,
            failure_reason: self.failure_reason,
            single_sign_on_user_identifier: self.single_sign_on_user_identifier,
            single_sign_on_user_value: self.single_sign_on_user_value,
            user_settings: self.user_settings,
            _request_id: self._request_id,
        }
    }
}
