// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::stop_notebook_instance::_stop_notebook_instance_output::StopNotebookInstanceOutputBuilder;

pub use crate::operation::stop_notebook_instance::_stop_notebook_instance_input::StopNotebookInstanceInputBuilder;

impl StopNotebookInstanceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::stop_notebook_instance::StopNotebookInstanceOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::stop_notebook_instance::StopNotebookInstanceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.stop_notebook_instance();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StopNotebookInstance`.
///
/// <p>Terminates the ML compute instance. Before terminating the instance, SageMaker disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker stops charging you for the ML compute instance when you call <code>StopNotebookInstance</code>.</p>
/// <p>To access data on the ML storage volume for a notebook instance that has been terminated, call the <code>StartNotebookInstance</code> API. <code>StartNotebookInstance</code> launches another ML compute instance, configures it, and attaches the preserved ML storage volume so you can continue your work. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StopNotebookInstanceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::stop_notebook_instance::builders::StopNotebookInstanceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl StopNotebookInstanceFluentBuilder {
    /// Creates a new `StopNotebookInstance`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StopNotebookInstance as a reference.
    pub fn as_input(&self) -> &crate::operation::stop_notebook_instance::builders::StopNotebookInstanceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::stop_notebook_instance::StopNotebookInstanceOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::stop_notebook_instance::StopNotebookInstanceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::stop_notebook_instance::StopNotebookInstance::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::stop_notebook_instance::StopNotebookInstance::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::stop_notebook_instance::StopNotebookInstanceOutput,
            crate::operation::stop_notebook_instance::StopNotebookInstanceError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::stop_notebook_instance::StopNotebookInstanceError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the notebook instance to terminate.</p>
    pub fn notebook_instance_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.notebook_instance_name(input.into());
        self
    }
    /// <p>The name of the notebook instance to terminate.</p>
    pub fn set_notebook_instance_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_notebook_instance_name(input);
        self
    }
    /// <p>The name of the notebook instance to terminate.</p>
    pub fn get_notebook_instance_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_notebook_instance_name()
    }
}
