// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters that are required to perform encryption and decryption operations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum EncryptionDecryptionAttributes {
    /// <p>Parameters for plaintext encryption using asymmetric keys.</p>
    Asymmetric(crate::types::AsymmetricEncryptionAttributes),
    /// <p>Parameters that are required to encrypt plaintext data using DUKPT.</p>
    Dukpt(crate::types::DukptEncryptionAttributes),
    /// <p>Parameters that are required to perform encryption and decryption using symmetric keys.</p>
    Symmetric(crate::types::SymmetricEncryptionAttributes),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl EncryptionDecryptionAttributes {
    /// Tries to convert the enum instance into [`Asymmetric`](crate::types::EncryptionDecryptionAttributes::Asymmetric), extracting the inner [`AsymmetricEncryptionAttributes`](crate::types::AsymmetricEncryptionAttributes).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_asymmetric(&self) -> ::std::result::Result<&crate::types::AsymmetricEncryptionAttributes, &Self> {
        if let EncryptionDecryptionAttributes::Asymmetric(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Asymmetric`](crate::types::EncryptionDecryptionAttributes::Asymmetric).
    pub fn is_asymmetric(&self) -> bool {
        self.as_asymmetric().is_ok()
    }
    /// Tries to convert the enum instance into [`Dukpt`](crate::types::EncryptionDecryptionAttributes::Dukpt), extracting the inner [`DukptEncryptionAttributes`](crate::types::DukptEncryptionAttributes).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_dukpt(&self) -> ::std::result::Result<&crate::types::DukptEncryptionAttributes, &Self> {
        if let EncryptionDecryptionAttributes::Dukpt(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Dukpt`](crate::types::EncryptionDecryptionAttributes::Dukpt).
    pub fn is_dukpt(&self) -> bool {
        self.as_dukpt().is_ok()
    }
    /// Tries to convert the enum instance into [`Symmetric`](crate::types::EncryptionDecryptionAttributes::Symmetric), extracting the inner [`SymmetricEncryptionAttributes`](crate::types::SymmetricEncryptionAttributes).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_symmetric(&self) -> ::std::result::Result<&crate::types::SymmetricEncryptionAttributes, &Self> {
        if let EncryptionDecryptionAttributes::Symmetric(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Symmetric`](crate::types::EncryptionDecryptionAttributes::Symmetric).
    pub fn is_symmetric(&self) -> bool {
        self.as_symmetric().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
