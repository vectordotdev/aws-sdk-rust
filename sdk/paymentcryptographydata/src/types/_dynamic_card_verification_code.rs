// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters that are required to generate or verify Dynamic Card Verification Value (dCVV).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DynamicCardVerificationCode {
    /// <p>A random number generated by the issuer.</p>
    pub unpredictable_number: ::std::option::Option<::std::string::String>,
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub pan_sequence_number: ::std::option::Option<::std::string::String>,
    /// <p>The transaction counter value that comes from the terminal.</p>
    pub application_transaction_counter: ::std::option::Option<::std::string::String>,
    /// <p>The data on the two tracks of magnetic cards used for financial transactions. This includes the cardholder name, PAN, expiration date, bank ID (BIN) and several other numbers the issuing bank uses to validate the data received.</p>
    pub track_data: ::std::option::Option<::std::string::String>,
}
impl DynamicCardVerificationCode {
    /// <p>A random number generated by the issuer.</p>
    pub fn unpredictable_number(&self) -> ::std::option::Option<&str> {
        self.unpredictable_number.as_deref()
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn pan_sequence_number(&self) -> ::std::option::Option<&str> {
        self.pan_sequence_number.as_deref()
    }
    /// <p>The transaction counter value that comes from the terminal.</p>
    pub fn application_transaction_counter(&self) -> ::std::option::Option<&str> {
        self.application_transaction_counter.as_deref()
    }
    /// <p>The data on the two tracks of magnetic cards used for financial transactions. This includes the cardholder name, PAN, expiration date, bank ID (BIN) and several other numbers the issuing bank uses to validate the data received.</p>
    pub fn track_data(&self) -> ::std::option::Option<&str> {
        self.track_data.as_deref()
    }
}
impl DynamicCardVerificationCode {
    /// Creates a new builder-style object to manufacture [`DynamicCardVerificationCode`](crate::types::DynamicCardVerificationCode).
    pub fn builder() -> crate::types::builders::DynamicCardVerificationCodeBuilder {
        crate::types::builders::DynamicCardVerificationCodeBuilder::default()
    }
}

/// A builder for [`DynamicCardVerificationCode`](crate::types::DynamicCardVerificationCode).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DynamicCardVerificationCodeBuilder {
    pub(crate) unpredictable_number: ::std::option::Option<::std::string::String>,
    pub(crate) pan_sequence_number: ::std::option::Option<::std::string::String>,
    pub(crate) application_transaction_counter: ::std::option::Option<::std::string::String>,
    pub(crate) track_data: ::std::option::Option<::std::string::String>,
}
impl DynamicCardVerificationCodeBuilder {
    /// <p>A random number generated by the issuer.</p>
    pub fn unpredictable_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unpredictable_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A random number generated by the issuer.</p>
    pub fn set_unpredictable_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unpredictable_number = input;
        self
    }
    /// <p>A random number generated by the issuer.</p>
    pub fn get_unpredictable_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.unpredictable_number
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn pan_sequence_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pan_sequence_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn set_pan_sequence_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pan_sequence_number = input;
        self
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn get_pan_sequence_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.pan_sequence_number
    }
    /// <p>The transaction counter value that comes from the terminal.</p>
    pub fn application_transaction_counter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_transaction_counter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The transaction counter value that comes from the terminal.</p>
    pub fn set_application_transaction_counter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_transaction_counter = input;
        self
    }
    /// <p>The transaction counter value that comes from the terminal.</p>
    pub fn get_application_transaction_counter(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_transaction_counter
    }
    /// <p>The data on the two tracks of magnetic cards used for financial transactions. This includes the cardholder name, PAN, expiration date, bank ID (BIN) and several other numbers the issuing bank uses to validate the data received.</p>
    pub fn track_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.track_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data on the two tracks of magnetic cards used for financial transactions. This includes the cardholder name, PAN, expiration date, bank ID (BIN) and several other numbers the issuing bank uses to validate the data received.</p>
    pub fn set_track_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.track_data = input;
        self
    }
    /// <p>The data on the two tracks of magnetic cards used for financial transactions. This includes the cardholder name, PAN, expiration date, bank ID (BIN) and several other numbers the issuing bank uses to validate the data received.</p>
    pub fn get_track_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.track_data
    }
    /// Consumes the builder and constructs a [`DynamicCardVerificationCode`](crate::types::DynamicCardVerificationCode).
    pub fn build(self) -> crate::types::DynamicCardVerificationCode {
        crate::types::DynamicCardVerificationCode {
            unpredictable_number: self.unpredictable_number,
            pan_sequence_number: self.pan_sequence_number,
            application_transaction_counter: self.application_transaction_counter,
            track_data: self.track_data,
        }
    }
}
