// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters that are required for EMV MAC generation and verification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MacAlgorithmEmv {
    /// <p>The method to use when deriving the master key for EMV MAC generation or verification.</p>
    pub major_key_derivation_mode: ::std::option::Option<crate::types::MajorKeyDerivationMode>,
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card and associates the card to a specific account holder.</p>
    pub primary_account_number: ::std::option::Option<::std::string::String>,
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub pan_sequence_number: ::std::option::Option<::std::string::String>,
    /// <p>The method of deriving a session key for EMV MAC generation or verification.</p>
    pub session_key_derivation_mode: ::std::option::Option<crate::types::SessionKeyDerivationMode>,
    /// <p>Parameters that are required to generate session key for EMV generation and verification.</p>
    pub session_key_derivation_value: ::std::option::Option<crate::types::SessionKeyDerivationValue>,
}
impl MacAlgorithmEmv {
    /// <p>The method to use when deriving the master key for EMV MAC generation or verification.</p>
    pub fn major_key_derivation_mode(&self) -> ::std::option::Option<&crate::types::MajorKeyDerivationMode> {
        self.major_key_derivation_mode.as_ref()
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card and associates the card to a specific account holder.</p>
    pub fn primary_account_number(&self) -> ::std::option::Option<&str> {
        self.primary_account_number.as_deref()
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn pan_sequence_number(&self) -> ::std::option::Option<&str> {
        self.pan_sequence_number.as_deref()
    }
    /// <p>The method of deriving a session key for EMV MAC generation or verification.</p>
    pub fn session_key_derivation_mode(&self) -> ::std::option::Option<&crate::types::SessionKeyDerivationMode> {
        self.session_key_derivation_mode.as_ref()
    }
    /// <p>Parameters that are required to generate session key for EMV generation and verification.</p>
    pub fn session_key_derivation_value(&self) -> ::std::option::Option<&crate::types::SessionKeyDerivationValue> {
        self.session_key_derivation_value.as_ref()
    }
}
impl ::std::fmt::Debug for MacAlgorithmEmv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MacAlgorithmEmv");
        formatter.field("major_key_derivation_mode", &self.major_key_derivation_mode);
        formatter.field("primary_account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("pan_sequence_number", &self.pan_sequence_number);
        formatter.field("session_key_derivation_mode", &self.session_key_derivation_mode);
        formatter.field("session_key_derivation_value", &self.session_key_derivation_value);
        formatter.finish()
    }
}
impl MacAlgorithmEmv {
    /// Creates a new builder-style object to manufacture [`MacAlgorithmEmv`](crate::types::MacAlgorithmEmv).
    pub fn builder() -> crate::types::builders::MacAlgorithmEmvBuilder {
        crate::types::builders::MacAlgorithmEmvBuilder::default()
    }
}

/// A builder for [`MacAlgorithmEmv`](crate::types::MacAlgorithmEmv).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct MacAlgorithmEmvBuilder {
    pub(crate) major_key_derivation_mode: ::std::option::Option<crate::types::MajorKeyDerivationMode>,
    pub(crate) primary_account_number: ::std::option::Option<::std::string::String>,
    pub(crate) pan_sequence_number: ::std::option::Option<::std::string::String>,
    pub(crate) session_key_derivation_mode: ::std::option::Option<crate::types::SessionKeyDerivationMode>,
    pub(crate) session_key_derivation_value: ::std::option::Option<crate::types::SessionKeyDerivationValue>,
}
impl MacAlgorithmEmvBuilder {
    /// <p>The method to use when deriving the master key for EMV MAC generation or verification.</p>
    pub fn major_key_derivation_mode(mut self, input: crate::types::MajorKeyDerivationMode) -> Self {
        self.major_key_derivation_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method to use when deriving the master key for EMV MAC generation or verification.</p>
    pub fn set_major_key_derivation_mode(mut self, input: ::std::option::Option<crate::types::MajorKeyDerivationMode>) -> Self {
        self.major_key_derivation_mode = input;
        self
    }
    /// <p>The method to use when deriving the master key for EMV MAC generation or verification.</p>
    pub fn get_major_key_derivation_mode(&self) -> &::std::option::Option<crate::types::MajorKeyDerivationMode> {
        &self.major_key_derivation_mode
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card and associates the card to a specific account holder.</p>
    pub fn primary_account_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_account_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card and associates the card to a specific account holder.</p>
    pub fn set_primary_account_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_account_number = input;
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card and associates the card to a specific account holder.</p>
    pub fn get_primary_account_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_account_number
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn pan_sequence_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pan_sequence_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn set_pan_sequence_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pan_sequence_number = input;
        self
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn get_pan_sequence_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.pan_sequence_number
    }
    /// <p>The method of deriving a session key for EMV MAC generation or verification.</p>
    pub fn session_key_derivation_mode(mut self, input: crate::types::SessionKeyDerivationMode) -> Self {
        self.session_key_derivation_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method of deriving a session key for EMV MAC generation or verification.</p>
    pub fn set_session_key_derivation_mode(mut self, input: ::std::option::Option<crate::types::SessionKeyDerivationMode>) -> Self {
        self.session_key_derivation_mode = input;
        self
    }
    /// <p>The method of deriving a session key for EMV MAC generation or verification.</p>
    pub fn get_session_key_derivation_mode(&self) -> &::std::option::Option<crate::types::SessionKeyDerivationMode> {
        &self.session_key_derivation_mode
    }
    /// <p>Parameters that are required to generate session key for EMV generation and verification.</p>
    pub fn session_key_derivation_value(mut self, input: crate::types::SessionKeyDerivationValue) -> Self {
        self.session_key_derivation_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Parameters that are required to generate session key for EMV generation and verification.</p>
    pub fn set_session_key_derivation_value(mut self, input: ::std::option::Option<crate::types::SessionKeyDerivationValue>) -> Self {
        self.session_key_derivation_value = input;
        self
    }
    /// <p>Parameters that are required to generate session key for EMV generation and verification.</p>
    pub fn get_session_key_derivation_value(&self) -> &::std::option::Option<crate::types::SessionKeyDerivationValue> {
        &self.session_key_derivation_value
    }
    /// Consumes the builder and constructs a [`MacAlgorithmEmv`](crate::types::MacAlgorithmEmv).
    pub fn build(self) -> crate::types::MacAlgorithmEmv {
        crate::types::MacAlgorithmEmv {
            major_key_derivation_mode: self.major_key_derivation_mode,
            primary_account_number: self.primary_account_number,
            pan_sequence_number: self.pan_sequence_number,
            session_key_derivation_mode: self.session_key_derivation_mode,
            session_key_derivation_value: self.session_key_derivation_value,
        }
    }
}
impl ::std::fmt::Debug for MacAlgorithmEmvBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MacAlgorithmEmvBuilder");
        formatter.field("major_key_derivation_mode", &self.major_key_derivation_mode);
        formatter.field("primary_account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("pan_sequence_number", &self.pan_sequence_number);
        formatter.field("session_key_derivation_mode", &self.session_key_derivation_mode);
        formatter.field("session_key_derivation_value", &self.session_key_derivation_value);
        formatter.finish()
    }
}
