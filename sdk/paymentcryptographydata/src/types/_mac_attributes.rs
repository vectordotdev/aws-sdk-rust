// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters that are required for DUKPT, HMAC, or EMV MAC generation or verification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum MacAttributes {
    /// <p>The encryption algorithm for MAC generation or verification.</p>
    Algorithm(crate::types::MacAlgorithm),
    /// <p>Parameters that are required for MAC generation or verification using DUKPT CMAC algorithm.</p>
    DukptCmac(crate::types::MacAlgorithmDukpt),
    /// <p>Parameters that are required for MAC generation or verification using DUKPT ISO 9797 algorithm1.</p>
    DukptIso9797Algorithm1(crate::types::MacAlgorithmDukpt),
    /// <p>Parameters that are required for MAC generation or verification using DUKPT ISO 9797 algorithm2.</p>
    DukptIso9797Algorithm3(crate::types::MacAlgorithmDukpt),
    /// <p>Parameters that are required for MAC generation or verification using EMV MAC algorithm.</p>
    EmvMac(crate::types::MacAlgorithmEmv),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl MacAttributes {
    /// Tries to convert the enum instance into [`Algorithm`](crate::types::MacAttributes::Algorithm), extracting the inner [`MacAlgorithm`](crate::types::MacAlgorithm).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_algorithm(&self) -> ::std::result::Result<&crate::types::MacAlgorithm, &Self> {
        if let MacAttributes::Algorithm(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Algorithm`](crate::types::MacAttributes::Algorithm).
    pub fn is_algorithm(&self) -> bool {
        self.as_algorithm().is_ok()
    }
    /// Tries to convert the enum instance into [`DukptCmac`](crate::types::MacAttributes::DukptCmac), extracting the inner [`MacAlgorithmDukpt`](crate::types::MacAlgorithmDukpt).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_dukpt_cmac(&self) -> ::std::result::Result<&crate::types::MacAlgorithmDukpt, &Self> {
        if let MacAttributes::DukptCmac(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DukptCmac`](crate::types::MacAttributes::DukptCmac).
    pub fn is_dukpt_cmac(&self) -> bool {
        self.as_dukpt_cmac().is_ok()
    }
    /// Tries to convert the enum instance into [`DukptIso9797Algorithm1`](crate::types::MacAttributes::DukptIso9797Algorithm1), extracting the inner [`MacAlgorithmDukpt`](crate::types::MacAlgorithmDukpt).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_dukpt_iso9797_algorithm1(&self) -> ::std::result::Result<&crate::types::MacAlgorithmDukpt, &Self> {
        if let MacAttributes::DukptIso9797Algorithm1(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DukptIso9797Algorithm1`](crate::types::MacAttributes::DukptIso9797Algorithm1).
    pub fn is_dukpt_iso9797_algorithm1(&self) -> bool {
        self.as_dukpt_iso9797_algorithm1().is_ok()
    }
    /// Tries to convert the enum instance into [`DukptIso9797Algorithm3`](crate::types::MacAttributes::DukptIso9797Algorithm3), extracting the inner [`MacAlgorithmDukpt`](crate::types::MacAlgorithmDukpt).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_dukpt_iso9797_algorithm3(&self) -> ::std::result::Result<&crate::types::MacAlgorithmDukpt, &Self> {
        if let MacAttributes::DukptIso9797Algorithm3(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DukptIso9797Algorithm3`](crate::types::MacAttributes::DukptIso9797Algorithm3).
    pub fn is_dukpt_iso9797_algorithm3(&self) -> bool {
        self.as_dukpt_iso9797_algorithm3().is_ok()
    }
    /// Tries to convert the enum instance into [`EmvMac`](crate::types::MacAttributes::EmvMac), extracting the inner [`MacAlgorithmEmv`](crate::types::MacAlgorithmEmv).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_emv_mac(&self) -> ::std::result::Result<&crate::types::MacAlgorithmEmv, &Self> {
        if let MacAttributes::EmvMac(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EmvMac`](crate::types::MacAttributes::EmvMac).
    pub fn is_emv_mac(&self) -> bool {
        self.as_emv_mac().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
