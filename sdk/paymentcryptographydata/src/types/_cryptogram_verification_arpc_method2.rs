// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters that are required for ARPC response generation using method2 after ARQC verification is successful.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CryptogramVerificationArpcMethod2 {
    /// <p>The data indicating whether the issuer approves or declines an online transaction using an EMV chip card.</p>
    pub card_status_update: ::std::option::Option<::std::string::String>,
    /// <p>The proprietary authentication data used by issuer for communication during online transaction using an EMV chip card.</p>
    pub proprietary_authentication_data: ::std::option::Option<::std::string::String>,
}
impl CryptogramVerificationArpcMethod2 {
    /// <p>The data indicating whether the issuer approves or declines an online transaction using an EMV chip card.</p>
    pub fn card_status_update(&self) -> ::std::option::Option<&str> {
        self.card_status_update.as_deref()
    }
    /// <p>The proprietary authentication data used by issuer for communication during online transaction using an EMV chip card.</p>
    pub fn proprietary_authentication_data(&self) -> ::std::option::Option<&str> {
        self.proprietary_authentication_data.as_deref()
    }
}
impl CryptogramVerificationArpcMethod2 {
    /// Creates a new builder-style object to manufacture [`CryptogramVerificationArpcMethod2`](crate::types::CryptogramVerificationArpcMethod2).
    pub fn builder() -> crate::types::builders::CryptogramVerificationArpcMethod2Builder {
        crate::types::builders::CryptogramVerificationArpcMethod2Builder::default()
    }
}

/// A builder for [`CryptogramVerificationArpcMethod2`](crate::types::CryptogramVerificationArpcMethod2).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CryptogramVerificationArpcMethod2Builder {
    pub(crate) card_status_update: ::std::option::Option<::std::string::String>,
    pub(crate) proprietary_authentication_data: ::std::option::Option<::std::string::String>,
}
impl CryptogramVerificationArpcMethod2Builder {
    /// <p>The data indicating whether the issuer approves or declines an online transaction using an EMV chip card.</p>
    pub fn card_status_update(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.card_status_update = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data indicating whether the issuer approves or declines an online transaction using an EMV chip card.</p>
    pub fn set_card_status_update(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.card_status_update = input;
        self
    }
    /// <p>The data indicating whether the issuer approves or declines an online transaction using an EMV chip card.</p>
    pub fn get_card_status_update(&self) -> &::std::option::Option<::std::string::String> {
        &self.card_status_update
    }
    /// <p>The proprietary authentication data used by issuer for communication during online transaction using an EMV chip card.</p>
    pub fn proprietary_authentication_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.proprietary_authentication_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The proprietary authentication data used by issuer for communication during online transaction using an EMV chip card.</p>
    pub fn set_proprietary_authentication_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.proprietary_authentication_data = input;
        self
    }
    /// <p>The proprietary authentication data used by issuer for communication during online transaction using an EMV chip card.</p>
    pub fn get_proprietary_authentication_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.proprietary_authentication_data
    }
    /// Consumes the builder and constructs a [`CryptogramVerificationArpcMethod2`](crate::types::CryptogramVerificationArpcMethod2).
    pub fn build(self) -> crate::types::CryptogramVerificationArpcMethod2 {
        crate::types::CryptogramVerificationArpcMethod2 {
            card_status_update: self.card_status_update,
            proprietary_authentication_data: self.proprietary_authentication_data,
        }
    }
}
