// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters to derive a session key for Authorization Response Cryptogram (ARQC) verification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum SessionKeyDerivation {
    /// <p>Parameters to derive session key for an Amex payment card for ARQC verification.</p>
    Amex(crate::types::SessionKeyAmex),
    /// <p>Parameters to derive session key for an Emv2000 payment card for ARQC verification.</p>
    Emv2000(crate::types::SessionKeyEmv2000),
    /// <p>Parameters to derive session key for an Emv common payment card for ARQC verification.</p>
    EmvCommon(crate::types::SessionKeyEmvCommon),
    /// <p>Parameters to derive session key for a Mastercard payment card for ARQC verification.</p>
    Mastercard(crate::types::SessionKeyMastercard),
    /// <p>Parameters to derive session key for a Visa payment cardfor ARQC verification.</p>
    Visa(crate::types::SessionKeyVisa),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SessionKeyDerivation {
    /// Tries to convert the enum instance into [`Amex`](crate::types::SessionKeyDerivation::Amex), extracting the inner [`SessionKeyAmex`](crate::types::SessionKeyAmex).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_amex(&self) -> ::std::result::Result<&crate::types::SessionKeyAmex, &Self> {
        if let SessionKeyDerivation::Amex(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Amex`](crate::types::SessionKeyDerivation::Amex).
    pub fn is_amex(&self) -> bool {
        self.as_amex().is_ok()
    }
    /// Tries to convert the enum instance into [`Emv2000`](crate::types::SessionKeyDerivation::Emv2000), extracting the inner [`SessionKeyEmv2000`](crate::types::SessionKeyEmv2000).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_emv2000(&self) -> ::std::result::Result<&crate::types::SessionKeyEmv2000, &Self> {
        if let SessionKeyDerivation::Emv2000(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Emv2000`](crate::types::SessionKeyDerivation::Emv2000).
    pub fn is_emv2000(&self) -> bool {
        self.as_emv2000().is_ok()
    }
    /// Tries to convert the enum instance into [`EmvCommon`](crate::types::SessionKeyDerivation::EmvCommon), extracting the inner [`SessionKeyEmvCommon`](crate::types::SessionKeyEmvCommon).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_emv_common(&self) -> ::std::result::Result<&crate::types::SessionKeyEmvCommon, &Self> {
        if let SessionKeyDerivation::EmvCommon(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EmvCommon`](crate::types::SessionKeyDerivation::EmvCommon).
    pub fn is_emv_common(&self) -> bool {
        self.as_emv_common().is_ok()
    }
    /// Tries to convert the enum instance into [`Mastercard`](crate::types::SessionKeyDerivation::Mastercard), extracting the inner [`SessionKeyMastercard`](crate::types::SessionKeyMastercard).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_mastercard(&self) -> ::std::result::Result<&crate::types::SessionKeyMastercard, &Self> {
        if let SessionKeyDerivation::Mastercard(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Mastercard`](crate::types::SessionKeyDerivation::Mastercard).
    pub fn is_mastercard(&self) -> bool {
        self.as_mastercard().is_ok()
    }
    /// Tries to convert the enum instance into [`Visa`](crate::types::SessionKeyDerivation::Visa), extracting the inner [`SessionKeyVisa`](crate::types::SessionKeyVisa).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_visa(&self) -> ::std::result::Result<&crate::types::SessionKeyVisa, &Self> {
        if let SessionKeyDerivation::Visa(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Visa`](crate::types::SessionKeyDerivation::Visa).
    pub fn is_visa(&self) -> bool {
        self.as_visa().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
