// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters that are required to generate or verify Visa PIN.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VisaPin {
    /// <p>The value for PIN verification index. It is used in the Visa PIN algorithm to calculate the PVV (PIN Verification Value).</p>
    pub pin_verification_key_index: ::std::option::Option<i32>,
}
impl VisaPin {
    /// <p>The value for PIN verification index. It is used in the Visa PIN algorithm to calculate the PVV (PIN Verification Value).</p>
    pub fn pin_verification_key_index(&self) -> ::std::option::Option<i32> {
        self.pin_verification_key_index
    }
}
impl VisaPin {
    /// Creates a new builder-style object to manufacture [`VisaPin`](crate::types::VisaPin).
    pub fn builder() -> crate::types::builders::VisaPinBuilder {
        crate::types::builders::VisaPinBuilder::default()
    }
}

/// A builder for [`VisaPin`](crate::types::VisaPin).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VisaPinBuilder {
    pub(crate) pin_verification_key_index: ::std::option::Option<i32>,
}
impl VisaPinBuilder {
    /// <p>The value for PIN verification index. It is used in the Visa PIN algorithm to calculate the PVV (PIN Verification Value).</p>
    pub fn pin_verification_key_index(mut self, input: i32) -> Self {
        self.pin_verification_key_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value for PIN verification index. It is used in the Visa PIN algorithm to calculate the PVV (PIN Verification Value).</p>
    pub fn set_pin_verification_key_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pin_verification_key_index = input;
        self
    }
    /// <p>The value for PIN verification index. It is used in the Visa PIN algorithm to calculate the PVV (PIN Verification Value).</p>
    pub fn get_pin_verification_key_index(&self) -> &::std::option::Option<i32> {
        &self.pin_verification_key_index
    }
    /// Consumes the builder and constructs a [`VisaPin`](crate::types::VisaPin).
    pub fn build(self) -> crate::types::VisaPin {
        crate::types::VisaPin {
            pin_verification_key_index: self.pin_verification_key_index,
        }
    }
}
