// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters to derive session key for Mastercard payment card for ARQC verification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SessionKeyMastercard {
    /// <p>The Primary Account Number (PAN) of the cardholder. A PAN is a unique identifier for a payment credit or debit card and associates the card to a specific account holder.</p>
    pub primary_account_number: ::std::option::Option<::std::string::String>,
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub pan_sequence_number: ::std::option::Option<::std::string::String>,
    /// <p>The transaction counter that is provided by the terminal during transaction processing.</p>
    pub application_transaction_counter: ::std::option::Option<::std::string::String>,
    /// <p>A random number generated by the issuer.</p>
    pub unpredictable_number: ::std::option::Option<::std::string::String>,
}
impl SessionKeyMastercard {
    /// <p>The Primary Account Number (PAN) of the cardholder. A PAN is a unique identifier for a payment credit or debit card and associates the card to a specific account holder.</p>
    pub fn primary_account_number(&self) -> ::std::option::Option<&str> {
        self.primary_account_number.as_deref()
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn pan_sequence_number(&self) -> ::std::option::Option<&str> {
        self.pan_sequence_number.as_deref()
    }
    /// <p>The transaction counter that is provided by the terminal during transaction processing.</p>
    pub fn application_transaction_counter(&self) -> ::std::option::Option<&str> {
        self.application_transaction_counter.as_deref()
    }
    /// <p>A random number generated by the issuer.</p>
    pub fn unpredictable_number(&self) -> ::std::option::Option<&str> {
        self.unpredictable_number.as_deref()
    }
}
impl ::std::fmt::Debug for SessionKeyMastercard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SessionKeyMastercard");
        formatter.field("primary_account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("pan_sequence_number", &self.pan_sequence_number);
        formatter.field("application_transaction_counter", &self.application_transaction_counter);
        formatter.field("unpredictable_number", &self.unpredictable_number);
        formatter.finish()
    }
}
impl SessionKeyMastercard {
    /// Creates a new builder-style object to manufacture [`SessionKeyMastercard`](crate::types::SessionKeyMastercard).
    pub fn builder() -> crate::types::builders::SessionKeyMastercardBuilder {
        crate::types::builders::SessionKeyMastercardBuilder::default()
    }
}

/// A builder for [`SessionKeyMastercard`](crate::types::SessionKeyMastercard).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SessionKeyMastercardBuilder {
    pub(crate) primary_account_number: ::std::option::Option<::std::string::String>,
    pub(crate) pan_sequence_number: ::std::option::Option<::std::string::String>,
    pub(crate) application_transaction_counter: ::std::option::Option<::std::string::String>,
    pub(crate) unpredictable_number: ::std::option::Option<::std::string::String>,
}
impl SessionKeyMastercardBuilder {
    /// <p>The Primary Account Number (PAN) of the cardholder. A PAN is a unique identifier for a payment credit or debit card and associates the card to a specific account holder.</p>
    pub fn primary_account_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_account_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Primary Account Number (PAN) of the cardholder. A PAN is a unique identifier for a payment credit or debit card and associates the card to a specific account holder.</p>
    pub fn set_primary_account_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_account_number = input;
        self
    }
    /// <p>The Primary Account Number (PAN) of the cardholder. A PAN is a unique identifier for a payment credit or debit card and associates the card to a specific account holder.</p>
    pub fn get_primary_account_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_account_number
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn pan_sequence_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pan_sequence_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn set_pan_sequence_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pan_sequence_number = input;
        self
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn get_pan_sequence_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.pan_sequence_number
    }
    /// <p>The transaction counter that is provided by the terminal during transaction processing.</p>
    pub fn application_transaction_counter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_transaction_counter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The transaction counter that is provided by the terminal during transaction processing.</p>
    pub fn set_application_transaction_counter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_transaction_counter = input;
        self
    }
    /// <p>The transaction counter that is provided by the terminal during transaction processing.</p>
    pub fn get_application_transaction_counter(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_transaction_counter
    }
    /// <p>A random number generated by the issuer.</p>
    pub fn unpredictable_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unpredictable_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A random number generated by the issuer.</p>
    pub fn set_unpredictable_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unpredictable_number = input;
        self
    }
    /// <p>A random number generated by the issuer.</p>
    pub fn get_unpredictable_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.unpredictable_number
    }
    /// Consumes the builder and constructs a [`SessionKeyMastercard`](crate::types::SessionKeyMastercard).
    pub fn build(self) -> crate::types::SessionKeyMastercard {
        crate::types::SessionKeyMastercard {
            primary_account_number: self.primary_account_number,
            pan_sequence_number: self.pan_sequence_number,
            application_transaction_counter: self.application_transaction_counter,
            unpredictable_number: self.unpredictable_number,
        }
    }
}
impl ::std::fmt::Debug for SessionKeyMastercardBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SessionKeyMastercardBuilder");
        formatter.field("primary_account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("pan_sequence_number", &self.pan_sequence_number);
        formatter.field("application_transaction_counter", &self.application_transaction_counter);
        formatter.field("unpredictable_number", &self.unpredictable_number);
        formatter.finish()
    }
}
