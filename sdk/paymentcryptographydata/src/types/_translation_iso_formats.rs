// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters that are required for translation between ISO9564 PIN block formats 0,1,3,4.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum TranslationIsoFormats {
    /// <p>Parameters that are required for ISO9564 PIN format 0 tranlation.</p>
    IsoFormat0(crate::types::TranslationPinDataIsoFormat034),
    /// <p>Parameters that are required for ISO9564 PIN format 1 tranlation.</p>
    IsoFormat1(crate::types::TranslationPinDataIsoFormat1),
    /// <p>Parameters that are required for ISO9564 PIN format 3 tranlation.</p>
    IsoFormat3(crate::types::TranslationPinDataIsoFormat034),
    /// <p>Parameters that are required for ISO9564 PIN format 4 tranlation.</p>
    IsoFormat4(crate::types::TranslationPinDataIsoFormat034),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl TranslationIsoFormats {
    /// Tries to convert the enum instance into [`IsoFormat0`](crate::types::TranslationIsoFormats::IsoFormat0), extracting the inner [`TranslationPinDataIsoFormat034`](crate::types::TranslationPinDataIsoFormat034).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_iso_format0(&self) -> ::std::result::Result<&crate::types::TranslationPinDataIsoFormat034, &Self> {
        if let TranslationIsoFormats::IsoFormat0(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IsoFormat0`](crate::types::TranslationIsoFormats::IsoFormat0).
    pub fn is_iso_format0(&self) -> bool {
        self.as_iso_format0().is_ok()
    }
    /// Tries to convert the enum instance into [`IsoFormat1`](crate::types::TranslationIsoFormats::IsoFormat1), extracting the inner [`TranslationPinDataIsoFormat1`](crate::types::TranslationPinDataIsoFormat1).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_iso_format1(&self) -> ::std::result::Result<&crate::types::TranslationPinDataIsoFormat1, &Self> {
        if let TranslationIsoFormats::IsoFormat1(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IsoFormat1`](crate::types::TranslationIsoFormats::IsoFormat1).
    pub fn is_iso_format1(&self) -> bool {
        self.as_iso_format1().is_ok()
    }
    /// Tries to convert the enum instance into [`IsoFormat3`](crate::types::TranslationIsoFormats::IsoFormat3), extracting the inner [`TranslationPinDataIsoFormat034`](crate::types::TranslationPinDataIsoFormat034).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_iso_format3(&self) -> ::std::result::Result<&crate::types::TranslationPinDataIsoFormat034, &Self> {
        if let TranslationIsoFormats::IsoFormat3(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IsoFormat3`](crate::types::TranslationIsoFormats::IsoFormat3).
    pub fn is_iso_format3(&self) -> bool {
        self.as_iso_format3().is_ok()
    }
    /// Tries to convert the enum instance into [`IsoFormat4`](crate::types::TranslationIsoFormats::IsoFormat4), extracting the inner [`TranslationPinDataIsoFormat034`](crate::types::TranslationPinDataIsoFormat034).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_iso_format4(&self) -> ::std::result::Result<&crate::types::TranslationPinDataIsoFormat034, &Self> {
        if let TranslationIsoFormats::IsoFormat4(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IsoFormat4`](crate::types::TranslationIsoFormats::IsoFormat4).
    pub fn is_iso_format4(&self) -> bool {
        self.as_iso_format4().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
