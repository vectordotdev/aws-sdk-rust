// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters that are required to generate or verify Dynamic Card Verification Value (dCVV).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DynamicCardVerificationValue {
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub pan_sequence_number: ::std::option::Option<::std::string::String>,
    /// <p>The expiry date of a payment card.</p>
    pub card_expiry_date: ::std::option::Option<::std::string::String>,
    /// <p>The service code of the payment card. This is different from Card Security Code (CSC).</p>
    pub service_code: ::std::option::Option<::std::string::String>,
    /// <p>The transaction counter value that comes from the terminal.</p>
    pub application_transaction_counter: ::std::option::Option<::std::string::String>,
}
impl DynamicCardVerificationValue {
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn pan_sequence_number(&self) -> ::std::option::Option<&str> {
        self.pan_sequence_number.as_deref()
    }
    /// <p>The expiry date of a payment card.</p>
    pub fn card_expiry_date(&self) -> ::std::option::Option<&str> {
        self.card_expiry_date.as_deref()
    }
    /// <p>The service code of the payment card. This is different from Card Security Code (CSC).</p>
    pub fn service_code(&self) -> ::std::option::Option<&str> {
        self.service_code.as_deref()
    }
    /// <p>The transaction counter value that comes from the terminal.</p>
    pub fn application_transaction_counter(&self) -> ::std::option::Option<&str> {
        self.application_transaction_counter.as_deref()
    }
}
impl DynamicCardVerificationValue {
    /// Creates a new builder-style object to manufacture [`DynamicCardVerificationValue`](crate::types::DynamicCardVerificationValue).
    pub fn builder() -> crate::types::builders::DynamicCardVerificationValueBuilder {
        crate::types::builders::DynamicCardVerificationValueBuilder::default()
    }
}

/// A builder for [`DynamicCardVerificationValue`](crate::types::DynamicCardVerificationValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DynamicCardVerificationValueBuilder {
    pub(crate) pan_sequence_number: ::std::option::Option<::std::string::String>,
    pub(crate) card_expiry_date: ::std::option::Option<::std::string::String>,
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) application_transaction_counter: ::std::option::Option<::std::string::String>,
}
impl DynamicCardVerificationValueBuilder {
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn pan_sequence_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pan_sequence_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn set_pan_sequence_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pan_sequence_number = input;
        self
    }
    /// <p>A number that identifies and differentiates payment cards with the same Primary Account Number (PAN).</p>
    pub fn get_pan_sequence_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.pan_sequence_number
    }
    /// <p>The expiry date of a payment card.</p>
    pub fn card_expiry_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.card_expiry_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expiry date of a payment card.</p>
    pub fn set_card_expiry_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.card_expiry_date = input;
        self
    }
    /// <p>The expiry date of a payment card.</p>
    pub fn get_card_expiry_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.card_expiry_date
    }
    /// <p>The service code of the payment card. This is different from Card Security Code (CSC).</p>
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service code of the payment card. This is different from Card Security Code (CSC).</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The service code of the payment card. This is different from Card Security Code (CSC).</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    /// <p>The transaction counter value that comes from the terminal.</p>
    pub fn application_transaction_counter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_transaction_counter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The transaction counter value that comes from the terminal.</p>
    pub fn set_application_transaction_counter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_transaction_counter = input;
        self
    }
    /// <p>The transaction counter value that comes from the terminal.</p>
    pub fn get_application_transaction_counter(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_transaction_counter
    }
    /// Consumes the builder and constructs a [`DynamicCardVerificationValue`](crate::types::DynamicCardVerificationValue).
    pub fn build(self) -> crate::types::DynamicCardVerificationValue {
        crate::types::DynamicCardVerificationValue {
            pan_sequence_number: self.pan_sequence_number,
            card_expiry_date: self.card_expiry_date,
            service_code: self.service_code,
            application_transaction_counter: self.application_transaction_counter,
        }
    }
}
