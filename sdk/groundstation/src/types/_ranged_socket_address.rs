// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A socket address with a port range.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RangedSocketAddress {
    /// <p>IPv4 socket address.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Port range of a socket address.</p>
    pub port_range: ::std::option::Option<crate::types::IntegerRange>,
}
impl RangedSocketAddress {
    /// <p>IPv4 socket address.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Port range of a socket address.</p>
    pub fn port_range(&self) -> ::std::option::Option<&crate::types::IntegerRange> {
        self.port_range.as_ref()
    }
}
impl RangedSocketAddress {
    /// Creates a new builder-style object to manufacture [`RangedSocketAddress`](crate::types::RangedSocketAddress).
    pub fn builder() -> crate::types::builders::RangedSocketAddressBuilder {
        crate::types::builders::RangedSocketAddressBuilder::default()
    }
}

/// A builder for [`RangedSocketAddress`](crate::types::RangedSocketAddress).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RangedSocketAddressBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) port_range: ::std::option::Option<crate::types::IntegerRange>,
}
impl RangedSocketAddressBuilder {
    /// <p>IPv4 socket address.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>IPv4 socket address.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>IPv4 socket address.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Port range of a socket address.</p>
    pub fn port_range(mut self, input: crate::types::IntegerRange) -> Self {
        self.port_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>Port range of a socket address.</p>
    pub fn set_port_range(mut self, input: ::std::option::Option<crate::types::IntegerRange>) -> Self {
        self.port_range = input;
        self
    }
    /// <p>Port range of a socket address.</p>
    pub fn get_port_range(&self) -> &::std::option::Option<crate::types::IntegerRange> {
        &self.port_range
    }
    /// Consumes the builder and constructs a [`RangedSocketAddress`](crate::types::RangedSocketAddress).
    pub fn build(self) -> crate::types::RangedSocketAddress {
        crate::types::RangedSocketAddress {
            name: self.name,
            port_range: self.port_range,
        }
    }
}
