// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an S3 recording <code>Config</code> used in a contact.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3RecordingDetails {
    /// <p>ARN of the bucket used.</p>
    pub bucket_arn: ::std::option::Option<::std::string::String>,
    /// <p>Key template used for the S3 Recording Configuration</p>
    pub key_template: ::std::option::Option<::std::string::String>,
}
impl S3RecordingDetails {
    /// <p>ARN of the bucket used.</p>
    pub fn bucket_arn(&self) -> ::std::option::Option<&str> {
        self.bucket_arn.as_deref()
    }
    /// <p>Key template used for the S3 Recording Configuration</p>
    pub fn key_template(&self) -> ::std::option::Option<&str> {
        self.key_template.as_deref()
    }
}
impl S3RecordingDetails {
    /// Creates a new builder-style object to manufacture [`S3RecordingDetails`](crate::types::S3RecordingDetails).
    pub fn builder() -> crate::types::builders::S3RecordingDetailsBuilder {
        crate::types::builders::S3RecordingDetailsBuilder::default()
    }
}

/// A builder for [`S3RecordingDetails`](crate::types::S3RecordingDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3RecordingDetailsBuilder {
    pub(crate) bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) key_template: ::std::option::Option<::std::string::String>,
}
impl S3RecordingDetailsBuilder {
    /// <p>ARN of the bucket used.</p>
    pub fn bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the bucket used.</p>
    pub fn set_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_arn = input;
        self
    }
    /// <p>ARN of the bucket used.</p>
    pub fn get_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_arn
    }
    /// <p>Key template used for the S3 Recording Configuration</p>
    pub fn key_template(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_template = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Key template used for the S3 Recording Configuration</p>
    pub fn set_key_template(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_template = input;
        self
    }
    /// <p>Key template used for the S3 Recording Configuration</p>
    pub fn get_key_template(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_template
    }
    /// Consumes the builder and constructs a [`S3RecordingDetails`](crate::types::S3RecordingDetails).
    pub fn build(self) -> crate::types::S3RecordingDetails {
        crate::types::S3RecordingDetails {
            bucket_arn: self.bucket_arn,
            key_template: self.key_template,
        }
    }
}
