// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes product information filters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProductInformationFilter {
    /// <p>Filter name.</p>
    pub product_information_filter_name: ::std::option::Option<::std::string::String>,
    /// <p>Filter value.</p>
    pub product_information_filter_value: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Logical operator.</p>
    pub product_information_filter_comparator: ::std::option::Option<::std::string::String>,
}
impl ProductInformationFilter {
    /// <p>Filter name.</p>
    pub fn product_information_filter_name(&self) -> ::std::option::Option<&str> {
        self.product_information_filter_name.as_deref()
    }
    /// <p>Filter value.</p>
    pub fn product_information_filter_value(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.product_information_filter_value.as_deref()
    }
    /// <p>Logical operator.</p>
    pub fn product_information_filter_comparator(&self) -> ::std::option::Option<&str> {
        self.product_information_filter_comparator.as_deref()
    }
}
impl ProductInformationFilter {
    /// Creates a new builder-style object to manufacture [`ProductInformationFilter`](crate::types::ProductInformationFilter).
    pub fn builder() -> crate::types::builders::ProductInformationFilterBuilder {
        crate::types::builders::ProductInformationFilterBuilder::default()
    }
}

/// A builder for [`ProductInformationFilter`](crate::types::ProductInformationFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProductInformationFilterBuilder {
    pub(crate) product_information_filter_name: ::std::option::Option<::std::string::String>,
    pub(crate) product_information_filter_value: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) product_information_filter_comparator: ::std::option::Option<::std::string::String>,
}
impl ProductInformationFilterBuilder {
    /// <p>Filter name.</p>
    pub fn product_information_filter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_information_filter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter name.</p>
    pub fn set_product_information_filter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_information_filter_name = input;
        self
    }
    /// <p>Filter name.</p>
    pub fn get_product_information_filter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_information_filter_name
    }
    /// Appends an item to `product_information_filter_value`.
    ///
    /// To override the contents of this collection use [`set_product_information_filter_value`](Self::set_product_information_filter_value).
    ///
    /// <p>Filter value.</p>
    pub fn product_information_filter_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.product_information_filter_value.unwrap_or_default();
        v.push(input.into());
        self.product_information_filter_value = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filter value.</p>
    pub fn set_product_information_filter_value(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.product_information_filter_value = input;
        self
    }
    /// <p>Filter value.</p>
    pub fn get_product_information_filter_value(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.product_information_filter_value
    }
    /// <p>Logical operator.</p>
    pub fn product_information_filter_comparator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_information_filter_comparator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Logical operator.</p>
    pub fn set_product_information_filter_comparator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_information_filter_comparator = input;
        self
    }
    /// <p>Logical operator.</p>
    pub fn get_product_information_filter_comparator(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_information_filter_comparator
    }
    /// Consumes the builder and constructs a [`ProductInformationFilter`](crate::types::ProductInformationFilter).
    pub fn build(self) -> crate::types::ProductInformationFilter {
        crate::types::ProductInformationFilter {
            product_information_filter_name: self.product_information_filter_name,
            product_information_filter_value: self.product_information_filter_value,
            product_information_filter_comparator: self.product_information_filter_comparator,
        }
    }
}
