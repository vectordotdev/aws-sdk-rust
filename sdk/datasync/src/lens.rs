// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_storage_system_resource_metrics_output_next_token(
    input: &crate::operation::describe_storage_system_resource_metrics::DescribeStorageSystemResourceMetricsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_storage_system_resources_output_next_token(
    input: &crate::operation::describe_storage_system_resources::DescribeStorageSystemResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_agents_output_next_token(
    input: &crate::operation::list_agents::ListAgentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_discovery_jobs_output_next_token(
    input: &crate::operation::list_discovery_jobs::ListDiscoveryJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_locations_output_next_token(
    input: &crate::operation::list_locations::ListLocationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_storage_systems_output_next_token(
    input: &crate::operation::list_storage_systems::ListStorageSystemsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_next_token(
    input: &crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_task_executions_output_next_token(
    input: &crate::operation::list_task_executions::ListTaskExecutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tasks_output_next_token(
    input: &crate::operation::list_tasks::ListTasksOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_storage_system_resource_metrics_output_metrics(
    input: crate::operation::describe_storage_system_resource_metrics::DescribeStorageSystemResourceMetricsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ResourceMetrics>> {
    let input = match input.metrics {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agents_output_agents(
    input: crate::operation::list_agents::ListAgentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AgentListEntry>> {
    let input = match input.agents {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_discovery_jobs_output_discovery_jobs(
    input: crate::operation::list_discovery_jobs::ListDiscoveryJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DiscoveryJobListEntry>> {
    let input = match input.discovery_jobs {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_locations_output_locations(
    input: crate::operation::list_locations::ListLocationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LocationListEntry>> {
    let input = match input.locations {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_storage_systems_output_storage_systems(
    input: crate::operation::list_storage_systems::ListStorageSystemsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::StorageSystemListEntry>> {
    let input = match input.storage_systems {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tags_for_resource_output_tags(
    input: crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>> {
    let input = match input.tags {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_task_executions_output_task_executions(
    input: crate::operation::list_task_executions::ListTaskExecutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TaskExecutionListEntry>> {
    let input = match input.task_executions {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tasks_output_tasks(
    input: crate::operation::list_tasks::ListTasksOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TaskListEntry>> {
    let input = match input.tasks {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
