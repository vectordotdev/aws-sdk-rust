// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The storage capacity of an on-premises storage system resource (for example, a volume).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Capacity {
    /// <p>The amount of space that's being used in a storage system resource.</p>
    pub used: ::std::option::Option<i64>,
    /// <p>The total amount of space available in a storage system resource.</p>
    pub provisioned: ::std::option::Option<i64>,
    /// <p>The amount of space that's being used in a storage system resource without accounting for compression or deduplication.</p>
    pub logical_used: ::std::option::Option<i64>,
}
impl Capacity {
    /// <p>The amount of space that's being used in a storage system resource.</p>
    pub fn used(&self) -> ::std::option::Option<i64> {
        self.used
    }
    /// <p>The total amount of space available in a storage system resource.</p>
    pub fn provisioned(&self) -> ::std::option::Option<i64> {
        self.provisioned
    }
    /// <p>The amount of space that's being used in a storage system resource without accounting for compression or deduplication.</p>
    pub fn logical_used(&self) -> ::std::option::Option<i64> {
        self.logical_used
    }
}
impl Capacity {
    /// Creates a new builder-style object to manufacture [`Capacity`](crate::types::Capacity).
    pub fn builder() -> crate::types::builders::CapacityBuilder {
        crate::types::builders::CapacityBuilder::default()
    }
}

/// A builder for [`Capacity`](crate::types::Capacity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CapacityBuilder {
    pub(crate) used: ::std::option::Option<i64>,
    pub(crate) provisioned: ::std::option::Option<i64>,
    pub(crate) logical_used: ::std::option::Option<i64>,
}
impl CapacityBuilder {
    /// <p>The amount of space that's being used in a storage system resource.</p>
    pub fn used(mut self, input: i64) -> Self {
        self.used = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of space that's being used in a storage system resource.</p>
    pub fn set_used(mut self, input: ::std::option::Option<i64>) -> Self {
        self.used = input;
        self
    }
    /// <p>The amount of space that's being used in a storage system resource.</p>
    pub fn get_used(&self) -> &::std::option::Option<i64> {
        &self.used
    }
    /// <p>The total amount of space available in a storage system resource.</p>
    pub fn provisioned(mut self, input: i64) -> Self {
        self.provisioned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total amount of space available in a storage system resource.</p>
    pub fn set_provisioned(mut self, input: ::std::option::Option<i64>) -> Self {
        self.provisioned = input;
        self
    }
    /// <p>The total amount of space available in a storage system resource.</p>
    pub fn get_provisioned(&self) -> &::std::option::Option<i64> {
        &self.provisioned
    }
    /// <p>The amount of space that's being used in a storage system resource without accounting for compression or deduplication.</p>
    pub fn logical_used(mut self, input: i64) -> Self {
        self.logical_used = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of space that's being used in a storage system resource without accounting for compression or deduplication.</p>
    pub fn set_logical_used(mut self, input: ::std::option::Option<i64>) -> Self {
        self.logical_used = input;
        self
    }
    /// <p>The amount of space that's being used in a storage system resource without accounting for compression or deduplication.</p>
    pub fn get_logical_used(&self) -> &::std::option::Option<i64> {
        &self.logical_used
    }
    /// Consumes the builder and constructs a [`Capacity`](crate::types::Capacity).
    pub fn build(self) -> crate::types::Capacity {
        crate::types::Capacity {
            used: self.used,
            provisioned: self.provisioned,
            logical_used: self.logical_used,
        }
    }
}
