// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetKxDatabaseOutput {
    /// <p>The name of the kdb database for which the information is retrieved.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN identifier of the database.</p>
    pub database_arn: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the kdb environment.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>A description of the database.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the database is created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time that the database was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A unique identifier for the changeset.</p>
    pub last_completed_changeset_id: ::std::option::Option<::std::string::String>,
    /// <p>The total number of bytes in the database.</p>
    pub num_bytes: i64,
    /// <p>The total number of changesets in the database.</p>
    pub num_changesets: i32,
    /// <p>The total number of files in the database.</p>
    pub num_files: i32,
    _request_id: Option<String>,
}
impl GetKxDatabaseOutput {
    /// <p>The name of the kdb database for which the information is retrieved.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The ARN identifier of the database.</p>
    pub fn database_arn(&self) -> ::std::option::Option<&str> {
        self.database_arn.as_deref()
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>A description of the database.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timestamp at which the database is created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The last time that the database was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_timestamp.as_ref()
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn last_completed_changeset_id(&self) -> ::std::option::Option<&str> {
        self.last_completed_changeset_id.as_deref()
    }
    /// <p>The total number of bytes in the database.</p>
    pub fn num_bytes(&self) -> i64 {
        self.num_bytes
    }
    /// <p>The total number of changesets in the database.</p>
    pub fn num_changesets(&self) -> i32 {
        self.num_changesets
    }
    /// <p>The total number of files in the database.</p>
    pub fn num_files(&self) -> i32 {
        self.num_files
    }
}
impl ::aws_http::request_id::RequestId for GetKxDatabaseOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetKxDatabaseOutput {
    /// Creates a new builder-style object to manufacture [`GetKxDatabaseOutput`](crate::operation::get_kx_database::GetKxDatabaseOutput).
    pub fn builder() -> crate::operation::get_kx_database::builders::GetKxDatabaseOutputBuilder {
        crate::operation::get_kx_database::builders::GetKxDatabaseOutputBuilder::default()
    }
}

/// A builder for [`GetKxDatabaseOutput`](crate::operation::get_kx_database::GetKxDatabaseOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetKxDatabaseOutputBuilder {
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) database_arn: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_completed_changeset_id: ::std::option::Option<::std::string::String>,
    pub(crate) num_bytes: ::std::option::Option<i64>,
    pub(crate) num_changesets: ::std::option::Option<i32>,
    pub(crate) num_files: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl GetKxDatabaseOutputBuilder {
    /// <p>The name of the kdb database for which the information is retrieved.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the kdb database for which the information is retrieved.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the kdb database for which the information is retrieved.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The ARN identifier of the database.</p>
    pub fn database_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN identifier of the database.</p>
    pub fn set_database_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_arn = input;
        self
    }
    /// <p>The ARN identifier of the database.</p>
    pub fn get_database_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_arn
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>A description of the database.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the database.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the database.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The timestamp at which the database is created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the database is created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp at which the database is created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The last time that the database was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the database was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_last_modified_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_timestamp = input;
        self
    }
    /// <p>The last time that the database was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_last_modified_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_timestamp
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn last_completed_changeset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_completed_changeset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn set_last_completed_changeset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_completed_changeset_id = input;
        self
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn get_last_completed_changeset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_completed_changeset_id
    }
    /// <p>The total number of bytes in the database.</p>
    pub fn num_bytes(mut self, input: i64) -> Self {
        self.num_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of bytes in the database.</p>
    pub fn set_num_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.num_bytes = input;
        self
    }
    /// <p>The total number of bytes in the database.</p>
    pub fn get_num_bytes(&self) -> &::std::option::Option<i64> {
        &self.num_bytes
    }
    /// <p>The total number of changesets in the database.</p>
    pub fn num_changesets(mut self, input: i32) -> Self {
        self.num_changesets = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of changesets in the database.</p>
    pub fn set_num_changesets(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_changesets = input;
        self
    }
    /// <p>The total number of changesets in the database.</p>
    pub fn get_num_changesets(&self) -> &::std::option::Option<i32> {
        &self.num_changesets
    }
    /// <p>The total number of files in the database.</p>
    pub fn num_files(mut self, input: i32) -> Self {
        self.num_files = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of files in the database.</p>
    pub fn set_num_files(mut self, input: ::std::option::Option<i32>) -> Self {
        self.num_files = input;
        self
    }
    /// <p>The total number of files in the database.</p>
    pub fn get_num_files(&self) -> &::std::option::Option<i32> {
        &self.num_files
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetKxDatabaseOutput`](crate::operation::get_kx_database::GetKxDatabaseOutput).
    pub fn build(self) -> crate::operation::get_kx_database::GetKxDatabaseOutput {
        crate::operation::get_kx_database::GetKxDatabaseOutput {
            database_name: self.database_name,
            database_arn: self.database_arn,
            environment_id: self.environment_id,
            description: self.description,
            created_timestamp: self.created_timestamp,
            last_modified_timestamp: self.last_modified_timestamp,
            last_completed_changeset_id: self.last_completed_changeset_id,
            num_bytes: self.num_bytes.unwrap_or_default(),
            num_changesets: self.num_changesets.unwrap_or_default(),
            num_files: self.num_files.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
