// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetKxConnectionStringOutput {
    /// <p>The signed connection string that you can use to connect to clusters.</p>
    pub signed_connection_string: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetKxConnectionStringOutput {
    /// <p>The signed connection string that you can use to connect to clusters.</p>
    pub fn signed_connection_string(&self) -> ::std::option::Option<&str> {
        self.signed_connection_string.as_deref()
    }
}
impl ::std::fmt::Debug for GetKxConnectionStringOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetKxConnectionStringOutput");
        formatter.field("signed_connection_string", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetKxConnectionStringOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetKxConnectionStringOutput {
    /// Creates a new builder-style object to manufacture [`GetKxConnectionStringOutput`](crate::operation::get_kx_connection_string::GetKxConnectionStringOutput).
    pub fn builder() -> crate::operation::get_kx_connection_string::builders::GetKxConnectionStringOutputBuilder {
        crate::operation::get_kx_connection_string::builders::GetKxConnectionStringOutputBuilder::default()
    }
}

/// A builder for [`GetKxConnectionStringOutput`](crate::operation::get_kx_connection_string::GetKxConnectionStringOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetKxConnectionStringOutputBuilder {
    pub(crate) signed_connection_string: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetKxConnectionStringOutputBuilder {
    /// <p>The signed connection string that you can use to connect to clusters.</p>
    pub fn signed_connection_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.signed_connection_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The signed connection string that you can use to connect to clusters.</p>
    pub fn set_signed_connection_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.signed_connection_string = input;
        self
    }
    /// <p>The signed connection string that you can use to connect to clusters.</p>
    pub fn get_signed_connection_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.signed_connection_string
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetKxConnectionStringOutput`](crate::operation::get_kx_connection_string::GetKxConnectionStringOutput).
    pub fn build(self) -> crate::operation::get_kx_connection_string::GetKxConnectionStringOutput {
        crate::operation::get_kx_connection_string::GetKxConnectionStringOutput {
            signed_connection_string: self.signed_connection_string,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetKxConnectionStringOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetKxConnectionStringOutputBuilder");
        formatter.field("signed_connection_string", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
