// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure of the transit gateway and network configuration that is used to connect the kdb environment to an internal network.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransitGatewayConfiguration {
    /// <p>The identifier of the transit gateway created by the customer to connect outbound traffics from kdb network to your internal network.</p>
    pub transit_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The routing CIDR on behalf of kdb environment. It could be any "/26 range in the 100.64.0.0 CIDR space. After providing, it will be added to the customer's transit gateway routing table so that the traffics could be routed to kdb network.</p>
    pub routable_cidr_space: ::std::option::Option<::std::string::String>,
}
impl TransitGatewayConfiguration {
    /// <p>The identifier of the transit gateway created by the customer to connect outbound traffics from kdb network to your internal network.</p>
    pub fn transit_gateway_id(&self) -> ::std::option::Option<&str> {
        self.transit_gateway_id.as_deref()
    }
    /// <p>The routing CIDR on behalf of kdb environment. It could be any "/26 range in the 100.64.0.0 CIDR space. After providing, it will be added to the customer's transit gateway routing table so that the traffics could be routed to kdb network.</p>
    pub fn routable_cidr_space(&self) -> ::std::option::Option<&str> {
        self.routable_cidr_space.as_deref()
    }
}
impl TransitGatewayConfiguration {
    /// Creates a new builder-style object to manufacture [`TransitGatewayConfiguration`](crate::types::TransitGatewayConfiguration).
    pub fn builder() -> crate::types::builders::TransitGatewayConfigurationBuilder {
        crate::types::builders::TransitGatewayConfigurationBuilder::default()
    }
}

/// A builder for [`TransitGatewayConfiguration`](crate::types::TransitGatewayConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TransitGatewayConfigurationBuilder {
    pub(crate) transit_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) routable_cidr_space: ::std::option::Option<::std::string::String>,
}
impl TransitGatewayConfigurationBuilder {
    /// <p>The identifier of the transit gateway created by the customer to connect outbound traffics from kdb network to your internal network.</p>
    pub fn transit_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transit_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the transit gateway created by the customer to connect outbound traffics from kdb network to your internal network.</p>
    pub fn set_transit_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transit_gateway_id = input;
        self
    }
    /// <p>The identifier of the transit gateway created by the customer to connect outbound traffics from kdb network to your internal network.</p>
    pub fn get_transit_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transit_gateway_id
    }
    /// <p>The routing CIDR on behalf of kdb environment. It could be any "/26 range in the 100.64.0.0 CIDR space. After providing, it will be added to the customer's transit gateway routing table so that the traffics could be routed to kdb network.</p>
    pub fn routable_cidr_space(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.routable_cidr_space = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The routing CIDR on behalf of kdb environment. It could be any "/26 range in the 100.64.0.0 CIDR space. After providing, it will be added to the customer's transit gateway routing table so that the traffics could be routed to kdb network.</p>
    pub fn set_routable_cidr_space(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.routable_cidr_space = input;
        self
    }
    /// <p>The routing CIDR on behalf of kdb environment. It could be any "/26 range in the 100.64.0.0 CIDR space. After providing, it will be added to the customer's transit gateway routing table so that the traffics could be routed to kdb network.</p>
    pub fn get_routable_cidr_space(&self) -> &::std::option::Option<::std::string::String> {
        &self.routable_cidr_space
    }
    /// Consumes the builder and constructs a [`TransitGatewayConfiguration`](crate::types::TransitGatewayConfiguration).
    pub fn build(self) -> crate::types::TransitGatewayConfiguration {
        crate::types::TransitGatewayConfiguration {
            transit_gateway_id: self.transit_gateway_id,
            routable_cidr_space: self.routable_cidr_space,
        }
    }
}
