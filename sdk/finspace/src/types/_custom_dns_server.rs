// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of DNS server name and server IP. This is used to set up Route-53 outbound resolvers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomDnsServer {
    /// <p>The name of the DNS server.</p>
    pub custom_dns_server_name: ::std::option::Option<::std::string::String>,
    /// <p>The IP address of the DNS server.</p>
    pub custom_dns_server_ip: ::std::option::Option<::std::string::String>,
}
impl CustomDnsServer {
    /// <p>The name of the DNS server.</p>
    pub fn custom_dns_server_name(&self) -> ::std::option::Option<&str> {
        self.custom_dns_server_name.as_deref()
    }
    /// <p>The IP address of the DNS server.</p>
    pub fn custom_dns_server_ip(&self) -> ::std::option::Option<&str> {
        self.custom_dns_server_ip.as_deref()
    }
}
impl CustomDnsServer {
    /// Creates a new builder-style object to manufacture [`CustomDnsServer`](crate::types::CustomDnsServer).
    pub fn builder() -> crate::types::builders::CustomDnsServerBuilder {
        crate::types::builders::CustomDnsServerBuilder::default()
    }
}

/// A builder for [`CustomDnsServer`](crate::types::CustomDnsServer).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomDnsServerBuilder {
    pub(crate) custom_dns_server_name: ::std::option::Option<::std::string::String>,
    pub(crate) custom_dns_server_ip: ::std::option::Option<::std::string::String>,
}
impl CustomDnsServerBuilder {
    /// <p>The name of the DNS server.</p>
    pub fn custom_dns_server_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_dns_server_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the DNS server.</p>
    pub fn set_custom_dns_server_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_dns_server_name = input;
        self
    }
    /// <p>The name of the DNS server.</p>
    pub fn get_custom_dns_server_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_dns_server_name
    }
    /// <p>The IP address of the DNS server.</p>
    pub fn custom_dns_server_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_dns_server_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the DNS server.</p>
    pub fn set_custom_dns_server_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_dns_server_ip = input;
        self
    }
    /// <p>The IP address of the DNS server.</p>
    pub fn get_custom_dns_server_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_dns_server_ip
    }
    /// Consumes the builder and constructs a [`CustomDnsServer`](crate::types::CustomDnsServer).
    pub fn build(self) -> crate::types::CustomDnsServer {
        crate::types::CustomDnsServer {
            custom_dns_server_name: self.custom_dns_server_name,
            custom_dns_server_ip: self.custom_dns_server_ip,
        }
    }
}
