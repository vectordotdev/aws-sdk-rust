// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of change request objects.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChangeRequest {
    /// <p>Defines the type of change request. A <code>changeType</code> can have the following values:</p>
    /// <ul>
    /// <li> <p>PUT – Adds or updates files in a database.</p> </li>
    /// <li> <p>DELETE – Deletes files in a database.</p> </li>
    /// </ul>
    pub change_type: ::std::option::Option<crate::types::ChangeType>,
    /// <p>Defines the S3 path of the source file that is required to add or update files in a database.</p>
    pub s3_path: ::std::option::Option<::std::string::String>,
    /// <p>Defines the path within the database directory. </p>
    pub db_path: ::std::option::Option<::std::string::String>,
}
impl ChangeRequest {
    /// <p>Defines the type of change request. A <code>changeType</code> can have the following values:</p>
    /// <ul>
    /// <li> <p>PUT – Adds or updates files in a database.</p> </li>
    /// <li> <p>DELETE – Deletes files in a database.</p> </li>
    /// </ul>
    pub fn change_type(&self) -> ::std::option::Option<&crate::types::ChangeType> {
        self.change_type.as_ref()
    }
    /// <p>Defines the S3 path of the source file that is required to add or update files in a database.</p>
    pub fn s3_path(&self) -> ::std::option::Option<&str> {
        self.s3_path.as_deref()
    }
    /// <p>Defines the path within the database directory. </p>
    pub fn db_path(&self) -> ::std::option::Option<&str> {
        self.db_path.as_deref()
    }
}
impl ChangeRequest {
    /// Creates a new builder-style object to manufacture [`ChangeRequest`](crate::types::ChangeRequest).
    pub fn builder() -> crate::types::builders::ChangeRequestBuilder {
        crate::types::builders::ChangeRequestBuilder::default()
    }
}

/// A builder for [`ChangeRequest`](crate::types::ChangeRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChangeRequestBuilder {
    pub(crate) change_type: ::std::option::Option<crate::types::ChangeType>,
    pub(crate) s3_path: ::std::option::Option<::std::string::String>,
    pub(crate) db_path: ::std::option::Option<::std::string::String>,
}
impl ChangeRequestBuilder {
    /// <p>Defines the type of change request. A <code>changeType</code> can have the following values:</p>
    /// <ul>
    /// <li> <p>PUT – Adds or updates files in a database.</p> </li>
    /// <li> <p>DELETE – Deletes files in a database.</p> </li>
    /// </ul>
    pub fn change_type(mut self, input: crate::types::ChangeType) -> Self {
        self.change_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the type of change request. A <code>changeType</code> can have the following values:</p>
    /// <ul>
    /// <li> <p>PUT – Adds or updates files in a database.</p> </li>
    /// <li> <p>DELETE – Deletes files in a database.</p> </li>
    /// </ul>
    pub fn set_change_type(mut self, input: ::std::option::Option<crate::types::ChangeType>) -> Self {
        self.change_type = input;
        self
    }
    /// <p>Defines the type of change request. A <code>changeType</code> can have the following values:</p>
    /// <ul>
    /// <li> <p>PUT – Adds or updates files in a database.</p> </li>
    /// <li> <p>DELETE – Deletes files in a database.</p> </li>
    /// </ul>
    pub fn get_change_type(&self) -> &::std::option::Option<crate::types::ChangeType> {
        &self.change_type
    }
    /// <p>Defines the S3 path of the source file that is required to add or update files in a database.</p>
    pub fn s3_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the S3 path of the source file that is required to add or update files in a database.</p>
    pub fn set_s3_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_path = input;
        self
    }
    /// <p>Defines the S3 path of the source file that is required to add or update files in a database.</p>
    pub fn get_s3_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_path
    }
    /// <p>Defines the path within the database directory. </p>
    pub fn db_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines the path within the database directory. </p>
    pub fn set_db_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_path = input;
        self
    }
    /// <p>Defines the path within the database directory. </p>
    pub fn get_db_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_path
    }
    /// Consumes the builder and constructs a [`ChangeRequest`](crate::types::ChangeRequest).
    pub fn build(self) -> crate::types::ChangeRequest {
        crate::types::ChangeRequest {
            change_type: self.change_type,
            s3_path: self.s3_path,
            db_path: self.db_path,
        }
    }
}
