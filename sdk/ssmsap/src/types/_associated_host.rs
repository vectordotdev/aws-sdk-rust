// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the properties of the associated host.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociatedHost {
    /// <p>The name of the host.</p>
    pub hostname: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon EC2 instance.</p>
    pub ec2_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the operating system.</p>
    pub os_version: ::std::option::Option<::std::string::String>,
}
impl AssociatedHost {
    /// <p>The name of the host.</p>
    pub fn hostname(&self) -> ::std::option::Option<&str> {
        self.hostname.as_deref()
    }
    /// <p>The ID of the Amazon EC2 instance.</p>
    pub fn ec2_instance_id(&self) -> ::std::option::Option<&str> {
        self.ec2_instance_id.as_deref()
    }
    /// <p>The version of the operating system.</p>
    pub fn os_version(&self) -> ::std::option::Option<&str> {
        self.os_version.as_deref()
    }
}
impl AssociatedHost {
    /// Creates a new builder-style object to manufacture [`AssociatedHost`](crate::types::AssociatedHost).
    pub fn builder() -> crate::types::builders::AssociatedHostBuilder {
        crate::types::builders::AssociatedHostBuilder::default()
    }
}

/// A builder for [`AssociatedHost`](crate::types::AssociatedHost).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociatedHostBuilder {
    pub(crate) hostname: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) os_version: ::std::option::Option<::std::string::String>,
}
impl AssociatedHostBuilder {
    /// <p>The name of the host.</p>
    pub fn hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hostname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the host.</p>
    pub fn set_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hostname = input;
        self
    }
    /// <p>The name of the host.</p>
    pub fn get_hostname(&self) -> &::std::option::Option<::std::string::String> {
        &self.hostname
    }
    /// <p>The ID of the Amazon EC2 instance.</p>
    pub fn ec2_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon EC2 instance.</p>
    pub fn set_ec2_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_instance_id = input;
        self
    }
    /// <p>The ID of the Amazon EC2 instance.</p>
    pub fn get_ec2_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_instance_id
    }
    /// <p>The version of the operating system.</p>
    pub fn os_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.os_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the operating system.</p>
    pub fn set_os_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.os_version = input;
        self
    }
    /// <p>The version of the operating system.</p>
    pub fn get_os_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.os_version
    }
    /// Consumes the builder and constructs a [`AssociatedHost`](crate::types::AssociatedHost).
    pub fn build(self) -> crate::types::AssociatedHost {
        crate::types::AssociatedHost {
            hostname: self.hostname,
            ec2_instance_id: self.ec2_instance_id,
            os_version: self.os_version,
        }
    }
}
