// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_applications_output_next_token(
    input: &crate::operation::list_applications::ListApplicationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_components_output_next_token(
    input: &crate::operation::list_components::ListComponentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_databases_output_next_token(
    input: &crate::operation::list_databases::ListDatabasesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_operations_output_next_token(
    input: &crate::operation::list_operations::ListOperationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_applications_output_applications(
    input: crate::operation::list_applications::ListApplicationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ApplicationSummary>> {
    let input = match input.applications {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_components_output_components(
    input: crate::operation::list_components::ListComponentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ComponentSummary>> {
    let input = match input.components {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_databases_output_databases(
    input: crate::operation::list_databases::ListDatabasesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DatabaseSummary>> {
    let input = match input.databases {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_operations_output_operations(
    input: crate::operation::list_operations::ListOperationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Operation>> {
    let input = match input.operations {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
