// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetComponentOutput {
    /// <p>The component of an application registered with AWS Systems Manager for SAP.</p>
    pub component: ::std::option::Option<crate::types::Component>,
    /// <p>The tags of a component.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetComponentOutput {
    /// <p>The component of an application registered with AWS Systems Manager for SAP.</p>
    pub fn component(&self) -> ::std::option::Option<&crate::types::Component> {
        self.component.as_ref()
    }
    /// <p>The tags of a component.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetComponentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetComponentOutput {
    /// Creates a new builder-style object to manufacture [`GetComponentOutput`](crate::operation::get_component::GetComponentOutput).
    pub fn builder() -> crate::operation::get_component::builders::GetComponentOutputBuilder {
        crate::operation::get_component::builders::GetComponentOutputBuilder::default()
    }
}

/// A builder for [`GetComponentOutput`](crate::operation::get_component::GetComponentOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetComponentOutputBuilder {
    pub(crate) component: ::std::option::Option<crate::types::Component>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetComponentOutputBuilder {
    /// <p>The component of an application registered with AWS Systems Manager for SAP.</p>
    pub fn component(mut self, input: crate::types::Component) -> Self {
        self.component = ::std::option::Option::Some(input);
        self
    }
    /// <p>The component of an application registered with AWS Systems Manager for SAP.</p>
    pub fn set_component(mut self, input: ::std::option::Option<crate::types::Component>) -> Self {
        self.component = input;
        self
    }
    /// <p>The component of an application registered with AWS Systems Manager for SAP.</p>
    pub fn get_component(&self) -> &::std::option::Option<crate::types::Component> {
        &self.component
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags of a component.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags of a component.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags of a component.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetComponentOutput`](crate::operation::get_component::GetComponentOutput).
    pub fn build(self) -> crate::operation::get_component::GetComponentOutput {
        crate::operation::get_component::GetComponentOutput {
            component: self.component,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
