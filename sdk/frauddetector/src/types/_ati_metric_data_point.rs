// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The Account Takeover Insights (ATI) model performance metrics data points. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AtiMetricDataPoint {
    /// <p> The challenge rate. This indicates the percentage of login events that the model recommends to challenge such as one-time password, multi-factor authentication, and investigations. </p>
    pub cr: ::std::option::Option<f32>,
    /// <p> The anomaly discovery rate. This metric quantifies the percentage of anomalies that can be detected by the model at the selected score threshold. A lower score threshold increases the percentage of anomalies captured by the model, but would also require challenging a larger percentage of login events, leading to a higher customer friction. </p>
    pub adr: ::std::option::Option<f32>,
    /// <p> The model's threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud. </p>
    pub threshold: ::std::option::Option<f32>,
    /// <p> The account takeover discovery rate. This metric quantifies the percentage of account compromise events that can be detected by the model at the selected score threshold. This metric is only available if 50 or more entities with at-least one labeled account takeover event is present in the ingested dataset. </p>
    pub atodr: ::std::option::Option<f32>,
}
impl AtiMetricDataPoint {
    /// <p> The challenge rate. This indicates the percentage of login events that the model recommends to challenge such as one-time password, multi-factor authentication, and investigations. </p>
    pub fn cr(&self) -> ::std::option::Option<f32> {
        self.cr
    }
    /// <p> The anomaly discovery rate. This metric quantifies the percentage of anomalies that can be detected by the model at the selected score threshold. A lower score threshold increases the percentage of anomalies captured by the model, but would also require challenging a larger percentage of login events, leading to a higher customer friction. </p>
    pub fn adr(&self) -> ::std::option::Option<f32> {
        self.adr
    }
    /// <p> The model's threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud. </p>
    pub fn threshold(&self) -> ::std::option::Option<f32> {
        self.threshold
    }
    /// <p> The account takeover discovery rate. This metric quantifies the percentage of account compromise events that can be detected by the model at the selected score threshold. This metric is only available if 50 or more entities with at-least one labeled account takeover event is present in the ingested dataset. </p>
    pub fn atodr(&self) -> ::std::option::Option<f32> {
        self.atodr
    }
}
impl AtiMetricDataPoint {
    /// Creates a new builder-style object to manufacture [`AtiMetricDataPoint`](crate::types::AtiMetricDataPoint).
    pub fn builder() -> crate::types::builders::AtiMetricDataPointBuilder {
        crate::types::builders::AtiMetricDataPointBuilder::default()
    }
}

/// A builder for [`AtiMetricDataPoint`](crate::types::AtiMetricDataPoint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AtiMetricDataPointBuilder {
    pub(crate) cr: ::std::option::Option<f32>,
    pub(crate) adr: ::std::option::Option<f32>,
    pub(crate) threshold: ::std::option::Option<f32>,
    pub(crate) atodr: ::std::option::Option<f32>,
}
impl AtiMetricDataPointBuilder {
    /// <p> The challenge rate. This indicates the percentage of login events that the model recommends to challenge such as one-time password, multi-factor authentication, and investigations. </p>
    pub fn cr(mut self, input: f32) -> Self {
        self.cr = ::std::option::Option::Some(input);
        self
    }
    /// <p> The challenge rate. This indicates the percentage of login events that the model recommends to challenge such as one-time password, multi-factor authentication, and investigations. </p>
    pub fn set_cr(mut self, input: ::std::option::Option<f32>) -> Self {
        self.cr = input;
        self
    }
    /// <p> The challenge rate. This indicates the percentage of login events that the model recommends to challenge such as one-time password, multi-factor authentication, and investigations. </p>
    pub fn get_cr(&self) -> &::std::option::Option<f32> {
        &self.cr
    }
    /// <p> The anomaly discovery rate. This metric quantifies the percentage of anomalies that can be detected by the model at the selected score threshold. A lower score threshold increases the percentage of anomalies captured by the model, but would also require challenging a larger percentage of login events, leading to a higher customer friction. </p>
    pub fn adr(mut self, input: f32) -> Self {
        self.adr = ::std::option::Option::Some(input);
        self
    }
    /// <p> The anomaly discovery rate. This metric quantifies the percentage of anomalies that can be detected by the model at the selected score threshold. A lower score threshold increases the percentage of anomalies captured by the model, but would also require challenging a larger percentage of login events, leading to a higher customer friction. </p>
    pub fn set_adr(mut self, input: ::std::option::Option<f32>) -> Self {
        self.adr = input;
        self
    }
    /// <p> The anomaly discovery rate. This metric quantifies the percentage of anomalies that can be detected by the model at the selected score threshold. A lower score threshold increases the percentage of anomalies captured by the model, but would also require challenging a larger percentage of login events, leading to a higher customer friction. </p>
    pub fn get_adr(&self) -> &::std::option::Option<f32> {
        &self.adr
    }
    /// <p> The model's threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud. </p>
    pub fn threshold(mut self, input: f32) -> Self {
        self.threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p> The model's threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud. </p>
    pub fn set_threshold(mut self, input: ::std::option::Option<f32>) -> Self {
        self.threshold = input;
        self
    }
    /// <p> The model's threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud. </p>
    pub fn get_threshold(&self) -> &::std::option::Option<f32> {
        &self.threshold
    }
    /// <p> The account takeover discovery rate. This metric quantifies the percentage of account compromise events that can be detected by the model at the selected score threshold. This metric is only available if 50 or more entities with at-least one labeled account takeover event is present in the ingested dataset. </p>
    pub fn atodr(mut self, input: f32) -> Self {
        self.atodr = ::std::option::Option::Some(input);
        self
    }
    /// <p> The account takeover discovery rate. This metric quantifies the percentage of account compromise events that can be detected by the model at the selected score threshold. This metric is only available if 50 or more entities with at-least one labeled account takeover event is present in the ingested dataset. </p>
    pub fn set_atodr(mut self, input: ::std::option::Option<f32>) -> Self {
        self.atodr = input;
        self
    }
    /// <p> The account takeover discovery rate. This metric quantifies the percentage of account compromise events that can be detected by the model at the selected score threshold. This metric is only available if 50 or more entities with at-least one labeled account takeover event is present in the ingested dataset. </p>
    pub fn get_atodr(&self) -> &::std::option::Option<f32> {
        &self.atodr
    }
    /// Consumes the builder and constructs a [`AtiMetricDataPoint`](crate::types::AtiMetricDataPoint).
    pub fn build(self) -> crate::types::AtiMetricDataPoint {
        crate::types::AtiMetricDataPoint {
            cr: self.cr,
            adr: self.adr,
            threshold: self.threshold,
            atodr: self.atodr,
        }
    }
}
