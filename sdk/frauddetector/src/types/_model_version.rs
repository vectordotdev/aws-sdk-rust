// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The model version.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModelVersion {
    /// <p>The model ID.</p>
    pub model_id: ::std::option::Option<::std::string::String>,
    /// <p>The model type.</p>
    pub model_type: ::std::option::Option<crate::types::ModelTypeEnum>,
    /// <p>The model version number.</p>
    pub model_version_number: ::std::option::Option<::std::string::String>,
    /// <p>The model version ARN.</p>
    pub arn: ::std::option::Option<::std::string::String>,
}
impl ModelVersion {
    /// <p>The model ID.</p>
    pub fn model_id(&self) -> ::std::option::Option<&str> {
        self.model_id.as_deref()
    }
    /// <p>The model type.</p>
    pub fn model_type(&self) -> ::std::option::Option<&crate::types::ModelTypeEnum> {
        self.model_type.as_ref()
    }
    /// <p>The model version number.</p>
    pub fn model_version_number(&self) -> ::std::option::Option<&str> {
        self.model_version_number.as_deref()
    }
    /// <p>The model version ARN.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl ModelVersion {
    /// Creates a new builder-style object to manufacture [`ModelVersion`](crate::types::ModelVersion).
    pub fn builder() -> crate::types::builders::ModelVersionBuilder {
        crate::types::builders::ModelVersionBuilder::default()
    }
}

/// A builder for [`ModelVersion`](crate::types::ModelVersion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ModelVersionBuilder {
    pub(crate) model_id: ::std::option::Option<::std::string::String>,
    pub(crate) model_type: ::std::option::Option<crate::types::ModelTypeEnum>,
    pub(crate) model_version_number: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
}
impl ModelVersionBuilder {
    /// <p>The model ID.</p>
    pub fn model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The model ID.</p>
    pub fn set_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p>The model ID.</p>
    pub fn get_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_id
    }
    /// <p>The model type.</p>
    pub fn model_type(mut self, input: crate::types::ModelTypeEnum) -> Self {
        self.model_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The model type.</p>
    pub fn set_model_type(mut self, input: ::std::option::Option<crate::types::ModelTypeEnum>) -> Self {
        self.model_type = input;
        self
    }
    /// <p>The model type.</p>
    pub fn get_model_type(&self) -> &::std::option::Option<crate::types::ModelTypeEnum> {
        &self.model_type
    }
    /// <p>The model version number.</p>
    pub fn model_version_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_version_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The model version number.</p>
    pub fn set_model_version_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_version_number = input;
        self
    }
    /// <p>The model version number.</p>
    pub fn get_model_version_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_version_number
    }
    /// <p>The model version ARN.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The model version ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The model version ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Consumes the builder and constructs a [`ModelVersion`](crate::types::ModelVersion).
    pub fn build(self) -> crate::types::ModelVersion {
        crate::types::ModelVersion {
            model_id: self.model_id,
            model_type: self.model_type,
            model_version_number: self.model_version_number,
            arn: self.arn,
        }
    }
}
