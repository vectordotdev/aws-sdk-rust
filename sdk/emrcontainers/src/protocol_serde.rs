// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_cancel_job_run;

pub(crate) mod shape_create_job_template;

pub(crate) mod shape_create_managed_endpoint;

pub(crate) mod shape_create_virtual_cluster;

pub(crate) mod shape_delete_job_template;

pub(crate) mod shape_delete_managed_endpoint;

pub(crate) mod shape_delete_virtual_cluster;

pub(crate) mod shape_describe_job_run;

pub(crate) mod shape_describe_job_template;

pub(crate) mod shape_describe_managed_endpoint;

pub(crate) mod shape_describe_virtual_cluster;

pub(crate) mod shape_get_managed_endpoint_session_credentials;

pub(crate) mod shape_list_job_runs;

pub(crate) mod shape_list_job_templates;

pub(crate) mod shape_list_managed_endpoints;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_virtual_clusters;

pub(crate) mod shape_start_job_run;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_create_job_template_input;

pub(crate) mod shape_create_managed_endpoint_input;

pub(crate) mod shape_create_virtual_cluster_input;

pub(crate) mod shape_get_managed_endpoint_session_credentials_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_request_throttled_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_start_job_run_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_configuration_overrides;

pub(crate) mod shape_container_provider;

pub(crate) mod shape_credentials;

pub(crate) mod shape_endpoint;

pub(crate) mod shape_endpoints;

pub(crate) mod shape_job_driver;

pub(crate) mod shape_job_run;

pub(crate) mod shape_job_runs;

pub(crate) mod shape_job_template;

pub(crate) mod shape_job_template_data;

pub(crate) mod shape_job_templates;

pub(crate) mod shape_retry_policy_configuration;

pub(crate) mod shape_tag_map;

pub(crate) mod shape_virtual_cluster;

pub(crate) mod shape_virtual_clusters;

pub(crate) mod shape_certificate;

pub(crate) mod shape_configuration;

pub(crate) mod shape_container_info;

pub(crate) mod shape_monitoring_configuration;

pub(crate) mod shape_parametric_configuration_overrides;

pub(crate) mod shape_retry_policy_execution;

pub(crate) mod shape_spark_sql_job_driver;

pub(crate) mod shape_spark_submit_job_driver;

pub(crate) mod shape_subnet_ids;

pub(crate) mod shape_template_parameter_configuration;

pub(crate) mod shape_cloud_watch_monitoring_configuration;

pub(crate) mod shape_configuration_list;

pub(crate) mod shape_container_log_rotation_configuration;

pub(crate) mod shape_eks_info;

pub(crate) mod shape_parametric_monitoring_configuration;

pub(crate) mod shape_s3_monitoring_configuration;

pub(crate) mod shape_template_parameter_configuration_map;

pub(crate) mod shape_entry_point_arguments;

pub(crate) mod shape_parametric_cloud_watch_monitoring_configuration;

pub(crate) mod shape_parametric_s3_monitoring_configuration;

pub(crate) mod shape_sensitive_properties_map;
