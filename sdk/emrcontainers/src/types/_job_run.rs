// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This entity describes a job run. A job run is a unit of work, such as a Spark jar, PySpark script, or SparkSQL query, that you submit to Amazon EMR on EKS. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobRun {
    /// <p>The ID of the job run.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the job run.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the job run's virtual cluster.</p>
    pub virtual_cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of job run.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of the job run. </p>
    pub state: ::std::option::Option<crate::types::JobRunState>,
    /// <p>The client token used to start a job run.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The execution role ARN of the job run.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The release version of Amazon EMR.</p>
    pub release_label: ::std::option::Option<::std::string::String>,
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub configuration_overrides: ::std::option::Option<crate::types::ConfigurationOverrides>,
    /// <p>Parameters of job driver for the job run.</p>
    pub job_driver: ::std::option::Option<crate::types::JobDriver>,
    /// <p>The date and time when the job run was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user who created the job run.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the job run has finished.</p>
    pub finished_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Additional details of the job run state.</p>
    pub state_details: ::std::option::Option<::std::string::String>,
    /// <p>The reasons why the job run has failed.</p>
    pub failure_reason: ::std::option::Option<crate::types::FailureReason>,
    /// <p>The assigned tags of the job run.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The configuration of the retry policy that the job runs on.</p>
    pub retry_policy_configuration: ::std::option::Option<crate::types::RetryPolicyConfiguration>,
    /// <p>The current status of the retry policy executed on the job.</p>
    pub retry_policy_execution: ::std::option::Option<crate::types::RetryPolicyExecution>,
}
impl JobRun {
    /// <p>The ID of the job run.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the job run.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the job run's virtual cluster.</p>
    pub fn virtual_cluster_id(&self) -> ::std::option::Option<&str> {
        self.virtual_cluster_id.as_deref()
    }
    /// <p>The ARN of job run.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The state of the job run. </p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::JobRunState> {
        self.state.as_ref()
    }
    /// <p>The client token used to start a job run.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>The release version of Amazon EMR.</p>
    pub fn release_label(&self) -> ::std::option::Option<&str> {
        self.release_label.as_deref()
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn configuration_overrides(&self) -> ::std::option::Option<&crate::types::ConfigurationOverrides> {
        self.configuration_overrides.as_ref()
    }
    /// <p>Parameters of job driver for the job run.</p>
    pub fn job_driver(&self) -> ::std::option::Option<&crate::types::JobDriver> {
        self.job_driver.as_ref()
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The user who created the job run.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The date and time when the job run has finished.</p>
    pub fn finished_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.finished_at.as_ref()
    }
    /// <p>Additional details of the job run state.</p>
    pub fn state_details(&self) -> ::std::option::Option<&str> {
        self.state_details.as_deref()
    }
    /// <p>The reasons why the job run has failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&crate::types::FailureReason> {
        self.failure_reason.as_ref()
    }
    /// <p>The assigned tags of the job run.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The configuration of the retry policy that the job runs on.</p>
    pub fn retry_policy_configuration(&self) -> ::std::option::Option<&crate::types::RetryPolicyConfiguration> {
        self.retry_policy_configuration.as_ref()
    }
    /// <p>The current status of the retry policy executed on the job.</p>
    pub fn retry_policy_execution(&self) -> ::std::option::Option<&crate::types::RetryPolicyExecution> {
        self.retry_policy_execution.as_ref()
    }
}
impl JobRun {
    /// Creates a new builder-style object to manufacture [`JobRun`](crate::types::JobRun).
    pub fn builder() -> crate::types::builders::JobRunBuilder {
        crate::types::builders::JobRunBuilder::default()
    }
}

/// A builder for [`JobRun`](crate::types::JobRun).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobRunBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) virtual_cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::JobRunState>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) release_label: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_overrides: ::std::option::Option<crate::types::ConfigurationOverrides>,
    pub(crate) job_driver: ::std::option::Option<crate::types::JobDriver>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) finished_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state_details: ::std::option::Option<::std::string::String>,
    pub(crate) failure_reason: ::std::option::Option<crate::types::FailureReason>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) retry_policy_configuration: ::std::option::Option<crate::types::RetryPolicyConfiguration>,
    pub(crate) retry_policy_execution: ::std::option::Option<crate::types::RetryPolicyExecution>,
}
impl JobRunBuilder {
    /// <p>The ID of the job run.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the job run.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the job run.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the job run.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the job run.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID of the job run's virtual cluster.</p>
    pub fn virtual_cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtual_cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job run's virtual cluster.</p>
    pub fn set_virtual_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtual_cluster_id = input;
        self
    }
    /// <p>The ID of the job run's virtual cluster.</p>
    pub fn get_virtual_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtual_cluster_id
    }
    /// <p>The ARN of job run.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of job run.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of job run.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The state of the job run. </p>
    pub fn state(mut self, input: crate::types::JobRunState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the job run. </p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::JobRunState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the job run. </p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::JobRunState> {
        &self.state
    }
    /// <p>The client token used to start a job run.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client token used to start a job run.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The client token used to start a job run.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The execution role ARN of the job run.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// <p>The release version of Amazon EMR.</p>
    pub fn release_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.release_label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The release version of Amazon EMR.</p>
    pub fn set_release_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.release_label = input;
        self
    }
    /// <p>The release version of Amazon EMR.</p>
    pub fn get_release_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.release_label
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn configuration_overrides(mut self, input: crate::types::ConfigurationOverrides) -> Self {
        self.configuration_overrides = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn set_configuration_overrides(mut self, input: ::std::option::Option<crate::types::ConfigurationOverrides>) -> Self {
        self.configuration_overrides = input;
        self
    }
    /// <p>The configuration settings that are used to override default configuration.</p>
    pub fn get_configuration_overrides(&self) -> &::std::option::Option<crate::types::ConfigurationOverrides> {
        &self.configuration_overrides
    }
    /// <p>Parameters of job driver for the job run.</p>
    pub fn job_driver(mut self, input: crate::types::JobDriver) -> Self {
        self.job_driver = ::std::option::Option::Some(input);
        self
    }
    /// <p>Parameters of job driver for the job run.</p>
    pub fn set_job_driver(mut self, input: ::std::option::Option<crate::types::JobDriver>) -> Self {
        self.job_driver = input;
        self
    }
    /// <p>Parameters of job driver for the job run.</p>
    pub fn get_job_driver(&self) -> &::std::option::Option<crate::types::JobDriver> {
        &self.job_driver
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time when the job run was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user who created the job run.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the job run.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the job run.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time when the job run has finished.</p>
    pub fn finished_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.finished_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the job run has finished.</p>
    pub fn set_finished_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.finished_at = input;
        self
    }
    /// <p>The date and time when the job run has finished.</p>
    pub fn get_finished_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.finished_at
    }
    /// <p>Additional details of the job run state.</p>
    pub fn state_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional details of the job run state.</p>
    pub fn set_state_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_details = input;
        self
    }
    /// <p>Additional details of the job run state.</p>
    pub fn get_state_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_details
    }
    /// <p>The reasons why the job run has failed.</p>
    pub fn failure_reason(mut self, input: crate::types::FailureReason) -> Self {
        self.failure_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reasons why the job run has failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<crate::types::FailureReason>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reasons why the job run has failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<crate::types::FailureReason> {
        &self.failure_reason
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The assigned tags of the job run.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The assigned tags of the job run.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The assigned tags of the job run.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The configuration of the retry policy that the job runs on.</p>
    pub fn retry_policy_configuration(mut self, input: crate::types::RetryPolicyConfiguration) -> Self {
        self.retry_policy_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the retry policy that the job runs on.</p>
    pub fn set_retry_policy_configuration(mut self, input: ::std::option::Option<crate::types::RetryPolicyConfiguration>) -> Self {
        self.retry_policy_configuration = input;
        self
    }
    /// <p>The configuration of the retry policy that the job runs on.</p>
    pub fn get_retry_policy_configuration(&self) -> &::std::option::Option<crate::types::RetryPolicyConfiguration> {
        &self.retry_policy_configuration
    }
    /// <p>The current status of the retry policy executed on the job.</p>
    pub fn retry_policy_execution(mut self, input: crate::types::RetryPolicyExecution) -> Self {
        self.retry_policy_execution = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the retry policy executed on the job.</p>
    pub fn set_retry_policy_execution(mut self, input: ::std::option::Option<crate::types::RetryPolicyExecution>) -> Self {
        self.retry_policy_execution = input;
        self
    }
    /// <p>The current status of the retry policy executed on the job.</p>
    pub fn get_retry_policy_execution(&self) -> &::std::option::Option<crate::types::RetryPolicyExecution> {
        &self.retry_policy_execution
    }
    /// Consumes the builder and constructs a [`JobRun`](crate::types::JobRun).
    pub fn build(self) -> crate::types::JobRun {
        crate::types::JobRun {
            id: self.id,
            name: self.name,
            virtual_cluster_id: self.virtual_cluster_id,
            arn: self.arn,
            state: self.state,
            client_token: self.client_token,
            execution_role_arn: self.execution_role_arn,
            release_label: self.release_label,
            configuration_overrides: self.configuration_overrides,
            job_driver: self.job_driver,
            created_at: self.created_at,
            created_by: self.created_by,
            finished_at: self.finished_at,
            state_details: self.state_details,
            failure_reason: self.failure_reason,
            tags: self.tags,
            retry_policy_configuration: self.retry_policy_configuration,
            retry_policy_execution: self.retry_policy_execution,
        }
    }
}
