// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a certificate CNAME record to add to your DNS. For more information, see <a href="https://docs.aws.amazon.com/apprunner/latest/api/API_AssociateCustomDomain.html">AssociateCustomDomain</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CertificateValidationRecord {
    /// <p>The certificate CNAME record name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The record type, always <code>CNAME</code>.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The certificate CNAME record value.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the certificate CNAME record validation. It should change to <code>SUCCESS</code> after App Runner completes validation with your DNS.</p>
    pub status: ::std::option::Option<crate::types::CertificateValidationRecordStatus>,
}
impl CertificateValidationRecord {
    /// <p>The certificate CNAME record name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The record type, always <code>CNAME</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The certificate CNAME record value.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The current state of the certificate CNAME record validation. It should change to <code>SUCCESS</code> after App Runner completes validation with your DNS.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CertificateValidationRecordStatus> {
        self.status.as_ref()
    }
}
impl CertificateValidationRecord {
    /// Creates a new builder-style object to manufacture [`CertificateValidationRecord`](crate::types::CertificateValidationRecord).
    pub fn builder() -> crate::types::builders::CertificateValidationRecordBuilder {
        crate::types::builders::CertificateValidationRecordBuilder::default()
    }
}

/// A builder for [`CertificateValidationRecord`](crate::types::CertificateValidationRecord).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CertificateValidationRecordBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::CertificateValidationRecordStatus>,
}
impl CertificateValidationRecordBuilder {
    /// <p>The certificate CNAME record name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The certificate CNAME record name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The certificate CNAME record name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The record type, always <code>CNAME</code>.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The record type, always <code>CNAME</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The record type, always <code>CNAME</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The certificate CNAME record value.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The certificate CNAME record value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The certificate CNAME record value.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The current state of the certificate CNAME record validation. It should change to <code>SUCCESS</code> after App Runner completes validation with your DNS.</p>
    pub fn status(mut self, input: crate::types::CertificateValidationRecordStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the certificate CNAME record validation. It should change to <code>SUCCESS</code> after App Runner completes validation with your DNS.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CertificateValidationRecordStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current state of the certificate CNAME record validation. It should change to <code>SUCCESS</code> after App Runner completes validation with your DNS.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CertificateValidationRecordStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`CertificateValidationRecord`](crate::types::CertificateValidationRecord).
    pub fn build(self) -> crate::types::CertificateValidationRecord {
        crate::types::CertificateValidationRecord {
            name: self.name,
            r#type: self.r#type,
            value: self.value,
            status: self.status,
        }
    }
}
