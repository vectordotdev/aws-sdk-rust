// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A representation of a resource association error.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateResourceError {
    /// <p>The reason why the resource association failed.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>A static error code that's used to classify the type of failure.</p>
    pub reason: ::std::option::Option<crate::types::AssociateResourceErrorReason>,
}
impl AssociateResourceError {
    /// <p>The reason why the resource association failed.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>A static error code that's used to classify the type of failure.</p>
    pub fn reason(&self) -> ::std::option::Option<&crate::types::AssociateResourceErrorReason> {
        self.reason.as_ref()
    }
}
impl AssociateResourceError {
    /// Creates a new builder-style object to manufacture [`AssociateResourceError`](crate::types::AssociateResourceError).
    pub fn builder() -> crate::types::builders::AssociateResourceErrorBuilder {
        crate::types::builders::AssociateResourceErrorBuilder::default()
    }
}

/// A builder for [`AssociateResourceError`](crate::types::AssociateResourceError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateResourceErrorBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) reason: ::std::option::Option<crate::types::AssociateResourceErrorReason>,
}
impl AssociateResourceErrorBuilder {
    /// <p>The reason why the resource association failed.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason why the resource association failed.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The reason why the resource association failed.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>A static error code that's used to classify the type of failure.</p>
    pub fn reason(mut self, input: crate::types::AssociateResourceErrorReason) -> Self {
        self.reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>A static error code that's used to classify the type of failure.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<crate::types::AssociateResourceErrorReason>) -> Self {
        self.reason = input;
        self
    }
    /// <p>A static error code that's used to classify the type of failure.</p>
    pub fn get_reason(&self) -> &::std::option::Option<crate::types::AssociateResourceErrorReason> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`AssociateResourceError`](crate::types::AssociateResourceError).
    pub fn build(self) -> crate::types::AssociateResourceError {
        crate::types::AssociateResourceError {
            message: self.message,
            reason: self.reason,
        }
    }
}
