// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_mapped_resource_configuration_output_next_token(
    input: &crate::operation::describe_mapped_resource_configuration::DescribeMappedResourceConfigurationOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_edge_agent_configurations_output_next_token(
    input: &crate::operation::list_edge_agent_configurations::ListEdgeAgentConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_signaling_channels_output_next_token(
    input: &crate::operation::list_signaling_channels::ListSignalingChannelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_streams_output_next_token(
    input: &crate::operation::list_streams::ListStreamsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_mapped_resource_configuration_output_mapped_resource_configuration_list(
    input: crate::operation::describe_mapped_resource_configuration::DescribeMappedResourceConfigurationOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MappedResourceConfigurationListItem>> {
    let input = match input.mapped_resource_configuration_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_edge_agent_configurations_output_edge_configs(
    input: crate::operation::list_edge_agent_configurations::ListEdgeAgentConfigurationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListEdgeAgentConfigurationsEdgeConfig>> {
    let input = match input.edge_configs {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_signaling_channels_output_channel_info_list(
    input: crate::operation::list_signaling_channels::ListSignalingChannelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ChannelInfo>> {
    let input = match input.channel_info_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_streams_output_stream_info_list(
    input: crate::operation::list_streams::ListStreamsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::StreamInfo>> {
    let input = match input.stream_info_list {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
