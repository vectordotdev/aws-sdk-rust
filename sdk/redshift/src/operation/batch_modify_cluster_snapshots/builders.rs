// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_modify_cluster_snapshots::_batch_modify_cluster_snapshots_output::BatchModifyClusterSnapshotsOutputBuilder;

pub use crate::operation::batch_modify_cluster_snapshots::_batch_modify_cluster_snapshots_input::BatchModifyClusterSnapshotsInputBuilder;

impl BatchModifyClusterSnapshotsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.batch_modify_cluster_snapshots();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `BatchModifyClusterSnapshots`.
///
/// <p>Modifies the settings for a set of cluster snapshots.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct BatchModifyClusterSnapshotsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_modify_cluster_snapshots::builders::BatchModifyClusterSnapshotsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl BatchModifyClusterSnapshotsFluentBuilder {
    /// Creates a new `BatchModifyClusterSnapshots`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the BatchModifyClusterSnapshots as a reference.
    pub fn as_input(&self) -> &crate::operation::batch_modify_cluster_snapshots::builders::BatchModifyClusterSnapshotsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshots::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshots::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsOutput,
            crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::batch_modify_cluster_snapshots::BatchModifyClusterSnapshotsError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Appends an item to `SnapshotIdentifierList`.
    ///
    /// To override the contents of this collection use [`set_snapshot_identifier_list`](Self::set_snapshot_identifier_list).
    ///
    /// <p>A list of snapshot identifiers you want to modify.</p>
    pub fn snapshot_identifier_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.snapshot_identifier_list(input.into());
        self
    }
    /// <p>A list of snapshot identifiers you want to modify.</p>
    pub fn set_snapshot_identifier_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_snapshot_identifier_list(input);
        self
    }
    /// <p>A list of snapshot identifiers you want to modify.</p>
    pub fn get_snapshot_identifier_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_snapshot_identifier_list()
    }
    /// <p>The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely.</p>
    /// <p>The number must be either -1 or an integer between 1 and 3,653.</p>
    /// <p>If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option. </p>
    pub fn manual_snapshot_retention_period(mut self, input: i32) -> Self {
        self.inner = self.inner.manual_snapshot_retention_period(input);
        self
    }
    /// <p>The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely.</p>
    /// <p>The number must be either -1 or an integer between 1 and 3,653.</p>
    /// <p>If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option. </p>
    pub fn set_manual_snapshot_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_manual_snapshot_retention_period(input);
        self
    }
    /// <p>The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely.</p>
    /// <p>The number must be either -1 or an integer between 1 and 3,653.</p>
    /// <p>If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option. </p>
    pub fn get_manual_snapshot_retention_period(&self) -> &::std::option::Option<i32> {
        self.inner.get_manual_snapshot_retention_period()
    }
    /// <p>A boolean value indicating whether to override an exception if the retention period has passed. </p>
    pub fn force(mut self, input: bool) -> Self {
        self.inner = self.inner.force(input);
        self
    }
    /// <p>A boolean value indicating whether to override an exception if the retention period has passed. </p>
    pub fn set_force(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force(input);
        self
    }
    /// <p>A boolean value indicating whether to override an exception if the retention period has passed. </p>
    pub fn get_force(&self) -> &::std::option::Option<bool> {
        self.inner.get_force()
    }
}
