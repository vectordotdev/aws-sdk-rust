// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures the associated Certificate Manager Secure Sockets Layer/Transport Layer Security (SSL/TLS) server certificates and scope settings Network Firewall uses to decrypt traffic in a <code>TLSInspectionConfiguration</code>. For information about working with SSL/TLS certificates for TLS inspection, see <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html"> Requirements for using SSL/TLS server certficiates with TLS inspection configurations</a> in the <i>Network Firewall Developer Guide</i>.</p> <note>
/// <p>If a server certificate that's associated with your <code>TLSInspectionConfiguration</code> is revoked, deleted, or expired it can result in client-side TLS errors.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerCertificateConfiguration {
    /// <p>The list of a server certificate configuration's Certificate Manager SSL/TLS certificates.</p>
    pub server_certificates: ::std::option::Option<::std::vec::Vec<crate::types::ServerCertificate>>,
    /// <p>A list of a server certificate configuration's scopes.</p>
    pub scopes: ::std::option::Option<::std::vec::Vec<crate::types::ServerCertificateScope>>,
}
impl ServerCertificateConfiguration {
    /// <p>The list of a server certificate configuration's Certificate Manager SSL/TLS certificates.</p>
    pub fn server_certificates(&self) -> ::std::option::Option<&[crate::types::ServerCertificate]> {
        self.server_certificates.as_deref()
    }
    /// <p>A list of a server certificate configuration's scopes.</p>
    pub fn scopes(&self) -> ::std::option::Option<&[crate::types::ServerCertificateScope]> {
        self.scopes.as_deref()
    }
}
impl ServerCertificateConfiguration {
    /// Creates a new builder-style object to manufacture [`ServerCertificateConfiguration`](crate::types::ServerCertificateConfiguration).
    pub fn builder() -> crate::types::builders::ServerCertificateConfigurationBuilder {
        crate::types::builders::ServerCertificateConfigurationBuilder::default()
    }
}

/// A builder for [`ServerCertificateConfiguration`](crate::types::ServerCertificateConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServerCertificateConfigurationBuilder {
    pub(crate) server_certificates: ::std::option::Option<::std::vec::Vec<crate::types::ServerCertificate>>,
    pub(crate) scopes: ::std::option::Option<::std::vec::Vec<crate::types::ServerCertificateScope>>,
}
impl ServerCertificateConfigurationBuilder {
    /// Appends an item to `server_certificates`.
    ///
    /// To override the contents of this collection use [`set_server_certificates`](Self::set_server_certificates).
    ///
    /// <p>The list of a server certificate configuration's Certificate Manager SSL/TLS certificates.</p>
    pub fn server_certificates(mut self, input: crate::types::ServerCertificate) -> Self {
        let mut v = self.server_certificates.unwrap_or_default();
        v.push(input);
        self.server_certificates = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of a server certificate configuration's Certificate Manager SSL/TLS certificates.</p>
    pub fn set_server_certificates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServerCertificate>>) -> Self {
        self.server_certificates = input;
        self
    }
    /// <p>The list of a server certificate configuration's Certificate Manager SSL/TLS certificates.</p>
    pub fn get_server_certificates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServerCertificate>> {
        &self.server_certificates
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>A list of a server certificate configuration's scopes.</p>
    pub fn scopes(mut self, input: crate::types::ServerCertificateScope) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input);
        self.scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of a server certificate configuration's scopes.</p>
    pub fn set_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServerCertificateScope>>) -> Self {
        self.scopes = input;
        self
    }
    /// <p>A list of a server certificate configuration's scopes.</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServerCertificateScope>> {
        &self.scopes
    }
    /// Consumes the builder and constructs a [`ServerCertificateConfiguration`](crate::types::ServerCertificateConfiguration).
    pub fn build(self) -> crate::types::ServerCertificateConfiguration {
        crate::types::ServerCertificateConfiguration {
            server_certificates: self.server_certificates,
            scopes: self.scopes,
        }
    }
}
