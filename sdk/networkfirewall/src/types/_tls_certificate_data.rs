// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata about an Certificate Manager certificate.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TlsCertificateData {
    /// <p>The Amazon Resource Name (ARN) of the certificate.</p>
    pub certificate_arn: ::std::option::Option<::std::string::String>,
    /// <p>The serial number of the certificate.</p>
    pub certificate_serial: ::std::option::Option<::std::string::String>,
    /// <p>The status of the certificate.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>Contains details about the certificate status, including information about certificate errors.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl TlsCertificateData {
    /// <p>The Amazon Resource Name (ARN) of the certificate.</p>
    pub fn certificate_arn(&self) -> ::std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The serial number of the certificate.</p>
    pub fn certificate_serial(&self) -> ::std::option::Option<&str> {
        self.certificate_serial.as_deref()
    }
    /// <p>The status of the certificate.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Contains details about the certificate status, including information about certificate errors.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl TlsCertificateData {
    /// Creates a new builder-style object to manufacture [`TlsCertificateData`](crate::types::TlsCertificateData).
    pub fn builder() -> crate::types::builders::TlsCertificateDataBuilder {
        crate::types::builders::TlsCertificateDataBuilder::default()
    }
}

/// A builder for [`TlsCertificateData`](crate::types::TlsCertificateData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TlsCertificateDataBuilder {
    pub(crate) certificate_arn: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_serial: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl TlsCertificateDataBuilder {
    /// <p>The Amazon Resource Name (ARN) of the certificate.</p>
    pub fn certificate_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate.</p>
    pub fn set_certificate_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the certificate.</p>
    pub fn get_certificate_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_arn
    }
    /// <p>The serial number of the certificate.</p>
    pub fn certificate_serial(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_serial = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The serial number of the certificate.</p>
    pub fn set_certificate_serial(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_serial = input;
        self
    }
    /// <p>The serial number of the certificate.</p>
    pub fn get_certificate_serial(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_serial
    }
    /// <p>The status of the certificate.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the certificate.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the certificate.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Contains details about the certificate status, including information about certificate errors.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains details about the certificate status, including information about certificate errors.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Contains details about the certificate status, including information about certificate errors.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`TlsCertificateData`](crate::types::TlsCertificateData).
    pub fn build(self) -> crate::types::TlsCertificateData {
        crate::types::TlsCertificateData {
            certificate_arn: self.certificate_arn,
            certificate_serial: self.certificate_serial,
            status: self.status,
            status_message: self.status_message,
        }
    }
}
