// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetMaintenanceWindowOutput {
    /// <p>The ID of the created maintenance window.</p>
    pub window_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the maintenance window.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the maintenance window.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become active. The maintenance window won't run before this specified time.</p>
    pub start_date: ::std::option::Option<::std::string::String>,
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become inactive. The maintenance window won't run after this specified time.</p>
    pub end_date: ::std::option::Option<::std::string::String>,
    /// <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
    pub schedule: ::std::option::Option<::std::string::String>,
    /// <p>The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time Zone Database</a> on the IANA website.</p>
    pub schedule_timezone: ::std::option::Option<::std::string::String>,
    /// <p>The number of days to wait to run a maintenance window after the scheduled cron expression date and time.</p>
    pub schedule_offset: ::std::option::Option<i32>,
    /// <p>The next time the maintenance window will actually run, taking into account any specified times for the maintenance window to become active or inactive.</p>
    pub next_execution_time: ::std::option::Option<::std::string::String>,
    /// <p>The duration of the maintenance window in hours.</p>
    pub duration: i32,
    /// <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling new tasks for execution.</p>
    pub cutoff: i32,
    /// <p>Whether targets must be registered with the maintenance window before tasks can be defined for those targets.</p>
    pub allow_unassociated_targets: bool,
    /// <p>Indicates whether the maintenance window is enabled.</p>
    pub enabled: bool,
    /// <p>The date the maintenance window was created.</p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date the maintenance window was last modified.</p>
    pub modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetMaintenanceWindowOutput {
    /// <p>The ID of the created maintenance window.</p>
    pub fn window_id(&self) -> ::std::option::Option<&str> {
        self.window_id.as_deref()
    }
    /// <p>The name of the maintenance window.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the maintenance window.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become active. The maintenance window won't run before this specified time.</p>
    pub fn start_date(&self) -> ::std::option::Option<&str> {
        self.start_date.as_deref()
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become inactive. The maintenance window won't run after this specified time.</p>
    pub fn end_date(&self) -> ::std::option::Option<&str> {
        self.end_date.as_deref()
    }
    /// <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
    pub fn schedule(&self) -> ::std::option::Option<&str> {
        self.schedule.as_deref()
    }
    /// <p>The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time Zone Database</a> on the IANA website.</p>
    pub fn schedule_timezone(&self) -> ::std::option::Option<&str> {
        self.schedule_timezone.as_deref()
    }
    /// <p>The number of days to wait to run a maintenance window after the scheduled cron expression date and time.</p>
    pub fn schedule_offset(&self) -> ::std::option::Option<i32> {
        self.schedule_offset
    }
    /// <p>The next time the maintenance window will actually run, taking into account any specified times for the maintenance window to become active or inactive.</p>
    pub fn next_execution_time(&self) -> ::std::option::Option<&str> {
        self.next_execution_time.as_deref()
    }
    /// <p>The duration of the maintenance window in hours.</p>
    pub fn duration(&self) -> i32 {
        self.duration
    }
    /// <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling new tasks for execution.</p>
    pub fn cutoff(&self) -> i32 {
        self.cutoff
    }
    /// <p>Whether targets must be registered with the maintenance window before tasks can be defined for those targets.</p>
    pub fn allow_unassociated_targets(&self) -> bool {
        self.allow_unassociated_targets
    }
    /// <p>Indicates whether the maintenance window is enabled.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The date the maintenance window was created.</p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The date the maintenance window was last modified.</p>
    pub fn modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modified_date.as_ref()
    }
}
impl ::std::fmt::Debug for GetMaintenanceWindowOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetMaintenanceWindowOutput");
        formatter.field("window_id", &self.window_id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("start_date", &self.start_date);
        formatter.field("end_date", &self.end_date);
        formatter.field("schedule", &self.schedule);
        formatter.field("schedule_timezone", &self.schedule_timezone);
        formatter.field("schedule_offset", &self.schedule_offset);
        formatter.field("next_execution_time", &self.next_execution_time);
        formatter.field("duration", &self.duration);
        formatter.field("cutoff", &self.cutoff);
        formatter.field("allow_unassociated_targets", &self.allow_unassociated_targets);
        formatter.field("enabled", &self.enabled);
        formatter.field("created_date", &self.created_date);
        formatter.field("modified_date", &self.modified_date);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetMaintenanceWindowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMaintenanceWindowOutput {
    /// Creates a new builder-style object to manufacture [`GetMaintenanceWindowOutput`](crate::operation::get_maintenance_window::GetMaintenanceWindowOutput).
    pub fn builder() -> crate::operation::get_maintenance_window::builders::GetMaintenanceWindowOutputBuilder {
        crate::operation::get_maintenance_window::builders::GetMaintenanceWindowOutputBuilder::default()
    }
}

/// A builder for [`GetMaintenanceWindowOutput`](crate::operation::get_maintenance_window::GetMaintenanceWindowOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetMaintenanceWindowOutputBuilder {
    pub(crate) window_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) start_date: ::std::option::Option<::std::string::String>,
    pub(crate) end_date: ::std::option::Option<::std::string::String>,
    pub(crate) schedule: ::std::option::Option<::std::string::String>,
    pub(crate) schedule_timezone: ::std::option::Option<::std::string::String>,
    pub(crate) schedule_offset: ::std::option::Option<i32>,
    pub(crate) next_execution_time: ::std::option::Option<::std::string::String>,
    pub(crate) duration: ::std::option::Option<i32>,
    pub(crate) cutoff: ::std::option::Option<i32>,
    pub(crate) allow_unassociated_targets: ::std::option::Option<bool>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetMaintenanceWindowOutputBuilder {
    /// <p>The ID of the created maintenance window.</p>
    pub fn window_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.window_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the created maintenance window.</p>
    pub fn set_window_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.window_id = input;
        self
    }
    /// <p>The ID of the created maintenance window.</p>
    pub fn get_window_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.window_id
    }
    /// <p>The name of the maintenance window.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the maintenance window.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the maintenance window.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the maintenance window.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the maintenance window.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the maintenance window.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become active. The maintenance window won't run before this specified time.</p>
    pub fn start_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become active. The maintenance window won't run before this specified time.</p>
    pub fn set_start_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_date = input;
        self
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become active. The maintenance window won't run before this specified time.</p>
    pub fn get_start_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_date
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become inactive. The maintenance window won't run after this specified time.</p>
    pub fn end_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become inactive. The maintenance window won't run after this specified time.</p>
    pub fn set_end_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end_date = input;
        self
    }
    /// <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled to become inactive. The maintenance window won't run after this specified time.</p>
    pub fn get_end_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.end_date
    }
    /// <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
    pub fn schedule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schedule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<::std::string::String> {
        &self.schedule
    }
    /// <p>The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time Zone Database</a> on the IANA website.</p>
    pub fn schedule_timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schedule_timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time Zone Database</a> on the IANA website.</p>
    pub fn set_schedule_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schedule_timezone = input;
        self
    }
    /// <p>The time zone that the scheduled maintenance window executions are based on, in Internet Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time Zone Database</a> on the IANA website.</p>
    pub fn get_schedule_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.schedule_timezone
    }
    /// <p>The number of days to wait to run a maintenance window after the scheduled cron expression date and time.</p>
    pub fn schedule_offset(mut self, input: i32) -> Self {
        self.schedule_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days to wait to run a maintenance window after the scheduled cron expression date and time.</p>
    pub fn set_schedule_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.schedule_offset = input;
        self
    }
    /// <p>The number of days to wait to run a maintenance window after the scheduled cron expression date and time.</p>
    pub fn get_schedule_offset(&self) -> &::std::option::Option<i32> {
        &self.schedule_offset
    }
    /// <p>The next time the maintenance window will actually run, taking into account any specified times for the maintenance window to become active or inactive.</p>
    pub fn next_execution_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_execution_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next time the maintenance window will actually run, taking into account any specified times for the maintenance window to become active or inactive.</p>
    pub fn set_next_execution_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_execution_time = input;
        self
    }
    /// <p>The next time the maintenance window will actually run, taking into account any specified times for the maintenance window to become active or inactive.</p>
    pub fn get_next_execution_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_execution_time
    }
    /// <p>The duration of the maintenance window in hours.</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration of the maintenance window in hours.</p>
    pub fn set_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The duration of the maintenance window in hours.</p>
    pub fn get_duration(&self) -> &::std::option::Option<i32> {
        &self.duration
    }
    /// <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling new tasks for execution.</p>
    pub fn cutoff(mut self, input: i32) -> Self {
        self.cutoff = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling new tasks for execution.</p>
    pub fn set_cutoff(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cutoff = input;
        self
    }
    /// <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling new tasks for execution.</p>
    pub fn get_cutoff(&self) -> &::std::option::Option<i32> {
        &self.cutoff
    }
    /// <p>Whether targets must be registered with the maintenance window before tasks can be defined for those targets.</p>
    pub fn allow_unassociated_targets(mut self, input: bool) -> Self {
        self.allow_unassociated_targets = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether targets must be registered with the maintenance window before tasks can be defined for those targets.</p>
    pub fn set_allow_unassociated_targets(mut self, input: ::std::option::Option<bool>) -> Self {
        self.allow_unassociated_targets = input;
        self
    }
    /// <p>Whether targets must be registered with the maintenance window before tasks can be defined for those targets.</p>
    pub fn get_allow_unassociated_targets(&self) -> &::std::option::Option<bool> {
        &self.allow_unassociated_targets
    }
    /// <p>Indicates whether the maintenance window is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the maintenance window is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether the maintenance window is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The date the maintenance window was created.</p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the maintenance window was created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date the maintenance window was created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>The date the maintenance window was last modified.</p>
    pub fn modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the maintenance window was last modified.</p>
    pub fn set_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_date = input;
        self
    }
    /// <p>The date the maintenance window was last modified.</p>
    pub fn get_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMaintenanceWindowOutput`](crate::operation::get_maintenance_window::GetMaintenanceWindowOutput).
    pub fn build(self) -> crate::operation::get_maintenance_window::GetMaintenanceWindowOutput {
        crate::operation::get_maintenance_window::GetMaintenanceWindowOutput {
            window_id: self.window_id,
            name: self.name,
            description: self.description,
            start_date: self.start_date,
            end_date: self.end_date,
            schedule: self.schedule,
            schedule_timezone: self.schedule_timezone,
            schedule_offset: self.schedule_offset,
            next_execution_time: self.next_execution_time,
            duration: self.duration.unwrap_or_default(),
            cutoff: self.cutoff.unwrap_or_default(),
            allow_unassociated_targets: self.allow_unassociated_targets.unwrap_or_default(),
            enabled: self.enabled.unwrap_or_default(),
            created_date: self.created_date,
            modified_date: self.modified_date,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetMaintenanceWindowOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetMaintenanceWindowOutputBuilder");
        formatter.field("window_id", &self.window_id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("start_date", &self.start_date);
        formatter.field("end_date", &self.end_date);
        formatter.field("schedule", &self.schedule);
        formatter.field("schedule_timezone", &self.schedule_timezone);
        formatter.field("schedule_offset", &self.schedule_offset);
        formatter.field("next_execution_time", &self.next_execution_time);
        formatter.field("duration", &self.duration);
        formatter.field("cutoff", &self.cutoff);
        formatter.field("allow_unassociated_targets", &self.allow_unassociated_targets);
        formatter.field("enabled", &self.enabled);
        formatter.field("created_date", &self.created_date);
        formatter.field("modified_date", &self.modified_date);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
