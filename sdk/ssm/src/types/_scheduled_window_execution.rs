// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a scheduled execution for a maintenance window.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScheduledWindowExecution {
    /// <p>The ID of the maintenance window to be run.</p>
    pub window_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the maintenance window to be run.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be run.</p>
    pub execution_time: ::std::option::Option<::std::string::String>,
}
impl ScheduledWindowExecution {
    /// <p>The ID of the maintenance window to be run.</p>
    pub fn window_id(&self) -> ::std::option::Option<&str> {
        self.window_id.as_deref()
    }
    /// <p>The name of the maintenance window to be run.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be run.</p>
    pub fn execution_time(&self) -> ::std::option::Option<&str> {
        self.execution_time.as_deref()
    }
}
impl ScheduledWindowExecution {
    /// Creates a new builder-style object to manufacture [`ScheduledWindowExecution`](crate::types::ScheduledWindowExecution).
    pub fn builder() -> crate::types::builders::ScheduledWindowExecutionBuilder {
        crate::types::builders::ScheduledWindowExecutionBuilder::default()
    }
}

/// A builder for [`ScheduledWindowExecution`](crate::types::ScheduledWindowExecution).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScheduledWindowExecutionBuilder {
    pub(crate) window_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) execution_time: ::std::option::Option<::std::string::String>,
}
impl ScheduledWindowExecutionBuilder {
    /// <p>The ID of the maintenance window to be run.</p>
    pub fn window_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.window_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the maintenance window to be run.</p>
    pub fn set_window_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.window_id = input;
        self
    }
    /// <p>The ID of the maintenance window to be run.</p>
    pub fn get_window_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.window_id
    }
    /// <p>The name of the maintenance window to be run.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the maintenance window to be run.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the maintenance window to be run.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be run.</p>
    pub fn execution_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be run.</p>
    pub fn set_execution_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_time = input;
        self
    }
    /// <p>The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be run.</p>
    pub fn get_execution_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_time
    }
    /// Consumes the builder and constructs a [`ScheduledWindowExecution`](crate::types::ScheduledWindowExecution).
    pub fn build(self) -> crate::types::ScheduledWindowExecution {
        crate::types::ScheduledWindowExecution {
            window_id: self.window_id,
            name: self.name,
            execution_time: self.execution_time,
        }
    }
}
