// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a failed association.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailedCreateAssociation {
    /// <p>The association.</p>
    pub entry: ::std::option::Option<crate::types::CreateAssociationBatchRequestEntry>,
    /// <p>A description of the failure.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The source of the failure.</p>
    pub fault: ::std::option::Option<crate::types::Fault>,
}
impl FailedCreateAssociation {
    /// <p>The association.</p>
    pub fn entry(&self) -> ::std::option::Option<&crate::types::CreateAssociationBatchRequestEntry> {
        self.entry.as_ref()
    }
    /// <p>A description of the failure.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The source of the failure.</p>
    pub fn fault(&self) -> ::std::option::Option<&crate::types::Fault> {
        self.fault.as_ref()
    }
}
impl FailedCreateAssociation {
    /// Creates a new builder-style object to manufacture [`FailedCreateAssociation`](crate::types::FailedCreateAssociation).
    pub fn builder() -> crate::types::builders::FailedCreateAssociationBuilder {
        crate::types::builders::FailedCreateAssociationBuilder::default()
    }
}

/// A builder for [`FailedCreateAssociation`](crate::types::FailedCreateAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FailedCreateAssociationBuilder {
    pub(crate) entry: ::std::option::Option<crate::types::CreateAssociationBatchRequestEntry>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) fault: ::std::option::Option<crate::types::Fault>,
}
impl FailedCreateAssociationBuilder {
    /// <p>The association.</p>
    pub fn entry(mut self, input: crate::types::CreateAssociationBatchRequestEntry) -> Self {
        self.entry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The association.</p>
    pub fn set_entry(mut self, input: ::std::option::Option<crate::types::CreateAssociationBatchRequestEntry>) -> Self {
        self.entry = input;
        self
    }
    /// <p>The association.</p>
    pub fn get_entry(&self) -> &::std::option::Option<crate::types::CreateAssociationBatchRequestEntry> {
        &self.entry
    }
    /// <p>A description of the failure.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the failure.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A description of the failure.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The source of the failure.</p>
    pub fn fault(mut self, input: crate::types::Fault) -> Self {
        self.fault = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the failure.</p>
    pub fn set_fault(mut self, input: ::std::option::Option<crate::types::Fault>) -> Self {
        self.fault = input;
        self
    }
    /// <p>The source of the failure.</p>
    pub fn get_fault(&self) -> &::std::option::Option<crate::types::Fault> {
        &self.fault
    }
    /// Consumes the builder and constructs a [`FailedCreateAssociation`](crate::types::FailedCreateAssociation).
    pub fn build(self) -> crate::types::FailedCreateAssociation {
        crate::types::FailedCreateAssociation {
            entry: self.entry,
            message: self.message,
            fault: self.fault,
        }
    }
}
