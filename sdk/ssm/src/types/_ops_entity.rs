// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of the query.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpsEntity {
    /// <p>The query ID.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The data returned by the query.</p>
    pub data: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::OpsEntityItem>>,
}
impl OpsEntity {
    /// <p>The query ID.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The data returned by the query.</p>
    pub fn data(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::OpsEntityItem>> {
        self.data.as_ref()
    }
}
impl OpsEntity {
    /// Creates a new builder-style object to manufacture [`OpsEntity`](crate::types::OpsEntity).
    pub fn builder() -> crate::types::builders::OpsEntityBuilder {
        crate::types::builders::OpsEntityBuilder::default()
    }
}

/// A builder for [`OpsEntity`](crate::types::OpsEntity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OpsEntityBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::OpsEntityItem>>,
}
impl OpsEntityBuilder {
    /// <p>The query ID.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The query ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Adds a key-value pair to `data`.
    ///
    /// To override the contents of this collection use [`set_data`](Self::set_data).
    ///
    /// <p>The data returned by the query.</p>
    pub fn data(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::OpsEntityItem) -> Self {
        let mut hash_map = self.data.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.data = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The data returned by the query.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::OpsEntityItem>>) -> Self {
        self.data = input;
        self
    }
    /// <p>The data returned by the query.</p>
    pub fn get_data(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::OpsEntityItem>> {
        &self.data
    }
    /// Consumes the builder and constructs a [`OpsEntity`](crate::types::OpsEntity).
    pub fn build(self) -> crate::types::OpsEntity {
        crate::types::OpsEntity {
            id: self.id,
            data: self.data,
        }
    }
}
