// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an association status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociationStatus {
    /// <p>The date when the status changed.</p>
    pub date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status.</p>
    pub name: ::std::option::Option<crate::types::AssociationStatusName>,
    /// <p>The reason for the status.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>A user-defined string.</p>
    pub additional_info: ::std::option::Option<::std::string::String>,
}
impl AssociationStatus {
    /// <p>The date when the status changed.</p>
    pub fn date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date.as_ref()
    }
    /// <p>The status.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::AssociationStatusName> {
        self.name.as_ref()
    }
    /// <p>The reason for the status.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>A user-defined string.</p>
    pub fn additional_info(&self) -> ::std::option::Option<&str> {
        self.additional_info.as_deref()
    }
}
impl AssociationStatus {
    /// Creates a new builder-style object to manufacture [`AssociationStatus`](crate::types::AssociationStatus).
    pub fn builder() -> crate::types::builders::AssociationStatusBuilder {
        crate::types::builders::AssociationStatusBuilder::default()
    }
}

/// A builder for [`AssociationStatus`](crate::types::AssociationStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociationStatusBuilder {
    pub(crate) date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<crate::types::AssociationStatusName>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) additional_info: ::std::option::Option<::std::string::String>,
}
impl AssociationStatusBuilder {
    /// <p>The date when the status changed.</p>
    pub fn date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the status changed.</p>
    pub fn set_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date = input;
        self
    }
    /// <p>The date when the status changed.</p>
    pub fn get_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date
    }
    /// <p>The status.</p>
    pub fn name(mut self, input: crate::types::AssociationStatusName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AssociationStatusName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The status.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AssociationStatusName> {
        &self.name
    }
    /// <p>The reason for the status.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the status.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The reason for the status.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>A user-defined string.</p>
    pub fn additional_info(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.additional_info = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-defined string.</p>
    pub fn set_additional_info(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.additional_info = input;
        self
    }
    /// <p>A user-defined string.</p>
    pub fn get_additional_info(&self) -> &::std::option::Option<::std::string::String> {
        &self.additional_info
    }
    /// Consumes the builder and constructs a [`AssociationStatus`](crate::types::AssociationStatus).
    pub fn build(self) -> crate::types::AssociationStatus {
        crate::types::AssociationStatus {
            date: self.date,
            name: self.name,
            message: self.message,
            additional_info: self.additional_info,
        }
    }
}
