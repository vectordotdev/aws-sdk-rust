// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filters for the association execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociationExecutionTargetsFilter {
    /// <p>The key value used in the request.</p>
    pub key: ::std::option::Option<crate::types::AssociationExecutionTargetsFilterKey>,
    /// <p>The value specified for the key.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl AssociationExecutionTargetsFilter {
    /// <p>The key value used in the request.</p>
    pub fn key(&self) -> ::std::option::Option<&crate::types::AssociationExecutionTargetsFilterKey> {
        self.key.as_ref()
    }
    /// <p>The value specified for the key.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl AssociationExecutionTargetsFilter {
    /// Creates a new builder-style object to manufacture [`AssociationExecutionTargetsFilter`](crate::types::AssociationExecutionTargetsFilter).
    pub fn builder() -> crate::types::builders::AssociationExecutionTargetsFilterBuilder {
        crate::types::builders::AssociationExecutionTargetsFilterBuilder::default()
    }
}

/// A builder for [`AssociationExecutionTargetsFilter`](crate::types::AssociationExecutionTargetsFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociationExecutionTargetsFilterBuilder {
    pub(crate) key: ::std::option::Option<crate::types::AssociationExecutionTargetsFilterKey>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl AssociationExecutionTargetsFilterBuilder {
    /// <p>The key value used in the request.</p>
    pub fn key(mut self, input: crate::types::AssociationExecutionTargetsFilterKey) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The key value used in the request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<crate::types::AssociationExecutionTargetsFilterKey>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key value used in the request.</p>
    pub fn get_key(&self) -> &::std::option::Option<crate::types::AssociationExecutionTargetsFilterKey> {
        &self.key
    }
    /// <p>The value specified for the key.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value specified for the key.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value specified for the key.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`AssociationExecutionTargetsFilter`](crate::types::AssociationExecutionTargetsFilter).
    pub fn build(self) -> crate::types::AssociationExecutionTargetsFilter {
        crate::types::AssociationExecutionTargetsFilter {
            key: self.key,
            value: self.value,
        }
    }
}
