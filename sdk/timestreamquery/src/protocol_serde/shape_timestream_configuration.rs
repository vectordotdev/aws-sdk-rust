// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_timestream_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TimestreamConfiguration,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.database_name {
        object.key("DatabaseName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.table_name {
        object.key("TableName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.time_column {
        object.key("TimeColumn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.dimension_mappings {
        let mut array_5 = object.key("DimensionMappings").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_dimension_mapping::ser_dimension_mapping(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.multi_measure_mappings {
        #[allow(unused_mut)]
        let mut object_9 = object.key("MultiMeasureMappings").start_object();
        crate::protocol_serde::shape_multi_measure_mappings::ser_multi_measure_mappings(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.mixed_measure_mappings {
        let mut array_11 = object.key("MixedMeasureMappings").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_mixed_measure_mapping::ser_mixed_measure_mapping(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.measure_name_column {
        object.key("MeasureNameColumn").string(var_14.as_str());
    }
    Ok(())
}

pub(crate) fn de_timestream_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::TimestreamConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TimestreamConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DatabaseName" => {
                            builder = builder.set_database_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TableName" => {
                            builder = builder.set_table_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TimeColumn" => {
                            builder = builder.set_time_column(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DimensionMappings" => {
                            builder = builder
                                .set_dimension_mappings(crate::protocol_serde::shape_dimension_mapping_list::de_dimension_mapping_list(tokens)?);
                        }
                        "MultiMeasureMappings" => {
                            builder = builder
                                .set_multi_measure_mappings(crate::protocol_serde::shape_multi_measure_mappings::de_multi_measure_mappings(tokens)?);
                        }
                        "MixedMeasureMappings" => {
                            builder = builder.set_mixed_measure_mappings(
                                crate::protocol_serde::shape_mixed_measure_mapping_list::de_mixed_measure_mapping_list(tokens)?,
                            );
                        }
                        "MeasureNameColumn" => {
                            builder = builder.set_measure_name_column(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
