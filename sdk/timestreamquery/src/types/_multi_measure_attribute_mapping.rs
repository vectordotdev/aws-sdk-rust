// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Attribute mapping for MULTI value measures.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultiMeasureAttributeMapping {
    /// <p>Source column from where the attribute value is to be read.</p>
    pub source_column: ::std::option::Option<::std::string::String>,
    /// <p>Custom name to be used for attribute name in derived table. If not provided, source column name would be used.</p>
    pub target_multi_measure_attribute_name: ::std::option::Option<::std::string::String>,
    /// <p>Type of the attribute to be read from the source column.</p>
    pub measure_value_type: ::std::option::Option<crate::types::ScalarMeasureValueType>,
}
impl MultiMeasureAttributeMapping {
    /// <p>Source column from where the attribute value is to be read.</p>
    pub fn source_column(&self) -> ::std::option::Option<&str> {
        self.source_column.as_deref()
    }
    /// <p>Custom name to be used for attribute name in derived table. If not provided, source column name would be used.</p>
    pub fn target_multi_measure_attribute_name(&self) -> ::std::option::Option<&str> {
        self.target_multi_measure_attribute_name.as_deref()
    }
    /// <p>Type of the attribute to be read from the source column.</p>
    pub fn measure_value_type(&self) -> ::std::option::Option<&crate::types::ScalarMeasureValueType> {
        self.measure_value_type.as_ref()
    }
}
impl MultiMeasureAttributeMapping {
    /// Creates a new builder-style object to manufacture [`MultiMeasureAttributeMapping`](crate::types::MultiMeasureAttributeMapping).
    pub fn builder() -> crate::types::builders::MultiMeasureAttributeMappingBuilder {
        crate::types::builders::MultiMeasureAttributeMappingBuilder::default()
    }
}

/// A builder for [`MultiMeasureAttributeMapping`](crate::types::MultiMeasureAttributeMapping).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MultiMeasureAttributeMappingBuilder {
    pub(crate) source_column: ::std::option::Option<::std::string::String>,
    pub(crate) target_multi_measure_attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) measure_value_type: ::std::option::Option<crate::types::ScalarMeasureValueType>,
}
impl MultiMeasureAttributeMappingBuilder {
    /// <p>Source column from where the attribute value is to be read.</p>
    pub fn source_column(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_column = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source column from where the attribute value is to be read.</p>
    pub fn set_source_column(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_column = input;
        self
    }
    /// <p>Source column from where the attribute value is to be read.</p>
    pub fn get_source_column(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_column
    }
    /// <p>Custom name to be used for attribute name in derived table. If not provided, source column name would be used.</p>
    pub fn target_multi_measure_attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_multi_measure_attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Custom name to be used for attribute name in derived table. If not provided, source column name would be used.</p>
    pub fn set_target_multi_measure_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_multi_measure_attribute_name = input;
        self
    }
    /// <p>Custom name to be used for attribute name in derived table. If not provided, source column name would be used.</p>
    pub fn get_target_multi_measure_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_multi_measure_attribute_name
    }
    /// <p>Type of the attribute to be read from the source column.</p>
    pub fn measure_value_type(mut self, input: crate::types::ScalarMeasureValueType) -> Self {
        self.measure_value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of the attribute to be read from the source column.</p>
    pub fn set_measure_value_type(mut self, input: ::std::option::Option<crate::types::ScalarMeasureValueType>) -> Self {
        self.measure_value_type = input;
        self
    }
    /// <p>Type of the attribute to be read from the source column.</p>
    pub fn get_measure_value_type(&self) -> &::std::option::Option<crate::types::ScalarMeasureValueType> {
        &self.measure_value_type
    }
    /// Consumes the builder and constructs a [`MultiMeasureAttributeMapping`](crate::types::MultiMeasureAttributeMapping).
    pub fn build(self) -> crate::types::MultiMeasureAttributeMapping {
        crate::types::MultiMeasureAttributeMapping {
            source_column: self.source_column,
            target_multi_measure_attribute_name: self.target_multi_measure_attribute_name,
            measure_value_type: self.measure_value_type,
        }
    }
}
