// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Statistics for a single scheduled query run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecutionStats {
    /// <p>Total time, measured in milliseconds, that was needed for the scheduled query run to complete.</p>
    pub execution_time_in_millis: i64,
    /// <p>Data writes metered for records ingested in a single scheduled query run.</p>
    pub data_writes: i64,
    /// <p>Bytes metered for a single scheduled query run.</p>
    pub bytes_metered: i64,
    /// <p>The number of records ingested for a single scheduled query run. </p>
    pub records_ingested: i64,
    /// <p>Number of rows present in the output from running a query before ingestion to destination data source.</p>
    pub query_result_rows: i64,
}
impl ExecutionStats {
    /// <p>Total time, measured in milliseconds, that was needed for the scheduled query run to complete.</p>
    pub fn execution_time_in_millis(&self) -> i64 {
        self.execution_time_in_millis
    }
    /// <p>Data writes metered for records ingested in a single scheduled query run.</p>
    pub fn data_writes(&self) -> i64 {
        self.data_writes
    }
    /// <p>Bytes metered for a single scheduled query run.</p>
    pub fn bytes_metered(&self) -> i64 {
        self.bytes_metered
    }
    /// <p>The number of records ingested for a single scheduled query run. </p>
    pub fn records_ingested(&self) -> i64 {
        self.records_ingested
    }
    /// <p>Number of rows present in the output from running a query before ingestion to destination data source.</p>
    pub fn query_result_rows(&self) -> i64 {
        self.query_result_rows
    }
}
impl ExecutionStats {
    /// Creates a new builder-style object to manufacture [`ExecutionStats`](crate::types::ExecutionStats).
    pub fn builder() -> crate::types::builders::ExecutionStatsBuilder {
        crate::types::builders::ExecutionStatsBuilder::default()
    }
}

/// A builder for [`ExecutionStats`](crate::types::ExecutionStats).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecutionStatsBuilder {
    pub(crate) execution_time_in_millis: ::std::option::Option<i64>,
    pub(crate) data_writes: ::std::option::Option<i64>,
    pub(crate) bytes_metered: ::std::option::Option<i64>,
    pub(crate) records_ingested: ::std::option::Option<i64>,
    pub(crate) query_result_rows: ::std::option::Option<i64>,
}
impl ExecutionStatsBuilder {
    /// <p>Total time, measured in milliseconds, that was needed for the scheduled query run to complete.</p>
    pub fn execution_time_in_millis(mut self, input: i64) -> Self {
        self.execution_time_in_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total time, measured in milliseconds, that was needed for the scheduled query run to complete.</p>
    pub fn set_execution_time_in_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.execution_time_in_millis = input;
        self
    }
    /// <p>Total time, measured in milliseconds, that was needed for the scheduled query run to complete.</p>
    pub fn get_execution_time_in_millis(&self) -> &::std::option::Option<i64> {
        &self.execution_time_in_millis
    }
    /// <p>Data writes metered for records ingested in a single scheduled query run.</p>
    pub fn data_writes(mut self, input: i64) -> Self {
        self.data_writes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Data writes metered for records ingested in a single scheduled query run.</p>
    pub fn set_data_writes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.data_writes = input;
        self
    }
    /// <p>Data writes metered for records ingested in a single scheduled query run.</p>
    pub fn get_data_writes(&self) -> &::std::option::Option<i64> {
        &self.data_writes
    }
    /// <p>Bytes metered for a single scheduled query run.</p>
    pub fn bytes_metered(mut self, input: i64) -> Self {
        self.bytes_metered = ::std::option::Option::Some(input);
        self
    }
    /// <p>Bytes metered for a single scheduled query run.</p>
    pub fn set_bytes_metered(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_metered = input;
        self
    }
    /// <p>Bytes metered for a single scheduled query run.</p>
    pub fn get_bytes_metered(&self) -> &::std::option::Option<i64> {
        &self.bytes_metered
    }
    /// <p>The number of records ingested for a single scheduled query run. </p>
    pub fn records_ingested(mut self, input: i64) -> Self {
        self.records_ingested = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of records ingested for a single scheduled query run. </p>
    pub fn set_records_ingested(mut self, input: ::std::option::Option<i64>) -> Self {
        self.records_ingested = input;
        self
    }
    /// <p>The number of records ingested for a single scheduled query run. </p>
    pub fn get_records_ingested(&self) -> &::std::option::Option<i64> {
        &self.records_ingested
    }
    /// <p>Number of rows present in the output from running a query before ingestion to destination data source.</p>
    pub fn query_result_rows(mut self, input: i64) -> Self {
        self.query_result_rows = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of rows present in the output from running a query before ingestion to destination data source.</p>
    pub fn set_query_result_rows(mut self, input: ::std::option::Option<i64>) -> Self {
        self.query_result_rows = input;
        self
    }
    /// <p>Number of rows present in the output from running a query before ingestion to destination data source.</p>
    pub fn get_query_result_rows(&self) -> &::std::option::Option<i64> {
        &self.query_result_rows
    }
    /// Consumes the builder and constructs a [`ExecutionStats`](crate::types::ExecutionStats).
    pub fn build(self) -> crate::types::ExecutionStats {
        crate::types::ExecutionStats {
            execution_time_in_millis: self.execution_time_in_millis.unwrap_or_default(),
            data_writes: self.data_writes.unwrap_or_default(),
            bytes_metered: self.bytes_metered.unwrap_or_default(),
            records_ingested: self.records_ingested.unwrap_or_default(),
            query_result_rows: self.query_result_rows.unwrap_or_default(),
        }
    }
}
