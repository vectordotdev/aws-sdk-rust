// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Run summary for the scheduled query</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScheduledQueryRunSummary {
    /// <p>InvocationTime for this run. This is the time at which the query is scheduled to run. Parameter <code>@scheduled_runtime</code> can be used in the query to get the value. </p>
    pub invocation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The actual time when the query was run.</p>
    pub trigger_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of a scheduled query run.</p>
    pub run_status: ::std::option::Option<crate::types::ScheduledQueryRunStatus>,
    /// <p>Runtime statistics for a scheduled run.</p>
    pub execution_stats: ::std::option::Option<crate::types::ExecutionStats>,
    /// <p>S3 location for error report.</p>
    pub error_report_location: ::std::option::Option<crate::types::ErrorReportLocation>,
    /// <p>Error message for the scheduled query in case of failure. You might have to look at the error report to get more detailed error reasons. </p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
}
impl ScheduledQueryRunSummary {
    /// <p>InvocationTime for this run. This is the time at which the query is scheduled to run. Parameter <code>@scheduled_runtime</code> can be used in the query to get the value. </p>
    pub fn invocation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.invocation_time.as_ref()
    }
    /// <p>The actual time when the query was run.</p>
    pub fn trigger_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.trigger_time.as_ref()
    }
    /// <p>The status of a scheduled query run.</p>
    pub fn run_status(&self) -> ::std::option::Option<&crate::types::ScheduledQueryRunStatus> {
        self.run_status.as_ref()
    }
    /// <p>Runtime statistics for a scheduled run.</p>
    pub fn execution_stats(&self) -> ::std::option::Option<&crate::types::ExecutionStats> {
        self.execution_stats.as_ref()
    }
    /// <p>S3 location for error report.</p>
    pub fn error_report_location(&self) -> ::std::option::Option<&crate::types::ErrorReportLocation> {
        self.error_report_location.as_ref()
    }
    /// <p>Error message for the scheduled query in case of failure. You might have to look at the error report to get more detailed error reasons. </p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl ScheduledQueryRunSummary {
    /// Creates a new builder-style object to manufacture [`ScheduledQueryRunSummary`](crate::types::ScheduledQueryRunSummary).
    pub fn builder() -> crate::types::builders::ScheduledQueryRunSummaryBuilder {
        crate::types::builders::ScheduledQueryRunSummaryBuilder::default()
    }
}

/// A builder for [`ScheduledQueryRunSummary`](crate::types::ScheduledQueryRunSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScheduledQueryRunSummaryBuilder {
    pub(crate) invocation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) trigger_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) run_status: ::std::option::Option<crate::types::ScheduledQueryRunStatus>,
    pub(crate) execution_stats: ::std::option::Option<crate::types::ExecutionStats>,
    pub(crate) error_report_location: ::std::option::Option<crate::types::ErrorReportLocation>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
}
impl ScheduledQueryRunSummaryBuilder {
    /// <p>InvocationTime for this run. This is the time at which the query is scheduled to run. Parameter <code>@scheduled_runtime</code> can be used in the query to get the value. </p>
    pub fn invocation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.invocation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>InvocationTime for this run. This is the time at which the query is scheduled to run. Parameter <code>@scheduled_runtime</code> can be used in the query to get the value. </p>
    pub fn set_invocation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.invocation_time = input;
        self
    }
    /// <p>InvocationTime for this run. This is the time at which the query is scheduled to run. Parameter <code>@scheduled_runtime</code> can be used in the query to get the value. </p>
    pub fn get_invocation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.invocation_time
    }
    /// <p>The actual time when the query was run.</p>
    pub fn trigger_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.trigger_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The actual time when the query was run.</p>
    pub fn set_trigger_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.trigger_time = input;
        self
    }
    /// <p>The actual time when the query was run.</p>
    pub fn get_trigger_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.trigger_time
    }
    /// <p>The status of a scheduled query run.</p>
    pub fn run_status(mut self, input: crate::types::ScheduledQueryRunStatus) -> Self {
        self.run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a scheduled query run.</p>
    pub fn set_run_status(mut self, input: ::std::option::Option<crate::types::ScheduledQueryRunStatus>) -> Self {
        self.run_status = input;
        self
    }
    /// <p>The status of a scheduled query run.</p>
    pub fn get_run_status(&self) -> &::std::option::Option<crate::types::ScheduledQueryRunStatus> {
        &self.run_status
    }
    /// <p>Runtime statistics for a scheduled run.</p>
    pub fn execution_stats(mut self, input: crate::types::ExecutionStats) -> Self {
        self.execution_stats = ::std::option::Option::Some(input);
        self
    }
    /// <p>Runtime statistics for a scheduled run.</p>
    pub fn set_execution_stats(mut self, input: ::std::option::Option<crate::types::ExecutionStats>) -> Self {
        self.execution_stats = input;
        self
    }
    /// <p>Runtime statistics for a scheduled run.</p>
    pub fn get_execution_stats(&self) -> &::std::option::Option<crate::types::ExecutionStats> {
        &self.execution_stats
    }
    /// <p>S3 location for error report.</p>
    pub fn error_report_location(mut self, input: crate::types::ErrorReportLocation) -> Self {
        self.error_report_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>S3 location for error report.</p>
    pub fn set_error_report_location(mut self, input: ::std::option::Option<crate::types::ErrorReportLocation>) -> Self {
        self.error_report_location = input;
        self
    }
    /// <p>S3 location for error report.</p>
    pub fn get_error_report_location(&self) -> &::std::option::Option<crate::types::ErrorReportLocation> {
        &self.error_report_location
    }
    /// <p>Error message for the scheduled query in case of failure. You might have to look at the error report to get more detailed error reasons. </p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error message for the scheduled query in case of failure. You might have to look at the error report to get more detailed error reasons. </p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>Error message for the scheduled query in case of failure. You might have to look at the error report to get more detailed error reasons. </p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// Consumes the builder and constructs a [`ScheduledQueryRunSummary`](crate::types::ScheduledQueryRunSummary).
    pub fn build(self) -> crate::types::ScheduledQueryRunSummary {
        crate::types::ScheduledQueryRunSummary {
            invocation_time: self.invocation_time,
            trigger_time: self.trigger_time,
            run_status: self.run_status,
            execution_stats: self.execution_stats,
            error_report_location: self.error_report_location,
            failure_reason: self.failure_reason,
        }
    }
}
