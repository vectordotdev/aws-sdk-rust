// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> S3 report location for the scheduled query run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3ReportLocation {
    /// <p> S3 bucket name. </p>
    pub bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>S3 key. </p>
    pub object_key: ::std::option::Option<::std::string::String>,
}
impl S3ReportLocation {
    /// <p> S3 bucket name. </p>
    pub fn bucket_name(&self) -> ::std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>S3 key. </p>
    pub fn object_key(&self) -> ::std::option::Option<&str> {
        self.object_key.as_deref()
    }
}
impl S3ReportLocation {
    /// Creates a new builder-style object to manufacture [`S3ReportLocation`](crate::types::S3ReportLocation).
    pub fn builder() -> crate::types::builders::S3ReportLocationBuilder {
        crate::types::builders::S3ReportLocationBuilder::default()
    }
}

/// A builder for [`S3ReportLocation`](crate::types::S3ReportLocation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3ReportLocationBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) object_key: ::std::option::Option<::std::string::String>,
}
impl S3ReportLocationBuilder {
    /// <p> S3 bucket name. </p>
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> S3 bucket name. </p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p> S3 bucket name. </p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p>S3 key. </p>
    pub fn object_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>S3 key. </p>
    pub fn set_object_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_key = input;
        self
    }
    /// <p>S3 key. </p>
    pub fn get_object_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_key
    }
    /// Consumes the builder and constructs a [`S3ReportLocation`](crate::types::S3ReportLocation).
    pub fn build(self) -> crate::types::S3ReportLocation {
        crate::types::S3ReportLocation {
            bucket_name: self.bucket_name,
            object_key: self.object_key,
        }
    }
}
