// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the column that is returned by the query. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SelectColumn {
    /// <p>Name of the column.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Contains the data type of a column in a query result set. The data type can be scalar or complex. The supported scalar data types are integers, Boolean, string, double, timestamp, date, time, and intervals. The supported complex data types are arrays, rows, and timeseries.</p>
    pub r#type: ::std::option::Option<crate::types::Type>,
    /// <p> Database that has this column.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>Table within the database that has this column. </p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>True, if the column name was aliased by the query. False otherwise.</p>
    pub aliased: ::std::option::Option<bool>,
}
impl SelectColumn {
    /// <p>Name of the column.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Contains the data type of a column in a query result set. The data type can be scalar or complex. The supported scalar data types are integers, Boolean, string, double, timestamp, date, time, and intervals. The supported complex data types are arrays, rows, and timeseries.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::Type> {
        self.r#type.as_ref()
    }
    /// <p> Database that has this column.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>Table within the database that has this column. </p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>True, if the column name was aliased by the query. False otherwise.</p>
    pub fn aliased(&self) -> ::std::option::Option<bool> {
        self.aliased
    }
}
impl SelectColumn {
    /// Creates a new builder-style object to manufacture [`SelectColumn`](crate::types::SelectColumn).
    pub fn builder() -> crate::types::builders::SelectColumnBuilder {
        crate::types::builders::SelectColumnBuilder::default()
    }
}

/// A builder for [`SelectColumn`](crate::types::SelectColumn).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SelectColumnBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::Type>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) aliased: ::std::option::Option<bool>,
}
impl SelectColumnBuilder {
    /// <p>Name of the column.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the column.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the column.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Contains the data type of a column in a query result set. The data type can be scalar or complex. The supported scalar data types are integers, Boolean, string, double, timestamp, date, time, and intervals. The supported complex data types are arrays, rows, and timeseries.</p>
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the data type of a column in a query result set. The data type can be scalar or complex. The supported scalar data types are integers, Boolean, string, double, timestamp, date, time, and intervals. The supported complex data types are arrays, rows, and timeseries.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Contains the data type of a column in a query result set. The data type can be scalar or complex. The supported scalar data types are integers, Boolean, string, double, timestamp, date, time, and intervals. The supported complex data types are arrays, rows, and timeseries.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::Type> {
        &self.r#type
    }
    /// <p> Database that has this column.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Database that has this column.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p> Database that has this column.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>Table within the database that has this column. </p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Table within the database that has this column. </p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>Table within the database that has this column. </p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>True, if the column name was aliased by the query. False otherwise.</p>
    pub fn aliased(mut self, input: bool) -> Self {
        self.aliased = ::std::option::Option::Some(input);
        self
    }
    /// <p>True, if the column name was aliased by the query. False otherwise.</p>
    pub fn set_aliased(mut self, input: ::std::option::Option<bool>) -> Self {
        self.aliased = input;
        self
    }
    /// <p>True, if the column name was aliased by the query. False otherwise.</p>
    pub fn get_aliased(&self) -> &::std::option::Option<bool> {
        &self.aliased
    }
    /// Consumes the builder and constructs a [`SelectColumn`](crate::types::SelectColumn).
    pub fn build(self) -> crate::types::SelectColumn {
        crate::types::SelectColumn {
            name: self.name,
            r#type: self.r#type,
            database_name: self.database_name,
            table_name: self.table_name,
            aliased: self.aliased,
        }
    }
}
