// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ScalarType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let scalartype = unimplemented!();
/// match scalartype {
///     ScalarType::Bigint => { /* ... */ },
///     ScalarType::Boolean => { /* ... */ },
///     ScalarType::Date => { /* ... */ },
///     ScalarType::Double => { /* ... */ },
///     ScalarType::Integer => { /* ... */ },
///     ScalarType::IntervalDayToSecond => { /* ... */ },
///     ScalarType::IntervalYearToMonth => { /* ... */ },
///     ScalarType::Time => { /* ... */ },
///     ScalarType::Timestamp => { /* ... */ },
///     ScalarType::UnknownValue => { /* ... */ },
///     ScalarType::Varchar => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `scalartype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ScalarType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ScalarType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ScalarType::NewFeature` is defined.
/// Specifically, when `scalartype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ScalarType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// _Note: `ScalarType::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ScalarType {
    #[allow(missing_docs)] // documentation missing in model
    Bigint,
    #[allow(missing_docs)] // documentation missing in model
    Boolean,
    #[allow(missing_docs)] // documentation missing in model
    Date,
    #[allow(missing_docs)] // documentation missing in model
    Double,
    #[allow(missing_docs)] // documentation missing in model
    Integer,
    #[allow(missing_docs)] // documentation missing in model
    IntervalDayToSecond,
    #[allow(missing_docs)] // documentation missing in model
    IntervalYearToMonth,
    #[allow(missing_docs)] // documentation missing in model
    Time,
    #[allow(missing_docs)] // documentation missing in model
    Timestamp,
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    #[allow(missing_docs)] // documentation missing in model
    Varchar,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ScalarType {
    fn from(s: &str) -> Self {
        match s {
            "BIGINT" => ScalarType::Bigint,
            "BOOLEAN" => ScalarType::Boolean,
            "DATE" => ScalarType::Date,
            "DOUBLE" => ScalarType::Double,
            "INTEGER" => ScalarType::Integer,
            "INTERVAL_DAY_TO_SECOND" => ScalarType::IntervalDayToSecond,
            "INTERVAL_YEAR_TO_MONTH" => ScalarType::IntervalYearToMonth,
            "TIME" => ScalarType::Time,
            "TIMESTAMP" => ScalarType::Timestamp,
            "UNKNOWN" => ScalarType::UnknownValue,
            "VARCHAR" => ScalarType::Varchar,
            other => ScalarType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ScalarType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ScalarType::from(s))
    }
}
impl ScalarType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ScalarType::Bigint => "BIGINT",
            ScalarType::Boolean => "BOOLEAN",
            ScalarType::Date => "DATE",
            ScalarType::Double => "DOUBLE",
            ScalarType::Integer => "INTEGER",
            ScalarType::IntervalDayToSecond => "INTERVAL_DAY_TO_SECOND",
            ScalarType::IntervalYearToMonth => "INTERVAL_YEAR_TO_MONTH",
            ScalarType::Time => "TIME",
            ScalarType::Timestamp => "TIMESTAMP",
            ScalarType::UnknownValue => "UNKNOWN",
            ScalarType::Varchar => "VARCHAR",
            ScalarType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BIGINT",
            "BOOLEAN",
            "DATE",
            "DOUBLE",
            "INTEGER",
            "INTERVAL_DAY_TO_SECOND",
            "INTERVAL_YEAR_TO_MONTH",
            "TIME",
            "TIMESTAMP",
            "UNKNOWN",
            "VARCHAR",
        ]
    }
}
impl ::std::convert::AsRef<str> for ScalarType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
