// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an available endpoint against which to make API calls against, as well as the TTL for that endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Endpoint {
    /// <p>An endpoint address.</p>
    pub address: ::std::option::Option<::std::string::String>,
    /// <p>The TTL for the endpoint, in minutes.</p>
    pub cache_period_in_minutes: i64,
}
impl Endpoint {
    /// <p>An endpoint address.</p>
    pub fn address(&self) -> ::std::option::Option<&str> {
        self.address.as_deref()
    }
    /// <p>The TTL for the endpoint, in minutes.</p>
    pub fn cache_period_in_minutes(&self) -> i64 {
        self.cache_period_in_minutes
    }
}
impl Endpoint {
    /// Creates a new builder-style object to manufacture [`Endpoint`](crate::types::Endpoint).
    pub fn builder() -> crate::types::builders::EndpointBuilder {
        crate::types::builders::EndpointBuilder::default()
    }
}

/// A builder for [`Endpoint`](crate::types::Endpoint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EndpointBuilder {
    pub(crate) address: ::std::option::Option<::std::string::String>,
    pub(crate) cache_period_in_minutes: ::std::option::Option<i64>,
}
impl EndpointBuilder {
    /// <p>An endpoint address.</p>
    pub fn address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An endpoint address.</p>
    pub fn set_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// <p>An endpoint address.</p>
    pub fn get_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.address
    }
    /// <p>The TTL for the endpoint, in minutes.</p>
    pub fn cache_period_in_minutes(mut self, input: i64) -> Self {
        self.cache_period_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The TTL for the endpoint, in minutes.</p>
    pub fn set_cache_period_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.cache_period_in_minutes = input;
        self
    }
    /// <p>The TTL for the endpoint, in minutes.</p>
    pub fn get_cache_period_in_minutes(&self) -> &::std::option::Option<i64> {
        &self.cache_period_in_minutes
    }
    /// Consumes the builder and constructs a [`Endpoint`](crate::types::Endpoint).
    pub fn build(self) -> crate::types::Endpoint {
        crate::types::Endpoint {
            address: self.address,
            cache_period_in_minutes: self.cache_period_in_minutes.unwrap_or_default(),
        }
    }
}
