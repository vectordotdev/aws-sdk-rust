// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateScheduledQuery`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl ::std::convert::Into<String>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::set_name): <p>Name of the scheduled query.</p>
    ///   - [`query_string(impl ::std::convert::Into<String>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::query_string) / [`set_query_string(Option<String>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::set_query_string): <p>The query string to run. Parameter names can be specified in the query string <code>@</code> character followed by an identifier. The named Parameter <code>@scheduled_runtime</code> is reserved and can be used in the query to get the time at which the query is scheduled to run.</p>  <p>The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of <code>@scheduled_runtime</code> paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the <code>@scheduled_runtime</code> parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.</p>
    ///   - [`schedule_configuration(ScheduleConfiguration)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::schedule_configuration) / [`set_schedule_configuration(Option<ScheduleConfiguration>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::set_schedule_configuration): <p>The schedule configuration for the query.</p>
    ///   - [`notification_configuration(NotificationConfiguration)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::notification_configuration) / [`set_notification_configuration(Option<NotificationConfiguration>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::set_notification_configuration): <p>Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it. </p>
    ///   - [`target_configuration(TargetConfiguration)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::target_configuration) / [`set_target_configuration(Option<TargetConfiguration>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::set_target_configuration): <p>Configuration used for writing the result of a query.</p>
    ///   - [`client_token(impl ::std::convert::Into<String>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::set_client_token): <p>Using a ClientToken makes the call to CreateScheduledQuery idempotent, in other words, making the same request repeatedly will produce the same result. Making multiple identical CreateScheduledQuery requests has the same effect as making a single request. </p>  <ul>   <li> <p> If CreateScheduledQuery is called without a <code>ClientToken</code>, the Query SDK generates a <code>ClientToken</code> on your behalf.</p> </li>   <li> <p> After 8 hours, any request with the same <code>ClientToken</code> is treated as a new request. </p> </li>  </ul>
    ///   - [`scheduled_query_execution_role_arn(impl ::std::convert::Into<String>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::scheduled_query_execution_role_arn) / [`set_scheduled_query_execution_role_arn(Option<String>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::set_scheduled_query_execution_role_arn): <p>The ARN for the IAM role that Timestream will assume when running the scheduled query. </p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::set_tags): <p>A list of key-value pairs to label the scheduled query.</p>
    ///   - [`kms_key_id(impl ::std::convert::Into<String>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::set_kms_key_id): <p>The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with <i>alias/</i> </p>  <p>If ErrorReportConfiguration uses <code>SSE_KMS</code> as encryption type, the same KmsKeyId is used to encrypt the error report at rest.</p>
    ///   - [`error_report_configuration(ErrorReportConfiguration)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::error_report_configuration) / [`set_error_report_configuration(Option<ErrorReportConfiguration>)`](crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::set_error_report_configuration): <p>Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results. </p>
    /// - On success, responds with [`CreateScheduledQueryOutput`](crate::operation::create_scheduled_query::CreateScheduledQueryOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::create_scheduled_query::CreateScheduledQueryOutput::arn): <p>ARN for the created scheduled query.</p>
    /// - On failure, responds with [`SdkError<CreateScheduledQueryError>`](crate::operation::create_scheduled_query::CreateScheduledQueryError)
    pub fn create_scheduled_query(&self) -> crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder {
        crate::operation::create_scheduled_query::builders::CreateScheduledQueryFluentBuilder::new(self.handle.clone())
    }
}
