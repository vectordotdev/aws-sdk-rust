// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties associated with the dataset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatasetProperties {
    /// <p>The ARN of the dataset.</p>
    pub dataset_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the dataset.</p>
    pub dataset_name: ::std::option::Option<::std::string::String>,
    /// <p>The dataset type (training data or test data).</p>
    pub dataset_type: ::std::option::Option<crate::types::DatasetType>,
    /// <p>The S3 URI where the dataset is stored.</p>
    pub dataset_s3_uri: ::std::option::Option<::std::string::String>,
    /// <p>Description of the dataset.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The dataset status. While the system creates the dataset, the status is <code>CREATING</code>. When the dataset is ready to use, the status changes to <code>COMPLETED</code>. </p>
    pub status: ::std::option::Option<crate::types::DatasetStatus>,
    /// <p>A description of the status of the dataset.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The number of documents in the dataset.</p>
    pub number_of_documents: ::std::option::Option<i64>,
    /// <p>Creation time of the dataset.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Time when the data from the dataset becomes available in the data lake.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DatasetProperties {
    /// <p>The ARN of the dataset.</p>
    pub fn dataset_arn(&self) -> ::std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p>The name of the dataset.</p>
    pub fn dataset_name(&self) -> ::std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>The dataset type (training data or test data).</p>
    pub fn dataset_type(&self) -> ::std::option::Option<&crate::types::DatasetType> {
        self.dataset_type.as_ref()
    }
    /// <p>The S3 URI where the dataset is stored.</p>
    pub fn dataset_s3_uri(&self) -> ::std::option::Option<&str> {
        self.dataset_s3_uri.as_deref()
    }
    /// <p>Description of the dataset.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The dataset status. While the system creates the dataset, the status is <code>CREATING</code>. When the dataset is ready to use, the status changes to <code>COMPLETED</code>. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DatasetStatus> {
        self.status.as_ref()
    }
    /// <p>A description of the status of the dataset.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The number of documents in the dataset.</p>
    pub fn number_of_documents(&self) -> ::std::option::Option<i64> {
        self.number_of_documents
    }
    /// <p>Creation time of the dataset.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Time when the data from the dataset becomes available in the data lake.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl DatasetProperties {
    /// Creates a new builder-style object to manufacture [`DatasetProperties`](crate::types::DatasetProperties).
    pub fn builder() -> crate::types::builders::DatasetPropertiesBuilder {
        crate::types::builders::DatasetPropertiesBuilder::default()
    }
}

/// A builder for [`DatasetProperties`](crate::types::DatasetProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatasetPropertiesBuilder {
    pub(crate) dataset_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_type: ::std::option::Option<crate::types::DatasetType>,
    pub(crate) dataset_s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DatasetStatus>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) number_of_documents: ::std::option::Option<i64>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DatasetPropertiesBuilder {
    /// <p>The ARN of the dataset.</p>
    pub fn dataset_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the dataset.</p>
    pub fn set_dataset_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_arn = input;
        self
    }
    /// <p>The ARN of the dataset.</p>
    pub fn get_dataset_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_arn
    }
    /// <p>The name of the dataset.</p>
    pub fn dataset_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn set_dataset_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p>The name of the dataset.</p>
    pub fn get_dataset_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_name
    }
    /// <p>The dataset type (training data or test data).</p>
    pub fn dataset_type(mut self, input: crate::types::DatasetType) -> Self {
        self.dataset_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dataset type (training data or test data).</p>
    pub fn set_dataset_type(mut self, input: ::std::option::Option<crate::types::DatasetType>) -> Self {
        self.dataset_type = input;
        self
    }
    /// <p>The dataset type (training data or test data).</p>
    pub fn get_dataset_type(&self) -> &::std::option::Option<crate::types::DatasetType> {
        &self.dataset_type
    }
    /// <p>The S3 URI where the dataset is stored.</p>
    pub fn dataset_s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 URI where the dataset is stored.</p>
    pub fn set_dataset_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_s3_uri = input;
        self
    }
    /// <p>The S3 URI where the dataset is stored.</p>
    pub fn get_dataset_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_s3_uri
    }
    /// <p>Description of the dataset.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the dataset.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of the dataset.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The dataset status. While the system creates the dataset, the status is <code>CREATING</code>. When the dataset is ready to use, the status changes to <code>COMPLETED</code>. </p>
    pub fn status(mut self, input: crate::types::DatasetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dataset status. While the system creates the dataset, the status is <code>CREATING</code>. When the dataset is ready to use, the status changes to <code>COMPLETED</code>. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DatasetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The dataset status. While the system creates the dataset, the status is <code>CREATING</code>. When the dataset is ready to use, the status changes to <code>COMPLETED</code>. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DatasetStatus> {
        &self.status
    }
    /// <p>A description of the status of the dataset.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the status of the dataset.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A description of the status of the dataset.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The number of documents in the dataset.</p>
    pub fn number_of_documents(mut self, input: i64) -> Self {
        self.number_of_documents = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of documents in the dataset.</p>
    pub fn set_number_of_documents(mut self, input: ::std::option::Option<i64>) -> Self {
        self.number_of_documents = input;
        self
    }
    /// <p>The number of documents in the dataset.</p>
    pub fn get_number_of_documents(&self) -> &::std::option::Option<i64> {
        &self.number_of_documents
    }
    /// <p>Creation time of the dataset.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Creation time of the dataset.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Creation time of the dataset.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Time when the data from the dataset becomes available in the data lake.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time when the data from the dataset becomes available in the data lake.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>Time when the data from the dataset becomes available in the data lake.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`DatasetProperties`](crate::types::DatasetProperties).
    pub fn build(self) -> crate::types::DatasetProperties {
        crate::types::DatasetProperties {
            dataset_arn: self.dataset_arn,
            dataset_name: self.dataset_name,
            dataset_type: self.dataset_type,
            dataset_s3_uri: self.dataset_s3_uri,
            description: self.description,
            status: self.status,
            message: self.message,
            number_of_documents: self.number_of_documents,
            creation_time: self.creation_time,
            end_time: self.end_time,
        }
    }
}
