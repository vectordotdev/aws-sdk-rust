// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration required for a custom classification model.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentClassificationConfig {
    /// <p>Classification mode indicates whether the documents are <code>MULTI_CLASS</code> or <code>MULTI_LABEL</code>.</p>
    pub mode: ::std::option::Option<crate::types::DocumentClassifierMode>,
    /// <p>One or more labels to associate with the custom classifier.</p>
    pub labels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DocumentClassificationConfig {
    /// <p>Classification mode indicates whether the documents are <code>MULTI_CLASS</code> or <code>MULTI_LABEL</code>.</p>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::DocumentClassifierMode> {
        self.mode.as_ref()
    }
    /// <p>One or more labels to associate with the custom classifier.</p>
    pub fn labels(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.labels.as_deref()
    }
}
impl DocumentClassificationConfig {
    /// Creates a new builder-style object to manufacture [`DocumentClassificationConfig`](crate::types::DocumentClassificationConfig).
    pub fn builder() -> crate::types::builders::DocumentClassificationConfigBuilder {
        crate::types::builders::DocumentClassificationConfigBuilder::default()
    }
}

/// A builder for [`DocumentClassificationConfig`](crate::types::DocumentClassificationConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DocumentClassificationConfigBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::DocumentClassifierMode>,
    pub(crate) labels: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DocumentClassificationConfigBuilder {
    /// <p>Classification mode indicates whether the documents are <code>MULTI_CLASS</code> or <code>MULTI_LABEL</code>.</p>
    pub fn mode(mut self, input: crate::types::DocumentClassifierMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Classification mode indicates whether the documents are <code>MULTI_CLASS</code> or <code>MULTI_LABEL</code>.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::DocumentClassifierMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Classification mode indicates whether the documents are <code>MULTI_CLASS</code> or <code>MULTI_LABEL</code>.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::DocumentClassifierMode> {
        &self.mode
    }
    /// Appends an item to `labels`.
    ///
    /// To override the contents of this collection use [`set_labels`](Self::set_labels).
    ///
    /// <p>One or more labels to associate with the custom classifier.</p>
    pub fn labels(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.labels.unwrap_or_default();
        v.push(input.into());
        self.labels = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more labels to associate with the custom classifier.</p>
    pub fn set_labels(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.labels = input;
        self
    }
    /// <p>One or more labels to associate with the custom classifier.</p>
    pub fn get_labels(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.labels
    }
    /// Consumes the builder and constructs a [`DocumentClassificationConfig`](crate::types::DocumentClassificationConfig).
    pub fn build(self) -> crate::types::DocumentClassificationConfig {
        crate::types::DocumentClassificationConfig {
            mode: self.mode,
            labels: self.labels,
        }
    }
}
