// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter the datasets based on creation time or dataset status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatasetFilter {
    /// <p>Filter the datasets based on the dataset status.</p>
    pub status: ::std::option::Option<crate::types::DatasetStatus>,
    /// <p>Filter the datasets based on the dataset type.</p>
    pub dataset_type: ::std::option::Option<crate::types::DatasetType>,
    /// <p>Filter the datasets to include datasets created after the specified time.</p>
    pub creation_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Filter the datasets to include datasets created before the specified time.</p>
    pub creation_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DatasetFilter {
    /// <p>Filter the datasets based on the dataset status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DatasetStatus> {
        self.status.as_ref()
    }
    /// <p>Filter the datasets based on the dataset type.</p>
    pub fn dataset_type(&self) -> ::std::option::Option<&crate::types::DatasetType> {
        self.dataset_type.as_ref()
    }
    /// <p>Filter the datasets to include datasets created after the specified time.</p>
    pub fn creation_time_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time_after.as_ref()
    }
    /// <p>Filter the datasets to include datasets created before the specified time.</p>
    pub fn creation_time_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time_before.as_ref()
    }
}
impl DatasetFilter {
    /// Creates a new builder-style object to manufacture [`DatasetFilter`](crate::types::DatasetFilter).
    pub fn builder() -> crate::types::builders::DatasetFilterBuilder {
        crate::types::builders::DatasetFilterBuilder::default()
    }
}

/// A builder for [`DatasetFilter`](crate::types::DatasetFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatasetFilterBuilder {
    pub(crate) status: ::std::option::Option<crate::types::DatasetStatus>,
    pub(crate) dataset_type: ::std::option::Option<crate::types::DatasetType>,
    pub(crate) creation_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DatasetFilterBuilder {
    /// <p>Filter the datasets based on the dataset status.</p>
    pub fn status(mut self, input: crate::types::DatasetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the datasets based on the dataset status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DatasetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Filter the datasets based on the dataset status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DatasetStatus> {
        &self.status
    }
    /// <p>Filter the datasets based on the dataset type.</p>
    pub fn dataset_type(mut self, input: crate::types::DatasetType) -> Self {
        self.dataset_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the datasets based on the dataset type.</p>
    pub fn set_dataset_type(mut self, input: ::std::option::Option<crate::types::DatasetType>) -> Self {
        self.dataset_type = input;
        self
    }
    /// <p>Filter the datasets based on the dataset type.</p>
    pub fn get_dataset_type(&self) -> &::std::option::Option<crate::types::DatasetType> {
        &self.dataset_type
    }
    /// <p>Filter the datasets to include datasets created after the specified time.</p>
    pub fn creation_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the datasets to include datasets created after the specified time.</p>
    pub fn set_creation_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time_after = input;
        self
    }
    /// <p>Filter the datasets to include datasets created after the specified time.</p>
    pub fn get_creation_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time_after
    }
    /// <p>Filter the datasets to include datasets created before the specified time.</p>
    pub fn creation_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the datasets to include datasets created before the specified time.</p>
    pub fn set_creation_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time_before = input;
        self
    }
    /// <p>Filter the datasets to include datasets created before the specified time.</p>
    pub fn get_creation_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time_before
    }
    /// Consumes the builder and constructs a [`DatasetFilter`](crate::types::DatasetFilter).
    pub fn build(self) -> crate::types::DatasetFilter {
        crate::types::DatasetFilter {
            status: self.status,
            dataset_type: self.dataset_type,
            creation_time_after: self.creation_time_after,
            creation_time_before: self.creation_time_before,
        }
    }
}
