// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the documents submitted with a dataset for an entity recognizer model.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatasetEntityRecognizerDocuments {
    /// <p> Specifies the Amazon S3 location where the documents for the dataset are located. </p>
    pub s3_uri: ::std::option::Option<::std::string::String>,
    /// <p> Specifies how the text in an input file should be processed. This is optional, and the default is ONE_DOC_PER_LINE. ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers. ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p>
    pub input_format: ::std::option::Option<crate::types::InputFormat>,
}
impl DatasetEntityRecognizerDocuments {
    /// <p> Specifies the Amazon S3 location where the documents for the dataset are located. </p>
    pub fn s3_uri(&self) -> ::std::option::Option<&str> {
        self.s3_uri.as_deref()
    }
    /// <p> Specifies how the text in an input file should be processed. This is optional, and the default is ONE_DOC_PER_LINE. ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers. ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p>
    pub fn input_format(&self) -> ::std::option::Option<&crate::types::InputFormat> {
        self.input_format.as_ref()
    }
}
impl DatasetEntityRecognizerDocuments {
    /// Creates a new builder-style object to manufacture [`DatasetEntityRecognizerDocuments`](crate::types::DatasetEntityRecognizerDocuments).
    pub fn builder() -> crate::types::builders::DatasetEntityRecognizerDocumentsBuilder {
        crate::types::builders::DatasetEntityRecognizerDocumentsBuilder::default()
    }
}

/// A builder for [`DatasetEntityRecognizerDocuments`](crate::types::DatasetEntityRecognizerDocuments).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatasetEntityRecognizerDocumentsBuilder {
    pub(crate) s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) input_format: ::std::option::Option<crate::types::InputFormat>,
}
impl DatasetEntityRecognizerDocumentsBuilder {
    /// <p> Specifies the Amazon S3 location where the documents for the dataset are located. </p>
    pub fn s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Specifies the Amazon S3 location where the documents for the dataset are located. </p>
    pub fn set_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// <p> Specifies the Amazon S3 location where the documents for the dataset are located. </p>
    pub fn get_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_uri
    }
    /// <p> Specifies how the text in an input file should be processed. This is optional, and the default is ONE_DOC_PER_LINE. ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers. ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p>
    pub fn input_format(mut self, input: crate::types::InputFormat) -> Self {
        self.input_format = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies how the text in an input file should be processed. This is optional, and the default is ONE_DOC_PER_LINE. ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers. ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p>
    pub fn set_input_format(mut self, input: ::std::option::Option<crate::types::InputFormat>) -> Self {
        self.input_format = input;
        self
    }
    /// <p> Specifies how the text in an input file should be processed. This is optional, and the default is ONE_DOC_PER_LINE. ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers. ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p>
    pub fn get_input_format(&self) -> &::std::option::Option<crate::types::InputFormat> {
        &self.input_format
    }
    /// Consumes the builder and constructs a [`DatasetEntityRecognizerDocuments`](crate::types::DatasetEntityRecognizerDocuments).
    pub fn build(self) -> crate::types::DatasetEntityRecognizerDocuments {
        crate::types::DatasetEntityRecognizerDocuments {
            s3_uri: self.s3_uri,
            input_format: self.input_format,
        }
    }
}
