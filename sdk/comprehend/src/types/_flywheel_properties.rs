// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The flywheel properties.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FlywheelProperties {
    /// <p>The Amazon Resource Number (ARN) of the flywheel.</p>
    pub flywheel_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Number (ARN) of the active model version.</p>
    pub active_model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.</p>
    pub data_access_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Configuration about the custom classifier associated with the flywheel.</p>
    pub task_config: ::std::option::Option<crate::types::TaskConfig>,
    /// <p>Amazon S3 URI of the data lake location. </p>
    pub data_lake_s3_uri: ::std::option::Option<::std::string::String>,
    /// <p>Data security configuration.</p>
    pub data_security_config: ::std::option::Option<crate::types::DataSecurityConfig>,
    /// <p>The status of the flywheel.</p>
    pub status: ::std::option::Option<crate::types::FlywheelStatus>,
    /// <p>Model type of the flywheel's model.</p>
    pub model_type: ::std::option::Option<crate::types::ModelType>,
    /// <p>A description of the status of the flywheel.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>Creation time of the flywheel.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Last modified time for the flywheel.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The most recent flywheel iteration.</p>
    pub latest_flywheel_iteration: ::std::option::Option<::std::string::String>,
}
impl FlywheelProperties {
    /// <p>The Amazon Resource Number (ARN) of the flywheel.</p>
    pub fn flywheel_arn(&self) -> ::std::option::Option<&str> {
        self.flywheel_arn.as_deref()
    }
    /// <p>The Amazon Resource Number (ARN) of the active model version.</p>
    pub fn active_model_arn(&self) -> ::std::option::Option<&str> {
        self.active_model_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.</p>
    pub fn data_access_role_arn(&self) -> ::std::option::Option<&str> {
        self.data_access_role_arn.as_deref()
    }
    /// <p>Configuration about the custom classifier associated with the flywheel.</p>
    pub fn task_config(&self) -> ::std::option::Option<&crate::types::TaskConfig> {
        self.task_config.as_ref()
    }
    /// <p>Amazon S3 URI of the data lake location. </p>
    pub fn data_lake_s3_uri(&self) -> ::std::option::Option<&str> {
        self.data_lake_s3_uri.as_deref()
    }
    /// <p>Data security configuration.</p>
    pub fn data_security_config(&self) -> ::std::option::Option<&crate::types::DataSecurityConfig> {
        self.data_security_config.as_ref()
    }
    /// <p>The status of the flywheel.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FlywheelStatus> {
        self.status.as_ref()
    }
    /// <p>Model type of the flywheel's model.</p>
    pub fn model_type(&self) -> ::std::option::Option<&crate::types::ModelType> {
        self.model_type.as_ref()
    }
    /// <p>A description of the status of the flywheel.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>Creation time of the flywheel.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Last modified time for the flywheel.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The most recent flywheel iteration.</p>
    pub fn latest_flywheel_iteration(&self) -> ::std::option::Option<&str> {
        self.latest_flywheel_iteration.as_deref()
    }
}
impl FlywheelProperties {
    /// Creates a new builder-style object to manufacture [`FlywheelProperties`](crate::types::FlywheelProperties).
    pub fn builder() -> crate::types::builders::FlywheelPropertiesBuilder {
        crate::types::builders::FlywheelPropertiesBuilder::default()
    }
}

/// A builder for [`FlywheelProperties`](crate::types::FlywheelProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FlywheelPropertiesBuilder {
    pub(crate) flywheel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) active_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_access_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) task_config: ::std::option::Option<crate::types::TaskConfig>,
    pub(crate) data_lake_s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) data_security_config: ::std::option::Option<crate::types::DataSecurityConfig>,
    pub(crate) status: ::std::option::Option<crate::types::FlywheelStatus>,
    pub(crate) model_type: ::std::option::Option<crate::types::ModelType>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) latest_flywheel_iteration: ::std::option::Option<::std::string::String>,
}
impl FlywheelPropertiesBuilder {
    /// <p>The Amazon Resource Number (ARN) of the flywheel.</p>
    pub fn flywheel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flywheel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the flywheel.</p>
    pub fn set_flywheel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flywheel_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the flywheel.</p>
    pub fn get_flywheel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.flywheel_arn
    }
    /// <p>The Amazon Resource Number (ARN) of the active model version.</p>
    pub fn active_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.active_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the active model version.</p>
    pub fn set_active_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.active_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Number (ARN) of the active model version.</p>
    pub fn get_active_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.active_model_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.</p>
    pub fn data_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_access_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.</p>
    pub fn set_data_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_access_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.</p>
    pub fn get_data_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_access_role_arn
    }
    /// <p>Configuration about the custom classifier associated with the flywheel.</p>
    pub fn task_config(mut self, input: crate::types::TaskConfig) -> Self {
        self.task_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration about the custom classifier associated with the flywheel.</p>
    pub fn set_task_config(mut self, input: ::std::option::Option<crate::types::TaskConfig>) -> Self {
        self.task_config = input;
        self
    }
    /// <p>Configuration about the custom classifier associated with the flywheel.</p>
    pub fn get_task_config(&self) -> &::std::option::Option<crate::types::TaskConfig> {
        &self.task_config
    }
    /// <p>Amazon S3 URI of the data lake location. </p>
    pub fn data_lake_s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_lake_s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon S3 URI of the data lake location. </p>
    pub fn set_data_lake_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_lake_s3_uri = input;
        self
    }
    /// <p>Amazon S3 URI of the data lake location. </p>
    pub fn get_data_lake_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_lake_s3_uri
    }
    /// <p>Data security configuration.</p>
    pub fn data_security_config(mut self, input: crate::types::DataSecurityConfig) -> Self {
        self.data_security_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Data security configuration.</p>
    pub fn set_data_security_config(mut self, input: ::std::option::Option<crate::types::DataSecurityConfig>) -> Self {
        self.data_security_config = input;
        self
    }
    /// <p>Data security configuration.</p>
    pub fn get_data_security_config(&self) -> &::std::option::Option<crate::types::DataSecurityConfig> {
        &self.data_security_config
    }
    /// <p>The status of the flywheel.</p>
    pub fn status(mut self, input: crate::types::FlywheelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the flywheel.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FlywheelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the flywheel.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FlywheelStatus> {
        &self.status
    }
    /// <p>Model type of the flywheel's model.</p>
    pub fn model_type(mut self, input: crate::types::ModelType) -> Self {
        self.model_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Model type of the flywheel's model.</p>
    pub fn set_model_type(mut self, input: ::std::option::Option<crate::types::ModelType>) -> Self {
        self.model_type = input;
        self
    }
    /// <p>Model type of the flywheel's model.</p>
    pub fn get_model_type(&self) -> &::std::option::Option<crate::types::ModelType> {
        &self.model_type
    }
    /// <p>A description of the status of the flywheel.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the status of the flywheel.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A description of the status of the flywheel.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>Creation time of the flywheel.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Creation time of the flywheel.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Creation time of the flywheel.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Last modified time for the flywheel.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Last modified time for the flywheel.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>Last modified time for the flywheel.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The most recent flywheel iteration.</p>
    pub fn latest_flywheel_iteration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_flywheel_iteration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The most recent flywheel iteration.</p>
    pub fn set_latest_flywheel_iteration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_flywheel_iteration = input;
        self
    }
    /// <p>The most recent flywheel iteration.</p>
    pub fn get_latest_flywheel_iteration(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_flywheel_iteration
    }
    /// Consumes the builder and constructs a [`FlywheelProperties`](crate::types::FlywheelProperties).
    pub fn build(self) -> crate::types::FlywheelProperties {
        crate::types::FlywheelProperties {
            flywheel_arn: self.flywheel_arn,
            active_model_arn: self.active_model_arn,
            data_access_role_arn: self.data_access_role_arn,
            task_config: self.task_config,
            data_lake_s3_uri: self.data_lake_s3_uri,
            data_security_config: self.data_security_config,
            status: self.status,
            model_type: self.model_type,
            message: self.message,
            creation_time: self.creation_time,
            last_modified_time: self.last_modified_time,
            latest_flywheel_iteration: self.latest_flywheel_iteration,
        }
    }
}
