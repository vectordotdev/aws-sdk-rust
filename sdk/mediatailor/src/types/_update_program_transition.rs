// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Program transition configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateProgramTransition {
    /// <p>The date and time that the program is scheduled to start, in epoch milliseconds.</p>
    pub scheduled_start_time_millis: i64,
    /// <p>The duration of the live program in seconds.</p>
    pub duration_millis: i64,
}
impl UpdateProgramTransition {
    /// <p>The date and time that the program is scheduled to start, in epoch milliseconds.</p>
    pub fn scheduled_start_time_millis(&self) -> i64 {
        self.scheduled_start_time_millis
    }
    /// <p>The duration of the live program in seconds.</p>
    pub fn duration_millis(&self) -> i64 {
        self.duration_millis
    }
}
impl UpdateProgramTransition {
    /// Creates a new builder-style object to manufacture [`UpdateProgramTransition`](crate::types::UpdateProgramTransition).
    pub fn builder() -> crate::types::builders::UpdateProgramTransitionBuilder {
        crate::types::builders::UpdateProgramTransitionBuilder::default()
    }
}

/// A builder for [`UpdateProgramTransition`](crate::types::UpdateProgramTransition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateProgramTransitionBuilder {
    pub(crate) scheduled_start_time_millis: ::std::option::Option<i64>,
    pub(crate) duration_millis: ::std::option::Option<i64>,
}
impl UpdateProgramTransitionBuilder {
    /// <p>The date and time that the program is scheduled to start, in epoch milliseconds.</p>
    pub fn scheduled_start_time_millis(mut self, input: i64) -> Self {
        self.scheduled_start_time_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the program is scheduled to start, in epoch milliseconds.</p>
    pub fn set_scheduled_start_time_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.scheduled_start_time_millis = input;
        self
    }
    /// <p>The date and time that the program is scheduled to start, in epoch milliseconds.</p>
    pub fn get_scheduled_start_time_millis(&self) -> &::std::option::Option<i64> {
        &self.scheduled_start_time_millis
    }
    /// <p>The duration of the live program in seconds.</p>
    pub fn duration_millis(mut self, input: i64) -> Self {
        self.duration_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration of the live program in seconds.</p>
    pub fn set_duration_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_millis = input;
        self
    }
    /// <p>The duration of the live program in seconds.</p>
    pub fn get_duration_millis(&self) -> &::std::option::Option<i64> {
        &self.duration_millis
    }
    /// Consumes the builder and constructs a [`UpdateProgramTransition`](crate::types::UpdateProgramTransition).
    pub fn build(self) -> crate::types::UpdateProgramTransition {
        crate::types::UpdateProgramTransition {
            scheduled_start_time_millis: self.scheduled_start_time_millis.unwrap_or_default(),
            duration_millis: self.duration_millis.unwrap_or_default(),
        }
    }
}
