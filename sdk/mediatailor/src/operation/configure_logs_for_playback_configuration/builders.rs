// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::configure_logs_for_playback_configuration::_configure_logs_for_playback_configuration_output::ConfigureLogsForPlaybackConfigurationOutputBuilder;

pub use crate::operation::configure_logs_for_playback_configuration::_configure_logs_for_playback_configuration_input::ConfigureLogsForPlaybackConfigurationInputBuilder;

impl ConfigureLogsForPlaybackConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.configure_logs_for_playback_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ConfigureLogsForPlaybackConfiguration`.
///
/// <p>Amazon CloudWatch log settings for a playback configuration.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ConfigureLogsForPlaybackConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::configure_logs_for_playback_configuration::builders::ConfigureLogsForPlaybackConfigurationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl ConfigureLogsForPlaybackConfigurationFluentBuilder {
    /// Creates a new `ConfigureLogsForPlaybackConfiguration`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ConfigureLogsForPlaybackConfiguration as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::configure_logs_for_playback_configuration::builders::ConfigureLogsForPlaybackConfigurationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfiguration::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfiguration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationOutput,
            crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::configure_logs_for_playback_configuration::ConfigureLogsForPlaybackConfigurationError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code> </p>
    pub fn percent_enabled(mut self, input: i32) -> Self {
        self.inner = self.inner.percent_enabled(input);
        self
    }
    /// <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code> </p>
    pub fn set_percent_enabled(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_percent_enabled(input);
        self
    }
    /// <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to <code>60</code>, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p>
    /// <p>Valid values: <code>0</code> - <code>100</code> </p>
    pub fn get_percent_enabled(&self) -> &::std::option::Option<i32> {
        self.inner.get_percent_enabled()
    }
    /// <p>The name of the playback configuration.</p>
    pub fn playback_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.playback_configuration_name(input.into());
        self
    }
    /// <p>The name of the playback configuration.</p>
    pub fn set_playback_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_playback_configuration_name(input);
        self
    }
    /// <p>The name of the playback configuration.</p>
    pub fn get_playback_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_playback_configuration_name()
    }
}
