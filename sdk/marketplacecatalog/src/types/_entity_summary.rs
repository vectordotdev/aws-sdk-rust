// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This object is a container for common summary information about the entity. The summary doesn't contain the whole entity structure, but it does contain information common across all entities.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EntitySummary {
    /// <p>The name for the entity. This value is not unique. It is defined by the seller.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the entity.</p>
    pub entity_type: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the entity.</p>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN associated with the unique identifier for the entity.</p>
    pub entity_arn: ::std::option::Option<::std::string::String>,
    /// <p>The last time the entity was published, using ISO 8601 format (2018-02-27T13:45:22Z).</p>
    pub last_modified_date: ::std::option::Option<::std::string::String>,
    /// <p>The visibility status of the entity to buyers. This value can be <code>Public</code> (everyone can view the entity), <code>Limited</code> (the entity is visible to limited accounts only), or <code>Restricted</code> (the entity was published and then unpublished and only existing buyers can view it). </p>
    pub visibility: ::std::option::Option<::std::string::String>,
}
impl EntitySummary {
    /// <p>The name for the entity. This value is not unique. It is defined by the seller.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of the entity.</p>
    pub fn entity_type(&self) -> ::std::option::Option<&str> {
        self.entity_type.as_deref()
    }
    /// <p>The unique identifier for the entity.</p>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The ARN associated with the unique identifier for the entity.</p>
    pub fn entity_arn(&self) -> ::std::option::Option<&str> {
        self.entity_arn.as_deref()
    }
    /// <p>The last time the entity was published, using ISO 8601 format (2018-02-27T13:45:22Z).</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&str> {
        self.last_modified_date.as_deref()
    }
    /// <p>The visibility status of the entity to buyers. This value can be <code>Public</code> (everyone can view the entity), <code>Limited</code> (the entity is visible to limited accounts only), or <code>Restricted</code> (the entity was published and then unpublished and only existing buyers can view it). </p>
    pub fn visibility(&self) -> ::std::option::Option<&str> {
        self.visibility.as_deref()
    }
}
impl EntitySummary {
    /// Creates a new builder-style object to manufacture [`EntitySummary`](crate::types::EntitySummary).
    pub fn builder() -> crate::types::builders::EntitySummaryBuilder {
        crate::types::builders::EntitySummaryBuilder::default()
    }
}

/// A builder for [`EntitySummary`](crate::types::EntitySummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EntitySummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) entity_type: ::std::option::Option<::std::string::String>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_arn: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_date: ::std::option::Option<::std::string::String>,
    pub(crate) visibility: ::std::option::Option<::std::string::String>,
}
impl EntitySummaryBuilder {
    /// <p>The name for the entity. This value is not unique. It is defined by the seller.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the entity. This value is not unique. It is defined by the seller.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the entity. This value is not unique. It is defined by the seller.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the entity.</p>
    pub fn entity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the entity.</p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>The type of the entity.</p>
    pub fn get_entity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_type
    }
    /// <p>The unique identifier for the entity.</p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the entity.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The unique identifier for the entity.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The ARN associated with the unique identifier for the entity.</p>
    pub fn entity_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN associated with the unique identifier for the entity.</p>
    pub fn set_entity_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_arn = input;
        self
    }
    /// <p>The ARN associated with the unique identifier for the entity.</p>
    pub fn get_entity_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_arn
    }
    /// <p>The last time the entity was published, using ISO 8601 format (2018-02-27T13:45:22Z).</p>
    pub fn last_modified_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last time the entity was published, using ISO 8601 format (2018-02-27T13:45:22Z).</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The last time the entity was published, using ISO 8601 format (2018-02-27T13:45:22Z).</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_date
    }
    /// <p>The visibility status of the entity to buyers. This value can be <code>Public</code> (everyone can view the entity), <code>Limited</code> (the entity is visible to limited accounts only), or <code>Restricted</code> (the entity was published and then unpublished and only existing buyers can view it). </p>
    pub fn visibility(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.visibility = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The visibility status of the entity to buyers. This value can be <code>Public</code> (everyone can view the entity), <code>Limited</code> (the entity is visible to limited accounts only), or <code>Restricted</code> (the entity was published and then unpublished and only existing buyers can view it). </p>
    pub fn set_visibility(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.visibility = input;
        self
    }
    /// <p>The visibility status of the entity to buyers. This value can be <code>Public</code> (everyone can view the entity), <code>Limited</code> (the entity is visible to limited accounts only), or <code>Restricted</code> (the entity was published and then unpublished and only existing buyers can view it). </p>
    pub fn get_visibility(&self) -> &::std::option::Option<::std::string::String> {
        &self.visibility
    }
    /// Consumes the builder and constructs a [`EntitySummary`](crate::types::EntitySummary).
    pub fn build(self) -> crate::types::EntitySummary {
        crate::types::EntitySummary {
            name: self.name,
            entity_type: self.entity_type,
            entity_id: self.entity_id,
            entity_arn: self.entity_arn,
            last_modified_date: self.last_modified_date,
            visibility: self.visibility,
        }
    }
}
