// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains the <code>ChangeType</code>, <code>Details</code>, and <code>Entity</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Change {
    /// <p>Change types are single string values that describe your intention for the change. Each change type is unique for each <code>EntityType</code> provided in the change's scope. For more information on change types available for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information on change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
    pub change_type: ::std::option::Option<::std::string::String>,
    /// <p>The entity to be changed.</p>
    pub entity: ::std::option::Option<crate::types::Entity>,
    /// <p>The tags associated with the change.</p>
    pub entity_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>This object contains details specific to the change type of the requested change. For more information on change types available for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information on change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
    pub details: ::std::option::Option<::std::string::String>,
    /// <p>Optional name for the change.</p>
    pub change_name: ::std::option::Option<::std::string::String>,
}
impl Change {
    /// <p>Change types are single string values that describe your intention for the change. Each change type is unique for each <code>EntityType</code> provided in the change's scope. For more information on change types available for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information on change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
    pub fn change_type(&self) -> ::std::option::Option<&str> {
        self.change_type.as_deref()
    }
    /// <p>The entity to be changed.</p>
    pub fn entity(&self) -> ::std::option::Option<&crate::types::Entity> {
        self.entity.as_ref()
    }
    /// <p>The tags associated with the change.</p>
    pub fn entity_tags(&self) -> ::std::option::Option<&[crate::types::Tag]> {
        self.entity_tags.as_deref()
    }
    /// <p>This object contains details specific to the change type of the requested change. For more information on change types available for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information on change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
    pub fn details(&self) -> ::std::option::Option<&str> {
        self.details.as_deref()
    }
    /// <p>Optional name for the change.</p>
    pub fn change_name(&self) -> ::std::option::Option<&str> {
        self.change_name.as_deref()
    }
}
impl Change {
    /// Creates a new builder-style object to manufacture [`Change`](crate::types::Change).
    pub fn builder() -> crate::types::builders::ChangeBuilder {
        crate::types::builders::ChangeBuilder::default()
    }
}

/// A builder for [`Change`](crate::types::Change).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChangeBuilder {
    pub(crate) change_type: ::std::option::Option<::std::string::String>,
    pub(crate) entity: ::std::option::Option<crate::types::Entity>,
    pub(crate) entity_tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) details: ::std::option::Option<::std::string::String>,
    pub(crate) change_name: ::std::option::Option<::std::string::String>,
}
impl ChangeBuilder {
    /// <p>Change types are single string values that describe your intention for the change. Each change type is unique for each <code>EntityType</code> provided in the change's scope. For more information on change types available for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information on change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
    pub fn change_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Change types are single string values that describe your intention for the change. Each change type is unique for each <code>EntityType</code> provided in the change's scope. For more information on change types available for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information on change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
    pub fn set_change_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_type = input;
        self
    }
    /// <p>Change types are single string values that describe your intention for the change. Each change type is unique for each <code>EntityType</code> provided in the change's scope. For more information on change types available for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information on change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
    pub fn get_change_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_type
    }
    /// <p>The entity to be changed.</p>
    pub fn entity(mut self, input: crate::types::Entity) -> Self {
        self.entity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entity to be changed.</p>
    pub fn set_entity(mut self, input: ::std::option::Option<crate::types::Entity>) -> Self {
        self.entity = input;
        self
    }
    /// <p>The entity to be changed.</p>
    pub fn get_entity(&self) -> &::std::option::Option<crate::types::Entity> {
        &self.entity
    }
    /// Appends an item to `entity_tags`.
    ///
    /// To override the contents of this collection use [`set_entity_tags`](Self::set_entity_tags).
    ///
    /// <p>The tags associated with the change.</p>
    pub fn entity_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.entity_tags.unwrap_or_default();
        v.push(input);
        self.entity_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags associated with the change.</p>
    pub fn set_entity_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.entity_tags = input;
        self
    }
    /// <p>The tags associated with the change.</p>
    pub fn get_entity_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.entity_tags
    }
    /// <p>This object contains details specific to the change type of the requested change. For more information on change types available for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information on change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
    pub fn details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This object contains details specific to the change type of the requested change. For more information on change types available for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information on change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
    pub fn set_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.details = input;
        self
    }
    /// <p>This object contains details specific to the change type of the requested change. For more information on change types available for single-AMI products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/ami-products.html#working-with-single-AMI-products">Working with single-AMI products</a>. Also, for more information on change types available for container-based products, see <a href="https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/container-products.html#working-with-container-products">Working with container products</a>.</p>
    pub fn get_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.details
    }
    /// <p>Optional name for the change.</p>
    pub fn change_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.change_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional name for the change.</p>
    pub fn set_change_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.change_name = input;
        self
    }
    /// <p>Optional name for the change.</p>
    pub fn get_change_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.change_name
    }
    /// Consumes the builder and constructs a [`Change`](crate::types::Change).
    pub fn build(self) -> crate::types::Change {
        crate::types::Change {
            change_type: self.change_type,
            entity: self.entity,
            entity_tags: self.entity_tags,
            details: self.details,
            change_name: self.change_name,
        }
    }
}
