// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an identity that performed an action on an affected resource by using temporary security credentials. The credentials were obtained using the AssumeRole operation of the Security Token Service (STS) API.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssumedRole {
    /// <p>The Amazon Web Services access key ID that identifies the credentials.</p>
    pub access_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the Amazon Web Services account that owns the entity that was used to get the credentials.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the entity that was used to get the credentials.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the entity that was used to get the credentials.</p>
    pub principal_id: ::std::option::Option<::std::string::String>,
    /// <p>The details of the session that was created for the credentials, including the entity that issued the session.</p>
    pub session_context: ::std::option::Option<crate::types::SessionContext>,
}
impl AssumedRole {
    /// <p>The Amazon Web Services access key ID that identifies the credentials.</p>
    pub fn access_key_id(&self) -> ::std::option::Option<&str> {
        self.access_key_id.as_deref()
    }
    /// <p>The unique identifier for the Amazon Web Services account that owns the entity that was used to get the credentials.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the entity that was used to get the credentials.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique identifier for the entity that was used to get the credentials.</p>
    pub fn principal_id(&self) -> ::std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>The details of the session that was created for the credentials, including the entity that issued the session.</p>
    pub fn session_context(&self) -> ::std::option::Option<&crate::types::SessionContext> {
        self.session_context.as_ref()
    }
}
impl AssumedRole {
    /// Creates a new builder-style object to manufacture [`AssumedRole`](crate::types::AssumedRole).
    pub fn builder() -> crate::types::builders::AssumedRoleBuilder {
        crate::types::builders::AssumedRoleBuilder::default()
    }
}

/// A builder for [`AssumedRole`](crate::types::AssumedRole).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssumedRoleBuilder {
    pub(crate) access_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) principal_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_context: ::std::option::Option<crate::types::SessionContext>,
}
impl AssumedRoleBuilder {
    /// <p>The Amazon Web Services access key ID that identifies the credentials.</p>
    pub fn access_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services access key ID that identifies the credentials.</p>
    pub fn set_access_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_key_id = input;
        self
    }
    /// <p>The Amazon Web Services access key ID that identifies the credentials.</p>
    pub fn get_access_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_key_id
    }
    /// <p>The unique identifier for the Amazon Web Services account that owns the entity that was used to get the credentials.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the Amazon Web Services account that owns the entity that was used to get the credentials.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The unique identifier for the Amazon Web Services account that owns the entity that was used to get the credentials.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The Amazon Resource Name (ARN) of the entity that was used to get the credentials.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the entity that was used to get the credentials.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the entity that was used to get the credentials.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier for the entity that was used to get the credentials.</p>
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the entity that was used to get the credentials.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The unique identifier for the entity that was used to get the credentials.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id
    }
    /// <p>The details of the session that was created for the credentials, including the entity that issued the session.</p>
    pub fn session_context(mut self, input: crate::types::SessionContext) -> Self {
        self.session_context = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the session that was created for the credentials, including the entity that issued the session.</p>
    pub fn set_session_context(mut self, input: ::std::option::Option<crate::types::SessionContext>) -> Self {
        self.session_context = input;
        self
    }
    /// <p>The details of the session that was created for the credentials, including the entity that issued the session.</p>
    pub fn get_session_context(&self) -> &::std::option::Option<crate::types::SessionContext> {
        &self.session_context
    }
    /// Consumes the builder and constructs a [`AssumedRole`](crate::types::AssumedRole).
    pub fn build(self) -> crate::types::AssumedRole {
        crate::types::AssumedRole {
            access_key_id: self.access_key_id,
            account_id: self.account_id,
            arn: self.arn,
            principal_id: self.principal_id,
            session_context: self.session_context,
        }
    }
}
