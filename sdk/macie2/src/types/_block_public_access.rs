// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the block public access settings for an S3 bucket. These settings can apply to a bucket at the account or bucket level. For detailed information about each setting, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html">Blocking public access to your Amazon S3 storage</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BlockPublicAccess {
    /// <p>Specifies whether Amazon S3 blocks public access control lists (ACLs) for the bucket and objects in the bucket.</p>
    pub block_public_acls: ::std::option::Option<bool>,
    /// <p>Specifies whether Amazon S3 blocks public bucket policies for the bucket.</p>
    pub block_public_policy: ::std::option::Option<bool>,
    /// <p>Specifies whether Amazon S3 ignores public ACLs for the bucket and objects in the bucket.</p>
    pub ignore_public_acls: ::std::option::Option<bool>,
    /// <p>Specifies whether Amazon S3 restricts public bucket policies for the bucket.</p>
    pub restrict_public_buckets: ::std::option::Option<bool>,
}
impl BlockPublicAccess {
    /// <p>Specifies whether Amazon S3 blocks public access control lists (ACLs) for the bucket and objects in the bucket.</p>
    pub fn block_public_acls(&self) -> ::std::option::Option<bool> {
        self.block_public_acls
    }
    /// <p>Specifies whether Amazon S3 blocks public bucket policies for the bucket.</p>
    pub fn block_public_policy(&self) -> ::std::option::Option<bool> {
        self.block_public_policy
    }
    /// <p>Specifies whether Amazon S3 ignores public ACLs for the bucket and objects in the bucket.</p>
    pub fn ignore_public_acls(&self) -> ::std::option::Option<bool> {
        self.ignore_public_acls
    }
    /// <p>Specifies whether Amazon S3 restricts public bucket policies for the bucket.</p>
    pub fn restrict_public_buckets(&self) -> ::std::option::Option<bool> {
        self.restrict_public_buckets
    }
}
impl BlockPublicAccess {
    /// Creates a new builder-style object to manufacture [`BlockPublicAccess`](crate::types::BlockPublicAccess).
    pub fn builder() -> crate::types::builders::BlockPublicAccessBuilder {
        crate::types::builders::BlockPublicAccessBuilder::default()
    }
}

/// A builder for [`BlockPublicAccess`](crate::types::BlockPublicAccess).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BlockPublicAccessBuilder {
    pub(crate) block_public_acls: ::std::option::Option<bool>,
    pub(crate) block_public_policy: ::std::option::Option<bool>,
    pub(crate) ignore_public_acls: ::std::option::Option<bool>,
    pub(crate) restrict_public_buckets: ::std::option::Option<bool>,
}
impl BlockPublicAccessBuilder {
    /// <p>Specifies whether Amazon S3 blocks public access control lists (ACLs) for the bucket and objects in the bucket.</p>
    pub fn block_public_acls(mut self, input: bool) -> Self {
        self.block_public_acls = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether Amazon S3 blocks public access control lists (ACLs) for the bucket and objects in the bucket.</p>
    pub fn set_block_public_acls(mut self, input: ::std::option::Option<bool>) -> Self {
        self.block_public_acls = input;
        self
    }
    /// <p>Specifies whether Amazon S3 blocks public access control lists (ACLs) for the bucket and objects in the bucket.</p>
    pub fn get_block_public_acls(&self) -> &::std::option::Option<bool> {
        &self.block_public_acls
    }
    /// <p>Specifies whether Amazon S3 blocks public bucket policies for the bucket.</p>
    pub fn block_public_policy(mut self, input: bool) -> Self {
        self.block_public_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether Amazon S3 blocks public bucket policies for the bucket.</p>
    pub fn set_block_public_policy(mut self, input: ::std::option::Option<bool>) -> Self {
        self.block_public_policy = input;
        self
    }
    /// <p>Specifies whether Amazon S3 blocks public bucket policies for the bucket.</p>
    pub fn get_block_public_policy(&self) -> &::std::option::Option<bool> {
        &self.block_public_policy
    }
    /// <p>Specifies whether Amazon S3 ignores public ACLs for the bucket and objects in the bucket.</p>
    pub fn ignore_public_acls(mut self, input: bool) -> Self {
        self.ignore_public_acls = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether Amazon S3 ignores public ACLs for the bucket and objects in the bucket.</p>
    pub fn set_ignore_public_acls(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ignore_public_acls = input;
        self
    }
    /// <p>Specifies whether Amazon S3 ignores public ACLs for the bucket and objects in the bucket.</p>
    pub fn get_ignore_public_acls(&self) -> &::std::option::Option<bool> {
        &self.ignore_public_acls
    }
    /// <p>Specifies whether Amazon S3 restricts public bucket policies for the bucket.</p>
    pub fn restrict_public_buckets(mut self, input: bool) -> Self {
        self.restrict_public_buckets = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether Amazon S3 restricts public bucket policies for the bucket.</p>
    pub fn set_restrict_public_buckets(mut self, input: ::std::option::Option<bool>) -> Self {
        self.restrict_public_buckets = input;
        self
    }
    /// <p>Specifies whether Amazon S3 restricts public bucket policies for the bucket.</p>
    pub fn get_restrict_public_buckets(&self) -> &::std::option::Option<bool> {
        &self.restrict_public_buckets
    }
    /// Consumes the builder and constructs a [`BlockPublicAccess`](crate::types::BlockPublicAccess).
    pub fn build(self) -> crate::types::BlockPublicAccess {
        crate::types::BlockPublicAccess {
            block_public_acls: self.block_public_acls,
            block_public_policy: self.block_public_policy,
            ignore_public_acls: self.ignore_public_acls,
            restrict_public_buckets: self.restrict_public_buckets,
        }
    }
}
