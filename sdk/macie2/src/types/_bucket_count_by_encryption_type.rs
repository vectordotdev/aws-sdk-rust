// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the number of S3 buckets whose settings do or don't specify default server-side encryption behavior for objects that are added to the buckets. For detailed information about these settings, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html">Setting default server-side encryption behavior for Amazon S3 buckets</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BucketCountByEncryptionType {
    /// <p>The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon Web Services managed KMS key or a customer managed KMS key. By default, these buckets encrypt new objects automatically using SSE-KMS encryption.</p>
    pub kms_managed: ::std::option::Option<i64>,
    /// <p>The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon S3 managed key. By default, these buckets encrypt new objects automatically using SSE-S3 encryption.</p>
    pub s3_managed: ::std::option::Option<i64>,
    /// <p>The total number of buckets that don't specify default server-side encryption behavior for new objects. Default encryption settings aren't configured for these buckets.</p>
    pub unencrypted: ::std::option::Option<i64>,
    /// <p>The total number of buckets that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the default encryption settings for these buckets.</p>
    pub unknown: ::std::option::Option<i64>,
}
impl BucketCountByEncryptionType {
    /// <p>The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon Web Services managed KMS key or a customer managed KMS key. By default, these buckets encrypt new objects automatically using SSE-KMS encryption.</p>
    pub fn kms_managed(&self) -> ::std::option::Option<i64> {
        self.kms_managed
    }
    /// <p>The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon S3 managed key. By default, these buckets encrypt new objects automatically using SSE-S3 encryption.</p>
    pub fn s3_managed(&self) -> ::std::option::Option<i64> {
        self.s3_managed
    }
    /// <p>The total number of buckets that don't specify default server-side encryption behavior for new objects. Default encryption settings aren't configured for these buckets.</p>
    pub fn unencrypted(&self) -> ::std::option::Option<i64> {
        self.unencrypted
    }
    /// <p>The total number of buckets that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the default encryption settings for these buckets.</p>
    pub fn unknown(&self) -> ::std::option::Option<i64> {
        self.unknown
    }
}
impl BucketCountByEncryptionType {
    /// Creates a new builder-style object to manufacture [`BucketCountByEncryptionType`](crate::types::BucketCountByEncryptionType).
    pub fn builder() -> crate::types::builders::BucketCountByEncryptionTypeBuilder {
        crate::types::builders::BucketCountByEncryptionTypeBuilder::default()
    }
}

/// A builder for [`BucketCountByEncryptionType`](crate::types::BucketCountByEncryptionType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BucketCountByEncryptionTypeBuilder {
    pub(crate) kms_managed: ::std::option::Option<i64>,
    pub(crate) s3_managed: ::std::option::Option<i64>,
    pub(crate) unencrypted: ::std::option::Option<i64>,
    pub(crate) unknown: ::std::option::Option<i64>,
}
impl BucketCountByEncryptionTypeBuilder {
    /// <p>The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon Web Services managed KMS key or a customer managed KMS key. By default, these buckets encrypt new objects automatically using SSE-KMS encryption.</p>
    pub fn kms_managed(mut self, input: i64) -> Self {
        self.kms_managed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon Web Services managed KMS key or a customer managed KMS key. By default, these buckets encrypt new objects automatically using SSE-KMS encryption.</p>
    pub fn set_kms_managed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.kms_managed = input;
        self
    }
    /// <p>The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon Web Services managed KMS key or a customer managed KMS key. By default, these buckets encrypt new objects automatically using SSE-KMS encryption.</p>
    pub fn get_kms_managed(&self) -> &::std::option::Option<i64> {
        &self.kms_managed
    }
    /// <p>The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon S3 managed key. By default, these buckets encrypt new objects automatically using SSE-S3 encryption.</p>
    pub fn s3_managed(mut self, input: i64) -> Self {
        self.s3_managed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon S3 managed key. By default, these buckets encrypt new objects automatically using SSE-S3 encryption.</p>
    pub fn set_s3_managed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.s3_managed = input;
        self
    }
    /// <p>The total number of buckets whose default encryption settings are configured to encrypt new objects with an Amazon S3 managed key. By default, these buckets encrypt new objects automatically using SSE-S3 encryption.</p>
    pub fn get_s3_managed(&self) -> &::std::option::Option<i64> {
        &self.s3_managed
    }
    /// <p>The total number of buckets that don't specify default server-side encryption behavior for new objects. Default encryption settings aren't configured for these buckets.</p>
    pub fn unencrypted(mut self, input: i64) -> Self {
        self.unencrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of buckets that don't specify default server-side encryption behavior for new objects. Default encryption settings aren't configured for these buckets.</p>
    pub fn set_unencrypted(mut self, input: ::std::option::Option<i64>) -> Self {
        self.unencrypted = input;
        self
    }
    /// <p>The total number of buckets that don't specify default server-side encryption behavior for new objects. Default encryption settings aren't configured for these buckets.</p>
    pub fn get_unencrypted(&self) -> &::std::option::Option<i64> {
        &self.unencrypted
    }
    /// <p>The total number of buckets that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the default encryption settings for these buckets.</p>
    pub fn unknown(mut self, input: i64) -> Self {
        self.unknown = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of buckets that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the default encryption settings for these buckets.</p>
    pub fn set_unknown(mut self, input: ::std::option::Option<i64>) -> Self {
        self.unknown = input;
        self
    }
    /// <p>The total number of buckets that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the default encryption settings for these buckets.</p>
    pub fn get_unknown(&self) -> &::std::option::Option<i64> {
        &self.unknown
    }
    /// Consumes the builder and constructs a [`BucketCountByEncryptionType`](crate::types::BucketCountByEncryptionType).
    pub fn build(self) -> crate::types::BucketCountByEncryptionType {
        crate::types::BucketCountByEncryptionType {
            kms_managed: self.kms_managed,
            s3_managed: self.s3_managed,
            unencrypted: self.unencrypted,
            unknown: self.unknown,
        }
    }
}
