// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List the low-latency HTTP live streaming (HLS) manifest configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListLowLatencyHlsManifestConfiguration {
    /// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
    pub manifest_name: ::std::option::Option<::std::string::String>,
    /// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
    pub child_manifest_name: ::std::option::Option<::std::string::String>,
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub url: ::std::option::Option<::std::string::String>,
}
impl ListLowLatencyHlsManifestConfiguration {
    /// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
    pub fn manifest_name(&self) -> ::std::option::Option<&str> {
        self.manifest_name.as_deref()
    }
    /// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
    pub fn child_manifest_name(&self) -> ::std::option::Option<&str> {
        self.child_manifest_name.as_deref()
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl ListLowLatencyHlsManifestConfiguration {
    /// Creates a new builder-style object to manufacture [`ListLowLatencyHlsManifestConfiguration`](crate::types::ListLowLatencyHlsManifestConfiguration).
    pub fn builder() -> crate::types::builders::ListLowLatencyHlsManifestConfigurationBuilder {
        crate::types::builders::ListLowLatencyHlsManifestConfigurationBuilder::default()
    }
}

/// A builder for [`ListLowLatencyHlsManifestConfiguration`](crate::types::ListLowLatencyHlsManifestConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListLowLatencyHlsManifestConfigurationBuilder {
    pub(crate) manifest_name: ::std::option::Option<::std::string::String>,
    pub(crate) child_manifest_name: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
}
impl ListLowLatencyHlsManifestConfigurationBuilder {
    /// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
    pub fn manifest_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manifest_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
    pub fn set_manifest_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manifest_name = input;
        self
    }
    /// <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
    pub fn get_manifest_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.manifest_name
    }
    /// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
    pub fn child_manifest_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.child_manifest_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
    pub fn set_child_manifest_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.child_manifest_name = input;
        self
    }
    /// <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
    pub fn get_child_manifest_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.child_manifest_name
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The egress domain URL for stream delivery from MediaPackage.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Consumes the builder and constructs a [`ListLowLatencyHlsManifestConfiguration`](crate::types::ListLowLatencyHlsManifestConfiguration).
    pub fn build(self) -> crate::types::ListLowLatencyHlsManifestConfiguration {
        crate::types::ListLowLatencyHlsManifestConfiguration {
            manifest_name: self.manifest_name,
            child_manifest_name: self.child_manifest_name,
            url: self.url,
        }
    }
}
