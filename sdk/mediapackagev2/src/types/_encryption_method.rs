// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The encryption type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EncryptionMethod {
    /// <p>The encryption method to use.</p>
    pub ts_encryption_method: ::std::option::Option<crate::types::TsEncryptionMethod>,
    /// <p>The encryption method to use.</p>
    pub cmaf_encryption_method: ::std::option::Option<crate::types::CmafEncryptionMethod>,
}
impl EncryptionMethod {
    /// <p>The encryption method to use.</p>
    pub fn ts_encryption_method(&self) -> ::std::option::Option<&crate::types::TsEncryptionMethod> {
        self.ts_encryption_method.as_ref()
    }
    /// <p>The encryption method to use.</p>
    pub fn cmaf_encryption_method(&self) -> ::std::option::Option<&crate::types::CmafEncryptionMethod> {
        self.cmaf_encryption_method.as_ref()
    }
}
impl EncryptionMethod {
    /// Creates a new builder-style object to manufacture [`EncryptionMethod`](crate::types::EncryptionMethod).
    pub fn builder() -> crate::types::builders::EncryptionMethodBuilder {
        crate::types::builders::EncryptionMethodBuilder::default()
    }
}

/// A builder for [`EncryptionMethod`](crate::types::EncryptionMethod).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EncryptionMethodBuilder {
    pub(crate) ts_encryption_method: ::std::option::Option<crate::types::TsEncryptionMethod>,
    pub(crate) cmaf_encryption_method: ::std::option::Option<crate::types::CmafEncryptionMethod>,
}
impl EncryptionMethodBuilder {
    /// <p>The encryption method to use.</p>
    pub fn ts_encryption_method(mut self, input: crate::types::TsEncryptionMethod) -> Self {
        self.ts_encryption_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The encryption method to use.</p>
    pub fn set_ts_encryption_method(mut self, input: ::std::option::Option<crate::types::TsEncryptionMethod>) -> Self {
        self.ts_encryption_method = input;
        self
    }
    /// <p>The encryption method to use.</p>
    pub fn get_ts_encryption_method(&self) -> &::std::option::Option<crate::types::TsEncryptionMethod> {
        &self.ts_encryption_method
    }
    /// <p>The encryption method to use.</p>
    pub fn cmaf_encryption_method(mut self, input: crate::types::CmafEncryptionMethod) -> Self {
        self.cmaf_encryption_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The encryption method to use.</p>
    pub fn set_cmaf_encryption_method(mut self, input: ::std::option::Option<crate::types::CmafEncryptionMethod>) -> Self {
        self.cmaf_encryption_method = input;
        self
    }
    /// <p>The encryption method to use.</p>
    pub fn get_cmaf_encryption_method(&self) -> &::std::option::Option<crate::types::CmafEncryptionMethod> {
        &self.cmaf_encryption_method
    }
    /// Consumes the builder and constructs a [`EncryptionMethod`](crate::types::EncryptionMethod).
    pub fn build(self) -> crate::types::EncryptionMethod {
        crate::types::EncryptionMethod {
            ts_encryption_method: self.ts_encryption_method,
            cmaf_encryption_method: self.cmaf_encryption_method,
        }
    }
}
