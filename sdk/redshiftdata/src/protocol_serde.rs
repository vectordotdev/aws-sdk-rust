// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_batch_execute_statement;

pub(crate) mod shape_cancel_statement;

pub(crate) mod shape_describe_statement;

pub(crate) mod shape_describe_table;

pub(crate) mod shape_execute_statement;

pub(crate) mod shape_get_statement_result;

pub(crate) mod shape_list_databases;

pub(crate) mod shape_list_schemas;

pub(crate) mod shape_list_statements;

pub(crate) mod shape_list_tables;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_active_statements_exceeded_exception;

pub(crate) mod shape_batch_execute_statement_exception;

pub(crate) mod shape_batch_execute_statement_input;

pub(crate) mod shape_cancel_statement_input;

pub(crate) mod shape_database_connection_exception;

pub(crate) mod shape_describe_statement_input;

pub(crate) mod shape_describe_table_input;

pub(crate) mod shape_execute_statement_exception;

pub(crate) mod shape_execute_statement_input;

pub(crate) mod shape_get_statement_result_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_databases_input;

pub(crate) mod shape_list_schemas_input;

pub(crate) mod shape_list_statements_input;

pub(crate) mod shape_list_tables_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_column_list;

pub(crate) mod shape_column_metadata_list;

pub(crate) mod shape_database_list;

pub(crate) mod shape_schema_list;

pub(crate) mod shape_sql_parameter;

pub(crate) mod shape_sql_parameters_list;

pub(crate) mod shape_sql_records;

pub(crate) mod shape_statement_list;

pub(crate) mod shape_sub_statement_list;

pub(crate) mod shape_table_list;

pub(crate) mod shape_column_metadata;

pub(crate) mod shape_field_list;

pub(crate) mod shape_statement_data;

pub(crate) mod shape_sub_statement_data;

pub(crate) mod shape_table_member;

pub(crate) mod shape_field;

pub(crate) mod shape_statement_string_list;
