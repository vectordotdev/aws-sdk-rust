// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_automation_rules_request_item(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::UpdateAutomationRulesRequestItem,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.rule_arn {
        object.key("RuleArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.rule_status {
        object.key("RuleStatus").string(var_2.as_str());
    }
    if input.rule_order != 0 {
        object.key("RuleOrder").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.rule_order).into()),
        );
    }
    if let Some(var_3) = &input.description {
        object.key("Description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.rule_name {
        object.key("RuleName").string(var_4.as_str());
    }
    if input.is_terminal {
        object.key("IsTerminal").boolean(input.is_terminal);
    }
    if let Some(var_5) = &input.criteria {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Criteria").start_object();
        crate::protocol_serde::shape_automation_rules_finding_filters::ser_automation_rules_finding_filters(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.actions {
        let mut array_8 = object.key("Actions").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_automation_rules_action::ser_automation_rules_action(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}
