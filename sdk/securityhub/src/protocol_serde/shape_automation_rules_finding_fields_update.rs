// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_automation_rules_finding_fields_update(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AutomationRulesFindingFieldsUpdate,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.note {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Note").start_object();
        crate::protocol_serde::shape_note_update::ser_note_update(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.severity {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Severity").start_object();
        crate::protocol_serde::shape_severity_update::ser_severity_update(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.verification_state {
        object.key("VerificationState").string(var_5.as_str());
    }
    if input.confidence != 0 {
        object.key("Confidence").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.confidence).into()),
        );
    }
    if input.criticality != 0 {
        object.key("Criticality").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.criticality).into()),
        );
    }
    if let Some(var_6) = &input.types {
        let mut array_7 = object.key("Types").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.user_defined_fields {
        #[allow(unused_mut)]
        let mut object_10 = object.key("UserDefinedFields").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.workflow {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Workflow").start_object();
        crate::protocol_serde::shape_workflow_update::ser_workflow_update(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.related_findings {
        let mut array_16 = object.key("RelatedFindings").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_related_finding::ser_related_finding(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub(crate) fn de_automation_rules_finding_fields_update<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::AutomationRulesFindingFieldsUpdate>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AutomationRulesFindingFieldsUpdateBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Note" => {
                            builder = builder.set_note(crate::protocol_serde::shape_note_update::de_note_update(tokens)?);
                        }
                        "Severity" => {
                            builder = builder.set_severity(crate::protocol_serde::shape_severity_update::de_severity_update(tokens)?);
                        }
                        "VerificationState" => {
                            builder = builder.set_verification_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VerificationState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Confidence" => {
                            builder = builder.set_confidence(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "Criticality" => {
                            builder = builder.set_criticality(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "Types" => {
                            builder = builder.set_types(crate::protocol_serde::shape_type_list::de_type_list(tokens)?);
                        }
                        "UserDefinedFields" => {
                            builder = builder.set_user_defined_fields(crate::protocol_serde::shape_field_map::de_field_map(tokens)?);
                        }
                        "Workflow" => {
                            builder = builder.set_workflow(crate::protocol_serde::shape_workflow_update::de_workflow_update(tokens)?);
                        }
                        "RelatedFindings" => {
                            builder =
                                builder.set_related_findings(crate::protocol_serde::shape_related_finding_list::de_related_finding_list(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
