// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disable_security_hub::_disable_security_hub_output::DisableSecurityHubOutputBuilder;

pub use crate::operation::disable_security_hub::_disable_security_hub_input::DisableSecurityHubInputBuilder;

impl DisableSecurityHubInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::disable_security_hub::DisableSecurityHubOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::disable_security_hub::DisableSecurityHubError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.disable_security_hub();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DisableSecurityHub`.
///
/// <p>Disables Security Hub in your account only in the current Region. To disable Security Hub in all Regions, you must submit one request per Region where you have enabled Security Hub.</p>
/// <p>When you disable Security Hub for an administrator account, it doesn't disable Security Hub for any associated member accounts.</p>
/// <p>When you disable Security Hub, your existing findings and insights and any Security Hub configuration settings are deleted after 90 days and cannot be recovered. Any standards that were enabled are disabled, and your administrator and member account associations are removed.</p>
/// <p>If you want to save your existing findings, you must export them before you disable Security Hub.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DisableSecurityHubFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::disable_security_hub::builders::DisableSecurityHubInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl DisableSecurityHubFluentBuilder {
    /// Creates a new `DisableSecurityHub`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DisableSecurityHub as a reference.
    pub fn as_input(&self) -> &crate::operation::disable_security_hub::builders::DisableSecurityHubInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::disable_security_hub::DisableSecurityHubOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::disable_security_hub::DisableSecurityHubError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::disable_security_hub::DisableSecurityHub::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::disable_security_hub::DisableSecurityHub::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::disable_security_hub::DisableSecurityHubOutput,
            crate::operation::disable_security_hub::DisableSecurityHubError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::disable_security_hub::DisableSecurityHubError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
}
