// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes the state of an association between a route table and a subnet or gateway. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociationStateDetails {
    /// <p> The state of the association. </p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p> The status message, if applicable. </p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl AssociationStateDetails {
    /// <p> The state of the association. </p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p> The status message, if applicable. </p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl AssociationStateDetails {
    /// Creates a new builder-style object to manufacture [`AssociationStateDetails`](crate::types::AssociationStateDetails).
    pub fn builder() -> crate::types::builders::AssociationStateDetailsBuilder {
        crate::types::builders::AssociationStateDetailsBuilder::default()
    }
}

/// A builder for [`AssociationStateDetails`](crate::types::AssociationStateDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociationStateDetailsBuilder {
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl AssociationStateDetailsBuilder {
    /// <p> The state of the association. </p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The state of the association. </p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p> The state of the association. </p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p> The status message, if applicable. </p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The status message, if applicable. </p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p> The status message, if applicable. </p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`AssociationStateDetails`](crate::types::AssociationStateDetails).
    pub fn build(self) -> crate::types::AssociationStateDetails {
        crate::types::AssociationStateDetails {
            state: self.state,
            status_message: self.status_message,
        }
    }
}
