// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> A schema defines the structure of events that are sent to Amazon EventBridge. Schema registries are containers for schemas. They collect and organize schemas so that your schemas are in logical groups. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEventSchemasRegistryDetails {
    /// <p> A description of the registry to be created. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the registry. </p>
    pub registry_arn: ::std::option::Option<::std::string::String>,
    /// <p> The name of the schema registry. </p>
    pub registry_name: ::std::option::Option<::std::string::String>,
}
impl AwsEventSchemasRegistryDetails {
    /// <p> A description of the registry to be created. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the registry. </p>
    pub fn registry_arn(&self) -> ::std::option::Option<&str> {
        self.registry_arn.as_deref()
    }
    /// <p> The name of the schema registry. </p>
    pub fn registry_name(&self) -> ::std::option::Option<&str> {
        self.registry_name.as_deref()
    }
}
impl AwsEventSchemasRegistryDetails {
    /// Creates a new builder-style object to manufacture [`AwsEventSchemasRegistryDetails`](crate::types::AwsEventSchemasRegistryDetails).
    pub fn builder() -> crate::types::builders::AwsEventSchemasRegistryDetailsBuilder {
        crate::types::builders::AwsEventSchemasRegistryDetailsBuilder::default()
    }
}

/// A builder for [`AwsEventSchemasRegistryDetails`](crate::types::AwsEventSchemasRegistryDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEventSchemasRegistryDetailsBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) registry_arn: ::std::option::Option<::std::string::String>,
    pub(crate) registry_name: ::std::option::Option<::std::string::String>,
}
impl AwsEventSchemasRegistryDetailsBuilder {
    /// <p> A description of the registry to be created. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A description of the registry to be created. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> A description of the registry to be created. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p> The Amazon Resource Name (ARN) of the registry. </p>
    pub fn registry_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the registry. </p>
    pub fn set_registry_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the registry. </p>
    pub fn get_registry_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_arn
    }
    /// <p> The name of the schema registry. </p>
    pub fn registry_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the schema registry. </p>
    pub fn set_registry_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_name = input;
        self
    }
    /// <p> The name of the schema registry. </p>
    pub fn get_registry_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_name
    }
    /// Consumes the builder and constructs a [`AwsEventSchemasRegistryDetails`](crate::types::AwsEventSchemasRegistryDetails).
    pub fn build(self) -> crate::types::AwsEventSchemasRegistryDetails {
        crate::types::AwsEventSchemasRegistryDetails {
            description: self.description,
            registry_arn: self.registry_arn,
            registry_name: self.registry_name,
        }
    }
}
