// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the network interface attachment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsEc2NetworkInterfaceAttachment {
    /// <p>Indicates when the attachment initiated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub attach_time: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the network interface attachment</p>
    pub attachment_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub delete_on_termination: bool,
    /// <p>The device index of the network interface attachment on the instance.</p>
    pub device_index: i32,
    /// <p>The ID of the instance.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the owner of the instance.</p>
    pub instance_owner_id: ::std::option::Option<::std::string::String>,
    /// <p>The attachment state.</p>
    /// <p>Valid values: <code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code> </p>
    pub status: ::std::option::Option<::std::string::String>,
}
impl AwsEc2NetworkInterfaceAttachment {
    /// <p>Indicates when the attachment initiated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn attach_time(&self) -> ::std::option::Option<&str> {
        self.attach_time.as_deref()
    }
    /// <p>The identifier of the network interface attachment</p>
    pub fn attachment_id(&self) -> ::std::option::Option<&str> {
        self.attachment_id.as_deref()
    }
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub fn delete_on_termination(&self) -> bool {
        self.delete_on_termination
    }
    /// <p>The device index of the network interface attachment on the instance.</p>
    pub fn device_index(&self) -> i32 {
        self.device_index
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the owner of the instance.</p>
    pub fn instance_owner_id(&self) -> ::std::option::Option<&str> {
        self.instance_owner_id.as_deref()
    }
    /// <p>The attachment state.</p>
    /// <p>Valid values: <code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code> </p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl AwsEc2NetworkInterfaceAttachment {
    /// Creates a new builder-style object to manufacture [`AwsEc2NetworkInterfaceAttachment`](crate::types::AwsEc2NetworkInterfaceAttachment).
    pub fn builder() -> crate::types::builders::AwsEc2NetworkInterfaceAttachmentBuilder {
        crate::types::builders::AwsEc2NetworkInterfaceAttachmentBuilder::default()
    }
}

/// A builder for [`AwsEc2NetworkInterfaceAttachment`](crate::types::AwsEc2NetworkInterfaceAttachment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsEc2NetworkInterfaceAttachmentBuilder {
    pub(crate) attach_time: ::std::option::Option<::std::string::String>,
    pub(crate) attachment_id: ::std::option::Option<::std::string::String>,
    pub(crate) delete_on_termination: ::std::option::Option<bool>,
    pub(crate) device_index: ::std::option::Option<i32>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
}
impl AwsEc2NetworkInterfaceAttachmentBuilder {
    /// <p>Indicates when the attachment initiated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn attach_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attach_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates when the attachment initiated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn set_attach_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attach_time = input;
        self
    }
    /// <p>Indicates when the attachment initiated.</p>
    /// <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For example, <code>2020-03-22T13:22:13.933Z</code>.</p>
    pub fn get_attach_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.attach_time
    }
    /// <p>The identifier of the network interface attachment</p>
    pub fn attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the network interface attachment</p>
    pub fn set_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_id = input;
        self
    }
    /// <p>The identifier of the network interface attachment</p>
    pub fn get_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_id
    }
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub fn delete_on_termination(mut self, input: bool) -> Self {
        self.delete_on_termination = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub fn set_delete_on_termination(mut self, input: ::std::option::Option<bool>) -> Self {
        self.delete_on_termination = input;
        self
    }
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub fn get_delete_on_termination(&self) -> &::std::option::Option<bool> {
        &self.delete_on_termination
    }
    /// <p>The device index of the network interface attachment on the instance.</p>
    pub fn device_index(mut self, input: i32) -> Self {
        self.device_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The device index of the network interface attachment on the instance.</p>
    pub fn set_device_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.device_index = input;
        self
    }
    /// <p>The device index of the network interface attachment on the instance.</p>
    pub fn get_device_index(&self) -> &::std::option::Option<i32> {
        &self.device_index
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The Amazon Web Services account ID of the owner of the instance.</p>
    pub fn instance_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the instance.</p>
    pub fn set_instance_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the instance.</p>
    pub fn get_instance_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_owner_id
    }
    /// <p>The attachment state.</p>
    /// <p>Valid values: <code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code> </p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The attachment state.</p>
    /// <p>Valid values: <code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code> </p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The attachment state.</p>
    /// <p>Valid values: <code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code> </p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// Consumes the builder and constructs a [`AwsEc2NetworkInterfaceAttachment`](crate::types::AwsEc2NetworkInterfaceAttachment).
    pub fn build(self) -> crate::types::AwsEc2NetworkInterfaceAttachment {
        crate::types::AwsEc2NetworkInterfaceAttachment {
            attach_time: self.attach_time,
            attachment_id: self.attachment_id,
            delete_on_termination: self.delete_on_termination.unwrap_or_default(),
            device_index: self.device_index.unwrap_or_default(),
            instance_id: self.instance_id,
            instance_owner_id: self.instance_owner_id,
            status: self.status,
        }
    }
}
