// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Specifies the logging configuration when writing GraphQL operations and tracing to Amazon CloudWatch for an AppSync GraphQL API. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsAppSyncGraphQlApiLogConfigDetails {
    /// <p> The Amazon Resource Name (ARN) of the service role that AppSync assumes to publish to CloudWatch Logs in your account. </p>
    pub cloud_watch_logs_role_arn: ::std::option::Option<::std::string::String>,
    /// <p> Set to <code>TRUE</code> to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level. </p>
    pub exclude_verbose_content: bool,
    /// <p> The field logging level. </p>
    pub field_log_level: ::std::option::Option<::std::string::String>,
}
impl AwsAppSyncGraphQlApiLogConfigDetails {
    /// <p> The Amazon Resource Name (ARN) of the service role that AppSync assumes to publish to CloudWatch Logs in your account. </p>
    pub fn cloud_watch_logs_role_arn(&self) -> ::std::option::Option<&str> {
        self.cloud_watch_logs_role_arn.as_deref()
    }
    /// <p> Set to <code>TRUE</code> to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level. </p>
    pub fn exclude_verbose_content(&self) -> bool {
        self.exclude_verbose_content
    }
    /// <p> The field logging level. </p>
    pub fn field_log_level(&self) -> ::std::option::Option<&str> {
        self.field_log_level.as_deref()
    }
}
impl AwsAppSyncGraphQlApiLogConfigDetails {
    /// Creates a new builder-style object to manufacture [`AwsAppSyncGraphQlApiLogConfigDetails`](crate::types::AwsAppSyncGraphQlApiLogConfigDetails).
    pub fn builder() -> crate::types::builders::AwsAppSyncGraphQlApiLogConfigDetailsBuilder {
        crate::types::builders::AwsAppSyncGraphQlApiLogConfigDetailsBuilder::default()
    }
}

/// A builder for [`AwsAppSyncGraphQlApiLogConfigDetails`](crate::types::AwsAppSyncGraphQlApiLogConfigDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsAppSyncGraphQlApiLogConfigDetailsBuilder {
    pub(crate) cloud_watch_logs_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) exclude_verbose_content: ::std::option::Option<bool>,
    pub(crate) field_log_level: ::std::option::Option<::std::string::String>,
}
impl AwsAppSyncGraphQlApiLogConfigDetailsBuilder {
    /// <p> The Amazon Resource Name (ARN) of the service role that AppSync assumes to publish to CloudWatch Logs in your account. </p>
    pub fn cloud_watch_logs_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_watch_logs_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the service role that AppSync assumes to publish to CloudWatch Logs in your account. </p>
    pub fn set_cloud_watch_logs_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_watch_logs_role_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the service role that AppSync assumes to publish to CloudWatch Logs in your account. </p>
    pub fn get_cloud_watch_logs_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_watch_logs_role_arn
    }
    /// <p> Set to <code>TRUE</code> to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level. </p>
    pub fn exclude_verbose_content(mut self, input: bool) -> Self {
        self.exclude_verbose_content = ::std::option::Option::Some(input);
        self
    }
    /// <p> Set to <code>TRUE</code> to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level. </p>
    pub fn set_exclude_verbose_content(mut self, input: ::std::option::Option<bool>) -> Self {
        self.exclude_verbose_content = input;
        self
    }
    /// <p> Set to <code>TRUE</code> to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level. </p>
    pub fn get_exclude_verbose_content(&self) -> &::std::option::Option<bool> {
        &self.exclude_verbose_content
    }
    /// <p> The field logging level. </p>
    pub fn field_log_level(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_log_level = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The field logging level. </p>
    pub fn set_field_log_level(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_log_level = input;
        self
    }
    /// <p> The field logging level. </p>
    pub fn get_field_log_level(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_log_level
    }
    /// Consumes the builder and constructs a [`AwsAppSyncGraphQlApiLogConfigDetails`](crate::types::AwsAppSyncGraphQlApiLogConfigDetails).
    pub fn build(self) -> crate::types::AwsAppSyncGraphQlApiLogConfigDetails {
        crate::types::AwsAppSyncGraphQlApiLogConfigDetails {
            cloud_watch_logs_role_arn: self.cloud_watch_logs_role_arn,
            exclude_verbose_content: self.exclude_verbose_content.unwrap_or_default(),
            field_log_level: self.field_log_level,
        }
    }
}
