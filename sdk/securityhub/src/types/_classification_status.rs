// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides details about the current status of the sensitive data detection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClassificationStatus {
    /// <p>The code that represents the status of the sensitive data detection.</p>
    pub code: ::std::option::Option<::std::string::String>,
    /// <p>A longer description of the current status of the sensitive data detection.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl ClassificationStatus {
    /// <p>The code that represents the status of the sensitive data detection.</p>
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>A longer description of the current status of the sensitive data detection.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl ClassificationStatus {
    /// Creates a new builder-style object to manufacture [`ClassificationStatus`](crate::types::ClassificationStatus).
    pub fn builder() -> crate::types::builders::ClassificationStatusBuilder {
        crate::types::builders::ClassificationStatusBuilder::default()
    }
}

/// A builder for [`ClassificationStatus`](crate::types::ClassificationStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClassificationStatusBuilder {
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl ClassificationStatusBuilder {
    /// <p>The code that represents the status of the sensitive data detection.</p>
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code that represents the status of the sensitive data detection.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The code that represents the status of the sensitive data detection.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>A longer description of the current status of the sensitive data detection.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A longer description of the current status of the sensitive data detection.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>A longer description of the current status of the sensitive data detection.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`ClassificationStatus`](crate::types::ClassificationStatus).
    pub fn build(self) -> crate::types::ClassificationStatus {
        crate::types::ClassificationStatus {
            code: self.code,
            reason: self.reason,
        }
    }
}
