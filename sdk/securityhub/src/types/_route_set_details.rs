// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides details about the routes in the route table. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteSetDetails {
    /// <p> The ID of the carrier gateway. </p>
    pub carrier_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the core network. </p>
    pub core_network_arn: ::std::option::Option<::std::string::String>,
    /// <p> The IPv4 CIDR block used for the destination match. </p>
    pub destination_cidr_block: ::std::option::Option<::std::string::String>,
    /// <p> The IPv6 CIDR block used for the destination match. </p>
    pub destination_ipv6_cidr_block: ::std::option::Option<::std::string::String>,
    /// <p> The prefix of the destination Amazon Web Service. </p>
    pub destination_prefix_list_id: ::std::option::Option<::std::string::String>,
    /// <p> The ID of the egress-only internet gateway. </p>
    pub egress_only_internet_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p> The ID of a gateway attached to your VPC. </p>
    pub gateway_id: ::std::option::Option<::std::string::String>,
    /// <p> The ID of a NAT instance in your VPC. </p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p> The ID of the Amazon Web Services account that owns the instance. </p>
    pub instance_owner_id: ::std::option::Option<::std::string::String>,
    /// <p> The ID of the local gateway. </p>
    pub local_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p> The ID of a NAT gateway. </p>
    pub nat_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p> The ID of the network interface. </p>
    pub network_interface_id: ::std::option::Option<::std::string::String>,
    /// <p> Describes how the route was created. </p>
    pub origin: ::std::option::Option<::std::string::String>,
    /// <p> The state of the route. </p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p> The ID of a transit gateway. </p>
    pub transit_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p> The ID of a VPC peering connection. </p>
    pub vpc_peering_connection_id: ::std::option::Option<::std::string::String>,
}
impl RouteSetDetails {
    /// <p> The ID of the carrier gateway. </p>
    pub fn carrier_gateway_id(&self) -> ::std::option::Option<&str> {
        self.carrier_gateway_id.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the core network. </p>
    pub fn core_network_arn(&self) -> ::std::option::Option<&str> {
        self.core_network_arn.as_deref()
    }
    /// <p> The IPv4 CIDR block used for the destination match. </p>
    pub fn destination_cidr_block(&self) -> ::std::option::Option<&str> {
        self.destination_cidr_block.as_deref()
    }
    /// <p> The IPv6 CIDR block used for the destination match. </p>
    pub fn destination_ipv6_cidr_block(&self) -> ::std::option::Option<&str> {
        self.destination_ipv6_cidr_block.as_deref()
    }
    /// <p> The prefix of the destination Amazon Web Service. </p>
    pub fn destination_prefix_list_id(&self) -> ::std::option::Option<&str> {
        self.destination_prefix_list_id.as_deref()
    }
    /// <p> The ID of the egress-only internet gateway. </p>
    pub fn egress_only_internet_gateway_id(&self) -> ::std::option::Option<&str> {
        self.egress_only_internet_gateway_id.as_deref()
    }
    /// <p> The ID of a gateway attached to your VPC. </p>
    pub fn gateway_id(&self) -> ::std::option::Option<&str> {
        self.gateway_id.as_deref()
    }
    /// <p> The ID of a NAT instance in your VPC. </p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p> The ID of the Amazon Web Services account that owns the instance. </p>
    pub fn instance_owner_id(&self) -> ::std::option::Option<&str> {
        self.instance_owner_id.as_deref()
    }
    /// <p> The ID of the local gateway. </p>
    pub fn local_gateway_id(&self) -> ::std::option::Option<&str> {
        self.local_gateway_id.as_deref()
    }
    /// <p> The ID of a NAT gateway. </p>
    pub fn nat_gateway_id(&self) -> ::std::option::Option<&str> {
        self.nat_gateway_id.as_deref()
    }
    /// <p> The ID of the network interface. </p>
    pub fn network_interface_id(&self) -> ::std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p> Describes how the route was created. </p>
    pub fn origin(&self) -> ::std::option::Option<&str> {
        self.origin.as_deref()
    }
    /// <p> The state of the route. </p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p> The ID of a transit gateway. </p>
    pub fn transit_gateway_id(&self) -> ::std::option::Option<&str> {
        self.transit_gateway_id.as_deref()
    }
    /// <p> The ID of a VPC peering connection. </p>
    pub fn vpc_peering_connection_id(&self) -> ::std::option::Option<&str> {
        self.vpc_peering_connection_id.as_deref()
    }
}
impl RouteSetDetails {
    /// Creates a new builder-style object to manufacture [`RouteSetDetails`](crate::types::RouteSetDetails).
    pub fn builder() -> crate::types::builders::RouteSetDetailsBuilder {
        crate::types::builders::RouteSetDetailsBuilder::default()
    }
}

/// A builder for [`RouteSetDetails`](crate::types::RouteSetDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RouteSetDetailsBuilder {
    pub(crate) carrier_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) core_network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) destination_cidr_block: ::std::option::Option<::std::string::String>,
    pub(crate) destination_ipv6_cidr_block: ::std::option::Option<::std::string::String>,
    pub(crate) destination_prefix_list_id: ::std::option::Option<::std::string::String>,
    pub(crate) egress_only_internet_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_owner_id: ::std::option::Option<::std::string::String>,
    pub(crate) local_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) nat_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) network_interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) origin: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) transit_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_peering_connection_id: ::std::option::Option<::std::string::String>,
}
impl RouteSetDetailsBuilder {
    /// <p> The ID of the carrier gateway. </p>
    pub fn carrier_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.carrier_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the carrier gateway. </p>
    pub fn set_carrier_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.carrier_gateway_id = input;
        self
    }
    /// <p> The ID of the carrier gateway. </p>
    pub fn get_carrier_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.carrier_gateway_id
    }
    /// <p> The Amazon Resource Name (ARN) of the core network. </p>
    pub fn core_network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.core_network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the core network. </p>
    pub fn set_core_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.core_network_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the core network. </p>
    pub fn get_core_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.core_network_arn
    }
    /// <p> The IPv4 CIDR block used for the destination match. </p>
    pub fn destination_cidr_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_cidr_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The IPv4 CIDR block used for the destination match. </p>
    pub fn set_destination_cidr_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_cidr_block = input;
        self
    }
    /// <p> The IPv4 CIDR block used for the destination match. </p>
    pub fn get_destination_cidr_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_cidr_block
    }
    /// <p> The IPv6 CIDR block used for the destination match. </p>
    pub fn destination_ipv6_cidr_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_ipv6_cidr_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The IPv6 CIDR block used for the destination match. </p>
    pub fn set_destination_ipv6_cidr_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_ipv6_cidr_block = input;
        self
    }
    /// <p> The IPv6 CIDR block used for the destination match. </p>
    pub fn get_destination_ipv6_cidr_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_ipv6_cidr_block
    }
    /// <p> The prefix of the destination Amazon Web Service. </p>
    pub fn destination_prefix_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_prefix_list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The prefix of the destination Amazon Web Service. </p>
    pub fn set_destination_prefix_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_prefix_list_id = input;
        self
    }
    /// <p> The prefix of the destination Amazon Web Service. </p>
    pub fn get_destination_prefix_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_prefix_list_id
    }
    /// <p> The ID of the egress-only internet gateway. </p>
    pub fn egress_only_internet_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.egress_only_internet_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the egress-only internet gateway. </p>
    pub fn set_egress_only_internet_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.egress_only_internet_gateway_id = input;
        self
    }
    /// <p> The ID of the egress-only internet gateway. </p>
    pub fn get_egress_only_internet_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.egress_only_internet_gateway_id
    }
    /// <p> The ID of a gateway attached to your VPC. </p>
    pub fn gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of a gateway attached to your VPC. </p>
    pub fn set_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_id = input;
        self
    }
    /// <p> The ID of a gateway attached to your VPC. </p>
    pub fn get_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_id
    }
    /// <p> The ID of a NAT instance in your VPC. </p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of a NAT instance in your VPC. </p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p> The ID of a NAT instance in your VPC. </p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p> The ID of the Amazon Web Services account that owns the instance. </p>
    pub fn instance_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the Amazon Web Services account that owns the instance. </p>
    pub fn set_instance_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_owner_id = input;
        self
    }
    /// <p> The ID of the Amazon Web Services account that owns the instance. </p>
    pub fn get_instance_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_owner_id
    }
    /// <p> The ID of the local gateway. </p>
    pub fn local_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the local gateway. </p>
    pub fn set_local_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_gateway_id = input;
        self
    }
    /// <p> The ID of the local gateway. </p>
    pub fn get_local_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_gateway_id
    }
    /// <p> The ID of a NAT gateway. </p>
    pub fn nat_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nat_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of a NAT gateway. </p>
    pub fn set_nat_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nat_gateway_id = input;
        self
    }
    /// <p> The ID of a NAT gateway. </p>
    pub fn get_nat_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.nat_gateway_id
    }
    /// <p> The ID of the network interface. </p>
    pub fn network_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the network interface. </p>
    pub fn set_network_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p> The ID of the network interface. </p>
    pub fn get_network_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_interface_id
    }
    /// <p> Describes how the route was created. </p>
    pub fn origin(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Describes how the route was created. </p>
    pub fn set_origin(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin = input;
        self
    }
    /// <p> Describes how the route was created. </p>
    pub fn get_origin(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin
    }
    /// <p> The state of the route. </p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The state of the route. </p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p> The state of the route. </p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p> The ID of a transit gateway. </p>
    pub fn transit_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transit_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of a transit gateway. </p>
    pub fn set_transit_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transit_gateway_id = input;
        self
    }
    /// <p> The ID of a transit gateway. </p>
    pub fn get_transit_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transit_gateway_id
    }
    /// <p> The ID of a VPC peering connection. </p>
    pub fn vpc_peering_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_peering_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of a VPC peering connection. </p>
    pub fn set_vpc_peering_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_peering_connection_id = input;
        self
    }
    /// <p> The ID of a VPC peering connection. </p>
    pub fn get_vpc_peering_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_peering_connection_id
    }
    /// Consumes the builder and constructs a [`RouteSetDetails`](crate::types::RouteSetDetails).
    pub fn build(self) -> crate::types::RouteSetDetails {
        crate::types::RouteSetDetails {
            carrier_gateway_id: self.carrier_gateway_id,
            core_network_arn: self.core_network_arn,
            destination_cidr_block: self.destination_cidr_block,
            destination_ipv6_cidr_block: self.destination_ipv6_cidr_block,
            destination_prefix_list_id: self.destination_prefix_list_id,
            egress_only_internet_gateway_id: self.egress_only_internet_gateway_id,
            gateway_id: self.gateway_id,
            instance_id: self.instance_id,
            instance_owner_id: self.instance_owner_id,
            local_gateway_id: self.local_gateway_id,
            nat_gateway_id: self.nat_gateway_id,
            network_interface_id: self.network_interface_id,
            origin: self.origin,
            state: self.state,
            transit_gateway_id: self.transit_gateway_id,
            vpc_peering_connection_id: self.vpc_peering_connection_id,
        }
    }
}
