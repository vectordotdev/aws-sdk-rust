// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides details about an Step Functions state machine, which is a workflow consisting of a series of event- driven steps. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsStepFunctionStateMachineDetails {
    /// <p> A user-defined or an auto-generated string that identifies a <code>Map</code> state. This parameter is present only if the <code>stateMachineArn</code> specified in input is a qualified state machine ARN. </p>
    pub label: ::std::option::Option<::std::string::String>,
    /// <p> Used to set CloudWatch Logs options. </p>
    pub logging_configuration: ::std::option::Option<crate::types::AwsStepFunctionStateMachineLoggingConfigurationDetails>,
    /// <p> The name of the state machine. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the IAM role used when creating this state machine. </p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p> The ARN that identifies the state machine. </p>
    pub state_machine_arn: ::std::option::Option<::std::string::String>,
    /// <p> The current status of the state machine. </p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p> Specifies whether X-Ray tracing is enabled. </p>
    pub tracing_configuration: ::std::option::Option<crate::types::AwsStepFunctionStateMachineTracingConfigurationDetails>,
    /// <p> The type of the state machine (STANDARD or EXPRESS). </p>
    pub r#type: ::std::option::Option<::std::string::String>,
}
impl AwsStepFunctionStateMachineDetails {
    /// <p> A user-defined or an auto-generated string that identifies a <code>Map</code> state. This parameter is present only if the <code>stateMachineArn</code> specified in input is a qualified state machine ARN. </p>
    pub fn label(&self) -> ::std::option::Option<&str> {
        self.label.as_deref()
    }
    /// <p> Used to set CloudWatch Logs options. </p>
    pub fn logging_configuration(&self) -> ::std::option::Option<&crate::types::AwsStepFunctionStateMachineLoggingConfigurationDetails> {
        self.logging_configuration.as_ref()
    }
    /// <p> The name of the state machine. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the IAM role used when creating this state machine. </p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p> The ARN that identifies the state machine. </p>
    pub fn state_machine_arn(&self) -> ::std::option::Option<&str> {
        self.state_machine_arn.as_deref()
    }
    /// <p> The current status of the state machine. </p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p> Specifies whether X-Ray tracing is enabled. </p>
    pub fn tracing_configuration(&self) -> ::std::option::Option<&crate::types::AwsStepFunctionStateMachineTracingConfigurationDetails> {
        self.tracing_configuration.as_ref()
    }
    /// <p> The type of the state machine (STANDARD or EXPRESS). </p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl AwsStepFunctionStateMachineDetails {
    /// Creates a new builder-style object to manufacture [`AwsStepFunctionStateMachineDetails`](crate::types::AwsStepFunctionStateMachineDetails).
    pub fn builder() -> crate::types::builders::AwsStepFunctionStateMachineDetailsBuilder {
        crate::types::builders::AwsStepFunctionStateMachineDetailsBuilder::default()
    }
}

/// A builder for [`AwsStepFunctionStateMachineDetails`](crate::types::AwsStepFunctionStateMachineDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsStepFunctionStateMachineDetailsBuilder {
    pub(crate) label: ::std::option::Option<::std::string::String>,
    pub(crate) logging_configuration: ::std::option::Option<crate::types::AwsStepFunctionStateMachineLoggingConfigurationDetails>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state_machine_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) tracing_configuration: ::std::option::Option<crate::types::AwsStepFunctionStateMachineTracingConfigurationDetails>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
}
impl AwsStepFunctionStateMachineDetailsBuilder {
    /// <p> A user-defined or an auto-generated string that identifies a <code>Map</code> state. This parameter is present only if the <code>stateMachineArn</code> specified in input is a qualified state machine ARN. </p>
    pub fn label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A user-defined or an auto-generated string that identifies a <code>Map</code> state. This parameter is present only if the <code>stateMachineArn</code> specified in input is a qualified state machine ARN. </p>
    pub fn set_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.label = input;
        self
    }
    /// <p> A user-defined or an auto-generated string that identifies a <code>Map</code> state. This parameter is present only if the <code>stateMachineArn</code> specified in input is a qualified state machine ARN. </p>
    pub fn get_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.label
    }
    /// <p> Used to set CloudWatch Logs options. </p>
    pub fn logging_configuration(mut self, input: crate::types::AwsStepFunctionStateMachineLoggingConfigurationDetails) -> Self {
        self.logging_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p> Used to set CloudWatch Logs options. </p>
    pub fn set_logging_configuration(
        mut self,
        input: ::std::option::Option<crate::types::AwsStepFunctionStateMachineLoggingConfigurationDetails>,
    ) -> Self {
        self.logging_configuration = input;
        self
    }
    /// <p> Used to set CloudWatch Logs options. </p>
    pub fn get_logging_configuration(&self) -> &::std::option::Option<crate::types::AwsStepFunctionStateMachineLoggingConfigurationDetails> {
        &self.logging_configuration
    }
    /// <p> The name of the state machine. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the state machine. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of the state machine. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The Amazon Resource Name (ARN) of the IAM role used when creating this state machine. </p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the IAM role used when creating this state machine. </p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the IAM role used when creating this state machine. </p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p> The ARN that identifies the state machine. </p>
    pub fn state_machine_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_machine_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ARN that identifies the state machine. </p>
    pub fn set_state_machine_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_machine_arn = input;
        self
    }
    /// <p> The ARN that identifies the state machine. </p>
    pub fn get_state_machine_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_machine_arn
    }
    /// <p> The current status of the state machine. </p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The current status of the state machine. </p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p> The current status of the state machine. </p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p> Specifies whether X-Ray tracing is enabled. </p>
    pub fn tracing_configuration(mut self, input: crate::types::AwsStepFunctionStateMachineTracingConfigurationDetails) -> Self {
        self.tracing_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies whether X-Ray tracing is enabled. </p>
    pub fn set_tracing_configuration(
        mut self,
        input: ::std::option::Option<crate::types::AwsStepFunctionStateMachineTracingConfigurationDetails>,
    ) -> Self {
        self.tracing_configuration = input;
        self
    }
    /// <p> Specifies whether X-Ray tracing is enabled. </p>
    pub fn get_tracing_configuration(&self) -> &::std::option::Option<crate::types::AwsStepFunctionStateMachineTracingConfigurationDetails> {
        &self.tracing_configuration
    }
    /// <p> The type of the state machine (STANDARD or EXPRESS). </p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The type of the state machine (STANDARD or EXPRESS). </p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p> The type of the state machine (STANDARD or EXPRESS). </p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`AwsStepFunctionStateMachineDetails`](crate::types::AwsStepFunctionStateMachineDetails).
    pub fn build(self) -> crate::types::AwsStepFunctionStateMachineDetails {
        crate::types::AwsStepFunctionStateMachineDetails {
            label: self.label,
            logging_configuration: self.logging_configuration,
            name: self.name,
            role_arn: self.role_arn,
            state_machine_arn: self.state_machine_arn,
            status: self.status,
            tracing_configuration: self.tracing_configuration,
            r#type: self.r#type,
        }
    }
}
