// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides information about an Amazon Athena workgroup. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsAthenaWorkGroupDetails {
    /// <p> The workgroup name. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The workgroup description. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> Whether the workgroup is enabled or disabled. </p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p> The configuration of the workgroup, which includes the location in Amazon Simple Storage Service (Amazon S3) where query results are stored, the encryption option, if any, used for query results, whether Amazon CloudWatch metrics are enabled for the workgroup, and the limit for the amount of bytes scanned (cutoff) per query, if it is specified. </p>
    pub configuration: ::std::option::Option<crate::types::AwsAthenaWorkGroupConfigurationDetails>,
}
impl AwsAthenaWorkGroupDetails {
    /// <p> The workgroup name. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The workgroup description. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> Whether the workgroup is enabled or disabled. </p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p> The configuration of the workgroup, which includes the location in Amazon Simple Storage Service (Amazon S3) where query results are stored, the encryption option, if any, used for query results, whether Amazon CloudWatch metrics are enabled for the workgroup, and the limit for the amount of bytes scanned (cutoff) per query, if it is specified. </p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::AwsAthenaWorkGroupConfigurationDetails> {
        self.configuration.as_ref()
    }
}
impl AwsAthenaWorkGroupDetails {
    /// Creates a new builder-style object to manufacture [`AwsAthenaWorkGroupDetails`](crate::types::AwsAthenaWorkGroupDetails).
    pub fn builder() -> crate::types::builders::AwsAthenaWorkGroupDetailsBuilder {
        crate::types::builders::AwsAthenaWorkGroupDetailsBuilder::default()
    }
}

/// A builder for [`AwsAthenaWorkGroupDetails`](crate::types::AwsAthenaWorkGroupDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsAthenaWorkGroupDetailsBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::AwsAthenaWorkGroupConfigurationDetails>,
}
impl AwsAthenaWorkGroupDetailsBuilder {
    /// <p> The workgroup name. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The workgroup name. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The workgroup name. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The workgroup description. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The workgroup description. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The workgroup description. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p> Whether the workgroup is enabled or disabled. </p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Whether the workgroup is enabled or disabled. </p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p> Whether the workgroup is enabled or disabled. </p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// <p> The configuration of the workgroup, which includes the location in Amazon Simple Storage Service (Amazon S3) where query results are stored, the encryption option, if any, used for query results, whether Amazon CloudWatch metrics are enabled for the workgroup, and the limit for the amount of bytes scanned (cutoff) per query, if it is specified. </p>
    pub fn configuration(mut self, input: crate::types::AwsAthenaWorkGroupConfigurationDetails) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p> The configuration of the workgroup, which includes the location in Amazon Simple Storage Service (Amazon S3) where query results are stored, the encryption option, if any, used for query results, whether Amazon CloudWatch metrics are enabled for the workgroup, and the limit for the amount of bytes scanned (cutoff) per query, if it is specified. </p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::AwsAthenaWorkGroupConfigurationDetails>) -> Self {
        self.configuration = input;
        self
    }
    /// <p> The configuration of the workgroup, which includes the location in Amazon Simple Storage Service (Amazon S3) where query results are stored, the encryption option, if any, used for query results, whether Amazon CloudWatch metrics are enabled for the workgroup, and the limit for the amount of bytes scanned (cutoff) per query, if it is specified. </p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::AwsAthenaWorkGroupConfigurationDetails> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`AwsAthenaWorkGroupDetails`](crate::types::AwsAthenaWorkGroupDetails).
    pub fn build(self) -> crate::types::AwsAthenaWorkGroupDetails {
        crate::types::AwsAthenaWorkGroupDetails {
            name: self.name,
            description: self.description,
            state: self.state,
            configuration: self.configuration,
        }
    }
}
