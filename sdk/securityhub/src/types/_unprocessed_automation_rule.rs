// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> A list of objects containing <code>RuleArn</code>, <code>ErrorCode</code>, and <code>ErrorMessage</code>. This parameter tells you which automation rules the request didn't process and why. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UnprocessedAutomationRule {
    /// <p> The Amazon Resource Name (ARN) for the unprocessed automation rule. </p>
    pub rule_arn: ::std::option::Option<::std::string::String>,
    /// <p> The error code associated with the unprocessed automation rule. </p>
    pub error_code: i32,
    /// <p> An error message describing why a request didn't process a specific rule. </p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl UnprocessedAutomationRule {
    /// <p> The Amazon Resource Name (ARN) for the unprocessed automation rule. </p>
    pub fn rule_arn(&self) -> ::std::option::Option<&str> {
        self.rule_arn.as_deref()
    }
    /// <p> The error code associated with the unprocessed automation rule. </p>
    pub fn error_code(&self) -> i32 {
        self.error_code
    }
    /// <p> An error message describing why a request didn't process a specific rule. </p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl UnprocessedAutomationRule {
    /// Creates a new builder-style object to manufacture [`UnprocessedAutomationRule`](crate::types::UnprocessedAutomationRule).
    pub fn builder() -> crate::types::builders::UnprocessedAutomationRuleBuilder {
        crate::types::builders::UnprocessedAutomationRuleBuilder::default()
    }
}

/// A builder for [`UnprocessedAutomationRule`](crate::types::UnprocessedAutomationRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UnprocessedAutomationRuleBuilder {
    pub(crate) rule_arn: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<i32>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl UnprocessedAutomationRuleBuilder {
    /// <p> The Amazon Resource Name (ARN) for the unprocessed automation rule. </p>
    pub fn rule_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) for the unprocessed automation rule. </p>
    pub fn set_rule_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) for the unprocessed automation rule. </p>
    pub fn get_rule_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_arn
    }
    /// <p> The error code associated with the unprocessed automation rule. </p>
    pub fn error_code(mut self, input: i32) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p> The error code associated with the unprocessed automation rule. </p>
    pub fn set_error_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.error_code = input;
        self
    }
    /// <p> The error code associated with the unprocessed automation rule. </p>
    pub fn get_error_code(&self) -> &::std::option::Option<i32> {
        &self.error_code
    }
    /// <p> An error message describing why a request didn't process a specific rule. </p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> An error message describing why a request didn't process a specific rule. </p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p> An error message describing why a request didn't process a specific rule. </p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`UnprocessedAutomationRule`](crate::types::UnprocessedAutomationRule).
    pub fn build(self) -> crate::types::UnprocessedAutomationRule {
        crate::types::UnprocessedAutomationRule {
            rule_arn: self.rule_arn,
            error_code: self.error_code.unwrap_or_default(),
            error_message: self.error_message,
        }
    }
}
