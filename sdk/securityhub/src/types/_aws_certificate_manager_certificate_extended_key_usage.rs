// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an extended key usage X.509 v3 extension object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsCertificateManagerCertificateExtendedKeyUsage {
    /// <p>The name of an extension value. Indicates the purpose for which the certificate public key can be used.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>An object identifier (OID) for the extension value.</p>
    /// <p>The format is numbers separated by periods.</p>
    pub o_id: ::std::option::Option<::std::string::String>,
}
impl AwsCertificateManagerCertificateExtendedKeyUsage {
    /// <p>The name of an extension value. Indicates the purpose for which the certificate public key can be used.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>An object identifier (OID) for the extension value.</p>
    /// <p>The format is numbers separated by periods.</p>
    pub fn o_id(&self) -> ::std::option::Option<&str> {
        self.o_id.as_deref()
    }
}
impl AwsCertificateManagerCertificateExtendedKeyUsage {
    /// Creates a new builder-style object to manufacture [`AwsCertificateManagerCertificateExtendedKeyUsage`](crate::types::AwsCertificateManagerCertificateExtendedKeyUsage).
    pub fn builder() -> crate::types::builders::AwsCertificateManagerCertificateExtendedKeyUsageBuilder {
        crate::types::builders::AwsCertificateManagerCertificateExtendedKeyUsageBuilder::default()
    }
}

/// A builder for [`AwsCertificateManagerCertificateExtendedKeyUsage`](crate::types::AwsCertificateManagerCertificateExtendedKeyUsage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsCertificateManagerCertificateExtendedKeyUsageBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) o_id: ::std::option::Option<::std::string::String>,
}
impl AwsCertificateManagerCertificateExtendedKeyUsageBuilder {
    /// <p>The name of an extension value. Indicates the purpose for which the certificate public key can be used.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an extension value. Indicates the purpose for which the certificate public key can be used.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of an extension value. Indicates the purpose for which the certificate public key can be used.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>An object identifier (OID) for the extension value.</p>
    /// <p>The format is numbers separated by periods.</p>
    pub fn o_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.o_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An object identifier (OID) for the extension value.</p>
    /// <p>The format is numbers separated by periods.</p>
    pub fn set_o_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.o_id = input;
        self
    }
    /// <p>An object identifier (OID) for the extension value.</p>
    /// <p>The format is numbers separated by periods.</p>
    pub fn get_o_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.o_id
    }
    /// Consumes the builder and constructs a [`AwsCertificateManagerCertificateExtendedKeyUsage`](crate::types::AwsCertificateManagerCertificateExtendedKeyUsage).
    pub fn build(self) -> crate::types::AwsCertificateManagerCertificateExtendedKeyUsage {
        crate::types::AwsCertificateManagerCertificateExtendedKeyUsage {
            name: self.name,
            o_id: self.o_id,
        }
    }
}
