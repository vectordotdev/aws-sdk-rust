// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> An object that contains information on the status of CloudTrail as a data source for the detector. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsGuardDutyDetectorDataSourcesCloudTrailDetails {
    /// <p> Specifies whether CloudTrail is activated as a data source for the detector. </p>
    pub status: ::std::option::Option<::std::string::String>,
}
impl AwsGuardDutyDetectorDataSourcesCloudTrailDetails {
    /// <p> Specifies whether CloudTrail is activated as a data source for the detector. </p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl AwsGuardDutyDetectorDataSourcesCloudTrailDetails {
    /// Creates a new builder-style object to manufacture [`AwsGuardDutyDetectorDataSourcesCloudTrailDetails`](crate::types::AwsGuardDutyDetectorDataSourcesCloudTrailDetails).
    pub fn builder() -> crate::types::builders::AwsGuardDutyDetectorDataSourcesCloudTrailDetailsBuilder {
        crate::types::builders::AwsGuardDutyDetectorDataSourcesCloudTrailDetailsBuilder::default()
    }
}

/// A builder for [`AwsGuardDutyDetectorDataSourcesCloudTrailDetails`](crate::types::AwsGuardDutyDetectorDataSourcesCloudTrailDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsGuardDutyDetectorDataSourcesCloudTrailDetailsBuilder {
    pub(crate) status: ::std::option::Option<::std::string::String>,
}
impl AwsGuardDutyDetectorDataSourcesCloudTrailDetailsBuilder {
    /// <p> Specifies whether CloudTrail is activated as a data source for the detector. </p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Specifies whether CloudTrail is activated as a data source for the detector. </p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p> Specifies whether CloudTrail is activated as a data source for the detector. </p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// Consumes the builder and constructs a [`AwsGuardDutyDetectorDataSourcesCloudTrailDetails`](crate::types::AwsGuardDutyDetectorDataSourcesCloudTrailDetails).
    pub fn build(self) -> crate::types::AwsGuardDutyDetectorDataSourcesCloudTrailDetails {
        crate::types::AwsGuardDutyDetectorDataSourcesCloudTrailDetails { status: self.status }
    }
}
