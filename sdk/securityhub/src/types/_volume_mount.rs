// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the mounting of a volume in a container. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VolumeMount {
    /// <p>The name of the volume. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The path in the container at which the volume should be mounted. </p>
    pub mount_path: ::std::option::Option<::std::string::String>,
}
impl VolumeMount {
    /// <p>The name of the volume. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The path in the container at which the volume should be mounted. </p>
    pub fn mount_path(&self) -> ::std::option::Option<&str> {
        self.mount_path.as_deref()
    }
}
impl VolumeMount {
    /// Creates a new builder-style object to manufacture [`VolumeMount`](crate::types::VolumeMount).
    pub fn builder() -> crate::types::builders::VolumeMountBuilder {
        crate::types::builders::VolumeMountBuilder::default()
    }
}

/// A builder for [`VolumeMount`](crate::types::VolumeMount).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VolumeMountBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) mount_path: ::std::option::Option<::std::string::String>,
}
impl VolumeMountBuilder {
    /// <p>The name of the volume. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the volume. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the volume. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The path in the container at which the volume should be mounted. </p>
    pub fn mount_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mount_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path in the container at which the volume should be mounted. </p>
    pub fn set_mount_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mount_path = input;
        self
    }
    /// <p>The path in the container at which the volume should be mounted. </p>
    pub fn get_mount_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.mount_path
    }
    /// Consumes the builder and constructs a [`VolumeMount`](crate::types::VolumeMount).
    pub fn build(self) -> crate::types::VolumeMount {
        crate::types::VolumeMount {
            name: self.name,
            mount_path: self.mount_path,
        }
    }
}
