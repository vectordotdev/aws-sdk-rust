// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provided if <code>ActionType</code> is <code>AWS_API_CALL</code>. It provides details about the API call that was detected.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsApiCallAction {
    /// <p>The name of the API method that was issued.</p>
    pub api: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon Web Services service that the API method belongs to.</p>
    pub service_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the API call originated from a remote IP address (<code>remoteip</code>) or from a DNS domain (<code>domain</code>).</p>
    pub caller_type: ::std::option::Option<::std::string::String>,
    /// <p>Provided if <code>CallerType</code> is <code>remoteIp</code>. Provides information about the remote IP address that the API call originated from.</p>
    pub remote_ip_details: ::std::option::Option<crate::types::ActionRemoteIpDetails>,
    /// <p>Provided if <code>CallerType</code> is <code>domain</code>. Provides information about the DNS domain that the API call originated from.</p>
    pub domain_details: ::std::option::Option<crate::types::AwsApiCallActionDomainDetails>,
    /// <p>Identifies the resources that were affected by the API call.</p>
    pub affected_resources: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>An ISO8601-formatted timestamp that indicates when the API call was first observed.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub first_seen: ::std::option::Option<::std::string::String>,
    /// <p>An ISO8601-formatted timestamp that indicates when the API call was most recently observed.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub last_seen: ::std::option::Option<::std::string::String>,
}
impl AwsApiCallAction {
    /// <p>The name of the API method that was issued.</p>
    pub fn api(&self) -> ::std::option::Option<&str> {
        self.api.as_deref()
    }
    /// <p>The name of the Amazon Web Services service that the API method belongs to.</p>
    pub fn service_name(&self) -> ::std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>Indicates whether the API call originated from a remote IP address (<code>remoteip</code>) or from a DNS domain (<code>domain</code>).</p>
    pub fn caller_type(&self) -> ::std::option::Option<&str> {
        self.caller_type.as_deref()
    }
    /// <p>Provided if <code>CallerType</code> is <code>remoteIp</code>. Provides information about the remote IP address that the API call originated from.</p>
    pub fn remote_ip_details(&self) -> ::std::option::Option<&crate::types::ActionRemoteIpDetails> {
        self.remote_ip_details.as_ref()
    }
    /// <p>Provided if <code>CallerType</code> is <code>domain</code>. Provides information about the DNS domain that the API call originated from.</p>
    pub fn domain_details(&self) -> ::std::option::Option<&crate::types::AwsApiCallActionDomainDetails> {
        self.domain_details.as_ref()
    }
    /// <p>Identifies the resources that were affected by the API call.</p>
    pub fn affected_resources(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.affected_resources.as_ref()
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the API call was first observed.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn first_seen(&self) -> ::std::option::Option<&str> {
        self.first_seen.as_deref()
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the API call was most recently observed.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn last_seen(&self) -> ::std::option::Option<&str> {
        self.last_seen.as_deref()
    }
}
impl AwsApiCallAction {
    /// Creates a new builder-style object to manufacture [`AwsApiCallAction`](crate::types::AwsApiCallAction).
    pub fn builder() -> crate::types::builders::AwsApiCallActionBuilder {
        crate::types::builders::AwsApiCallActionBuilder::default()
    }
}

/// A builder for [`AwsApiCallAction`](crate::types::AwsApiCallAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsApiCallActionBuilder {
    pub(crate) api: ::std::option::Option<::std::string::String>,
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) caller_type: ::std::option::Option<::std::string::String>,
    pub(crate) remote_ip_details: ::std::option::Option<crate::types::ActionRemoteIpDetails>,
    pub(crate) domain_details: ::std::option::Option<crate::types::AwsApiCallActionDomainDetails>,
    pub(crate) affected_resources: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) first_seen: ::std::option::Option<::std::string::String>,
    pub(crate) last_seen: ::std::option::Option<::std::string::String>,
}
impl AwsApiCallActionBuilder {
    /// <p>The name of the API method that was issued.</p>
    pub fn api(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the API method that was issued.</p>
    pub fn set_api(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api = input;
        self
    }
    /// <p>The name of the API method that was issued.</p>
    pub fn get_api(&self) -> &::std::option::Option<::std::string::String> {
        &self.api
    }
    /// <p>The name of the Amazon Web Services service that the API method belongs to.</p>
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Web Services service that the API method belongs to.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the Amazon Web Services service that the API method belongs to.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>Indicates whether the API call originated from a remote IP address (<code>remoteip</code>) or from a DNS domain (<code>domain</code>).</p>
    pub fn caller_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.caller_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates whether the API call originated from a remote IP address (<code>remoteip</code>) or from a DNS domain (<code>domain</code>).</p>
    pub fn set_caller_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.caller_type = input;
        self
    }
    /// <p>Indicates whether the API call originated from a remote IP address (<code>remoteip</code>) or from a DNS domain (<code>domain</code>).</p>
    pub fn get_caller_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.caller_type
    }
    /// <p>Provided if <code>CallerType</code> is <code>remoteIp</code>. Provides information about the remote IP address that the API call originated from.</p>
    pub fn remote_ip_details(mut self, input: crate::types::ActionRemoteIpDetails) -> Self {
        self.remote_ip_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provided if <code>CallerType</code> is <code>remoteIp</code>. Provides information about the remote IP address that the API call originated from.</p>
    pub fn set_remote_ip_details(mut self, input: ::std::option::Option<crate::types::ActionRemoteIpDetails>) -> Self {
        self.remote_ip_details = input;
        self
    }
    /// <p>Provided if <code>CallerType</code> is <code>remoteIp</code>. Provides information about the remote IP address that the API call originated from.</p>
    pub fn get_remote_ip_details(&self) -> &::std::option::Option<crate::types::ActionRemoteIpDetails> {
        &self.remote_ip_details
    }
    /// <p>Provided if <code>CallerType</code> is <code>domain</code>. Provides information about the DNS domain that the API call originated from.</p>
    pub fn domain_details(mut self, input: crate::types::AwsApiCallActionDomainDetails) -> Self {
        self.domain_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provided if <code>CallerType</code> is <code>domain</code>. Provides information about the DNS domain that the API call originated from.</p>
    pub fn set_domain_details(mut self, input: ::std::option::Option<crate::types::AwsApiCallActionDomainDetails>) -> Self {
        self.domain_details = input;
        self
    }
    /// <p>Provided if <code>CallerType</code> is <code>domain</code>. Provides information about the DNS domain that the API call originated from.</p>
    pub fn get_domain_details(&self) -> &::std::option::Option<crate::types::AwsApiCallActionDomainDetails> {
        &self.domain_details
    }
    /// Adds a key-value pair to `affected_resources`.
    ///
    /// To override the contents of this collection use [`set_affected_resources`](Self::set_affected_resources).
    ///
    /// <p>Identifies the resources that were affected by the API call.</p>
    pub fn affected_resources(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.affected_resources.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.affected_resources = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Identifies the resources that were affected by the API call.</p>
    pub fn set_affected_resources(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.affected_resources = input;
        self
    }
    /// <p>Identifies the resources that were affected by the API call.</p>
    pub fn get_affected_resources(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.affected_resources
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the API call was first observed.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn first_seen(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.first_seen = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the API call was first observed.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn set_first_seen(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.first_seen = input;
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the API call was first observed.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn get_first_seen(&self) -> &::std::option::Option<::std::string::String> {
        &self.first_seen
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the API call was most recently observed.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn last_seen(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_seen = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the API call was most recently observed.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn set_last_seen(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_seen = input;
        self
    }
    /// <p>An ISO8601-formatted timestamp that indicates when the API call was most recently observed.</p>
    /// <p>A correctly formatted example is <code>2020-05-21T20:16:34.724Z</code>. The value cannot contain spaces, and date and time should be separated by <code>T</code>. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc3339#section-5.6">RFC 3339 section 5.6, Internet Date/Time Format</a>.</p>
    pub fn get_last_seen(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_seen
    }
    /// Consumes the builder and constructs a [`AwsApiCallAction`](crate::types::AwsApiCallAction).
    pub fn build(self) -> crate::types::AwsApiCallAction {
        crate::types::AwsApiCallAction {
            api: self.api,
            service_name: self.service_name,
            caller_type: self.caller_type,
            remote_ip_details: self.remote_ip_details,
            domain_details: self.domain_details,
            affected_resources: self.affected_resources,
            first_seen: self.first_seen,
            last_seen: self.last_seen,
        }
    }
}
