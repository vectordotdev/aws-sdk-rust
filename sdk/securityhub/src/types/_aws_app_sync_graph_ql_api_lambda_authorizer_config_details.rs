// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Specifies the authorization configuration for using an Lambda function with your AppSync GraphQL API endpoint. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails {
    /// <p> The number of seconds a response should be cached for. The default is 5 minutes (300 seconds). </p>
    pub authorizer_result_ttl_in_seconds: i32,
    /// <p> The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (.../v3), or an alias ARN. </p>
    pub authorizer_uri: ::std::option::Option<::std::string::String>,
    /// <p> A regular expression for validation of tokens before the Lambda function is called. </p>
    pub identity_validation_expression: ::std::option::Option<::std::string::String>,
}
impl AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails {
    /// <p> The number of seconds a response should be cached for. The default is 5 minutes (300 seconds). </p>
    pub fn authorizer_result_ttl_in_seconds(&self) -> i32 {
        self.authorizer_result_ttl_in_seconds
    }
    /// <p> The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (.../v3), or an alias ARN. </p>
    pub fn authorizer_uri(&self) -> ::std::option::Option<&str> {
        self.authorizer_uri.as_deref()
    }
    /// <p> A regular expression for validation of tokens before the Lambda function is called. </p>
    pub fn identity_validation_expression(&self) -> ::std::option::Option<&str> {
        self.identity_validation_expression.as_deref()
    }
}
impl AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails {
    /// Creates a new builder-style object to manufacture [`AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails`](crate::types::AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails).
    pub fn builder() -> crate::types::builders::AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetailsBuilder {
        crate::types::builders::AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetailsBuilder::default()
    }
}

/// A builder for [`AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails`](crate::types::AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetailsBuilder {
    pub(crate) authorizer_result_ttl_in_seconds: ::std::option::Option<i32>,
    pub(crate) authorizer_uri: ::std::option::Option<::std::string::String>,
    pub(crate) identity_validation_expression: ::std::option::Option<::std::string::String>,
}
impl AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetailsBuilder {
    /// <p> The number of seconds a response should be cached for. The default is 5 minutes (300 seconds). </p>
    pub fn authorizer_result_ttl_in_seconds(mut self, input: i32) -> Self {
        self.authorizer_result_ttl_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of seconds a response should be cached for. The default is 5 minutes (300 seconds). </p>
    pub fn set_authorizer_result_ttl_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.authorizer_result_ttl_in_seconds = input;
        self
    }
    /// <p> The number of seconds a response should be cached for. The default is 5 minutes (300 seconds). </p>
    pub fn get_authorizer_result_ttl_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.authorizer_result_ttl_in_seconds
    }
    /// <p> The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (.../v3), or an alias ARN. </p>
    pub fn authorizer_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorizer_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (.../v3), or an alias ARN. </p>
    pub fn set_authorizer_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorizer_uri = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (.../v3), or an alias ARN. </p>
    pub fn get_authorizer_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorizer_uri
    }
    /// <p> A regular expression for validation of tokens before the Lambda function is called. </p>
    pub fn identity_validation_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_validation_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A regular expression for validation of tokens before the Lambda function is called. </p>
    pub fn set_identity_validation_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_validation_expression = input;
        self
    }
    /// <p> A regular expression for validation of tokens before the Lambda function is called. </p>
    pub fn get_identity_validation_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_validation_expression
    }
    /// Consumes the builder and constructs a [`AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails`](crate::types::AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails).
    pub fn build(self) -> crate::types::AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails {
        crate::types::AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails {
            authorizer_result_ttl_in_seconds: self.authorizer_result_ttl_in_seconds.unwrap_or_default(),
            authorizer_uri: self.authorizer_uri,
            identity_validation_expression: self.identity_validation_expression,
        }
    }
}
