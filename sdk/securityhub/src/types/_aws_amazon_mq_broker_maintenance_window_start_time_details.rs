// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The scheduled time period (UTC) during which Amazon MQ begins to apply pending updates or patches to the broker. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails {
    /// <p> The day of the week on which the maintenance window falls. </p>
    pub day_of_week: ::std::option::Option<::std::string::String>,
    /// <p> The time, in 24-hour format, on which the maintenance window falls. </p>
    pub time_of_day: ::std::option::Option<::std::string::String>,
    /// <p> The time zone in either the Country/City format or the UTC offset format. UTC is the default format. </p>
    pub time_zone: ::std::option::Option<::std::string::String>,
}
impl AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails {
    /// <p> The day of the week on which the maintenance window falls. </p>
    pub fn day_of_week(&self) -> ::std::option::Option<&str> {
        self.day_of_week.as_deref()
    }
    /// <p> The time, in 24-hour format, on which the maintenance window falls. </p>
    pub fn time_of_day(&self) -> ::std::option::Option<&str> {
        self.time_of_day.as_deref()
    }
    /// <p> The time zone in either the Country/City format or the UTC offset format. UTC is the default format. </p>
    pub fn time_zone(&self) -> ::std::option::Option<&str> {
        self.time_zone.as_deref()
    }
}
impl AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails {
    /// Creates a new builder-style object to manufacture [`AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails`](crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails).
    pub fn builder() -> crate::types::builders::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetailsBuilder {
        crate::types::builders::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetailsBuilder::default()
    }
}

/// A builder for [`AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails`](crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsAmazonMqBrokerMaintenanceWindowStartTimeDetailsBuilder {
    pub(crate) day_of_week: ::std::option::Option<::std::string::String>,
    pub(crate) time_of_day: ::std::option::Option<::std::string::String>,
    pub(crate) time_zone: ::std::option::Option<::std::string::String>,
}
impl AwsAmazonMqBrokerMaintenanceWindowStartTimeDetailsBuilder {
    /// <p> The day of the week on which the maintenance window falls. </p>
    pub fn day_of_week(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.day_of_week = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The day of the week on which the maintenance window falls. </p>
    pub fn set_day_of_week(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.day_of_week = input;
        self
    }
    /// <p> The day of the week on which the maintenance window falls. </p>
    pub fn get_day_of_week(&self) -> &::std::option::Option<::std::string::String> {
        &self.day_of_week
    }
    /// <p> The time, in 24-hour format, on which the maintenance window falls. </p>
    pub fn time_of_day(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_of_day = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The time, in 24-hour format, on which the maintenance window falls. </p>
    pub fn set_time_of_day(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_of_day = input;
        self
    }
    /// <p> The time, in 24-hour format, on which the maintenance window falls. </p>
    pub fn get_time_of_day(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_of_day
    }
    /// <p> The time zone in either the Country/City format or the UTC offset format. UTC is the default format. </p>
    pub fn time_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The time zone in either the Country/City format or the UTC offset format. UTC is the default format. </p>
    pub fn set_time_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_zone = input;
        self
    }
    /// <p> The time zone in either the Country/City format or the UTC offset format. UTC is the default format. </p>
    pub fn get_time_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_zone
    }
    /// Consumes the builder and constructs a [`AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails`](crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails).
    pub fn build(self) -> crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails {
        crate::types::AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails {
            day_of_week: self.day_of_week,
            time_of_day: self.time_of_day,
            time_zone: self.time_zone,
        }
    }
}
