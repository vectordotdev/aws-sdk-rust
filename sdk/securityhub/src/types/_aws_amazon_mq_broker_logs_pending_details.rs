// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides information about logs to be activated for the specified broker. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsAmazonMqBrokerLogsPendingDetails {
    /// <p> Activates audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Doesn't apply to RabbitMQ brokers. </p>
    pub audit: bool,
    /// <p> Activates general logging. </p>
    pub general: bool,
}
impl AwsAmazonMqBrokerLogsPendingDetails {
    /// <p> Activates audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Doesn't apply to RabbitMQ brokers. </p>
    pub fn audit(&self) -> bool {
        self.audit
    }
    /// <p> Activates general logging. </p>
    pub fn general(&self) -> bool {
        self.general
    }
}
impl AwsAmazonMqBrokerLogsPendingDetails {
    /// Creates a new builder-style object to manufacture [`AwsAmazonMqBrokerLogsPendingDetails`](crate::types::AwsAmazonMqBrokerLogsPendingDetails).
    pub fn builder() -> crate::types::builders::AwsAmazonMqBrokerLogsPendingDetailsBuilder {
        crate::types::builders::AwsAmazonMqBrokerLogsPendingDetailsBuilder::default()
    }
}

/// A builder for [`AwsAmazonMqBrokerLogsPendingDetails`](crate::types::AwsAmazonMqBrokerLogsPendingDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsAmazonMqBrokerLogsPendingDetailsBuilder {
    pub(crate) audit: ::std::option::Option<bool>,
    pub(crate) general: ::std::option::Option<bool>,
}
impl AwsAmazonMqBrokerLogsPendingDetailsBuilder {
    /// <p> Activates audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Doesn't apply to RabbitMQ brokers. </p>
    pub fn audit(mut self, input: bool) -> Self {
        self.audit = ::std::option::Option::Some(input);
        self
    }
    /// <p> Activates audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Doesn't apply to RabbitMQ brokers. </p>
    pub fn set_audit(mut self, input: ::std::option::Option<bool>) -> Self {
        self.audit = input;
        self
    }
    /// <p> Activates audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Doesn't apply to RabbitMQ brokers. </p>
    pub fn get_audit(&self) -> &::std::option::Option<bool> {
        &self.audit
    }
    /// <p> Activates general logging. </p>
    pub fn general(mut self, input: bool) -> Self {
        self.general = ::std::option::Option::Some(input);
        self
    }
    /// <p> Activates general logging. </p>
    pub fn set_general(mut self, input: ::std::option::Option<bool>) -> Self {
        self.general = input;
        self
    }
    /// <p> Activates general logging. </p>
    pub fn get_general(&self) -> &::std::option::Option<bool> {
        &self.general
    }
    /// Consumes the builder and constructs a [`AwsAmazonMqBrokerLogsPendingDetails`](crate::types::AwsAmazonMqBrokerLogsPendingDetails).
    pub fn build(self) -> crate::types::AwsAmazonMqBrokerLogsPendingDetails {
        crate::types::AwsAmazonMqBrokerLogsPendingDetails {
            audit: self.audit.unwrap_or_default(),
            general: self.general.unwrap_or_default(),
        }
    }
}
