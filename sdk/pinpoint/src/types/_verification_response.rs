// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Verify OTP Message Response.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VerificationResponse {
    /// <p>Specifies whether the OTP is valid or not.</p>
    pub valid: ::std::option::Option<bool>,
}
impl VerificationResponse {
    /// <p>Specifies whether the OTP is valid or not.</p>
    pub fn valid(&self) -> ::std::option::Option<bool> {
        self.valid
    }
}
impl VerificationResponse {
    /// Creates a new builder-style object to manufacture [`VerificationResponse`](crate::types::VerificationResponse).
    pub fn builder() -> crate::types::builders::VerificationResponseBuilder {
        crate::types::builders::VerificationResponseBuilder::default()
    }
}

/// A builder for [`VerificationResponse`](crate::types::VerificationResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VerificationResponseBuilder {
    pub(crate) valid: ::std::option::Option<bool>,
}
impl VerificationResponseBuilder {
    /// <p>Specifies whether the OTP is valid or not.</p>
    pub fn valid(mut self, input: bool) -> Self {
        self.valid = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the OTP is valid or not.</p>
    pub fn set_valid(mut self, input: ::std::option::Option<bool>) -> Self {
        self.valid = input;
        self
    }
    /// <p>Specifies whether the OTP is valid or not.</p>
    pub fn get_valid(&self) -> &::std::option::Option<bool> {
        &self.valid
    }
    /// Consumes the builder and constructs a [`VerificationResponse`](crate::types::VerificationResponse).
    pub fn build(self) -> crate::types::VerificationResponse {
        crate::types::VerificationResponse { valid: self.valid }
    }
}
