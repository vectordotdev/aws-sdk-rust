// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_associate_created_artifact;

pub(crate) mod shape_associate_discovered_resource;

pub(crate) mod shape_create_progress_update_stream;

pub(crate) mod shape_delete_progress_update_stream;

pub(crate) mod shape_describe_application_state;

pub(crate) mod shape_describe_migration_task;

pub(crate) mod shape_disassociate_created_artifact;

pub(crate) mod shape_disassociate_discovered_resource;

pub(crate) mod shape_import_migration_task;

pub(crate) mod shape_list_application_states;

pub(crate) mod shape_list_created_artifacts;

pub(crate) mod shape_list_discovered_resources;

pub(crate) mod shape_list_migration_tasks;

pub(crate) mod shape_list_progress_update_streams;

pub(crate) mod shape_notify_application_state;

pub(crate) mod shape_notify_migration_task_state;

pub(crate) mod shape_put_resource_attributes;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_associate_created_artifact_input;

pub(crate) mod shape_associate_discovered_resource_input;

pub(crate) mod shape_create_progress_update_stream_input;

pub(crate) mod shape_delete_progress_update_stream_input;

pub(crate) mod shape_describe_application_state_input;

pub(crate) mod shape_describe_migration_task_input;

pub(crate) mod shape_disassociate_created_artifact_input;

pub(crate) mod shape_disassociate_discovered_resource_input;

pub(crate) mod shape_dry_run_operation;

pub(crate) mod shape_home_region_not_set_exception;

pub(crate) mod shape_import_migration_task_input;

pub(crate) mod shape_internal_server_error;

pub(crate) mod shape_invalid_input_exception;

pub(crate) mod shape_list_application_states_input;

pub(crate) mod shape_list_created_artifacts_input;

pub(crate) mod shape_list_discovered_resources_input;

pub(crate) mod shape_list_migration_tasks_input;

pub(crate) mod shape_list_progress_update_streams_input;

pub(crate) mod shape_notify_application_state_input;

pub(crate) mod shape_notify_migration_task_state_input;

pub(crate) mod shape_policy_error_exception;

pub(crate) mod shape_put_resource_attributes_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_unavailable_exception;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_unauthorized_operation;

pub(crate) mod shape_application_state_list;

pub(crate) mod shape_created_artifact;

pub(crate) mod shape_created_artifact_list;

pub(crate) mod shape_discovered_resource;

pub(crate) mod shape_discovered_resource_list;

pub(crate) mod shape_migration_task;

pub(crate) mod shape_migration_task_summary_list;

pub(crate) mod shape_progress_update_stream_summary_list;

pub(crate) mod shape_resource_attribute;

pub(crate) mod shape_task;

pub(crate) mod shape_application_state;

pub(crate) mod shape_latest_resource_attribute_list;

pub(crate) mod shape_migration_task_summary;

pub(crate) mod shape_progress_update_stream_summary;
