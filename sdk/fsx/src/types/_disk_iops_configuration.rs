// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SSD IOPS (input/output operations per second) configuration for an Amazon FSx for NetApp ONTAP or FSx for OpenZFS file system. By default, Amazon FSx automatically provisions 3 IOPS per GB of storage capacity. You can provision additional IOPS per GB of storage. The configuration consists of the total number of provisioned SSD IOPS and how it is was provisioned, or the mode (by the customer or by Amazon FSx).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DiskIopsConfiguration {
    /// <p>Specifies whether the file system is using the <code>AUTOMATIC</code> setting of SSD IOPS of 3 IOPS per GB of storage capacity, , or if it using a <code>USER_PROVISIONED</code> value.</p>
    pub mode: ::std::option::Option<crate::types::DiskIopsConfigurationMode>,
    /// <p>The total number of SSD IOPS provisioned for the file system.</p>
    pub iops: ::std::option::Option<i64>,
}
impl DiskIopsConfiguration {
    /// <p>Specifies whether the file system is using the <code>AUTOMATIC</code> setting of SSD IOPS of 3 IOPS per GB of storage capacity, , or if it using a <code>USER_PROVISIONED</code> value.</p>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::DiskIopsConfigurationMode> {
        self.mode.as_ref()
    }
    /// <p>The total number of SSD IOPS provisioned for the file system.</p>
    pub fn iops(&self) -> ::std::option::Option<i64> {
        self.iops
    }
}
impl DiskIopsConfiguration {
    /// Creates a new builder-style object to manufacture [`DiskIopsConfiguration`](crate::types::DiskIopsConfiguration).
    pub fn builder() -> crate::types::builders::DiskIopsConfigurationBuilder {
        crate::types::builders::DiskIopsConfigurationBuilder::default()
    }
}

/// A builder for [`DiskIopsConfiguration`](crate::types::DiskIopsConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DiskIopsConfigurationBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::DiskIopsConfigurationMode>,
    pub(crate) iops: ::std::option::Option<i64>,
}
impl DiskIopsConfigurationBuilder {
    /// <p>Specifies whether the file system is using the <code>AUTOMATIC</code> setting of SSD IOPS of 3 IOPS per GB of storage capacity, , or if it using a <code>USER_PROVISIONED</code> value.</p>
    pub fn mode(mut self, input: crate::types::DiskIopsConfigurationMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the file system is using the <code>AUTOMATIC</code> setting of SSD IOPS of 3 IOPS per GB of storage capacity, , or if it using a <code>USER_PROVISIONED</code> value.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::DiskIopsConfigurationMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Specifies whether the file system is using the <code>AUTOMATIC</code> setting of SSD IOPS of 3 IOPS per GB of storage capacity, , or if it using a <code>USER_PROVISIONED</code> value.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::DiskIopsConfigurationMode> {
        &self.mode
    }
    /// <p>The total number of SSD IOPS provisioned for the file system.</p>
    pub fn iops(mut self, input: i64) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of SSD IOPS provisioned for the file system.</p>
    pub fn set_iops(mut self, input: ::std::option::Option<i64>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The total number of SSD IOPS provisioned for the file system.</p>
    pub fn get_iops(&self) -> &::std::option::Option<i64> {
        &self.iops
    }
    /// Consumes the builder and constructs a [`DiskIopsConfiguration`](crate::types::DiskIopsConfiguration).
    pub fn build(self) -> crate::types::DiskIopsConfiguration {
        crate::types::DiskIopsConfiguration {
            mode: self.mode,
            iops: self.iops,
        }
    }
}
