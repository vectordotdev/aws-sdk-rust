// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_destinations_output_next_token(
    input: &crate::operation::list_destinations::ListDestinationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_sites_output_next_token(
    input: &crate::operation::list_sites::ListSitesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_worker_fleets_output_next_token(
    input: &crate::operation::list_worker_fleets::ListWorkerFleetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workers_output_next_token(
    input: &crate::operation::list_workers::ListWorkersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_destinations_output_destinations(
    input: crate::operation::list_destinations::ListDestinationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Destination>> {
    let input = match input.destinations {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_sites_output_sites(
    input: crate::operation::list_sites::ListSitesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Site>> {
    let input = match input.sites {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_worker_fleets_output_worker_fleets(
    input: crate::operation::list_worker_fleets::ListWorkerFleetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkerFleet>> {
    let input = match input.worker_fleets {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workers_output_workers(
    input: crate::operation::list_workers::ListWorkersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Worker>> {
    let input = match input.workers {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
