// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a stack.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Stack {
    /// <p>The stack ID.</p>
    pub stack_id: ::std::option::Option<::std::string::String>,
    /// <p>The stack name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The stack's ARN.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The stack AWS region, such as "ap-northeast-2". For more information about AWS regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The VPC ID; applicable only if the stack is running in a VPC.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The stack's attributes.</p>
    pub attributes: ::std::option::Option<::std::collections::HashMap<crate::types::StackAttributesKeys, ::std::string::String>>,
    /// <p>The stack AWS Identity and Access Management (IAM) role.</p>
    pub service_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub default_instance_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The stack's default operating system.</p>
    pub default_os: ::std::option::Option<::std::string::String>,
    /// <p>The stack host name theme, with spaces replaced by underscores.</p>
    pub hostname_theme: ::std::option::Option<::std::string::String>,
    /// <p>The stack's default Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub default_availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The default subnet ID; applicable only if the stack is running in a VPC.</p>
    pub default_subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>A JSON object that contains user-defined attributes to be added to the stack configuration and deployment attributes. You can use custom JSON to override the corresponding default stack configuration attribute values or to pass data to recipes. The string should be in the following format:</p>
    /// <p> <code>"{\"key1\": \"value1\", \"key2\": \"value2\",...}"</code> </p>
    /// <p>For more information on custom JSON, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-json.html">Use Custom JSON to Modify the Stack Configuration Attributes</a>.</p>
    pub custom_json: ::std::option::Option<::std::string::String>,
    /// <p>The configuration manager.</p>
    pub configuration_manager: ::std::option::Option<crate::types::StackConfigurationManager>,
    /// <p>A <code>ChefConfiguration</code> object that specifies whether to enable Berkshelf and the Berkshelf version. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New Stack</a>.</p>
    pub chef_configuration: ::std::option::Option<crate::types::ChefConfiguration>,
    /// <p>Whether the stack uses custom cookbooks.</p>
    pub use_custom_cookbooks: ::std::option::Option<bool>,
    /// <p>Whether the stack automatically associates the AWS OpsWorks Stacks built-in security groups with the stack's layers.</p>
    pub use_opsworks_security_groups: ::std::option::Option<bool>,
    /// <p>Contains the information required to retrieve an app or cookbook from a repository. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Adding Apps</a> or <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook.html">Cookbooks and Recipes</a>.</p>
    pub custom_cookbooks_source: ::std::option::Option<crate::types::Source>,
    /// <p>A default Amazon EC2 key pair for the stack's instances. You can override this value when you create or update an instance.</p>
    pub default_ssh_key_name: ::std::option::Option<::std::string::String>,
    /// <p>The date when the stack was created.</p>
    pub created_at: ::std::option::Option<::std::string::String>,
    /// <p>The default root device type. This value is used by default for all instances in the stack, but you can override it when you create an instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
    pub default_root_device_type: ::std::option::Option<crate::types::RootDeviceType>,
    /// <p>The agent version. This parameter is set to <code>LATEST</code> for auto-update. or a version number for a fixed agent version.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
}
impl Stack {
    /// <p>The stack ID.</p>
    pub fn stack_id(&self) -> ::std::option::Option<&str> {
        self.stack_id.as_deref()
    }
    /// <p>The stack name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The stack's ARN.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The stack AWS region, such as "ap-northeast-2". For more information about AWS regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The VPC ID; applicable only if the stack is running in a VPC.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The stack's attributes.</p>
    pub fn attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::StackAttributesKeys, ::std::string::String>> {
        self.attributes.as_ref()
    }
    /// <p>The stack AWS Identity and Access Management (IAM) role.</p>
    pub fn service_role_arn(&self) -> ::std::option::Option<&str> {
        self.service_role_arn.as_deref()
    }
    /// <p>The ARN of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn default_instance_profile_arn(&self) -> ::std::option::Option<&str> {
        self.default_instance_profile_arn.as_deref()
    }
    /// <p>The stack's default operating system.</p>
    pub fn default_os(&self) -> ::std::option::Option<&str> {
        self.default_os.as_deref()
    }
    /// <p>The stack host name theme, with spaces replaced by underscores.</p>
    pub fn hostname_theme(&self) -> ::std::option::Option<&str> {
        self.hostname_theme.as_deref()
    }
    /// <p>The stack's default Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn default_availability_zone(&self) -> ::std::option::Option<&str> {
        self.default_availability_zone.as_deref()
    }
    /// <p>The default subnet ID; applicable only if the stack is running in a VPC.</p>
    pub fn default_subnet_id(&self) -> ::std::option::Option<&str> {
        self.default_subnet_id.as_deref()
    }
    /// <p>A JSON object that contains user-defined attributes to be added to the stack configuration and deployment attributes. You can use custom JSON to override the corresponding default stack configuration attribute values or to pass data to recipes. The string should be in the following format:</p>
    /// <p> <code>"{\"key1\": \"value1\", \"key2\": \"value2\",...}"</code> </p>
    /// <p>For more information on custom JSON, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-json.html">Use Custom JSON to Modify the Stack Configuration Attributes</a>.</p>
    pub fn custom_json(&self) -> ::std::option::Option<&str> {
        self.custom_json.as_deref()
    }
    /// <p>The configuration manager.</p>
    pub fn configuration_manager(&self) -> ::std::option::Option<&crate::types::StackConfigurationManager> {
        self.configuration_manager.as_ref()
    }
    /// <p>A <code>ChefConfiguration</code> object that specifies whether to enable Berkshelf and the Berkshelf version. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New Stack</a>.</p>
    pub fn chef_configuration(&self) -> ::std::option::Option<&crate::types::ChefConfiguration> {
        self.chef_configuration.as_ref()
    }
    /// <p>Whether the stack uses custom cookbooks.</p>
    pub fn use_custom_cookbooks(&self) -> ::std::option::Option<bool> {
        self.use_custom_cookbooks
    }
    /// <p>Whether the stack automatically associates the AWS OpsWorks Stacks built-in security groups with the stack's layers.</p>
    pub fn use_opsworks_security_groups(&self) -> ::std::option::Option<bool> {
        self.use_opsworks_security_groups
    }
    /// <p>Contains the information required to retrieve an app or cookbook from a repository. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Adding Apps</a> or <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook.html">Cookbooks and Recipes</a>.</p>
    pub fn custom_cookbooks_source(&self) -> ::std::option::Option<&crate::types::Source> {
        self.custom_cookbooks_source.as_ref()
    }
    /// <p>A default Amazon EC2 key pair for the stack's instances. You can override this value when you create or update an instance.</p>
    pub fn default_ssh_key_name(&self) -> ::std::option::Option<&str> {
        self.default_ssh_key_name.as_deref()
    }
    /// <p>The date when the stack was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&str> {
        self.created_at.as_deref()
    }
    /// <p>The default root device type. This value is used by default for all instances in the stack, but you can override it when you create an instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
    pub fn default_root_device_type(&self) -> ::std::option::Option<&crate::types::RootDeviceType> {
        self.default_root_device_type.as_ref()
    }
    /// <p>The agent version. This parameter is set to <code>LATEST</code> for auto-update. or a version number for a fixed agent version.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
}
impl Stack {
    /// Creates a new builder-style object to manufacture [`Stack`](crate::types::Stack).
    pub fn builder() -> crate::types::builders::StackBuilder {
        crate::types::builders::StackBuilder::default()
    }
}

/// A builder for [`Stack`](crate::types::Stack).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StackBuilder {
    pub(crate) stack_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<::std::collections::HashMap<crate::types::StackAttributesKeys, ::std::string::String>>,
    pub(crate) service_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) default_instance_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) default_os: ::std::option::Option<::std::string::String>,
    pub(crate) hostname_theme: ::std::option::Option<::std::string::String>,
    pub(crate) default_availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) default_subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) custom_json: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_manager: ::std::option::Option<crate::types::StackConfigurationManager>,
    pub(crate) chef_configuration: ::std::option::Option<crate::types::ChefConfiguration>,
    pub(crate) use_custom_cookbooks: ::std::option::Option<bool>,
    pub(crate) use_opsworks_security_groups: ::std::option::Option<bool>,
    pub(crate) custom_cookbooks_source: ::std::option::Option<crate::types::Source>,
    pub(crate) default_ssh_key_name: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::std::string::String>,
    pub(crate) default_root_device_type: ::std::option::Option<crate::types::RootDeviceType>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
}
impl StackBuilder {
    /// <p>The stack ID.</p>
    pub fn stack_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack ID.</p>
    pub fn set_stack_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_id = input;
        self
    }
    /// <p>The stack ID.</p>
    pub fn get_stack_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_id
    }
    /// <p>The stack name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The stack name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The stack's ARN.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack's ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The stack's ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The stack AWS region, such as "ap-northeast-2". For more information about AWS regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack AWS region, such as "ap-northeast-2". For more information about AWS regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The stack AWS region, such as "ap-northeast-2". For more information about AWS regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The VPC ID; applicable only if the stack is running in a VPC.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC ID; applicable only if the stack is running in a VPC.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The VPC ID; applicable only if the stack is running in a VPC.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The stack's attributes.</p>
    pub fn attributes(mut self, k: crate::types::StackAttributesKeys, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The stack's attributes.</p>
    pub fn set_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::StackAttributesKeys, ::std::string::String>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The stack's attributes.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::StackAttributesKeys, ::std::string::String>> {
        &self.attributes
    }
    /// <p>The stack AWS Identity and Access Management (IAM) role.</p>
    pub fn service_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack AWS Identity and Access Management (IAM) role.</p>
    pub fn set_service_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_role_arn = input;
        self
    }
    /// <p>The stack AWS Identity and Access Management (IAM) role.</p>
    pub fn get_service_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_role_arn
    }
    /// <p>The ARN of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn default_instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_instance_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn set_default_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_instance_profile_arn = input;
        self
    }
    /// <p>The ARN of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">Using Identifiers</a>.</p>
    pub fn get_default_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_instance_profile_arn
    }
    /// <p>The stack's default operating system.</p>
    pub fn default_os(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_os = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack's default operating system.</p>
    pub fn set_default_os(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_os = input;
        self
    }
    /// <p>The stack's default operating system.</p>
    pub fn get_default_os(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_os
    }
    /// <p>The stack host name theme, with spaces replaced by underscores.</p>
    pub fn hostname_theme(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hostname_theme = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack host name theme, with spaces replaced by underscores.</p>
    pub fn set_hostname_theme(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hostname_theme = input;
        self
    }
    /// <p>The stack host name theme, with spaces replaced by underscores.</p>
    pub fn get_hostname_theme(&self) -> &::std::option::Option<::std::string::String> {
        &self.hostname_theme
    }
    /// <p>The stack's default Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn default_availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stack's default Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn set_default_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_availability_zone = input;
        self
    }
    /// <p>The stack's default Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p>
    pub fn get_default_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_availability_zone
    }
    /// <p>The default subnet ID; applicable only if the stack is running in a VPC.</p>
    pub fn default_subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default subnet ID; applicable only if the stack is running in a VPC.</p>
    pub fn set_default_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_subnet_id = input;
        self
    }
    /// <p>The default subnet ID; applicable only if the stack is running in a VPC.</p>
    pub fn get_default_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_subnet_id
    }
    /// <p>A JSON object that contains user-defined attributes to be added to the stack configuration and deployment attributes. You can use custom JSON to override the corresponding default stack configuration attribute values or to pass data to recipes. The string should be in the following format:</p>
    /// <p> <code>"{\"key1\": \"value1\", \"key2\": \"value2\",...}"</code> </p>
    /// <p>For more information on custom JSON, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-json.html">Use Custom JSON to Modify the Stack Configuration Attributes</a>.</p>
    pub fn custom_json(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_json = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A JSON object that contains user-defined attributes to be added to the stack configuration and deployment attributes. You can use custom JSON to override the corresponding default stack configuration attribute values or to pass data to recipes. The string should be in the following format:</p>
    /// <p> <code>"{\"key1\": \"value1\", \"key2\": \"value2\",...}"</code> </p>
    /// <p>For more information on custom JSON, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-json.html">Use Custom JSON to Modify the Stack Configuration Attributes</a>.</p>
    pub fn set_custom_json(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_json = input;
        self
    }
    /// <p>A JSON object that contains user-defined attributes to be added to the stack configuration and deployment attributes. You can use custom JSON to override the corresponding default stack configuration attribute values or to pass data to recipes. The string should be in the following format:</p>
    /// <p> <code>"{\"key1\": \"value1\", \"key2\": \"value2\",...}"</code> </p>
    /// <p>For more information on custom JSON, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-json.html">Use Custom JSON to Modify the Stack Configuration Attributes</a>.</p>
    pub fn get_custom_json(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_json
    }
    /// <p>The configuration manager.</p>
    pub fn configuration_manager(mut self, input: crate::types::StackConfigurationManager) -> Self {
        self.configuration_manager = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration manager.</p>
    pub fn set_configuration_manager(mut self, input: ::std::option::Option<crate::types::StackConfigurationManager>) -> Self {
        self.configuration_manager = input;
        self
    }
    /// <p>The configuration manager.</p>
    pub fn get_configuration_manager(&self) -> &::std::option::Option<crate::types::StackConfigurationManager> {
        &self.configuration_manager
    }
    /// <p>A <code>ChefConfiguration</code> object that specifies whether to enable Berkshelf and the Berkshelf version. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New Stack</a>.</p>
    pub fn chef_configuration(mut self, input: crate::types::ChefConfiguration) -> Self {
        self.chef_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>ChefConfiguration</code> object that specifies whether to enable Berkshelf and the Berkshelf version. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New Stack</a>.</p>
    pub fn set_chef_configuration(mut self, input: ::std::option::Option<crate::types::ChefConfiguration>) -> Self {
        self.chef_configuration = input;
        self
    }
    /// <p>A <code>ChefConfiguration</code> object that specifies whether to enable Berkshelf and the Berkshelf version. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-creating.html">Create a New Stack</a>.</p>
    pub fn get_chef_configuration(&self) -> &::std::option::Option<crate::types::ChefConfiguration> {
        &self.chef_configuration
    }
    /// <p>Whether the stack uses custom cookbooks.</p>
    pub fn use_custom_cookbooks(mut self, input: bool) -> Self {
        self.use_custom_cookbooks = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the stack uses custom cookbooks.</p>
    pub fn set_use_custom_cookbooks(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_custom_cookbooks = input;
        self
    }
    /// <p>Whether the stack uses custom cookbooks.</p>
    pub fn get_use_custom_cookbooks(&self) -> &::std::option::Option<bool> {
        &self.use_custom_cookbooks
    }
    /// <p>Whether the stack automatically associates the AWS OpsWorks Stacks built-in security groups with the stack's layers.</p>
    pub fn use_opsworks_security_groups(mut self, input: bool) -> Self {
        self.use_opsworks_security_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the stack automatically associates the AWS OpsWorks Stacks built-in security groups with the stack's layers.</p>
    pub fn set_use_opsworks_security_groups(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_opsworks_security_groups = input;
        self
    }
    /// <p>Whether the stack automatically associates the AWS OpsWorks Stacks built-in security groups with the stack's layers.</p>
    pub fn get_use_opsworks_security_groups(&self) -> &::std::option::Option<bool> {
        &self.use_opsworks_security_groups
    }
    /// <p>Contains the information required to retrieve an app or cookbook from a repository. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Adding Apps</a> or <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook.html">Cookbooks and Recipes</a>.</p>
    pub fn custom_cookbooks_source(mut self, input: crate::types::Source) -> Self {
        self.custom_cookbooks_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the information required to retrieve an app or cookbook from a repository. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Adding Apps</a> or <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook.html">Cookbooks and Recipes</a>.</p>
    pub fn set_custom_cookbooks_source(mut self, input: ::std::option::Option<crate::types::Source>) -> Self {
        self.custom_cookbooks_source = input;
        self
    }
    /// <p>Contains the information required to retrieve an app or cookbook from a repository. For more information, see <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingapps-creating.html">Adding Apps</a> or <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook.html">Cookbooks and Recipes</a>.</p>
    pub fn get_custom_cookbooks_source(&self) -> &::std::option::Option<crate::types::Source> {
        &self.custom_cookbooks_source
    }
    /// <p>A default Amazon EC2 key pair for the stack's instances. You can override this value when you create or update an instance.</p>
    pub fn default_ssh_key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_ssh_key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A default Amazon EC2 key pair for the stack's instances. You can override this value when you create or update an instance.</p>
    pub fn set_default_ssh_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_ssh_key_name = input;
        self
    }
    /// <p>A default Amazon EC2 key pair for the stack's instances. You can override this value when you create or update an instance.</p>
    pub fn get_default_ssh_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_ssh_key_name
    }
    /// <p>The date when the stack was created.</p>
    pub fn created_at(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_at = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date when the stack was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date when the stack was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_at
    }
    /// <p>The default root device type. This value is used by default for all instances in the stack, but you can override it when you create an instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
    pub fn default_root_device_type(mut self, input: crate::types::RootDeviceType) -> Self {
        self.default_root_device_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default root device type. This value is used by default for all instances in the stack, but you can override it when you create an instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
    pub fn set_default_root_device_type(mut self, input: ::std::option::Option<crate::types::RootDeviceType>) -> Self {
        self.default_root_device_type = input;
        self
    }
    /// <p>The default root device type. This value is used by default for all instances in the stack, but you can override it when you create an instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ComponentsAMIs.html#storage-for-the-root-device">Storage for the Root Device</a>.</p>
    pub fn get_default_root_device_type(&self) -> &::std::option::Option<crate::types::RootDeviceType> {
        &self.default_root_device_type
    }
    /// <p>The agent version. This parameter is set to <code>LATEST</code> for auto-update. or a version number for a fixed agent version.</p>
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The agent version. This parameter is set to <code>LATEST</code> for auto-update. or a version number for a fixed agent version.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The agent version. This parameter is set to <code>LATEST</code> for auto-update. or a version number for a fixed agent version.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// Consumes the builder and constructs a [`Stack`](crate::types::Stack).
    pub fn build(self) -> crate::types::Stack {
        crate::types::Stack {
            stack_id: self.stack_id,
            name: self.name,
            arn: self.arn,
            region: self.region,
            vpc_id: self.vpc_id,
            attributes: self.attributes,
            service_role_arn: self.service_role_arn,
            default_instance_profile_arn: self.default_instance_profile_arn,
            default_os: self.default_os,
            hostname_theme: self.hostname_theme,
            default_availability_zone: self.default_availability_zone,
            default_subnet_id: self.default_subnet_id,
            custom_json: self.custom_json,
            configuration_manager: self.configuration_manager,
            chef_configuration: self.chef_configuration,
            use_custom_cookbooks: self.use_custom_cookbooks,
            use_opsworks_security_groups: self.use_opsworks_security_groups,
            custom_cookbooks_source: self.custom_cookbooks_source,
            default_ssh_key_name: self.default_ssh_key_name,
            created_at: self.created_at,
            default_root_device_type: self.default_root_device_type,
            agent_version: self.agent_version,
        }
    }
}
