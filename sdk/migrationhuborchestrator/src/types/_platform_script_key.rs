// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The script location for a particular operating system.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PlatformScriptKey {
    /// <p>The script location for Linux.</p>
    pub linux: ::std::option::Option<::std::string::String>,
    /// <p>The script location for Windows.</p>
    pub windows: ::std::option::Option<::std::string::String>,
}
impl PlatformScriptKey {
    /// <p>The script location for Linux.</p>
    pub fn linux(&self) -> ::std::option::Option<&str> {
        self.linux.as_deref()
    }
    /// <p>The script location for Windows.</p>
    pub fn windows(&self) -> ::std::option::Option<&str> {
        self.windows.as_deref()
    }
}
impl PlatformScriptKey {
    /// Creates a new builder-style object to manufacture [`PlatformScriptKey`](crate::types::PlatformScriptKey).
    pub fn builder() -> crate::types::builders::PlatformScriptKeyBuilder {
        crate::types::builders::PlatformScriptKeyBuilder::default()
    }
}

/// A builder for [`PlatformScriptKey`](crate::types::PlatformScriptKey).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PlatformScriptKeyBuilder {
    pub(crate) linux: ::std::option::Option<::std::string::String>,
    pub(crate) windows: ::std::option::Option<::std::string::String>,
}
impl PlatformScriptKeyBuilder {
    /// <p>The script location for Linux.</p>
    pub fn linux(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.linux = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The script location for Linux.</p>
    pub fn set_linux(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.linux = input;
        self
    }
    /// <p>The script location for Linux.</p>
    pub fn get_linux(&self) -> &::std::option::Option<::std::string::String> {
        &self.linux
    }
    /// <p>The script location for Windows.</p>
    pub fn windows(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.windows = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The script location for Windows.</p>
    pub fn set_windows(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.windows = input;
        self
    }
    /// <p>The script location for Windows.</p>
    pub fn get_windows(&self) -> &::std::option::Option<::std::string::String> {
        &self.windows
    }
    /// Consumes the builder and constructs a [`PlatformScriptKey`](crate::types::PlatformScriptKey).
    pub fn build(self) -> crate::types::PlatformScriptKey {
        crate::types::PlatformScriptKey {
            linux: self.linux,
            windows: self.windows,
        }
    }
}
