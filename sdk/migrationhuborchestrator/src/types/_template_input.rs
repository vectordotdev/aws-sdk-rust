// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input parameters of a template.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TemplateInput {
    /// <p>The name of the template.</p>
    pub input_name: ::std::option::Option<::std::string::String>,
    /// <p>The data type of the template input.</p>
    pub data_type: ::std::option::Option<crate::types::DataType>,
    /// <p>Determine if an input is required from the template.</p>
    pub required: ::std::option::Option<bool>,
}
impl TemplateInput {
    /// <p>The name of the template.</p>
    pub fn input_name(&self) -> ::std::option::Option<&str> {
        self.input_name.as_deref()
    }
    /// <p>The data type of the template input.</p>
    pub fn data_type(&self) -> ::std::option::Option<&crate::types::DataType> {
        self.data_type.as_ref()
    }
    /// <p>Determine if an input is required from the template.</p>
    pub fn required(&self) -> ::std::option::Option<bool> {
        self.required
    }
}
impl TemplateInput {
    /// Creates a new builder-style object to manufacture [`TemplateInput`](crate::types::TemplateInput).
    pub fn builder() -> crate::types::builders::TemplateInputBuilder {
        crate::types::builders::TemplateInputBuilder::default()
    }
}

/// A builder for [`TemplateInput`](crate::types::TemplateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TemplateInputBuilder {
    pub(crate) input_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_type: ::std::option::Option<crate::types::DataType>,
    pub(crate) required: ::std::option::Option<bool>,
}
impl TemplateInputBuilder {
    /// <p>The name of the template.</p>
    pub fn input_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the template.</p>
    pub fn set_input_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_name = input;
        self
    }
    /// <p>The name of the template.</p>
    pub fn get_input_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_name
    }
    /// <p>The data type of the template input.</p>
    pub fn data_type(mut self, input: crate::types::DataType) -> Self {
        self.data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the template input.</p>
    pub fn set_data_type(mut self, input: ::std::option::Option<crate::types::DataType>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>The data type of the template input.</p>
    pub fn get_data_type(&self) -> &::std::option::Option<crate::types::DataType> {
        &self.data_type
    }
    /// <p>Determine if an input is required from the template.</p>
    pub fn required(mut self, input: bool) -> Self {
        self.required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determine if an input is required from the template.</p>
    pub fn set_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// <p>Determine if an input is required from the template.</p>
    pub fn get_required(&self) -> &::std::option::Option<bool> {
        &self.required
    }
    /// Consumes the builder and constructs a [`TemplateInput`](crate::types::TemplateInput).
    pub fn build(self) -> crate::types::TemplateInput {
        crate::types::TemplateInput {
            input_name: self.input_name,
            data_type: self.data_type,
            required: self.required,
        }
    }
}
