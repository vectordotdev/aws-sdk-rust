// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a robot deployment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RobotDeployment {
    /// <p>The robot deployment Amazon Resource Name (ARN).</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The time, in milliseconds since the epoch, when the deployment was started.</p>
    pub deployment_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time, in milliseconds since the epoch, when the deployment finished.</p>
    pub deployment_finish_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the robot deployment.</p>
    pub status: ::std::option::Option<crate::types::RobotStatus>,
    /// <p>Information about how the deployment is progressing.</p>
    pub progress_detail: ::std::option::Option<crate::types::ProgressDetail>,
    /// <p>A short description of the reason why the robot deployment failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The robot deployment failure code.</p>
    pub failure_code: ::std::option::Option<crate::types::DeploymentJobErrorCode>,
}
impl RobotDeployment {
    /// <p>The robot deployment Amazon Resource Name (ARN).</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time, in milliseconds since the epoch, when the deployment was started.</p>
    pub fn deployment_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.deployment_start_time.as_ref()
    }
    /// <p>The time, in milliseconds since the epoch, when the deployment finished.</p>
    pub fn deployment_finish_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.deployment_finish_time.as_ref()
    }
    /// <p>The status of the robot deployment.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RobotStatus> {
        self.status.as_ref()
    }
    /// <p>Information about how the deployment is progressing.</p>
    pub fn progress_detail(&self) -> ::std::option::Option<&crate::types::ProgressDetail> {
        self.progress_detail.as_ref()
    }
    /// <p>A short description of the reason why the robot deployment failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The robot deployment failure code.</p>
    pub fn failure_code(&self) -> ::std::option::Option<&crate::types::DeploymentJobErrorCode> {
        self.failure_code.as_ref()
    }
}
impl RobotDeployment {
    /// Creates a new builder-style object to manufacture [`RobotDeployment`](crate::types::RobotDeployment).
    pub fn builder() -> crate::types::builders::RobotDeploymentBuilder {
        crate::types::builders::RobotDeploymentBuilder::default()
    }
}

/// A builder for [`RobotDeployment`](crate::types::RobotDeployment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RobotDeploymentBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) deployment_finish_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::RobotStatus>,
    pub(crate) progress_detail: ::std::option::Option<crate::types::ProgressDetail>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) failure_code: ::std::option::Option<crate::types::DeploymentJobErrorCode>,
}
impl RobotDeploymentBuilder {
    /// <p>The robot deployment Amazon Resource Name (ARN).</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The robot deployment Amazon Resource Name (ARN).</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The robot deployment Amazon Resource Name (ARN).</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The time, in milliseconds since the epoch, when the deployment was started.</p>
    pub fn deployment_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.deployment_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the deployment was started.</p>
    pub fn set_deployment_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.deployment_start_time = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the deployment was started.</p>
    pub fn get_deployment_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.deployment_start_time
    }
    /// <p>The time, in milliseconds since the epoch, when the deployment finished.</p>
    pub fn deployment_finish_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.deployment_finish_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the deployment finished.</p>
    pub fn set_deployment_finish_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.deployment_finish_time = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the deployment finished.</p>
    pub fn get_deployment_finish_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.deployment_finish_time
    }
    /// <p>The status of the robot deployment.</p>
    pub fn status(mut self, input: crate::types::RobotStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the robot deployment.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RobotStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the robot deployment.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RobotStatus> {
        &self.status
    }
    /// <p>Information about how the deployment is progressing.</p>
    pub fn progress_detail(mut self, input: crate::types::ProgressDetail) -> Self {
        self.progress_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about how the deployment is progressing.</p>
    pub fn set_progress_detail(mut self, input: ::std::option::Option<crate::types::ProgressDetail>) -> Self {
        self.progress_detail = input;
        self
    }
    /// <p>Information about how the deployment is progressing.</p>
    pub fn get_progress_detail(&self) -> &::std::option::Option<crate::types::ProgressDetail> {
        &self.progress_detail
    }
    /// <p>A short description of the reason why the robot deployment failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short description of the reason why the robot deployment failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>A short description of the reason why the robot deployment failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The robot deployment failure code.</p>
    pub fn failure_code(mut self, input: crate::types::DeploymentJobErrorCode) -> Self {
        self.failure_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The robot deployment failure code.</p>
    pub fn set_failure_code(mut self, input: ::std::option::Option<crate::types::DeploymentJobErrorCode>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The robot deployment failure code.</p>
    pub fn get_failure_code(&self) -> &::std::option::Option<crate::types::DeploymentJobErrorCode> {
        &self.failure_code
    }
    /// Consumes the builder and constructs a [`RobotDeployment`](crate::types::RobotDeployment).
    pub fn build(self) -> crate::types::RobotDeployment {
        crate::types::RobotDeployment {
            arn: self.arn,
            deployment_start_time: self.deployment_start_time,
            deployment_finish_time: self.deployment_finish_time,
            status: self.status,
            progress_detail: self.progress_detail,
            failure_reason: self.failure_reason,
            failure_code: self.failure_code,
        }
    }
}
