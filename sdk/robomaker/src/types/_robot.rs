// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a robot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Robot {
    /// <p>The Amazon Resource Name (ARN) of the robot.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the robot.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fleet_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the robot.</p>
    pub status: ::std::option::Option<crate::types::RobotStatus>,
    /// <p>The Greengrass group associated with the robot.</p>
    pub green_grass_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The time, in milliseconds since the epoch, when the robot was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The architecture of the robot.</p>
    pub architecture: ::std::option::Option<crate::types::Architecture>,
    /// <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
    pub last_deployment_job: ::std::option::Option<::std::string::String>,
    /// <p>The time of the last deployment.</p>
    pub last_deployment_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Robot {
    /// <p>The Amazon Resource Name (ARN) of the robot.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the robot.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn fleet_arn(&self) -> ::std::option::Option<&str> {
        self.fleet_arn.as_deref()
    }
    /// <p>The status of the robot.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RobotStatus> {
        self.status.as_ref()
    }
    /// <p>The Greengrass group associated with the robot.</p>
    pub fn green_grass_group_id(&self) -> ::std::option::Option<&str> {
        self.green_grass_group_id.as_deref()
    }
    /// <p>The time, in milliseconds since the epoch, when the robot was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The architecture of the robot.</p>
    pub fn architecture(&self) -> ::std::option::Option<&crate::types::Architecture> {
        self.architecture.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
    pub fn last_deployment_job(&self) -> ::std::option::Option<&str> {
        self.last_deployment_job.as_deref()
    }
    /// <p>The time of the last deployment.</p>
    pub fn last_deployment_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_deployment_time.as_ref()
    }
}
impl Robot {
    /// Creates a new builder-style object to manufacture [`Robot`](crate::types::Robot).
    pub fn builder() -> crate::types::builders::RobotBuilder {
        crate::types::builders::RobotBuilder::default()
    }
}

/// A builder for [`Robot`](crate::types::Robot).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RobotBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) fleet_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RobotStatus>,
    pub(crate) green_grass_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) architecture: ::std::option::Option<crate::types::Architecture>,
    pub(crate) last_deployment_job: ::std::option::Option<::std::string::String>,
    pub(crate) last_deployment_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl RobotBuilder {
    /// <p>The Amazon Resource Name (ARN) of the robot.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the robot.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the robot.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the robot.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the robot.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the robot.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn fleet_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn set_fleet_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn get_fleet_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_arn
    }
    /// <p>The status of the robot.</p>
    pub fn status(mut self, input: crate::types::RobotStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the robot.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RobotStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the robot.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RobotStatus> {
        &self.status
    }
    /// <p>The Greengrass group associated with the robot.</p>
    pub fn green_grass_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.green_grass_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Greengrass group associated with the robot.</p>
    pub fn set_green_grass_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.green_grass_group_id = input;
        self
    }
    /// <p>The Greengrass group associated with the robot.</p>
    pub fn get_green_grass_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.green_grass_group_id
    }
    /// <p>The time, in milliseconds since the epoch, when the robot was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the robot was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the robot was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The architecture of the robot.</p>
    pub fn architecture(mut self, input: crate::types::Architecture) -> Self {
        self.architecture = ::std::option::Option::Some(input);
        self
    }
    /// <p>The architecture of the robot.</p>
    pub fn set_architecture(mut self, input: ::std::option::Option<crate::types::Architecture>) -> Self {
        self.architecture = input;
        self
    }
    /// <p>The architecture of the robot.</p>
    pub fn get_architecture(&self) -> &::std::option::Option<crate::types::Architecture> {
        &self.architecture
    }
    /// <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
    pub fn last_deployment_job(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_deployment_job = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
    pub fn set_last_deployment_job(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_deployment_job = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
    pub fn get_last_deployment_job(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_deployment_job
    }
    /// <p>The time of the last deployment.</p>
    pub fn last_deployment_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_deployment_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time of the last deployment.</p>
    pub fn set_last_deployment_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_deployment_time = input;
        self
    }
    /// <p>The time of the last deployment.</p>
    pub fn get_last_deployment_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_deployment_time
    }
    /// Consumes the builder and constructs a [`Robot`](crate::types::Robot).
    pub fn build(self) -> crate::types::Robot {
        crate::types::Robot {
            arn: self.arn,
            name: self.name,
            fleet_arn: self.fleet_arn,
            status: self.status,
            green_grass_group_id: self.green_grass_group_id,
            created_at: self.created_at,
            architecture: self.architecture,
            last_deployment_job: self.last_deployment_job,
            last_deployment_time: self.last_deployment_time,
        }
    }
}
