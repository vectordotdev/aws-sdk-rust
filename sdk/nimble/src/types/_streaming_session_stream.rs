// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A stream is an active connection to a streaming session, enabling a studio user to control the streaming session using a compatible client. Streaming session streams are compatible with the NICE DCV web client, included in the Nimble Studio portal, or the NICE DCV desktop client.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StreamingSessionStream {
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user ID of the user that created the streaming session stream.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The ISO timestamp in seconds for when the resource expires.</p>
    pub expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>
    pub owned_by: ::std::option::Option<::std::string::String>,
    /// <p>The current state.</p>
    pub state: ::std::option::Option<crate::types::StreamingSessionStreamState>,
    /// <p>The streaming session stream status code.</p>
    pub status_code: ::std::option::Option<crate::types::StreamingSessionStreamStatusCode>,
    /// <p>The stream ID.</p>
    pub stream_id: ::std::option::Option<::std::string::String>,
    /// <p>The URL to connect to this stream using the DCV client.</p>
    pub url: ::std::option::Option<::std::string::String>,
}
impl StreamingSessionStream {
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The user ID of the user that created the streaming session stream.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The ISO timestamp in seconds for when the resource expires.</p>
    pub fn expires_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expires_at.as_ref()
    }
    /// <p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>
    pub fn owned_by(&self) -> ::std::option::Option<&str> {
        self.owned_by.as_deref()
    }
    /// <p>The current state.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::StreamingSessionStreamState> {
        self.state.as_ref()
    }
    /// <p>The streaming session stream status code.</p>
    pub fn status_code(&self) -> ::std::option::Option<&crate::types::StreamingSessionStreamStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>The stream ID.</p>
    pub fn stream_id(&self) -> ::std::option::Option<&str> {
        self.stream_id.as_deref()
    }
    /// <p>The URL to connect to this stream using the DCV client.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl ::std::fmt::Debug for StreamingSessionStream {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StreamingSessionStream");
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("expires_at", &self.expires_at);
        formatter.field("owned_by", &self.owned_by);
        formatter.field("state", &self.state);
        formatter.field("status_code", &self.status_code);
        formatter.field("stream_id", &self.stream_id);
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl StreamingSessionStream {
    /// Creates a new builder-style object to manufacture [`StreamingSessionStream`](crate::types::StreamingSessionStream).
    pub fn builder() -> crate::types::builders::StreamingSessionStreamBuilder {
        crate::types::builders::StreamingSessionStreamBuilder::default()
    }
}

/// A builder for [`StreamingSessionStream`](crate::types::StreamingSessionStream).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct StreamingSessionStreamBuilder {
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) owned_by: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::StreamingSessionStreamState>,
    pub(crate) status_code: ::std::option::Option<crate::types::StreamingSessionStreamStatusCode>,
    pub(crate) stream_id: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
}
impl StreamingSessionStreamBuilder {
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The user ID of the user that created the streaming session stream.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user ID of the user that created the streaming session stream.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user ID of the user that created the streaming session stream.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The ISO timestamp in seconds for when the resource expires.</p>
    pub fn expires_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expires_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource expires.</p>
    pub fn set_expires_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expires_at = input;
        self
    }
    /// <p>The ISO timestamp in seconds for when the resource expires.</p>
    pub fn get_expires_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expires_at
    }
    /// <p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>
    pub fn owned_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owned_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>
    pub fn set_owned_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owned_by = input;
        self
    }
    /// <p>The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.</p>
    pub fn get_owned_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.owned_by
    }
    /// <p>The current state.</p>
    pub fn state(mut self, input: crate::types::StreamingSessionStreamState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::StreamingSessionStreamState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::StreamingSessionStreamState> {
        &self.state
    }
    /// <p>The streaming session stream status code.</p>
    pub fn status_code(mut self, input: crate::types::StreamingSessionStreamStatusCode) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streaming session stream status code.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::StreamingSessionStreamStatusCode>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The streaming session stream status code.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::StreamingSessionStreamStatusCode> {
        &self.status_code
    }
    /// <p>The stream ID.</p>
    pub fn stream_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The stream ID.</p>
    pub fn set_stream_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// <p>The stream ID.</p>
    pub fn get_stream_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_id
    }
    /// <p>The URL to connect to this stream using the DCV client.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to connect to this stream using the DCV client.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL to connect to this stream using the DCV client.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Consumes the builder and constructs a [`StreamingSessionStream`](crate::types::StreamingSessionStream).
    pub fn build(self) -> crate::types::StreamingSessionStream {
        crate::types::StreamingSessionStream {
            created_at: self.created_at,
            created_by: self.created_by,
            expires_at: self.expires_at,
            owned_by: self.owned_by,
            state: self.state,
            status_code: self.status_code,
            stream_id: self.stream_id,
            url: self.url,
        }
    }
}
impl ::std::fmt::Debug for StreamingSessionStreamBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StreamingSessionStreamBuilder");
        formatter.field("created_at", &self.created_at);
        formatter.field("created_by", &self.created_by);
        formatter.field("expires_at", &self.expires_at);
        formatter.field("owned_by", &self.owned_by);
        formatter.field("state", &self.state);
        formatter.field("status_code", &self.status_code);
        formatter.field("stream_id", &self.stream_id);
        formatter.field("url", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
