// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_cancel_cluster;

pub(crate) mod shape_cancel_job;

pub(crate) mod shape_create_address;

pub(crate) mod shape_create_cluster;

pub(crate) mod shape_create_job;

pub(crate) mod shape_create_long_term_pricing;

pub(crate) mod shape_create_return_shipping_label;

pub(crate) mod shape_describe_address;

pub(crate) mod shape_describe_addresses;

pub(crate) mod shape_describe_cluster;

pub(crate) mod shape_describe_job;

pub(crate) mod shape_describe_return_shipping_label;

pub(crate) mod shape_get_job_manifest;

pub(crate) mod shape_get_job_unlock_code;

pub(crate) mod shape_get_snowball_usage;

pub(crate) mod shape_get_software_updates;

pub(crate) mod shape_list_cluster_jobs;

pub(crate) mod shape_list_clusters;

pub(crate) mod shape_list_compatible_images;

pub(crate) mod shape_list_jobs;

pub(crate) mod shape_list_long_term_pricing;

pub(crate) mod shape_list_pickup_locations;

pub(crate) mod shape_list_service_versions;

pub(crate) mod shape_update_cluster;

pub(crate) mod shape_update_job;

pub(crate) mod shape_update_job_shipment_state;

pub(crate) mod shape_update_long_term_pricing;

pub(crate) mod shape_cancel_cluster_input;

pub(crate) mod shape_cancel_job_input;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_cluster_limit_exceeded_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_address_input;

pub(crate) mod shape_create_cluster_input;

pub(crate) mod shape_create_job_input;

pub(crate) mod shape_create_long_term_pricing_input;

pub(crate) mod shape_create_return_shipping_label_input;

pub(crate) mod shape_describe_address_input;

pub(crate) mod shape_describe_addresses_input;

pub(crate) mod shape_describe_cluster_input;

pub(crate) mod shape_describe_job_input;

pub(crate) mod shape_describe_return_shipping_label_input;

pub(crate) mod shape_ec2_request_failed_exception;

pub(crate) mod shape_get_job_manifest_input;

pub(crate) mod shape_get_job_unlock_code_input;

pub(crate) mod shape_get_software_updates_input;

pub(crate) mod shape_invalid_address_exception;

pub(crate) mod shape_invalid_input_combination_exception;

pub(crate) mod shape_invalid_job_state_exception;

pub(crate) mod shape_invalid_next_token_exception;

pub(crate) mod shape_invalid_resource_exception;

pub(crate) mod shape_kms_request_failed_exception;

pub(crate) mod shape_list_cluster_jobs_input;

pub(crate) mod shape_list_clusters_input;

pub(crate) mod shape_list_compatible_images_input;

pub(crate) mod shape_list_jobs_input;

pub(crate) mod shape_list_long_term_pricing_input;

pub(crate) mod shape_list_pickup_locations_input;

pub(crate) mod shape_list_service_versions_input;

pub(crate) mod shape_return_shipping_label_already_exists_exception;

pub(crate) mod shape_unsupported_address_exception;

pub(crate) mod shape_update_cluster_input;

pub(crate) mod shape_update_job_input;

pub(crate) mod shape_update_job_shipment_state_input;

pub(crate) mod shape_update_long_term_pricing_input;

pub(crate) mod shape_address;

pub(crate) mod shape_address_list;

pub(crate) mod shape_cluster_list_entry_list;

pub(crate) mod shape_cluster_metadata;

pub(crate) mod shape_compatible_image_list;

pub(crate) mod shape_dependent_service;

pub(crate) mod shape_dependent_service_list;

pub(crate) mod shape_device_configuration;

pub(crate) mod shape_job_list_entry_list;

pub(crate) mod shape_job_metadata;

pub(crate) mod shape_job_metadata_list;

pub(crate) mod shape_job_resource;

pub(crate) mod shape_long_term_pricing_entry_list;

pub(crate) mod shape_notification;

pub(crate) mod shape_on_device_service_configuration;

pub(crate) mod shape_pickup_details;

pub(crate) mod shape_service_version_list;

pub(crate) mod shape_tax_documents;

pub(crate) mod shape_cluster_list_entry;

pub(crate) mod shape_compatible_image;

pub(crate) mod shape_data_transfer;

pub(crate) mod shape_ec2_ami_resource;

pub(crate) mod shape_eks_on_device_service_configuration;

pub(crate) mod shape_ind_tax_documents;

pub(crate) mod shape_job_list_entry;

pub(crate) mod shape_job_logs;

pub(crate) mod shape_lambda_resource;

pub(crate) mod shape_long_term_pricing_list_entry;

pub(crate) mod shape_nfs_on_device_service_configuration;

pub(crate) mod shape_s3_on_device_service_configuration;

pub(crate) mod shape_s3_resource;

pub(crate) mod shape_service_version;

pub(crate) mod shape_shipping_details;

pub(crate) mod shape_snowcone_device_configuration;

pub(crate) mod shape_tgw_on_device_service_configuration;

pub(crate) mod shape_ec2_ami_resource_list;

pub(crate) mod shape_event_trigger_definition;

pub(crate) mod shape_job_state_list;

pub(crate) mod shape_key_range;

pub(crate) mod shape_lambda_resource_list;

pub(crate) mod shape_long_term_pricing_associated_job_id_list;

pub(crate) mod shape_s3_resource_list;

pub(crate) mod shape_shipment;

pub(crate) mod shape_target_on_device_service;

pub(crate) mod shape_wireless_connection;

pub(crate) mod shape_event_trigger_definition_list;

pub(crate) mod shape_target_on_device_service_list;
