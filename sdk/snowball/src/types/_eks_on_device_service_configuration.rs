// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the metadata and configuration settings of EKS Anywhere on the Snow Family device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EksOnDeviceServiceConfiguration {
    /// <p>The Kubernetes version for EKS Anywhere on the Snow Family device.</p>
    pub kubernetes_version: ::std::option::Option<::std::string::String>,
    /// <p>The version of EKS Anywhere on the Snow Family device.</p>
    pub eks_anywhere_version: ::std::option::Option<::std::string::String>,
}
impl EksOnDeviceServiceConfiguration {
    /// <p>The Kubernetes version for EKS Anywhere on the Snow Family device.</p>
    pub fn kubernetes_version(&self) -> ::std::option::Option<&str> {
        self.kubernetes_version.as_deref()
    }
    /// <p>The version of EKS Anywhere on the Snow Family device.</p>
    pub fn eks_anywhere_version(&self) -> ::std::option::Option<&str> {
        self.eks_anywhere_version.as_deref()
    }
}
impl EksOnDeviceServiceConfiguration {
    /// Creates a new builder-style object to manufacture [`EksOnDeviceServiceConfiguration`](crate::types::EksOnDeviceServiceConfiguration).
    pub fn builder() -> crate::types::builders::EksOnDeviceServiceConfigurationBuilder {
        crate::types::builders::EksOnDeviceServiceConfigurationBuilder::default()
    }
}

/// A builder for [`EksOnDeviceServiceConfiguration`](crate::types::EksOnDeviceServiceConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EksOnDeviceServiceConfigurationBuilder {
    pub(crate) kubernetes_version: ::std::option::Option<::std::string::String>,
    pub(crate) eks_anywhere_version: ::std::option::Option<::std::string::String>,
}
impl EksOnDeviceServiceConfigurationBuilder {
    /// <p>The Kubernetes version for EKS Anywhere on the Snow Family device.</p>
    pub fn kubernetes_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kubernetes_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Kubernetes version for EKS Anywhere on the Snow Family device.</p>
    pub fn set_kubernetes_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kubernetes_version = input;
        self
    }
    /// <p>The Kubernetes version for EKS Anywhere on the Snow Family device.</p>
    pub fn get_kubernetes_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.kubernetes_version
    }
    /// <p>The version of EKS Anywhere on the Snow Family device.</p>
    pub fn eks_anywhere_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.eks_anywhere_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of EKS Anywhere on the Snow Family device.</p>
    pub fn set_eks_anywhere_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.eks_anywhere_version = input;
        self
    }
    /// <p>The version of EKS Anywhere on the Snow Family device.</p>
    pub fn get_eks_anywhere_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.eks_anywhere_version
    }
    /// Consumes the builder and constructs a [`EksOnDeviceServiceConfiguration`](crate::types::EksOnDeviceServiceConfiguration).
    pub fn build(self) -> crate::types::EksOnDeviceServiceConfiguration {
        crate::types::EksOnDeviceServiceConfiguration {
            kubernetes_version: self.kubernetes_version,
            eks_anywhere_version: self.eks_anywhere_version,
        }
    }
}
