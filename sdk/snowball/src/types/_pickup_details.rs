// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information identifying the person picking up the device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PickupDetails {
    /// <p>The name of the person picking up the device.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The phone number of the person picking up the device.</p>
    pub phone_number: ::std::option::Option<::std::string::String>,
    /// <p>The email address of the person picking up the device.</p>
    pub email: ::std::option::Option<::std::string::String>,
    /// <p>The number on the credential identifying the person picking up the device.</p>
    pub identification_number: ::std::option::Option<::std::string::String>,
    /// <p>Expiration date of the credential identifying the person picking up the device.</p>
    pub identification_expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Organization that issued the credential identifying the person picking up the device.</p>
    pub identification_issuing_org: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID for a device that will be picked up.</p>
    pub device_pickup_id: ::std::option::Option<::std::string::String>,
}
impl PickupDetails {
    /// <p>The name of the person picking up the device.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The phone number of the person picking up the device.</p>
    pub fn phone_number(&self) -> ::std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>The email address of the person picking up the device.</p>
    pub fn email(&self) -> ::std::option::Option<&str> {
        self.email.as_deref()
    }
    /// <p>The number on the credential identifying the person picking up the device.</p>
    pub fn identification_number(&self) -> ::std::option::Option<&str> {
        self.identification_number.as_deref()
    }
    /// <p>Expiration date of the credential identifying the person picking up the device.</p>
    pub fn identification_expiration_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.identification_expiration_date.as_ref()
    }
    /// <p>Organization that issued the credential identifying the person picking up the device.</p>
    pub fn identification_issuing_org(&self) -> ::std::option::Option<&str> {
        self.identification_issuing_org.as_deref()
    }
    /// <p>The unique ID for a device that will be picked up.</p>
    pub fn device_pickup_id(&self) -> ::std::option::Option<&str> {
        self.device_pickup_id.as_deref()
    }
}
impl ::std::fmt::Debug for PickupDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PickupDetails");
        formatter.field("name", &self.name);
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("identification_number", &self.identification_number);
        formatter.field("identification_expiration_date", &self.identification_expiration_date);
        formatter.field("identification_issuing_org", &self.identification_issuing_org);
        formatter.field("device_pickup_id", &self.device_pickup_id);
        formatter.finish()
    }
}
impl PickupDetails {
    /// Creates a new builder-style object to manufacture [`PickupDetails`](crate::types::PickupDetails).
    pub fn builder() -> crate::types::builders::PickupDetailsBuilder {
        crate::types::builders::PickupDetailsBuilder::default()
    }
}

/// A builder for [`PickupDetails`](crate::types::PickupDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PickupDetailsBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) email: ::std::option::Option<::std::string::String>,
    pub(crate) identification_number: ::std::option::Option<::std::string::String>,
    pub(crate) identification_expiration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) identification_issuing_org: ::std::option::Option<::std::string::String>,
    pub(crate) device_pickup_id: ::std::option::Option<::std::string::String>,
}
impl PickupDetailsBuilder {
    /// <p>The name of the person picking up the device.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the person picking up the device.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the person picking up the device.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The phone number of the person picking up the device.</p>
    pub fn phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The phone number of the person picking up the device.</p>
    pub fn set_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>The phone number of the person picking up the device.</p>
    pub fn get_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.phone_number
    }
    /// <p>The email address of the person picking up the device.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address of the person picking up the device.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The email address of the person picking up the device.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// <p>The number on the credential identifying the person picking up the device.</p>
    pub fn identification_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identification_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The number on the credential identifying the person picking up the device.</p>
    pub fn set_identification_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identification_number = input;
        self
    }
    /// <p>The number on the credential identifying the person picking up the device.</p>
    pub fn get_identification_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.identification_number
    }
    /// <p>Expiration date of the credential identifying the person picking up the device.</p>
    pub fn identification_expiration_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.identification_expiration_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Expiration date of the credential identifying the person picking up the device.</p>
    pub fn set_identification_expiration_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.identification_expiration_date = input;
        self
    }
    /// <p>Expiration date of the credential identifying the person picking up the device.</p>
    pub fn get_identification_expiration_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.identification_expiration_date
    }
    /// <p>Organization that issued the credential identifying the person picking up the device.</p>
    pub fn identification_issuing_org(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identification_issuing_org = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Organization that issued the credential identifying the person picking up the device.</p>
    pub fn set_identification_issuing_org(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identification_issuing_org = input;
        self
    }
    /// <p>Organization that issued the credential identifying the person picking up the device.</p>
    pub fn get_identification_issuing_org(&self) -> &::std::option::Option<::std::string::String> {
        &self.identification_issuing_org
    }
    /// <p>The unique ID for a device that will be picked up.</p>
    pub fn device_pickup_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_pickup_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for a device that will be picked up.</p>
    pub fn set_device_pickup_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_pickup_id = input;
        self
    }
    /// <p>The unique ID for a device that will be picked up.</p>
    pub fn get_device_pickup_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_pickup_id
    }
    /// Consumes the builder and constructs a [`PickupDetails`](crate::types::PickupDetails).
    pub fn build(self) -> crate::types::PickupDetails {
        crate::types::PickupDetails {
            name: self.name,
            phone_number: self.phone_number,
            email: self.email,
            identification_number: self.identification_number,
            identification_expiration_date: self.identification_expiration_date,
            identification_issuing_org: self.identification_issuing_org,
            device_pickup_id: self.device_pickup_id,
        }
    }
}
impl ::std::fmt::Debug for PickupDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PickupDetailsBuilder");
        formatter.field("name", &self.name);
        formatter.field("phone_number", &"*** Sensitive Data Redacted ***");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("identification_number", &self.identification_number);
        formatter.field("identification_expiration_date", &self.identification_expiration_date);
        formatter.field("identification_issuing_org", &self.identification_issuing_org);
        formatter.field("device_pickup_id", &self.device_pickup_id);
        formatter.finish()
    }
}
