// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about file modes in a merge or pull request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FileModes {
    /// <p>The file mode of a file in the source of a merge or pull request.</p>
    pub source: ::std::option::Option<crate::types::FileModeTypeEnum>,
    /// <p>The file mode of a file in the destination of a merge or pull request.</p>
    pub destination: ::std::option::Option<crate::types::FileModeTypeEnum>,
    /// <p>The file mode of a file in the base of a merge or pull request.</p>
    pub base: ::std::option::Option<crate::types::FileModeTypeEnum>,
}
impl FileModes {
    /// <p>The file mode of a file in the source of a merge or pull request.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::FileModeTypeEnum> {
        self.source.as_ref()
    }
    /// <p>The file mode of a file in the destination of a merge or pull request.</p>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::FileModeTypeEnum> {
        self.destination.as_ref()
    }
    /// <p>The file mode of a file in the base of a merge or pull request.</p>
    pub fn base(&self) -> ::std::option::Option<&crate::types::FileModeTypeEnum> {
        self.base.as_ref()
    }
}
impl FileModes {
    /// Creates a new builder-style object to manufacture [`FileModes`](crate::types::FileModes).
    pub fn builder() -> crate::types::builders::FileModesBuilder {
        crate::types::builders::FileModesBuilder::default()
    }
}

/// A builder for [`FileModes`](crate::types::FileModes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FileModesBuilder {
    pub(crate) source: ::std::option::Option<crate::types::FileModeTypeEnum>,
    pub(crate) destination: ::std::option::Option<crate::types::FileModeTypeEnum>,
    pub(crate) base: ::std::option::Option<crate::types::FileModeTypeEnum>,
}
impl FileModesBuilder {
    /// <p>The file mode of a file in the source of a merge or pull request.</p>
    pub fn source(mut self, input: crate::types::FileModeTypeEnum) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file mode of a file in the source of a merge or pull request.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::FileModeTypeEnum>) -> Self {
        self.source = input;
        self
    }
    /// <p>The file mode of a file in the source of a merge or pull request.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::FileModeTypeEnum> {
        &self.source
    }
    /// <p>The file mode of a file in the destination of a merge or pull request.</p>
    pub fn destination(mut self, input: crate::types::FileModeTypeEnum) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file mode of a file in the destination of a merge or pull request.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::FileModeTypeEnum>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The file mode of a file in the destination of a merge or pull request.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::FileModeTypeEnum> {
        &self.destination
    }
    /// <p>The file mode of a file in the base of a merge or pull request.</p>
    pub fn base(mut self, input: crate::types::FileModeTypeEnum) -> Self {
        self.base = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file mode of a file in the base of a merge or pull request.</p>
    pub fn set_base(mut self, input: ::std::option::Option<crate::types::FileModeTypeEnum>) -> Self {
        self.base = input;
        self
    }
    /// <p>The file mode of a file in the base of a merge or pull request.</p>
    pub fn get_base(&self) -> &::std::option::Option<crate::types::FileModeTypeEnum> {
        &self.base
    }
    /// Consumes the builder and constructs a [`FileModes`](crate::types::FileModes).
    pub fn build(self) -> crate::types::FileModes {
        crate::types::FileModes {
            source: self.source,
            destination: self.destination,
            base: self.base,
        }
    }
}
