// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an update to the source branch of a pull request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PullRequestSourceReferenceUpdatedEventMetadata {
    /// <p>The name of the repository where the pull request was updated.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
    /// <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.</p>
    pub before_commit_id: ::std::option::Option<::std::string::String>,
    /// <p>The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.</p>
    pub after_commit_id: ::std::option::Option<::std::string::String>,
    /// <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
    pub merge_base: ::std::option::Option<::std::string::String>,
}
impl PullRequestSourceReferenceUpdatedEventMetadata {
    /// <p>The name of the repository where the pull request was updated.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.</p>
    pub fn before_commit_id(&self) -> ::std::option::Option<&str> {
        self.before_commit_id.as_deref()
    }
    /// <p>The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.</p>
    pub fn after_commit_id(&self) -> ::std::option::Option<&str> {
        self.after_commit_id.as_deref()
    }
    /// <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
    pub fn merge_base(&self) -> ::std::option::Option<&str> {
        self.merge_base.as_deref()
    }
}
impl PullRequestSourceReferenceUpdatedEventMetadata {
    /// Creates a new builder-style object to manufacture [`PullRequestSourceReferenceUpdatedEventMetadata`](crate::types::PullRequestSourceReferenceUpdatedEventMetadata).
    pub fn builder() -> crate::types::builders::PullRequestSourceReferenceUpdatedEventMetadataBuilder {
        crate::types::builders::PullRequestSourceReferenceUpdatedEventMetadataBuilder::default()
    }
}

/// A builder for [`PullRequestSourceReferenceUpdatedEventMetadata`](crate::types::PullRequestSourceReferenceUpdatedEventMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PullRequestSourceReferenceUpdatedEventMetadataBuilder {
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) before_commit_id: ::std::option::Option<::std::string::String>,
    pub(crate) after_commit_id: ::std::option::Option<::std::string::String>,
    pub(crate) merge_base: ::std::option::Option<::std::string::String>,
}
impl PullRequestSourceReferenceUpdatedEventMetadataBuilder {
    /// <p>The name of the repository where the pull request was updated.</p>
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository where the pull request was updated.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the repository where the pull request was updated.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.</p>
    pub fn before_commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.before_commit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.</p>
    pub fn set_before_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.before_commit_id = input;
        self
    }
    /// <p>The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.</p>
    pub fn get_before_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.before_commit_id
    }
    /// <p>The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.</p>
    pub fn after_commit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.after_commit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.</p>
    pub fn set_after_commit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.after_commit_id = input;
        self
    }
    /// <p>The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.</p>
    pub fn get_after_commit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.after_commit_id
    }
    /// <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
    pub fn merge_base(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.merge_base = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
    pub fn set_merge_base(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.merge_base = input;
        self
    }
    /// <p>The commit ID of the most recent commit that the source branch and the destination branch have in common.</p>
    pub fn get_merge_base(&self) -> &::std::option::Option<::std::string::String> {
        &self.merge_base
    }
    /// Consumes the builder and constructs a [`PullRequestSourceReferenceUpdatedEventMetadata`](crate::types::PullRequestSourceReferenceUpdatedEventMetadata).
    pub fn build(self) -> crate::types::PullRequestSourceReferenceUpdatedEventMetadata {
        crate::types::PullRequestSourceReferenceUpdatedEventMetadata {
            repository_name: self.repository_name,
            before_commit_id: self.before_commit_id,
            after_commit_id: self.after_commit_id,
            merge_base: self.merge_base,
        }
    }
}
