// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a trigger for a repository.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RepositoryTrigger {
    /// <p>The name of the trigger.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS).</p>
    pub destination_arn: ::std::option::Option<::std::string::String>,
    /// <p>Any custom data associated with the trigger to be included in the information sent to the target of the trigger.</p>
    pub custom_data: ::std::option::Option<::std::string::String>,
    /// <p>The branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.</p> <note>
    /// <p>Although no content is required in the array, you must include the array itself.</p>
    /// </note>
    pub branches: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS. </p> <note>
    /// <p>The valid value "all" cannot be used with any other values.</p>
    /// </note>
    pub events: ::std::option::Option<::std::vec::Vec<crate::types::RepositoryTriggerEventEnum>>,
}
impl RepositoryTrigger {
    /// <p>The name of the trigger.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS).</p>
    pub fn destination_arn(&self) -> ::std::option::Option<&str> {
        self.destination_arn.as_deref()
    }
    /// <p>Any custom data associated with the trigger to be included in the information sent to the target of the trigger.</p>
    pub fn custom_data(&self) -> ::std::option::Option<&str> {
        self.custom_data.as_deref()
    }
    /// <p>The branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.</p> <note>
    /// <p>Although no content is required in the array, you must include the array itself.</p>
    /// </note>
    pub fn branches(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.branches.as_deref()
    }
    /// <p>The repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS. </p> <note>
    /// <p>The valid value "all" cannot be used with any other values.</p>
    /// </note>
    pub fn events(&self) -> ::std::option::Option<&[crate::types::RepositoryTriggerEventEnum]> {
        self.events.as_deref()
    }
}
impl RepositoryTrigger {
    /// Creates a new builder-style object to manufacture [`RepositoryTrigger`](crate::types::RepositoryTrigger).
    pub fn builder() -> crate::types::builders::RepositoryTriggerBuilder {
        crate::types::builders::RepositoryTriggerBuilder::default()
    }
}

/// A builder for [`RepositoryTrigger`](crate::types::RepositoryTrigger).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RepositoryTriggerBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) destination_arn: ::std::option::Option<::std::string::String>,
    pub(crate) custom_data: ::std::option::Option<::std::string::String>,
    pub(crate) branches: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) events: ::std::option::Option<::std::vec::Vec<crate::types::RepositoryTriggerEventEnum>>,
}
impl RepositoryTriggerBuilder {
    /// <p>The name of the trigger.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the trigger.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the trigger.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS).</p>
    pub fn destination_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS).</p>
    pub fn set_destination_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_arn = input;
        self
    }
    /// <p>The ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS).</p>
    pub fn get_destination_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_arn
    }
    /// <p>Any custom data associated with the trigger to be included in the information sent to the target of the trigger.</p>
    pub fn custom_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Any custom data associated with the trigger to be included in the information sent to the target of the trigger.</p>
    pub fn set_custom_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_data = input;
        self
    }
    /// <p>Any custom data associated with the trigger to be included in the information sent to the target of the trigger.</p>
    pub fn get_custom_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_data
    }
    /// Appends an item to `branches`.
    ///
    /// To override the contents of this collection use [`set_branches`](Self::set_branches).
    ///
    /// <p>The branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.</p> <note>
    /// <p>Although no content is required in the array, you must include the array itself.</p>
    /// </note>
    pub fn branches(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.branches.unwrap_or_default();
        v.push(input.into());
        self.branches = ::std::option::Option::Some(v);
        self
    }
    /// <p>The branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.</p> <note>
    /// <p>Although no content is required in the array, you must include the array itself.</p>
    /// </note>
    pub fn set_branches(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.branches = input;
        self
    }
    /// <p>The branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.</p> <note>
    /// <p>Although no content is required in the array, you must include the array itself.</p>
    /// </note>
    pub fn get_branches(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.branches
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>The repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS. </p> <note>
    /// <p>The valid value "all" cannot be used with any other values.</p>
    /// </note>
    pub fn events(mut self, input: crate::types::RepositoryTriggerEventEnum) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input);
        self.events = ::std::option::Option::Some(v);
        self
    }
    /// <p>The repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS. </p> <note>
    /// <p>The valid value "all" cannot be used with any other values.</p>
    /// </note>
    pub fn set_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RepositoryTriggerEventEnum>>) -> Self {
        self.events = input;
        self
    }
    /// <p>The repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS. </p> <note>
    /// <p>The valid value "all" cannot be used with any other values.</p>
    /// </note>
    pub fn get_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RepositoryTriggerEventEnum>> {
        &self.events
    }
    /// Consumes the builder and constructs a [`RepositoryTrigger`](crate::types::RepositoryTrigger).
    pub fn build(self) -> crate::types::RepositoryTrigger {
        crate::types::RepositoryTrigger {
            name: self.name,
            destination_arn: self.destination_arn,
            custom_data: self.custom_data,
            branches: self.branches,
            events: self.events,
        }
    }
}
