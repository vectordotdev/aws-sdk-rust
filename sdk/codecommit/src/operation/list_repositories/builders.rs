// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_repositories::_list_repositories_output::ListRepositoriesOutputBuilder;

pub use crate::operation::list_repositories::_list_repositories_input::ListRepositoriesInputBuilder;

impl ListRepositoriesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_repositories::ListRepositoriesOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_repositories::ListRepositoriesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_repositories();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListRepositories`.
///
/// <p>Gets information about one or more repositories.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListRepositoriesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_repositories::builders::ListRepositoriesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl ListRepositoriesFluentBuilder {
    /// Creates a new `ListRepositories`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListRepositories as a reference.
    pub fn as_input(&self) -> &crate::operation::list_repositories::builders::ListRepositoriesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_repositories::ListRepositoriesOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_repositories::ListRepositoriesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_repositories::ListRepositories::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_repositories::ListRepositories::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::list_repositories::ListRepositoriesOutput,
            crate::operation::list_repositories::ListRepositoriesError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::list_repositories::ListRepositoriesError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_repositories::paginator::ListRepositoriesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_repositories::paginator::ListRepositoriesPaginator {
        crate::operation::list_repositories::paginator::ListRepositoriesPaginator::new(self.handle, self.inner)
    }
    /// <p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The criteria used to sort the results of a list repositories operation.</p>
    pub fn sort_by(mut self, input: crate::types::SortByEnum) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The criteria used to sort the results of a list repositories operation.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::SortByEnum>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The criteria used to sort the results of a list repositories operation.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::SortByEnum> {
        self.inner.get_sort_by()
    }
    /// <p>The order in which to sort the results of a list repositories operation.</p>
    pub fn order(mut self, input: crate::types::OrderEnum) -> Self {
        self.inner = self.inner.order(input);
        self
    }
    /// <p>The order in which to sort the results of a list repositories operation.</p>
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::OrderEnum>) -> Self {
        self.inner = self.inner.set_order(input);
        self
    }
    /// <p>The order in which to sort the results of a list repositories operation.</p>
    pub fn get_order(&self) -> &::std::option::Option<crate::types::OrderEnum> {
        self.inner.get_order()
    }
}
