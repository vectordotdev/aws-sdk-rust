// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::override_pull_request_approval_rules::_override_pull_request_approval_rules_output::OverridePullRequestApprovalRulesOutputBuilder;

pub use crate::operation::override_pull_request_approval_rules::_override_pull_request_approval_rules_input::OverridePullRequestApprovalRulesInputBuilder;

impl OverridePullRequestApprovalRulesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.override_pull_request_approval_rules();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `OverridePullRequestApprovalRules`.
///
/// <p>Sets aside (overrides) all approval rule requirements for a specified pull request.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct OverridePullRequestApprovalRulesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::override_pull_request_approval_rules::builders::OverridePullRequestApprovalRulesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl OverridePullRequestApprovalRulesFluentBuilder {
    /// Creates a new `OverridePullRequestApprovalRules`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the OverridePullRequestApprovalRules as a reference.
    pub fn as_input(&self) -> &crate::operation::override_pull_request_approval_rules::builders::OverridePullRequestApprovalRulesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRules::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRules::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesOutput,
            crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::override_pull_request_approval_rules::OverridePullRequestApprovalRulesError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <code>GetPullRequest</code>.</p>
    pub fn pull_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.pull_request_id(input.into());
        self
    }
    /// <p>The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <code>GetPullRequest</code>.</p>
    pub fn set_pull_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_pull_request_id(input);
        self
    }
    /// <p>The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <code>GetPullRequest</code>.</p>
    pub fn get_pull_request_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_pull_request_id()
    }
    /// <p>The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.</p>
    pub fn revision_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.revision_id(input.into());
        self
    }
    /// <p>The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.</p>
    pub fn set_revision_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_revision_id(input);
        self
    }
    /// <p>The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.</p>
    pub fn get_revision_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_revision_id()
    }
    /// <p>Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.</p>
    pub fn override_status(mut self, input: crate::types::OverrideStatus) -> Self {
        self.inner = self.inner.override_status(input);
        self
    }
    /// <p>Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.</p>
    pub fn set_override_status(mut self, input: ::std::option::Option<crate::types::OverrideStatus>) -> Self {
        self.inner = self.inner.set_override_status(input);
        self
    }
    /// <p>Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.</p>
    pub fn get_override_status(&self) -> &::std::option::Option<crate::types::OverrideStatus> {
        self.inner.get_override_status()
    }
}
