// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssociateNatGatewayAddress`](crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`nat_gateway_id(impl ::std::convert::Into<String>)`](crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder::nat_gateway_id) / [`set_nat_gateway_id(Option<String>)`](crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder::set_nat_gateway_id): <p>The ID of the NAT gateway.</p>
    ///   - [`allocation_ids(Vec<String>)`](crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder::allocation_ids) / [`set_allocation_ids(Option<Vec<String>>)`](crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder::set_allocation_ids): <p>The allocation IDs of EIPs that you want to associate with your NAT gateway.</p>
    ///   - [`private_ip_addresses(Vec<String>)`](crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder::private_ip_addresses) / [`set_private_ip_addresses(Option<Vec<String>>)`](crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder::set_private_ip_addresses): <p>The private IPv4 addresses that you want to assign to the NAT gateway.</p>
    ///   - [`dry_run(bool)`](crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    /// - On success, responds with [`AssociateNatGatewayAddressOutput`](crate::operation::associate_nat_gateway_address::AssociateNatGatewayAddressOutput) with field(s):
    ///   - [`nat_gateway_id(Option<String>)`](crate::operation::associate_nat_gateway_address::AssociateNatGatewayAddressOutput::nat_gateway_id): <p>The ID of the NAT gateway.</p>
    ///   - [`nat_gateway_addresses(Option<Vec<NatGatewayAddress>>)`](crate::operation::associate_nat_gateway_address::AssociateNatGatewayAddressOutput::nat_gateway_addresses): <p>The IP addresses.</p>
    /// - On failure, responds with [`SdkError<AssociateNatGatewayAddressError>`](crate::operation::associate_nat_gateway_address::AssociateNatGatewayAddressError)
    pub fn associate_nat_gateway_address(
        &self,
    ) -> crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder {
        crate::operation::associate_nat_gateway_address::builders::AssociateNatGatewayAddressFluentBuilder::new(self.handle.clone())
    }
}
