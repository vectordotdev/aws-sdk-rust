// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Summary information about an AWS Mobile Hub project. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProjectSummary {
    /// <p> Name of the project. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> Unique project identifier. </p>
    pub project_id: ::std::option::Option<::std::string::String>,
}
impl ProjectSummary {
    /// <p> Name of the project. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> Unique project identifier. </p>
    pub fn project_id(&self) -> ::std::option::Option<&str> {
        self.project_id.as_deref()
    }
}
impl ProjectSummary {
    /// Creates a new builder-style object to manufacture [`ProjectSummary`](crate::types::ProjectSummary).
    pub fn builder() -> crate::types::builders::ProjectSummaryBuilder {
        crate::types::builders::ProjectSummaryBuilder::default()
    }
}

/// A builder for [`ProjectSummary`](crate::types::ProjectSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProjectSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) project_id: ::std::option::Option<::std::string::String>,
}
impl ProjectSummaryBuilder {
    /// <p> Name of the project. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Name of the project. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> Name of the project. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> Unique project identifier. </p>
    pub fn project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Unique project identifier. </p>
    pub fn set_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p> Unique project identifier. </p>
    pub fn get_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_id
    }
    /// Consumes the builder and constructs a [`ProjectSummary`](crate::types::ProjectSummary).
    pub fn build(self) -> crate::types::ProjectSummary {
        crate::types::ProjectSummary {
            name: self.name,
            project_id: self.project_id,
        }
    }
}
