// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An integer parameter for a dataset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IntegerDatasetParameter {
    /// <p>An identifier for the integer parameter created in the dataset.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the integer parameter that is created in the dataset.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The value type of the dataset parameter. Valid values are <code>single value</code> or <code>multi value</code>.</p>
    pub value_type: ::std::option::Option<crate::types::DatasetParameterValueType>,
    /// <p>A list of default values for a given integer parameter. This structure only accepts static values.</p>
    pub default_values: ::std::option::Option<crate::types::IntegerDatasetParameterDefaultValues>,
}
impl IntegerDatasetParameter {
    /// <p>An identifier for the integer parameter created in the dataset.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the integer parameter that is created in the dataset.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The value type of the dataset parameter. Valid values are <code>single value</code> or <code>multi value</code>.</p>
    pub fn value_type(&self) -> ::std::option::Option<&crate::types::DatasetParameterValueType> {
        self.value_type.as_ref()
    }
    /// <p>A list of default values for a given integer parameter. This structure only accepts static values.</p>
    pub fn default_values(&self) -> ::std::option::Option<&crate::types::IntegerDatasetParameterDefaultValues> {
        self.default_values.as_ref()
    }
}
impl IntegerDatasetParameter {
    /// Creates a new builder-style object to manufacture [`IntegerDatasetParameter`](crate::types::IntegerDatasetParameter).
    pub fn builder() -> crate::types::builders::IntegerDatasetParameterBuilder {
        crate::types::builders::IntegerDatasetParameterBuilder::default()
    }
}

/// A builder for [`IntegerDatasetParameter`](crate::types::IntegerDatasetParameter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IntegerDatasetParameterBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) value_type: ::std::option::Option<crate::types::DatasetParameterValueType>,
    pub(crate) default_values: ::std::option::Option<crate::types::IntegerDatasetParameterDefaultValues>,
}
impl IntegerDatasetParameterBuilder {
    /// <p>An identifier for the integer parameter created in the dataset.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier for the integer parameter created in the dataset.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>An identifier for the integer parameter created in the dataset.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the integer parameter that is created in the dataset.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the integer parameter that is created in the dataset.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the integer parameter that is created in the dataset.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The value type of the dataset parameter. Valid values are <code>single value</code> or <code>multi value</code>.</p>
    pub fn value_type(mut self, input: crate::types::DatasetParameterValueType) -> Self {
        self.value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value type of the dataset parameter. Valid values are <code>single value</code> or <code>multi value</code>.</p>
    pub fn set_value_type(mut self, input: ::std::option::Option<crate::types::DatasetParameterValueType>) -> Self {
        self.value_type = input;
        self
    }
    /// <p>The value type of the dataset parameter. Valid values are <code>single value</code> or <code>multi value</code>.</p>
    pub fn get_value_type(&self) -> &::std::option::Option<crate::types::DatasetParameterValueType> {
        &self.value_type
    }
    /// <p>A list of default values for a given integer parameter. This structure only accepts static values.</p>
    pub fn default_values(mut self, input: crate::types::IntegerDatasetParameterDefaultValues) -> Self {
        self.default_values = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of default values for a given integer parameter. This structure only accepts static values.</p>
    pub fn set_default_values(mut self, input: ::std::option::Option<crate::types::IntegerDatasetParameterDefaultValues>) -> Self {
        self.default_values = input;
        self
    }
    /// <p>A list of default values for a given integer parameter. This structure only accepts static values.</p>
    pub fn get_default_values(&self) -> &::std::option::Option<crate::types::IntegerDatasetParameterDefaultValues> {
        &self.default_values
    }
    /// Consumes the builder and constructs a [`IntegerDatasetParameter`](crate::types::IntegerDatasetParameter).
    pub fn build(self) -> crate::types::IntegerDatasetParameter {
        crate::types::IntegerDatasetParameter {
            id: self.id,
            name: self.name,
            value_type: self.value_type,
            default_values: self.default_values,
        }
    }
}
