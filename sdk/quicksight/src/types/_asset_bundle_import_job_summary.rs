// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the import job that includes details of the requested job's configuration and its current status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetBundleImportJobSummary {
    /// <p>The current status of the import job.</p>
    pub job_status: ::std::option::Option<crate::types::AssetBundleImportJobStatus>,
    /// <p>The ARN of the import job.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The time that the import job was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ID of the job. This ID is unique while the job is running. After the job is completed, you can reuse this ID for another job.</p>
    pub asset_bundle_import_job_id: ::std::option::Option<::std::string::String>,
    /// <p>The failure action for the import job.</p>
    pub failure_action: ::std::option::Option<crate::types::AssetBundleImportFailureAction>,
}
impl AssetBundleImportJobSummary {
    /// <p>The current status of the import job.</p>
    pub fn job_status(&self) -> ::std::option::Option<&crate::types::AssetBundleImportJobStatus> {
        self.job_status.as_ref()
    }
    /// <p>The ARN of the import job.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time that the import job was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The ID of the job. This ID is unique while the job is running. After the job is completed, you can reuse this ID for another job.</p>
    pub fn asset_bundle_import_job_id(&self) -> ::std::option::Option<&str> {
        self.asset_bundle_import_job_id.as_deref()
    }
    /// <p>The failure action for the import job.</p>
    pub fn failure_action(&self) -> ::std::option::Option<&crate::types::AssetBundleImportFailureAction> {
        self.failure_action.as_ref()
    }
}
impl AssetBundleImportJobSummary {
    /// Creates a new builder-style object to manufacture [`AssetBundleImportJobSummary`](crate::types::AssetBundleImportJobSummary).
    pub fn builder() -> crate::types::builders::AssetBundleImportJobSummaryBuilder {
        crate::types::builders::AssetBundleImportJobSummaryBuilder::default()
    }
}

/// A builder for [`AssetBundleImportJobSummary`](crate::types::AssetBundleImportJobSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetBundleImportJobSummaryBuilder {
    pub(crate) job_status: ::std::option::Option<crate::types::AssetBundleImportJobStatus>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) asset_bundle_import_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) failure_action: ::std::option::Option<crate::types::AssetBundleImportFailureAction>,
}
impl AssetBundleImportJobSummaryBuilder {
    /// <p>The current status of the import job.</p>
    pub fn job_status(mut self, input: crate::types::AssetBundleImportJobStatus) -> Self {
        self.job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the import job.</p>
    pub fn set_job_status(mut self, input: ::std::option::Option<crate::types::AssetBundleImportJobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The current status of the import job.</p>
    pub fn get_job_status(&self) -> &::std::option::Option<crate::types::AssetBundleImportJobStatus> {
        &self.job_status
    }
    /// <p>The ARN of the import job.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the import job.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the import job.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The time that the import job was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the import job was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time that the import job was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The ID of the job. This ID is unique while the job is running. After the job is completed, you can reuse this ID for another job.</p>
    pub fn asset_bundle_import_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_bundle_import_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job. This ID is unique while the job is running. After the job is completed, you can reuse this ID for another job.</p>
    pub fn set_asset_bundle_import_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_bundle_import_job_id = input;
        self
    }
    /// <p>The ID of the job. This ID is unique while the job is running. After the job is completed, you can reuse this ID for another job.</p>
    pub fn get_asset_bundle_import_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_bundle_import_job_id
    }
    /// <p>The failure action for the import job.</p>
    pub fn failure_action(mut self, input: crate::types::AssetBundleImportFailureAction) -> Self {
        self.failure_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The failure action for the import job.</p>
    pub fn set_failure_action(mut self, input: ::std::option::Option<crate::types::AssetBundleImportFailureAction>) -> Self {
        self.failure_action = input;
        self
    }
    /// <p>The failure action for the import job.</p>
    pub fn get_failure_action(&self) -> &::std::option::Option<crate::types::AssetBundleImportFailureAction> {
        &self.failure_action
    }
    /// Consumes the builder and constructs a [`AssetBundleImportJobSummary`](crate::types::AssetBundleImportJobSummary).
    pub fn build(self) -> crate::types::AssetBundleImportJobSummary {
        crate::types::AssetBundleImportJobSummary {
            job_status: self.job_status,
            arn: self.arn,
            created_time: self.created_time,
            asset_bundle_import_job_id: self.asset_bundle_import_job_id,
            failure_action: self.failure_action,
        }
    }
}
