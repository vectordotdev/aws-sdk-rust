// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Dashboard publish options.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DashboardPublishOptions {
    /// <p>Ad hoc (one-time) filtering option.</p>
    pub ad_hoc_filtering_option: ::std::option::Option<crate::types::AdHocFilteringOption>,
    /// <p>Export to .csv option.</p>
    pub export_to_csv_option: ::std::option::Option<crate::types::ExportToCsvOption>,
    /// <p>Sheet controls option.</p>
    pub sheet_controls_option: ::std::option::Option<crate::types::SheetControlsOption>,
    /// <p>The visual publish options of a visual in a dashboard.</p>
    #[deprecated(
        note = "VisualPublishOptions property will reach its end of standard support in a future release. To perform this action, use ExportWithHiddenFields."
    )]
    pub visual_publish_options: ::std::option::Option<crate::types::DashboardVisualPublishOptions>,
    /// <p>The sheet layout maximization options of a dashbaord.</p>
    pub sheet_layout_element_maximization_option: ::std::option::Option<crate::types::SheetLayoutElementMaximizationOption>,
    /// <p>The menu options of a visual in a dashboard.</p>
    pub visual_menu_option: ::std::option::Option<crate::types::VisualMenuOption>,
    /// <p>The axis sort options of a dashboard.</p>
    pub visual_axis_sort_option: ::std::option::Option<crate::types::VisualAxisSortOption>,
    /// <p>Determines if hidden fields are exported with a dashboard.</p>
    pub export_with_hidden_fields_option: ::std::option::Option<crate::types::ExportWithHiddenFieldsOption>,
    /// <p>The drill-down options of data points in a dashboard.</p>
    pub data_point_drill_up_down_option: ::std::option::Option<crate::types::DataPointDrillUpDownOption>,
    /// <p>The data point menu label options of a dashboard.</p>
    pub data_point_menu_label_option: ::std::option::Option<crate::types::DataPointMenuLabelOption>,
    /// <p>The data point tool tip options of a dashboard.</p>
    pub data_point_tooltip_option: ::std::option::Option<crate::types::DataPointTooltipOption>,
}
impl DashboardPublishOptions {
    /// <p>Ad hoc (one-time) filtering option.</p>
    pub fn ad_hoc_filtering_option(&self) -> ::std::option::Option<&crate::types::AdHocFilteringOption> {
        self.ad_hoc_filtering_option.as_ref()
    }
    /// <p>Export to .csv option.</p>
    pub fn export_to_csv_option(&self) -> ::std::option::Option<&crate::types::ExportToCsvOption> {
        self.export_to_csv_option.as_ref()
    }
    /// <p>Sheet controls option.</p>
    pub fn sheet_controls_option(&self) -> ::std::option::Option<&crate::types::SheetControlsOption> {
        self.sheet_controls_option.as_ref()
    }
    /// <p>The visual publish options of a visual in a dashboard.</p>
    #[deprecated(
        note = "VisualPublishOptions property will reach its end of standard support in a future release. To perform this action, use ExportWithHiddenFields."
    )]
    pub fn visual_publish_options(&self) -> ::std::option::Option<&crate::types::DashboardVisualPublishOptions> {
        self.visual_publish_options.as_ref()
    }
    /// <p>The sheet layout maximization options of a dashbaord.</p>
    pub fn sheet_layout_element_maximization_option(&self) -> ::std::option::Option<&crate::types::SheetLayoutElementMaximizationOption> {
        self.sheet_layout_element_maximization_option.as_ref()
    }
    /// <p>The menu options of a visual in a dashboard.</p>
    pub fn visual_menu_option(&self) -> ::std::option::Option<&crate::types::VisualMenuOption> {
        self.visual_menu_option.as_ref()
    }
    /// <p>The axis sort options of a dashboard.</p>
    pub fn visual_axis_sort_option(&self) -> ::std::option::Option<&crate::types::VisualAxisSortOption> {
        self.visual_axis_sort_option.as_ref()
    }
    /// <p>Determines if hidden fields are exported with a dashboard.</p>
    pub fn export_with_hidden_fields_option(&self) -> ::std::option::Option<&crate::types::ExportWithHiddenFieldsOption> {
        self.export_with_hidden_fields_option.as_ref()
    }
    /// <p>The drill-down options of data points in a dashboard.</p>
    pub fn data_point_drill_up_down_option(&self) -> ::std::option::Option<&crate::types::DataPointDrillUpDownOption> {
        self.data_point_drill_up_down_option.as_ref()
    }
    /// <p>The data point menu label options of a dashboard.</p>
    pub fn data_point_menu_label_option(&self) -> ::std::option::Option<&crate::types::DataPointMenuLabelOption> {
        self.data_point_menu_label_option.as_ref()
    }
    /// <p>The data point tool tip options of a dashboard.</p>
    pub fn data_point_tooltip_option(&self) -> ::std::option::Option<&crate::types::DataPointTooltipOption> {
        self.data_point_tooltip_option.as_ref()
    }
}
impl DashboardPublishOptions {
    /// Creates a new builder-style object to manufacture [`DashboardPublishOptions`](crate::types::DashboardPublishOptions).
    pub fn builder() -> crate::types::builders::DashboardPublishOptionsBuilder {
        crate::types::builders::DashboardPublishOptionsBuilder::default()
    }
}

/// A builder for [`DashboardPublishOptions`](crate::types::DashboardPublishOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DashboardPublishOptionsBuilder {
    pub(crate) ad_hoc_filtering_option: ::std::option::Option<crate::types::AdHocFilteringOption>,
    pub(crate) export_to_csv_option: ::std::option::Option<crate::types::ExportToCsvOption>,
    pub(crate) sheet_controls_option: ::std::option::Option<crate::types::SheetControlsOption>,
    pub(crate) visual_publish_options: ::std::option::Option<crate::types::DashboardVisualPublishOptions>,
    pub(crate) sheet_layout_element_maximization_option: ::std::option::Option<crate::types::SheetLayoutElementMaximizationOption>,
    pub(crate) visual_menu_option: ::std::option::Option<crate::types::VisualMenuOption>,
    pub(crate) visual_axis_sort_option: ::std::option::Option<crate::types::VisualAxisSortOption>,
    pub(crate) export_with_hidden_fields_option: ::std::option::Option<crate::types::ExportWithHiddenFieldsOption>,
    pub(crate) data_point_drill_up_down_option: ::std::option::Option<crate::types::DataPointDrillUpDownOption>,
    pub(crate) data_point_menu_label_option: ::std::option::Option<crate::types::DataPointMenuLabelOption>,
    pub(crate) data_point_tooltip_option: ::std::option::Option<crate::types::DataPointTooltipOption>,
}
impl DashboardPublishOptionsBuilder {
    /// <p>Ad hoc (one-time) filtering option.</p>
    pub fn ad_hoc_filtering_option(mut self, input: crate::types::AdHocFilteringOption) -> Self {
        self.ad_hoc_filtering_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>Ad hoc (one-time) filtering option.</p>
    pub fn set_ad_hoc_filtering_option(mut self, input: ::std::option::Option<crate::types::AdHocFilteringOption>) -> Self {
        self.ad_hoc_filtering_option = input;
        self
    }
    /// <p>Ad hoc (one-time) filtering option.</p>
    pub fn get_ad_hoc_filtering_option(&self) -> &::std::option::Option<crate::types::AdHocFilteringOption> {
        &self.ad_hoc_filtering_option
    }
    /// <p>Export to .csv option.</p>
    pub fn export_to_csv_option(mut self, input: crate::types::ExportToCsvOption) -> Self {
        self.export_to_csv_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>Export to .csv option.</p>
    pub fn set_export_to_csv_option(mut self, input: ::std::option::Option<crate::types::ExportToCsvOption>) -> Self {
        self.export_to_csv_option = input;
        self
    }
    /// <p>Export to .csv option.</p>
    pub fn get_export_to_csv_option(&self) -> &::std::option::Option<crate::types::ExportToCsvOption> {
        &self.export_to_csv_option
    }
    /// <p>Sheet controls option.</p>
    pub fn sheet_controls_option(mut self, input: crate::types::SheetControlsOption) -> Self {
        self.sheet_controls_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sheet controls option.</p>
    pub fn set_sheet_controls_option(mut self, input: ::std::option::Option<crate::types::SheetControlsOption>) -> Self {
        self.sheet_controls_option = input;
        self
    }
    /// <p>Sheet controls option.</p>
    pub fn get_sheet_controls_option(&self) -> &::std::option::Option<crate::types::SheetControlsOption> {
        &self.sheet_controls_option
    }
    /// <p>The visual publish options of a visual in a dashboard.</p>
    #[deprecated(
        note = "VisualPublishOptions property will reach its end of standard support in a future release. To perform this action, use ExportWithHiddenFields."
    )]
    pub fn visual_publish_options(mut self, input: crate::types::DashboardVisualPublishOptions) -> Self {
        self.visual_publish_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>The visual publish options of a visual in a dashboard.</p>
    #[deprecated(
        note = "VisualPublishOptions property will reach its end of standard support in a future release. To perform this action, use ExportWithHiddenFields."
    )]
    pub fn set_visual_publish_options(mut self, input: ::std::option::Option<crate::types::DashboardVisualPublishOptions>) -> Self {
        self.visual_publish_options = input;
        self
    }
    /// <p>The visual publish options of a visual in a dashboard.</p>
    #[deprecated(
        note = "VisualPublishOptions property will reach its end of standard support in a future release. To perform this action, use ExportWithHiddenFields."
    )]
    pub fn get_visual_publish_options(&self) -> &::std::option::Option<crate::types::DashboardVisualPublishOptions> {
        &self.visual_publish_options
    }
    /// <p>The sheet layout maximization options of a dashbaord.</p>
    pub fn sheet_layout_element_maximization_option(mut self, input: crate::types::SheetLayoutElementMaximizationOption) -> Self {
        self.sheet_layout_element_maximization_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sheet layout maximization options of a dashbaord.</p>
    pub fn set_sheet_layout_element_maximization_option(
        mut self,
        input: ::std::option::Option<crate::types::SheetLayoutElementMaximizationOption>,
    ) -> Self {
        self.sheet_layout_element_maximization_option = input;
        self
    }
    /// <p>The sheet layout maximization options of a dashbaord.</p>
    pub fn get_sheet_layout_element_maximization_option(&self) -> &::std::option::Option<crate::types::SheetLayoutElementMaximizationOption> {
        &self.sheet_layout_element_maximization_option
    }
    /// <p>The menu options of a visual in a dashboard.</p>
    pub fn visual_menu_option(mut self, input: crate::types::VisualMenuOption) -> Self {
        self.visual_menu_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The menu options of a visual in a dashboard.</p>
    pub fn set_visual_menu_option(mut self, input: ::std::option::Option<crate::types::VisualMenuOption>) -> Self {
        self.visual_menu_option = input;
        self
    }
    /// <p>The menu options of a visual in a dashboard.</p>
    pub fn get_visual_menu_option(&self) -> &::std::option::Option<crate::types::VisualMenuOption> {
        &self.visual_menu_option
    }
    /// <p>The axis sort options of a dashboard.</p>
    pub fn visual_axis_sort_option(mut self, input: crate::types::VisualAxisSortOption) -> Self {
        self.visual_axis_sort_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The axis sort options of a dashboard.</p>
    pub fn set_visual_axis_sort_option(mut self, input: ::std::option::Option<crate::types::VisualAxisSortOption>) -> Self {
        self.visual_axis_sort_option = input;
        self
    }
    /// <p>The axis sort options of a dashboard.</p>
    pub fn get_visual_axis_sort_option(&self) -> &::std::option::Option<crate::types::VisualAxisSortOption> {
        &self.visual_axis_sort_option
    }
    /// <p>Determines if hidden fields are exported with a dashboard.</p>
    pub fn export_with_hidden_fields_option(mut self, input: crate::types::ExportWithHiddenFieldsOption) -> Self {
        self.export_with_hidden_fields_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines if hidden fields are exported with a dashboard.</p>
    pub fn set_export_with_hidden_fields_option(mut self, input: ::std::option::Option<crate::types::ExportWithHiddenFieldsOption>) -> Self {
        self.export_with_hidden_fields_option = input;
        self
    }
    /// <p>Determines if hidden fields are exported with a dashboard.</p>
    pub fn get_export_with_hidden_fields_option(&self) -> &::std::option::Option<crate::types::ExportWithHiddenFieldsOption> {
        &self.export_with_hidden_fields_option
    }
    /// <p>The drill-down options of data points in a dashboard.</p>
    pub fn data_point_drill_up_down_option(mut self, input: crate::types::DataPointDrillUpDownOption) -> Self {
        self.data_point_drill_up_down_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The drill-down options of data points in a dashboard.</p>
    pub fn set_data_point_drill_up_down_option(mut self, input: ::std::option::Option<crate::types::DataPointDrillUpDownOption>) -> Self {
        self.data_point_drill_up_down_option = input;
        self
    }
    /// <p>The drill-down options of data points in a dashboard.</p>
    pub fn get_data_point_drill_up_down_option(&self) -> &::std::option::Option<crate::types::DataPointDrillUpDownOption> {
        &self.data_point_drill_up_down_option
    }
    /// <p>The data point menu label options of a dashboard.</p>
    pub fn data_point_menu_label_option(mut self, input: crate::types::DataPointMenuLabelOption) -> Self {
        self.data_point_menu_label_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data point menu label options of a dashboard.</p>
    pub fn set_data_point_menu_label_option(mut self, input: ::std::option::Option<crate::types::DataPointMenuLabelOption>) -> Self {
        self.data_point_menu_label_option = input;
        self
    }
    /// <p>The data point menu label options of a dashboard.</p>
    pub fn get_data_point_menu_label_option(&self) -> &::std::option::Option<crate::types::DataPointMenuLabelOption> {
        &self.data_point_menu_label_option
    }
    /// <p>The data point tool tip options of a dashboard.</p>
    pub fn data_point_tooltip_option(mut self, input: crate::types::DataPointTooltipOption) -> Self {
        self.data_point_tooltip_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data point tool tip options of a dashboard.</p>
    pub fn set_data_point_tooltip_option(mut self, input: ::std::option::Option<crate::types::DataPointTooltipOption>) -> Self {
        self.data_point_tooltip_option = input;
        self
    }
    /// <p>The data point tool tip options of a dashboard.</p>
    pub fn get_data_point_tooltip_option(&self) -> &::std::option::Option<crate::types::DataPointTooltipOption> {
        &self.data_point_tooltip_option
    }
    /// Consumes the builder and constructs a [`DashboardPublishOptions`](crate::types::DashboardPublishOptions).
    pub fn build(self) -> crate::types::DashboardPublishOptions {
        crate::types::DashboardPublishOptions {
            ad_hoc_filtering_option: self.ad_hoc_filtering_option,
            export_to_csv_option: self.export_to_csv_option,
            sheet_controls_option: self.sheet_controls_option,
            visual_publish_options: self.visual_publish_options,
            sheet_layout_element_maximization_option: self.sheet_layout_element_maximization_option,
            visual_menu_option: self.visual_menu_option,
            visual_axis_sort_option: self.visual_axis_sort_option,
            export_with_hidden_fields_option: self.export_with_hidden_fields_option,
            data_point_drill_up_down_option: self.data_point_drill_up_down_option,
            data_point_menu_label_option: self.data_point_menu_label_option,
            data_point_tooltip_option: self.data_point_tooltip_option,
        }
    }
}
