// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures the properties of a chart's axes that are used by small multiples panels.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SmallMultiplesAxisProperties {
    /// <p>Determines whether scale of the axes are shared or independent. The default value is <code>SHARED</code>.</p>
    pub scale: ::std::option::Option<crate::types::SmallMultiplesAxisScale>,
    /// <p>Defines the placement of the axis. By default, axes are rendered <code>OUTSIDE</code> of the panels. Axes with <code>INDEPENDENT</code> scale are rendered <code>INSIDE</code> the panels.</p>
    pub placement: ::std::option::Option<crate::types::SmallMultiplesAxisPlacement>,
}
impl SmallMultiplesAxisProperties {
    /// <p>Determines whether scale of the axes are shared or independent. The default value is <code>SHARED</code>.</p>
    pub fn scale(&self) -> ::std::option::Option<&crate::types::SmallMultiplesAxisScale> {
        self.scale.as_ref()
    }
    /// <p>Defines the placement of the axis. By default, axes are rendered <code>OUTSIDE</code> of the panels. Axes with <code>INDEPENDENT</code> scale are rendered <code>INSIDE</code> the panels.</p>
    pub fn placement(&self) -> ::std::option::Option<&crate::types::SmallMultiplesAxisPlacement> {
        self.placement.as_ref()
    }
}
impl SmallMultiplesAxisProperties {
    /// Creates a new builder-style object to manufacture [`SmallMultiplesAxisProperties`](crate::types::SmallMultiplesAxisProperties).
    pub fn builder() -> crate::types::builders::SmallMultiplesAxisPropertiesBuilder {
        crate::types::builders::SmallMultiplesAxisPropertiesBuilder::default()
    }
}

/// A builder for [`SmallMultiplesAxisProperties`](crate::types::SmallMultiplesAxisProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SmallMultiplesAxisPropertiesBuilder {
    pub(crate) scale: ::std::option::Option<crate::types::SmallMultiplesAxisScale>,
    pub(crate) placement: ::std::option::Option<crate::types::SmallMultiplesAxisPlacement>,
}
impl SmallMultiplesAxisPropertiesBuilder {
    /// <p>Determines whether scale of the axes are shared or independent. The default value is <code>SHARED</code>.</p>
    pub fn scale(mut self, input: crate::types::SmallMultiplesAxisScale) -> Self {
        self.scale = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether scale of the axes are shared or independent. The default value is <code>SHARED</code>.</p>
    pub fn set_scale(mut self, input: ::std::option::Option<crate::types::SmallMultiplesAxisScale>) -> Self {
        self.scale = input;
        self
    }
    /// <p>Determines whether scale of the axes are shared or independent. The default value is <code>SHARED</code>.</p>
    pub fn get_scale(&self) -> &::std::option::Option<crate::types::SmallMultiplesAxisScale> {
        &self.scale
    }
    /// <p>Defines the placement of the axis. By default, axes are rendered <code>OUTSIDE</code> of the panels. Axes with <code>INDEPENDENT</code> scale are rendered <code>INSIDE</code> the panels.</p>
    pub fn placement(mut self, input: crate::types::SmallMultiplesAxisPlacement) -> Self {
        self.placement = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the placement of the axis. By default, axes are rendered <code>OUTSIDE</code> of the panels. Axes with <code>INDEPENDENT</code> scale are rendered <code>INSIDE</code> the panels.</p>
    pub fn set_placement(mut self, input: ::std::option::Option<crate::types::SmallMultiplesAxisPlacement>) -> Self {
        self.placement = input;
        self
    }
    /// <p>Defines the placement of the axis. By default, axes are rendered <code>OUTSIDE</code> of the panels. Axes with <code>INDEPENDENT</code> scale are rendered <code>INSIDE</code> the panels.</p>
    pub fn get_placement(&self) -> &::std::option::Option<crate::types::SmallMultiplesAxisPlacement> {
        &self.placement
    }
    /// Consumes the builder and constructs a [`SmallMultiplesAxisProperties`](crate::types::SmallMultiplesAxisProperties).
    pub fn build(self) -> crate::types::SmallMultiplesAxisProperties {
        crate::types::SmallMultiplesAxisProperties {
            scale: self.scale,
            placement: self.placement,
        }
    }
}
