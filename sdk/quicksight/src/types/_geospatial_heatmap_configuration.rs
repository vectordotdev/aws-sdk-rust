// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The heatmap configuration of the geospatial point style.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GeospatialHeatmapConfiguration {
    /// <p>The color scale specification for the heatmap point style.</p>
    pub heatmap_color: ::std::option::Option<crate::types::GeospatialHeatmapColorScale>,
}
impl GeospatialHeatmapConfiguration {
    /// <p>The color scale specification for the heatmap point style.</p>
    pub fn heatmap_color(&self) -> ::std::option::Option<&crate::types::GeospatialHeatmapColorScale> {
        self.heatmap_color.as_ref()
    }
}
impl GeospatialHeatmapConfiguration {
    /// Creates a new builder-style object to manufacture [`GeospatialHeatmapConfiguration`](crate::types::GeospatialHeatmapConfiguration).
    pub fn builder() -> crate::types::builders::GeospatialHeatmapConfigurationBuilder {
        crate::types::builders::GeospatialHeatmapConfigurationBuilder::default()
    }
}

/// A builder for [`GeospatialHeatmapConfiguration`](crate::types::GeospatialHeatmapConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GeospatialHeatmapConfigurationBuilder {
    pub(crate) heatmap_color: ::std::option::Option<crate::types::GeospatialHeatmapColorScale>,
}
impl GeospatialHeatmapConfigurationBuilder {
    /// <p>The color scale specification for the heatmap point style.</p>
    pub fn heatmap_color(mut self, input: crate::types::GeospatialHeatmapColorScale) -> Self {
        self.heatmap_color = ::std::option::Option::Some(input);
        self
    }
    /// <p>The color scale specification for the heatmap point style.</p>
    pub fn set_heatmap_color(mut self, input: ::std::option::Option<crate::types::GeospatialHeatmapColorScale>) -> Self {
        self.heatmap_color = input;
        self
    }
    /// <p>The color scale specification for the heatmap point style.</p>
    pub fn get_heatmap_color(&self) -> &::std::option::Option<crate::types::GeospatialHeatmapColorScale> {
        &self.heatmap_color
    }
    /// Consumes the builder and constructs a [`GeospatialHeatmapConfiguration`](crate::types::GeospatialHeatmapConfiguration).
    pub fn build(self) -> crate::types::GeospatialHeatmapConfiguration {
        crate::types::GeospatialHeatmapConfiguration {
            heatmap_color: self.heatmap_color,
        }
    }
}
