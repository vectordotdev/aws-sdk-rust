// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The override parameters for a single dashboard that is being imported.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetBundleImportJobDashboardOverrideParameters {
    /// <p>The ID of the dashboard that you want to apply overrides to.</p>
    pub dashboard_id: ::std::option::Option<::std::string::String>,
    /// <p>A new name for the dashboard.</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl AssetBundleImportJobDashboardOverrideParameters {
    /// <p>The ID of the dashboard that you want to apply overrides to.</p>
    pub fn dashboard_id(&self) -> ::std::option::Option<&str> {
        self.dashboard_id.as_deref()
    }
    /// <p>A new name for the dashboard.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl AssetBundleImportJobDashboardOverrideParameters {
    /// Creates a new builder-style object to manufacture [`AssetBundleImportJobDashboardOverrideParameters`](crate::types::AssetBundleImportJobDashboardOverrideParameters).
    pub fn builder() -> crate::types::builders::AssetBundleImportJobDashboardOverrideParametersBuilder {
        crate::types::builders::AssetBundleImportJobDashboardOverrideParametersBuilder::default()
    }
}

/// A builder for [`AssetBundleImportJobDashboardOverrideParameters`](crate::types::AssetBundleImportJobDashboardOverrideParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetBundleImportJobDashboardOverrideParametersBuilder {
    pub(crate) dashboard_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl AssetBundleImportJobDashboardOverrideParametersBuilder {
    /// <p>The ID of the dashboard that you want to apply overrides to.</p>
    pub fn dashboard_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the dashboard that you want to apply overrides to.</p>
    pub fn set_dashboard_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_id = input;
        self
    }
    /// <p>The ID of the dashboard that you want to apply overrides to.</p>
    pub fn get_dashboard_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_id
    }
    /// <p>A new name for the dashboard.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new name for the dashboard.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A new name for the dashboard.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`AssetBundleImportJobDashboardOverrideParameters`](crate::types::AssetBundleImportJobDashboardOverrideParameters).
    pub fn build(self) -> crate::types::AssetBundleImportJobDashboardOverrideParameters {
        crate::types::AssetBundleImportJobDashboardOverrideParameters {
            dashboard_id: self.dashboard_id,
            name: self.name,
        }
    }
}
