// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that represents a category filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TopicCategoryFilter {
    /// <p>The category filter function. Valid values for this structure are <code>EXACT</code> and <code>CONTAINS</code>.</p>
    pub category_filter_function: ::std::option::Option<crate::types::CategoryFilterFunction>,
    /// <p>The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.</p>
    pub category_filter_type: ::std::option::Option<crate::types::CategoryFilterType>,
    /// <p>The constant used in a category filter.</p>
    pub constant: ::std::option::Option<crate::types::TopicCategoryFilterConstant>,
    /// <p>A Boolean value that indicates if the filter is inverse.</p>
    pub inverse: bool,
}
impl TopicCategoryFilter {
    /// <p>The category filter function. Valid values for this structure are <code>EXACT</code> and <code>CONTAINS</code>.</p>
    pub fn category_filter_function(&self) -> ::std::option::Option<&crate::types::CategoryFilterFunction> {
        self.category_filter_function.as_ref()
    }
    /// <p>The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.</p>
    pub fn category_filter_type(&self) -> ::std::option::Option<&crate::types::CategoryFilterType> {
        self.category_filter_type.as_ref()
    }
    /// <p>The constant used in a category filter.</p>
    pub fn constant(&self) -> ::std::option::Option<&crate::types::TopicCategoryFilterConstant> {
        self.constant.as_ref()
    }
    /// <p>A Boolean value that indicates if the filter is inverse.</p>
    pub fn inverse(&self) -> bool {
        self.inverse
    }
}
impl ::std::fmt::Debug for TopicCategoryFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicCategoryFilter");
        formatter.field("category_filter_function", &self.category_filter_function);
        formatter.field("category_filter_type", &self.category_filter_type);
        formatter.field("constant", &"*** Sensitive Data Redacted ***");
        formatter.field("inverse", &self.inverse);
        formatter.finish()
    }
}
impl TopicCategoryFilter {
    /// Creates a new builder-style object to manufacture [`TopicCategoryFilter`](crate::types::TopicCategoryFilter).
    pub fn builder() -> crate::types::builders::TopicCategoryFilterBuilder {
        crate::types::builders::TopicCategoryFilterBuilder::default()
    }
}

/// A builder for [`TopicCategoryFilter`](crate::types::TopicCategoryFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TopicCategoryFilterBuilder {
    pub(crate) category_filter_function: ::std::option::Option<crate::types::CategoryFilterFunction>,
    pub(crate) category_filter_type: ::std::option::Option<crate::types::CategoryFilterType>,
    pub(crate) constant: ::std::option::Option<crate::types::TopicCategoryFilterConstant>,
    pub(crate) inverse: ::std::option::Option<bool>,
}
impl TopicCategoryFilterBuilder {
    /// <p>The category filter function. Valid values for this structure are <code>EXACT</code> and <code>CONTAINS</code>.</p>
    pub fn category_filter_function(mut self, input: crate::types::CategoryFilterFunction) -> Self {
        self.category_filter_function = ::std::option::Option::Some(input);
        self
    }
    /// <p>The category filter function. Valid values for this structure are <code>EXACT</code> and <code>CONTAINS</code>.</p>
    pub fn set_category_filter_function(mut self, input: ::std::option::Option<crate::types::CategoryFilterFunction>) -> Self {
        self.category_filter_function = input;
        self
    }
    /// <p>The category filter function. Valid values for this structure are <code>EXACT</code> and <code>CONTAINS</code>.</p>
    pub fn get_category_filter_function(&self) -> &::std::option::Option<crate::types::CategoryFilterFunction> {
        &self.category_filter_function
    }
    /// <p>The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.</p>
    pub fn category_filter_type(mut self, input: crate::types::CategoryFilterType) -> Self {
        self.category_filter_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.</p>
    pub fn set_category_filter_type(mut self, input: ::std::option::Option<crate::types::CategoryFilterType>) -> Self {
        self.category_filter_type = input;
        self
    }
    /// <p>The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter.</p>
    pub fn get_category_filter_type(&self) -> &::std::option::Option<crate::types::CategoryFilterType> {
        &self.category_filter_type
    }
    /// <p>The constant used in a category filter.</p>
    pub fn constant(mut self, input: crate::types::TopicCategoryFilterConstant) -> Self {
        self.constant = ::std::option::Option::Some(input);
        self
    }
    /// <p>The constant used in a category filter.</p>
    pub fn set_constant(mut self, input: ::std::option::Option<crate::types::TopicCategoryFilterConstant>) -> Self {
        self.constant = input;
        self
    }
    /// <p>The constant used in a category filter.</p>
    pub fn get_constant(&self) -> &::std::option::Option<crate::types::TopicCategoryFilterConstant> {
        &self.constant
    }
    /// <p>A Boolean value that indicates if the filter is inverse.</p>
    pub fn inverse(mut self, input: bool) -> Self {
        self.inverse = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value that indicates if the filter is inverse.</p>
    pub fn set_inverse(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inverse = input;
        self
    }
    /// <p>A Boolean value that indicates if the filter is inverse.</p>
    pub fn get_inverse(&self) -> &::std::option::Option<bool> {
        &self.inverse
    }
    /// Consumes the builder and constructs a [`TopicCategoryFilter`](crate::types::TopicCategoryFilter).
    pub fn build(self) -> crate::types::TopicCategoryFilter {
        crate::types::TopicCategoryFilter {
            category_filter_function: self.category_filter_function,
            category_filter_type: self.category_filter_type,
            constant: self.constant,
            inverse: self.inverse.unwrap_or_default(),
        }
    }
}
impl ::std::fmt::Debug for TopicCategoryFilterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicCategoryFilterBuilder");
        formatter.field("category_filter_function", &self.category_filter_function);
        formatter.field("category_filter_type", &self.category_filter_type);
        formatter.field("constant", &"*** Sensitive Data Redacted ***");
        formatter.field("inverse", &self.inverse);
        formatter.finish()
    }
}
