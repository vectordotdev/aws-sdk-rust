// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A dataset parameter that is mapped to an analysis parameter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MappedDataSetParameter {
    /// <p>A unique name that identifies a dataset within the analysis or dashboard.</p>
    pub data_set_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the dataset parameter.</p>
    pub data_set_parameter_name: ::std::option::Option<::std::string::String>,
}
impl MappedDataSetParameter {
    /// <p>A unique name that identifies a dataset within the analysis or dashboard.</p>
    pub fn data_set_identifier(&self) -> ::std::option::Option<&str> {
        self.data_set_identifier.as_deref()
    }
    /// <p>The name of the dataset parameter.</p>
    pub fn data_set_parameter_name(&self) -> ::std::option::Option<&str> {
        self.data_set_parameter_name.as_deref()
    }
}
impl MappedDataSetParameter {
    /// Creates a new builder-style object to manufacture [`MappedDataSetParameter`](crate::types::MappedDataSetParameter).
    pub fn builder() -> crate::types::builders::MappedDataSetParameterBuilder {
        crate::types::builders::MappedDataSetParameterBuilder::default()
    }
}

/// A builder for [`MappedDataSetParameter`](crate::types::MappedDataSetParameter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MappedDataSetParameterBuilder {
    pub(crate) data_set_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) data_set_parameter_name: ::std::option::Option<::std::string::String>,
}
impl MappedDataSetParameterBuilder {
    /// <p>A unique name that identifies a dataset within the analysis or dashboard.</p>
    pub fn data_set_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_set_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique name that identifies a dataset within the analysis or dashboard.</p>
    pub fn set_data_set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_set_identifier = input;
        self
    }
    /// <p>A unique name that identifies a dataset within the analysis or dashboard.</p>
    pub fn get_data_set_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_set_identifier
    }
    /// <p>The name of the dataset parameter.</p>
    pub fn data_set_parameter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_set_parameter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataset parameter.</p>
    pub fn set_data_set_parameter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_set_parameter_name = input;
        self
    }
    /// <p>The name of the dataset parameter.</p>
    pub fn get_data_set_parameter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_set_parameter_name
    }
    /// Consumes the builder and constructs a [`MappedDataSetParameter`](crate::types::MappedDataSetParameter).
    pub fn build(self) -> crate::types::MappedDataSetParameter {
        crate::types::MappedDataSetParameter {
            data_set_identifier: self.data_set_identifier,
            data_set_parameter_name: self.data_set_parameter_name,
        }
    }
}
