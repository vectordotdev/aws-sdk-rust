// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The source of the asset bundle zip file that contains the data that you want to import. The file must be in <code>QUICKSIGHT_JSON</code> format.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AssetBundleImportSource {
    /// <p>The bytes of the base64 encoded asset bundle import zip file. This file can't exceed 20 MB.</p>
    /// <p>If you are calling the API operations from the Amazon Web Services SDK for Java, JavaScript, Python, or PHP, the SDK encodes base64 automatically to allow the direct setting of the zip file's bytes. If you are using an SDK for a different language or receiving related errors, try to base64 encode your data.</p>
    pub body: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>The Amazon S3 URI for an asset bundle import file that exists in an Amazon S3 bucket that the caller has read access to. The file must be a zip format file and can't exceed 20 MB.</p>
    pub s3_uri: ::std::option::Option<::std::string::String>,
}
impl AssetBundleImportSource {
    /// <p>The bytes of the base64 encoded asset bundle import zip file. This file can't exceed 20 MB.</p>
    /// <p>If you are calling the API operations from the Amazon Web Services SDK for Java, JavaScript, Python, or PHP, the SDK encodes base64 automatically to allow the direct setting of the zip file's bytes. If you are using an SDK for a different language or receiving related errors, try to base64 encode your data.</p>
    pub fn body(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.body.as_ref()
    }
    /// <p>The Amazon S3 URI for an asset bundle import file that exists in an Amazon S3 bucket that the caller has read access to. The file must be a zip format file and can't exceed 20 MB.</p>
    pub fn s3_uri(&self) -> ::std::option::Option<&str> {
        self.s3_uri.as_deref()
    }
}
impl ::std::fmt::Debug for AssetBundleImportSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssetBundleImportSource");
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.field("s3_uri", &self.s3_uri);
        formatter.finish()
    }
}
impl AssetBundleImportSource {
    /// Creates a new builder-style object to manufacture [`AssetBundleImportSource`](crate::types::AssetBundleImportSource).
    pub fn builder() -> crate::types::builders::AssetBundleImportSourceBuilder {
        crate::types::builders::AssetBundleImportSourceBuilder::default()
    }
}

/// A builder for [`AssetBundleImportSource`](crate::types::AssetBundleImportSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AssetBundleImportSourceBuilder {
    pub(crate) body: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) s3_uri: ::std::option::Option<::std::string::String>,
}
impl AssetBundleImportSourceBuilder {
    /// <p>The bytes of the base64 encoded asset bundle import zip file. This file can't exceed 20 MB.</p>
    /// <p>If you are calling the API operations from the Amazon Web Services SDK for Java, JavaScript, Python, or PHP, the SDK encodes base64 automatically to allow the direct setting of the zip file's bytes. If you are using an SDK for a different language or receiving related errors, try to base64 encode your data.</p>
    pub fn body(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.body = ::std::option::Option::Some(input);
        self
    }
    /// <p>The bytes of the base64 encoded asset bundle import zip file. This file can't exceed 20 MB.</p>
    /// <p>If you are calling the API operations from the Amazon Web Services SDK for Java, JavaScript, Python, or PHP, the SDK encodes base64 automatically to allow the direct setting of the zip file's bytes. If you are using an SDK for a different language or receiving related errors, try to base64 encode your data.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.body = input;
        self
    }
    /// <p>The bytes of the base64 encoded asset bundle import zip file. This file can't exceed 20 MB.</p>
    /// <p>If you are calling the API operations from the Amazon Web Services SDK for Java, JavaScript, Python, or PHP, the SDK encodes base64 automatically to allow the direct setting of the zip file's bytes. If you are using an SDK for a different language or receiving related errors, try to base64 encode your data.</p>
    pub fn get_body(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.body
    }
    /// <p>The Amazon S3 URI for an asset bundle import file that exists in an Amazon S3 bucket that the caller has read access to. The file must be a zip format file and can't exceed 20 MB.</p>
    pub fn s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 URI for an asset bundle import file that exists in an Amazon S3 bucket that the caller has read access to. The file must be a zip format file and can't exceed 20 MB.</p>
    pub fn set_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// <p>The Amazon S3 URI for an asset bundle import file that exists in an Amazon S3 bucket that the caller has read access to. The file must be a zip format file and can't exceed 20 MB.</p>
    pub fn get_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_uri
    }
    /// Consumes the builder and constructs a [`AssetBundleImportSource`](crate::types::AssetBundleImportSource).
    pub fn build(self) -> crate::types::AssetBundleImportSource {
        crate::types::AssetBundleImportSource {
            body: self.body,
            s3_uri: self.s3_uri,
        }
    }
}
impl ::std::fmt::Debug for AssetBundleImportSourceBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AssetBundleImportSourceBuilder");
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.field("s3_uri", &self.s3_uri);
        formatter.finish()
    }
}
