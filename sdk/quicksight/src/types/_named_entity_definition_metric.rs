// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that represents a metric.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NamedEntityDefinitionMetric {
    /// <p>The aggregation of a named entity. Valid values for this structure are <code>SUM</code>, <code>MIN</code>, <code>MAX</code>, <code>COUNT</code>, <code>AVERAGE</code>, <code>DISTINCT_COUNT</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, <code>VARP</code>, <code>PERCENTILE</code>, <code>MEDIAN</code>, and <code>CUSTOM</code>.</p>
    pub aggregation: ::std::option::Option<crate::types::NamedEntityAggType>,
    /// <p>The additional parameters for an aggregation function.</p>
    pub aggregation_function_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl NamedEntityDefinitionMetric {
    /// <p>The aggregation of a named entity. Valid values for this structure are <code>SUM</code>, <code>MIN</code>, <code>MAX</code>, <code>COUNT</code>, <code>AVERAGE</code>, <code>DISTINCT_COUNT</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, <code>VARP</code>, <code>PERCENTILE</code>, <code>MEDIAN</code>, and <code>CUSTOM</code>.</p>
    pub fn aggregation(&self) -> ::std::option::Option<&crate::types::NamedEntityAggType> {
        self.aggregation.as_ref()
    }
    /// <p>The additional parameters for an aggregation function.</p>
    pub fn aggregation_function_parameters(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.aggregation_function_parameters.as_ref()
    }
}
impl NamedEntityDefinitionMetric {
    /// Creates a new builder-style object to manufacture [`NamedEntityDefinitionMetric`](crate::types::NamedEntityDefinitionMetric).
    pub fn builder() -> crate::types::builders::NamedEntityDefinitionMetricBuilder {
        crate::types::builders::NamedEntityDefinitionMetricBuilder::default()
    }
}

/// A builder for [`NamedEntityDefinitionMetric`](crate::types::NamedEntityDefinitionMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NamedEntityDefinitionMetricBuilder {
    pub(crate) aggregation: ::std::option::Option<crate::types::NamedEntityAggType>,
    pub(crate) aggregation_function_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl NamedEntityDefinitionMetricBuilder {
    /// <p>The aggregation of a named entity. Valid values for this structure are <code>SUM</code>, <code>MIN</code>, <code>MAX</code>, <code>COUNT</code>, <code>AVERAGE</code>, <code>DISTINCT_COUNT</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, <code>VARP</code>, <code>PERCENTILE</code>, <code>MEDIAN</code>, and <code>CUSTOM</code>.</p>
    pub fn aggregation(mut self, input: crate::types::NamedEntityAggType) -> Self {
        self.aggregation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregation of a named entity. Valid values for this structure are <code>SUM</code>, <code>MIN</code>, <code>MAX</code>, <code>COUNT</code>, <code>AVERAGE</code>, <code>DISTINCT_COUNT</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, <code>VARP</code>, <code>PERCENTILE</code>, <code>MEDIAN</code>, and <code>CUSTOM</code>.</p>
    pub fn set_aggregation(mut self, input: ::std::option::Option<crate::types::NamedEntityAggType>) -> Self {
        self.aggregation = input;
        self
    }
    /// <p>The aggregation of a named entity. Valid values for this structure are <code>SUM</code>, <code>MIN</code>, <code>MAX</code>, <code>COUNT</code>, <code>AVERAGE</code>, <code>DISTINCT_COUNT</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, <code>VARP</code>, <code>PERCENTILE</code>, <code>MEDIAN</code>, and <code>CUSTOM</code>.</p>
    pub fn get_aggregation(&self) -> &::std::option::Option<crate::types::NamedEntityAggType> {
        &self.aggregation
    }
    /// Adds a key-value pair to `aggregation_function_parameters`.
    ///
    /// To override the contents of this collection use [`set_aggregation_function_parameters`](Self::set_aggregation_function_parameters).
    ///
    /// <p>The additional parameters for an aggregation function.</p>
    pub fn aggregation_function_parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.aggregation_function_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.aggregation_function_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The additional parameters for an aggregation function.</p>
    pub fn set_aggregation_function_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.aggregation_function_parameters = input;
        self
    }
    /// <p>The additional parameters for an aggregation function.</p>
    pub fn get_aggregation_function_parameters(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.aggregation_function_parameters
    }
    /// Consumes the builder and constructs a [`NamedEntityDefinitionMetric`](crate::types::NamedEntityDefinitionMetric).
    pub fn build(self) -> crate::types::NamedEntityDefinitionMetric {
        crate::types::NamedEntityDefinitionMetric {
            aggregation: self.aggregation,
            aggregation_function_parameters: self.aggregation_function_parameters,
        }
    }
}
