// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that represents a singular filter constant, used in filters to specify a single value to match against.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TopicSingularFilterConstant {
    /// <p>The type of the singular filter constant. Valid values for this structure are <code>SINGULAR</code>.</p>
    pub constant_type: ::std::option::Option<crate::types::ConstantType>,
    /// <p>The value of the singular filter constant.</p>
    pub singular_constant: ::std::option::Option<::std::string::String>,
}
impl TopicSingularFilterConstant {
    /// <p>The type of the singular filter constant. Valid values for this structure are <code>SINGULAR</code>.</p>
    pub fn constant_type(&self) -> ::std::option::Option<&crate::types::ConstantType> {
        self.constant_type.as_ref()
    }
    /// <p>The value of the singular filter constant.</p>
    pub fn singular_constant(&self) -> ::std::option::Option<&str> {
        self.singular_constant.as_deref()
    }
}
impl ::std::fmt::Debug for TopicSingularFilterConstant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicSingularFilterConstant");
        formatter.field("constant_type", &"*** Sensitive Data Redacted ***");
        formatter.field("singular_constant", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TopicSingularFilterConstant {
    /// Creates a new builder-style object to manufacture [`TopicSingularFilterConstant`](crate::types::TopicSingularFilterConstant).
    pub fn builder() -> crate::types::builders::TopicSingularFilterConstantBuilder {
        crate::types::builders::TopicSingularFilterConstantBuilder::default()
    }
}

/// A builder for [`TopicSingularFilterConstant`](crate::types::TopicSingularFilterConstant).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TopicSingularFilterConstantBuilder {
    pub(crate) constant_type: ::std::option::Option<crate::types::ConstantType>,
    pub(crate) singular_constant: ::std::option::Option<::std::string::String>,
}
impl TopicSingularFilterConstantBuilder {
    /// <p>The type of the singular filter constant. Valid values for this structure are <code>SINGULAR</code>.</p>
    pub fn constant_type(mut self, input: crate::types::ConstantType) -> Self {
        self.constant_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the singular filter constant. Valid values for this structure are <code>SINGULAR</code>.</p>
    pub fn set_constant_type(mut self, input: ::std::option::Option<crate::types::ConstantType>) -> Self {
        self.constant_type = input;
        self
    }
    /// <p>The type of the singular filter constant. Valid values for this structure are <code>SINGULAR</code>.</p>
    pub fn get_constant_type(&self) -> &::std::option::Option<crate::types::ConstantType> {
        &self.constant_type
    }
    /// <p>The value of the singular filter constant.</p>
    pub fn singular_constant(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.singular_constant = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the singular filter constant.</p>
    pub fn set_singular_constant(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.singular_constant = input;
        self
    }
    /// <p>The value of the singular filter constant.</p>
    pub fn get_singular_constant(&self) -> &::std::option::Option<::std::string::String> {
        &self.singular_constant
    }
    /// Consumes the builder and constructs a [`TopicSingularFilterConstant`](crate::types::TopicSingularFilterConstant).
    pub fn build(self) -> crate::types::TopicSingularFilterConstant {
        crate::types::TopicSingularFilterConstant {
            constant_type: self.constant_type,
            singular_constant: self.singular_constant,
        }
    }
}
impl ::std::fmt::Debug for TopicSingularFilterConstantBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicSingularFilterConstantBuilder");
        formatter.field("constant_type", &"*** Sensitive Data Redacted ***");
        formatter.field("singular_constant", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
