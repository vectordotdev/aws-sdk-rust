// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Aggregation for attributes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttributeAggregationFunction {
    /// <p>The built-in aggregation functions for attributes.</p>
    /// <ul>
    /// <li> <p> <code>UNIQUE_VALUE</code>: Returns the unique value for a field, aggregated by the dimension fields.</p> </li>
    /// </ul>
    pub simple_attribute_aggregation: ::std::option::Option<crate::types::SimpleAttributeAggregationFunction>,
    /// <p>Used by the <code>UNIQUE_VALUE</code> aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.</p>
    pub value_for_multiple_values: ::std::option::Option<::std::string::String>,
}
impl AttributeAggregationFunction {
    /// <p>The built-in aggregation functions for attributes.</p>
    /// <ul>
    /// <li> <p> <code>UNIQUE_VALUE</code>: Returns the unique value for a field, aggregated by the dimension fields.</p> </li>
    /// </ul>
    pub fn simple_attribute_aggregation(&self) -> ::std::option::Option<&crate::types::SimpleAttributeAggregationFunction> {
        self.simple_attribute_aggregation.as_ref()
    }
    /// <p>Used by the <code>UNIQUE_VALUE</code> aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.</p>
    pub fn value_for_multiple_values(&self) -> ::std::option::Option<&str> {
        self.value_for_multiple_values.as_deref()
    }
}
impl AttributeAggregationFunction {
    /// Creates a new builder-style object to manufacture [`AttributeAggregationFunction`](crate::types::AttributeAggregationFunction).
    pub fn builder() -> crate::types::builders::AttributeAggregationFunctionBuilder {
        crate::types::builders::AttributeAggregationFunctionBuilder::default()
    }
}

/// A builder for [`AttributeAggregationFunction`](crate::types::AttributeAggregationFunction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AttributeAggregationFunctionBuilder {
    pub(crate) simple_attribute_aggregation: ::std::option::Option<crate::types::SimpleAttributeAggregationFunction>,
    pub(crate) value_for_multiple_values: ::std::option::Option<::std::string::String>,
}
impl AttributeAggregationFunctionBuilder {
    /// <p>The built-in aggregation functions for attributes.</p>
    /// <ul>
    /// <li> <p> <code>UNIQUE_VALUE</code>: Returns the unique value for a field, aggregated by the dimension fields.</p> </li>
    /// </ul>
    pub fn simple_attribute_aggregation(mut self, input: crate::types::SimpleAttributeAggregationFunction) -> Self {
        self.simple_attribute_aggregation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The built-in aggregation functions for attributes.</p>
    /// <ul>
    /// <li> <p> <code>UNIQUE_VALUE</code>: Returns the unique value for a field, aggregated by the dimension fields.</p> </li>
    /// </ul>
    pub fn set_simple_attribute_aggregation(mut self, input: ::std::option::Option<crate::types::SimpleAttributeAggregationFunction>) -> Self {
        self.simple_attribute_aggregation = input;
        self
    }
    /// <p>The built-in aggregation functions for attributes.</p>
    /// <ul>
    /// <li> <p> <code>UNIQUE_VALUE</code>: Returns the unique value for a field, aggregated by the dimension fields.</p> </li>
    /// </ul>
    pub fn get_simple_attribute_aggregation(&self) -> &::std::option::Option<crate::types::SimpleAttributeAggregationFunction> {
        &self.simple_attribute_aggregation
    }
    /// <p>Used by the <code>UNIQUE_VALUE</code> aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.</p>
    pub fn value_for_multiple_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value_for_multiple_values = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Used by the <code>UNIQUE_VALUE</code> aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.</p>
    pub fn set_value_for_multiple_values(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value_for_multiple_values = input;
        self
    }
    /// <p>Used by the <code>UNIQUE_VALUE</code> aggregation function. If there are multiple values for the field used by the aggregation, the value for this property will be returned instead. Defaults to '*'.</p>
    pub fn get_value_for_multiple_values(&self) -> &::std::option::Option<::std::string::String> {
        &self.value_for_multiple_values
    }
    /// Consumes the builder and constructs a [`AttributeAggregationFunction`](crate::types::AttributeAggregationFunction).
    pub fn build(self) -> crate::types::AttributeAggregationFunction {
        crate::types::AttributeAggregationFunction {
            simple_attribute_aggregation: self.simple_attribute_aggregation,
            value_for_multiple_values: self.value_for_multiple_values,
        }
    }
}
