// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that represents a named entity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NamedEntityDefinition {
    /// <p>The name of the entity.</p>
    pub field_name: ::std::option::Option<::std::string::String>,
    /// <p>The property name to be used for the named entity.</p>
    pub property_name: ::std::option::Option<::std::string::String>,
    /// <p>The property role. Valid values for this structure are <code>PRIMARY</code> and <code>ID</code>.</p>
    pub property_role: ::std::option::Option<crate::types::PropertyRole>,
    /// <p>The property usage. Valid values for this structure are <code>INHERIT</code>, <code>DIMENSION</code>, and <code>MEASURE</code>.</p>
    pub property_usage: ::std::option::Option<crate::types::PropertyUsage>,
    /// <p>The definition of a metric.</p>
    pub metric: ::std::option::Option<crate::types::NamedEntityDefinitionMetric>,
}
impl NamedEntityDefinition {
    /// <p>The name of the entity.</p>
    pub fn field_name(&self) -> ::std::option::Option<&str> {
        self.field_name.as_deref()
    }
    /// <p>The property name to be used for the named entity.</p>
    pub fn property_name(&self) -> ::std::option::Option<&str> {
        self.property_name.as_deref()
    }
    /// <p>The property role. Valid values for this structure are <code>PRIMARY</code> and <code>ID</code>.</p>
    pub fn property_role(&self) -> ::std::option::Option<&crate::types::PropertyRole> {
        self.property_role.as_ref()
    }
    /// <p>The property usage. Valid values for this structure are <code>INHERIT</code>, <code>DIMENSION</code>, and <code>MEASURE</code>.</p>
    pub fn property_usage(&self) -> ::std::option::Option<&crate::types::PropertyUsage> {
        self.property_usage.as_ref()
    }
    /// <p>The definition of a metric.</p>
    pub fn metric(&self) -> ::std::option::Option<&crate::types::NamedEntityDefinitionMetric> {
        self.metric.as_ref()
    }
}
impl NamedEntityDefinition {
    /// Creates a new builder-style object to manufacture [`NamedEntityDefinition`](crate::types::NamedEntityDefinition).
    pub fn builder() -> crate::types::builders::NamedEntityDefinitionBuilder {
        crate::types::builders::NamedEntityDefinitionBuilder::default()
    }
}

/// A builder for [`NamedEntityDefinition`](crate::types::NamedEntityDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NamedEntityDefinitionBuilder {
    pub(crate) field_name: ::std::option::Option<::std::string::String>,
    pub(crate) property_name: ::std::option::Option<::std::string::String>,
    pub(crate) property_role: ::std::option::Option<crate::types::PropertyRole>,
    pub(crate) property_usage: ::std::option::Option<crate::types::PropertyUsage>,
    pub(crate) metric: ::std::option::Option<crate::types::NamedEntityDefinitionMetric>,
}
impl NamedEntityDefinitionBuilder {
    /// <p>The name of the entity.</p>
    pub fn field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the entity.</p>
    pub fn set_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_name = input;
        self
    }
    /// <p>The name of the entity.</p>
    pub fn get_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_name
    }
    /// <p>The property name to be used for the named entity.</p>
    pub fn property_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The property name to be used for the named entity.</p>
    pub fn set_property_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_name = input;
        self
    }
    /// <p>The property name to be used for the named entity.</p>
    pub fn get_property_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_name
    }
    /// <p>The property role. Valid values for this structure are <code>PRIMARY</code> and <code>ID</code>.</p>
    pub fn property_role(mut self, input: crate::types::PropertyRole) -> Self {
        self.property_role = ::std::option::Option::Some(input);
        self
    }
    /// <p>The property role. Valid values for this structure are <code>PRIMARY</code> and <code>ID</code>.</p>
    pub fn set_property_role(mut self, input: ::std::option::Option<crate::types::PropertyRole>) -> Self {
        self.property_role = input;
        self
    }
    /// <p>The property role. Valid values for this structure are <code>PRIMARY</code> and <code>ID</code>.</p>
    pub fn get_property_role(&self) -> &::std::option::Option<crate::types::PropertyRole> {
        &self.property_role
    }
    /// <p>The property usage. Valid values for this structure are <code>INHERIT</code>, <code>DIMENSION</code>, and <code>MEASURE</code>.</p>
    pub fn property_usage(mut self, input: crate::types::PropertyUsage) -> Self {
        self.property_usage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The property usage. Valid values for this structure are <code>INHERIT</code>, <code>DIMENSION</code>, and <code>MEASURE</code>.</p>
    pub fn set_property_usage(mut self, input: ::std::option::Option<crate::types::PropertyUsage>) -> Self {
        self.property_usage = input;
        self
    }
    /// <p>The property usage. Valid values for this structure are <code>INHERIT</code>, <code>DIMENSION</code>, and <code>MEASURE</code>.</p>
    pub fn get_property_usage(&self) -> &::std::option::Option<crate::types::PropertyUsage> {
        &self.property_usage
    }
    /// <p>The definition of a metric.</p>
    pub fn metric(mut self, input: crate::types::NamedEntityDefinitionMetric) -> Self {
        self.metric = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of a metric.</p>
    pub fn set_metric(mut self, input: ::std::option::Option<crate::types::NamedEntityDefinitionMetric>) -> Self {
        self.metric = input;
        self
    }
    /// <p>The definition of a metric.</p>
    pub fn get_metric(&self) -> &::std::option::Option<crate::types::NamedEntityDefinitionMetric> {
        &self.metric
    }
    /// Consumes the builder and constructs a [`NamedEntityDefinition`](crate::types::NamedEntityDefinition).
    pub fn build(self) -> crate::types::NamedEntityDefinition {
        crate::types::NamedEntityDefinition {
            field_name: self.field_name,
            property_name: self.property_name,
            property_role: self.property_role,
            property_usage: self.property_usage,
            metric: self.metric,
        }
    }
}
