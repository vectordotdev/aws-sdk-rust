// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The exclude period of <code>TimeRangeFilter</code> or <code>RelativeDatesFilter</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExcludePeriodConfiguration {
    /// <p>The amount or number of the exclude period.</p>
    pub amount: ::std::option::Option<i32>,
    /// <p>The granularity or unit (day, month, year) of the exclude period.</p>
    pub granularity: ::std::option::Option<crate::types::TimeGranularity>,
    /// <p>The status of the exclude period. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> </p> </li>
    /// <li> <p> <code>DISABLED</code> </p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::WidgetStatus>,
}
impl ExcludePeriodConfiguration {
    /// <p>The amount or number of the exclude period.</p>
    pub fn amount(&self) -> ::std::option::Option<i32> {
        self.amount
    }
    /// <p>The granularity or unit (day, month, year) of the exclude period.</p>
    pub fn granularity(&self) -> ::std::option::Option<&crate::types::TimeGranularity> {
        self.granularity.as_ref()
    }
    /// <p>The status of the exclude period. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> </p> </li>
    /// <li> <p> <code>DISABLED</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WidgetStatus> {
        self.status.as_ref()
    }
}
impl ExcludePeriodConfiguration {
    /// Creates a new builder-style object to manufacture [`ExcludePeriodConfiguration`](crate::types::ExcludePeriodConfiguration).
    pub fn builder() -> crate::types::builders::ExcludePeriodConfigurationBuilder {
        crate::types::builders::ExcludePeriodConfigurationBuilder::default()
    }
}

/// A builder for [`ExcludePeriodConfiguration`](crate::types::ExcludePeriodConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExcludePeriodConfigurationBuilder {
    pub(crate) amount: ::std::option::Option<i32>,
    pub(crate) granularity: ::std::option::Option<crate::types::TimeGranularity>,
    pub(crate) status: ::std::option::Option<crate::types::WidgetStatus>,
}
impl ExcludePeriodConfigurationBuilder {
    /// <p>The amount or number of the exclude period.</p>
    pub fn amount(mut self, input: i32) -> Self {
        self.amount = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount or number of the exclude period.</p>
    pub fn set_amount(mut self, input: ::std::option::Option<i32>) -> Self {
        self.amount = input;
        self
    }
    /// <p>The amount or number of the exclude period.</p>
    pub fn get_amount(&self) -> &::std::option::Option<i32> {
        &self.amount
    }
    /// <p>The granularity or unit (day, month, year) of the exclude period.</p>
    pub fn granularity(mut self, input: crate::types::TimeGranularity) -> Self {
        self.granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The granularity or unit (day, month, year) of the exclude period.</p>
    pub fn set_granularity(mut self, input: ::std::option::Option<crate::types::TimeGranularity>) -> Self {
        self.granularity = input;
        self
    }
    /// <p>The granularity or unit (day, month, year) of the exclude period.</p>
    pub fn get_granularity(&self) -> &::std::option::Option<crate::types::TimeGranularity> {
        &self.granularity
    }
    /// <p>The status of the exclude period. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> </p> </li>
    /// <li> <p> <code>DISABLED</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::WidgetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the exclude period. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> </p> </li>
    /// <li> <p> <code>DISABLED</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WidgetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the exclude period. Choose from the following options:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> </p> </li>
    /// <li> <p> <code>DISABLED</code> </p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WidgetStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ExcludePeriodConfiguration`](crate::types::ExcludePeriodConfiguration).
    pub fn build(self) -> crate::types::ExcludePeriodConfiguration {
        crate::types::ExcludePeriodConfiguration {
            amount: self.amount,
            granularity: self.granularity,
            status: self.status,
        }
    }
}
