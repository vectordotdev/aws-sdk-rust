// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the export job that includes details of the job's configuration and its current status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetBundleExportJobSummary {
    /// <p>The current status of the export job.</p>
    pub job_status: ::std::option::Option<crate::types::AssetBundleExportJobStatus>,
    /// <p>The ARN of the export job.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The time that the export job was created.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ID of the export job.</p>
    pub asset_bundle_export_job_id: ::std::option::Option<::std::string::String>,
    /// <p>The flag that determines the inclusion of resource dependencies in the returned asset bundle.</p>
    pub include_all_dependencies: bool,
    /// <p>The format for the export job.</p>
    pub export_format: ::std::option::Option<crate::types::AssetBundleExportFormat>,
}
impl AssetBundleExportJobSummary {
    /// <p>The current status of the export job.</p>
    pub fn job_status(&self) -> ::std::option::Option<&crate::types::AssetBundleExportJobStatus> {
        self.job_status.as_ref()
    }
    /// <p>The ARN of the export job.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time that the export job was created.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The ID of the export job.</p>
    pub fn asset_bundle_export_job_id(&self) -> ::std::option::Option<&str> {
        self.asset_bundle_export_job_id.as_deref()
    }
    /// <p>The flag that determines the inclusion of resource dependencies in the returned asset bundle.</p>
    pub fn include_all_dependencies(&self) -> bool {
        self.include_all_dependencies
    }
    /// <p>The format for the export job.</p>
    pub fn export_format(&self) -> ::std::option::Option<&crate::types::AssetBundleExportFormat> {
        self.export_format.as_ref()
    }
}
impl AssetBundleExportJobSummary {
    /// Creates a new builder-style object to manufacture [`AssetBundleExportJobSummary`](crate::types::AssetBundleExportJobSummary).
    pub fn builder() -> crate::types::builders::AssetBundleExportJobSummaryBuilder {
        crate::types::builders::AssetBundleExportJobSummaryBuilder::default()
    }
}

/// A builder for [`AssetBundleExportJobSummary`](crate::types::AssetBundleExportJobSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetBundleExportJobSummaryBuilder {
    pub(crate) job_status: ::std::option::Option<crate::types::AssetBundleExportJobStatus>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) asset_bundle_export_job_id: ::std::option::Option<::std::string::String>,
    pub(crate) include_all_dependencies: ::std::option::Option<bool>,
    pub(crate) export_format: ::std::option::Option<crate::types::AssetBundleExportFormat>,
}
impl AssetBundleExportJobSummaryBuilder {
    /// <p>The current status of the export job.</p>
    pub fn job_status(mut self, input: crate::types::AssetBundleExportJobStatus) -> Self {
        self.job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the export job.</p>
    pub fn set_job_status(mut self, input: ::std::option::Option<crate::types::AssetBundleExportJobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The current status of the export job.</p>
    pub fn get_job_status(&self) -> &::std::option::Option<crate::types::AssetBundleExportJobStatus> {
        &self.job_status
    }
    /// <p>The ARN of the export job.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the export job.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the export job.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The time that the export job was created.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the export job was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time that the export job was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The ID of the export job.</p>
    pub fn asset_bundle_export_job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_bundle_export_job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the export job.</p>
    pub fn set_asset_bundle_export_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_bundle_export_job_id = input;
        self
    }
    /// <p>The ID of the export job.</p>
    pub fn get_asset_bundle_export_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_bundle_export_job_id
    }
    /// <p>The flag that determines the inclusion of resource dependencies in the returned asset bundle.</p>
    pub fn include_all_dependencies(mut self, input: bool) -> Self {
        self.include_all_dependencies = ::std::option::Option::Some(input);
        self
    }
    /// <p>The flag that determines the inclusion of resource dependencies in the returned asset bundle.</p>
    pub fn set_include_all_dependencies(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_all_dependencies = input;
        self
    }
    /// <p>The flag that determines the inclusion of resource dependencies in the returned asset bundle.</p>
    pub fn get_include_all_dependencies(&self) -> &::std::option::Option<bool> {
        &self.include_all_dependencies
    }
    /// <p>The format for the export job.</p>
    pub fn export_format(mut self, input: crate::types::AssetBundleExportFormat) -> Self {
        self.export_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format for the export job.</p>
    pub fn set_export_format(mut self, input: ::std::option::Option<crate::types::AssetBundleExportFormat>) -> Self {
        self.export_format = input;
        self
    }
    /// <p>The format for the export job.</p>
    pub fn get_export_format(&self) -> &::std::option::Option<crate::types::AssetBundleExportFormat> {
        &self.export_format
    }
    /// Consumes the builder and constructs a [`AssetBundleExportJobSummary`](crate::types::AssetBundleExportJobSummary).
    pub fn build(self) -> crate::types::AssetBundleExportJobSummary {
        crate::types::AssetBundleExportJobSummary {
            job_status: self.job_status,
            arn: self.arn,
            created_time: self.created_time,
            asset_bundle_export_job_id: self.asset_bundle_export_job_id,
            include_all_dependencies: self.include_all_dependencies.unwrap_or_default(),
            export_format: self.export_format,
        }
    }
}
