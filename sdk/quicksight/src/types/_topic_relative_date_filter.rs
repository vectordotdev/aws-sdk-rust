// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that represents a relative date filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TopicRelativeDateFilter {
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub time_granularity: ::std::option::Option<crate::types::TopicTimeGranularity>,
    /// <p>The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are <code>BEFORE</code>, <code>AFTER</code>, and <code>BETWEEN</code>.</p>
    pub relative_date_filter_function: ::std::option::Option<crate::types::TopicRelativeDateFilterFunction>,
    /// <p>The constant used in a relative date filter.</p>
    pub constant: ::std::option::Option<crate::types::TopicSingularFilterConstant>,
}
impl TopicRelativeDateFilter {
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(&self) -> ::std::option::Option<&crate::types::TopicTimeGranularity> {
        self.time_granularity.as_ref()
    }
    /// <p>The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are <code>BEFORE</code>, <code>AFTER</code>, and <code>BETWEEN</code>.</p>
    pub fn relative_date_filter_function(&self) -> ::std::option::Option<&crate::types::TopicRelativeDateFilterFunction> {
        self.relative_date_filter_function.as_ref()
    }
    /// <p>The constant used in a relative date filter.</p>
    pub fn constant(&self) -> ::std::option::Option<&crate::types::TopicSingularFilterConstant> {
        self.constant.as_ref()
    }
}
impl ::std::fmt::Debug for TopicRelativeDateFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicRelativeDateFilter");
        formatter.field("time_granularity", &self.time_granularity);
        formatter.field("relative_date_filter_function", &self.relative_date_filter_function);
        formatter.field("constant", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TopicRelativeDateFilter {
    /// Creates a new builder-style object to manufacture [`TopicRelativeDateFilter`](crate::types::TopicRelativeDateFilter).
    pub fn builder() -> crate::types::builders::TopicRelativeDateFilterBuilder {
        crate::types::builders::TopicRelativeDateFilterBuilder::default()
    }
}

/// A builder for [`TopicRelativeDateFilter`](crate::types::TopicRelativeDateFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TopicRelativeDateFilterBuilder {
    pub(crate) time_granularity: ::std::option::Option<crate::types::TopicTimeGranularity>,
    pub(crate) relative_date_filter_function: ::std::option::Option<crate::types::TopicRelativeDateFilterFunction>,
    pub(crate) constant: ::std::option::Option<crate::types::TopicSingularFilterConstant>,
}
impl TopicRelativeDateFilterBuilder {
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn time_granularity(mut self, input: crate::types::TopicTimeGranularity) -> Self {
        self.time_granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn set_time_granularity(mut self, input: ::std::option::Option<crate::types::TopicTimeGranularity>) -> Self {
        self.time_granularity = input;
        self
    }
    /// <p>The level of time precision that is used to aggregate <code>DateTime</code> values.</p>
    pub fn get_time_granularity(&self) -> &::std::option::Option<crate::types::TopicTimeGranularity> {
        &self.time_granularity
    }
    /// <p>The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are <code>BEFORE</code>, <code>AFTER</code>, and <code>BETWEEN</code>.</p>
    pub fn relative_date_filter_function(mut self, input: crate::types::TopicRelativeDateFilterFunction) -> Self {
        self.relative_date_filter_function = ::std::option::Option::Some(input);
        self
    }
    /// <p>The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are <code>BEFORE</code>, <code>AFTER</code>, and <code>BETWEEN</code>.</p>
    pub fn set_relative_date_filter_function(mut self, input: ::std::option::Option<crate::types::TopicRelativeDateFilterFunction>) -> Self {
        self.relative_date_filter_function = input;
        self
    }
    /// <p>The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are <code>BEFORE</code>, <code>AFTER</code>, and <code>BETWEEN</code>.</p>
    pub fn get_relative_date_filter_function(&self) -> &::std::option::Option<crate::types::TopicRelativeDateFilterFunction> {
        &self.relative_date_filter_function
    }
    /// <p>The constant used in a relative date filter.</p>
    pub fn constant(mut self, input: crate::types::TopicSingularFilterConstant) -> Self {
        self.constant = ::std::option::Option::Some(input);
        self
    }
    /// <p>The constant used in a relative date filter.</p>
    pub fn set_constant(mut self, input: ::std::option::Option<crate::types::TopicSingularFilterConstant>) -> Self {
        self.constant = input;
        self
    }
    /// <p>The constant used in a relative date filter.</p>
    pub fn get_constant(&self) -> &::std::option::Option<crate::types::TopicSingularFilterConstant> {
        &self.constant
    }
    /// Consumes the builder and constructs a [`TopicRelativeDateFilter`](crate::types::TopicRelativeDateFilter).
    pub fn build(self) -> crate::types::TopicRelativeDateFilter {
        crate::types::TopicRelativeDateFilter {
            time_granularity: self.time_granularity,
            relative_date_filter_function: self.relative_date_filter_function,
            constant: self.constant,
        }
    }
}
impl ::std::fmt::Debug for TopicRelativeDateFilterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicRelativeDateFilterBuilder");
        formatter.field("time_granularity", &self.time_granularity);
        formatter.field("relative_date_filter_function", &self.relative_date_filter_function);
        formatter.field("constant", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
