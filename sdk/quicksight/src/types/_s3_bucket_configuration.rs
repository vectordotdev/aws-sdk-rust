// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An optional structure that contains the Amazon S3 bucket configuration that the generated snapshots are stored in. If you don't provide this information, generated snapshots are stored in the default Amazon QuickSight bucket.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3BucketConfiguration {
    /// <p>The name of an existing Amazon S3 bucket where the generated snapshot artifacts are sent.</p>
    pub bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The prefix of the Amazon S3 bucket that the generated snapshots are stored in.</p>
    pub bucket_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The region that the Amazon S3 bucket is located in. The bucket must be located in the same region that the <code>StartDashboardSnapshotJob</code> API call is made.</p>
    pub bucket_region: ::std::option::Option<::std::string::String>,
}
impl S3BucketConfiguration {
    /// <p>The name of an existing Amazon S3 bucket where the generated snapshot artifacts are sent.</p>
    pub fn bucket_name(&self) -> ::std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>The prefix of the Amazon S3 bucket that the generated snapshots are stored in.</p>
    pub fn bucket_prefix(&self) -> ::std::option::Option<&str> {
        self.bucket_prefix.as_deref()
    }
    /// <p>The region that the Amazon S3 bucket is located in. The bucket must be located in the same region that the <code>StartDashboardSnapshotJob</code> API call is made.</p>
    pub fn bucket_region(&self) -> ::std::option::Option<&str> {
        self.bucket_region.as_deref()
    }
}
impl S3BucketConfiguration {
    /// Creates a new builder-style object to manufacture [`S3BucketConfiguration`](crate::types::S3BucketConfiguration).
    pub fn builder() -> crate::types::builders::S3BucketConfigurationBuilder {
        crate::types::builders::S3BucketConfigurationBuilder::default()
    }
}

/// A builder for [`S3BucketConfiguration`](crate::types::S3BucketConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3BucketConfigurationBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_region: ::std::option::Option<::std::string::String>,
}
impl S3BucketConfigurationBuilder {
    /// <p>The name of an existing Amazon S3 bucket where the generated snapshot artifacts are sent.</p>
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an existing Amazon S3 bucket where the generated snapshot artifacts are sent.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The name of an existing Amazon S3 bucket where the generated snapshot artifacts are sent.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p>The prefix of the Amazon S3 bucket that the generated snapshots are stored in.</p>
    pub fn bucket_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prefix of the Amazon S3 bucket that the generated snapshots are stored in.</p>
    pub fn set_bucket_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_prefix = input;
        self
    }
    /// <p>The prefix of the Amazon S3 bucket that the generated snapshots are stored in.</p>
    pub fn get_bucket_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_prefix
    }
    /// <p>The region that the Amazon S3 bucket is located in. The bucket must be located in the same region that the <code>StartDashboardSnapshotJob</code> API call is made.</p>
    pub fn bucket_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The region that the Amazon S3 bucket is located in. The bucket must be located in the same region that the <code>StartDashboardSnapshotJob</code> API call is made.</p>
    pub fn set_bucket_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_region = input;
        self
    }
    /// <p>The region that the Amazon S3 bucket is located in. The bucket must be located in the same region that the <code>StartDashboardSnapshotJob</code> API call is made.</p>
    pub fn get_bucket_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_region
    }
    /// Consumes the builder and constructs a [`S3BucketConfiguration`](crate::types::S3BucketConfiguration).
    pub fn build(self) -> crate::types::S3BucketConfiguration {
        crate::types::S3BucketConfiguration {
            bucket_name: self.bucket_name,
            bucket_prefix: self.bucket_prefix,
            bucket_region: self.bucket_region,
        }
    }
}
