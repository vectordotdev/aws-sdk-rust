// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A constant value that is used in a range filter to specify the endpoints of the range.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TopicRangeFilterConstant {
    /// <p>The data type of the constant value that is used in a range filter. Valid values for this structure are <code>RANGE</code>.</p>
    pub constant_type: ::std::option::Option<crate::types::ConstantType>,
    /// <p>The value of the constant that is used to specify the endpoints of a range filter.</p>
    pub range_constant: ::std::option::Option<crate::types::RangeConstant>,
}
impl TopicRangeFilterConstant {
    /// <p>The data type of the constant value that is used in a range filter. Valid values for this structure are <code>RANGE</code>.</p>
    pub fn constant_type(&self) -> ::std::option::Option<&crate::types::ConstantType> {
        self.constant_type.as_ref()
    }
    /// <p>The value of the constant that is used to specify the endpoints of a range filter.</p>
    pub fn range_constant(&self) -> ::std::option::Option<&crate::types::RangeConstant> {
        self.range_constant.as_ref()
    }
}
impl ::std::fmt::Debug for TopicRangeFilterConstant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicRangeFilterConstant");
        formatter.field("constant_type", &"*** Sensitive Data Redacted ***");
        formatter.field("range_constant", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TopicRangeFilterConstant {
    /// Creates a new builder-style object to manufacture [`TopicRangeFilterConstant`](crate::types::TopicRangeFilterConstant).
    pub fn builder() -> crate::types::builders::TopicRangeFilterConstantBuilder {
        crate::types::builders::TopicRangeFilterConstantBuilder::default()
    }
}

/// A builder for [`TopicRangeFilterConstant`](crate::types::TopicRangeFilterConstant).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TopicRangeFilterConstantBuilder {
    pub(crate) constant_type: ::std::option::Option<crate::types::ConstantType>,
    pub(crate) range_constant: ::std::option::Option<crate::types::RangeConstant>,
}
impl TopicRangeFilterConstantBuilder {
    /// <p>The data type of the constant value that is used in a range filter. Valid values for this structure are <code>RANGE</code>.</p>
    pub fn constant_type(mut self, input: crate::types::ConstantType) -> Self {
        self.constant_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the constant value that is used in a range filter. Valid values for this structure are <code>RANGE</code>.</p>
    pub fn set_constant_type(mut self, input: ::std::option::Option<crate::types::ConstantType>) -> Self {
        self.constant_type = input;
        self
    }
    /// <p>The data type of the constant value that is used in a range filter. Valid values for this structure are <code>RANGE</code>.</p>
    pub fn get_constant_type(&self) -> &::std::option::Option<crate::types::ConstantType> {
        &self.constant_type
    }
    /// <p>The value of the constant that is used to specify the endpoints of a range filter.</p>
    pub fn range_constant(mut self, input: crate::types::RangeConstant) -> Self {
        self.range_constant = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the constant that is used to specify the endpoints of a range filter.</p>
    pub fn set_range_constant(mut self, input: ::std::option::Option<crate::types::RangeConstant>) -> Self {
        self.range_constant = input;
        self
    }
    /// <p>The value of the constant that is used to specify the endpoints of a range filter.</p>
    pub fn get_range_constant(&self) -> &::std::option::Option<crate::types::RangeConstant> {
        &self.range_constant
    }
    /// Consumes the builder and constructs a [`TopicRangeFilterConstant`](crate::types::TopicRangeFilterConstant).
    pub fn build(self) -> crate::types::TopicRangeFilterConstant {
        crate::types::TopicRangeFilterConstant {
            constant_type: self.constant_type,
            range_constant: self.range_constant,
        }
    }
}
impl ::std::fmt::Debug for TopicRangeFilterConstantBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicRangeFilterConstantBuilder");
        formatter.field("constant_type", &"*** Sensitive Data Redacted ***");
        formatter.field("range_constant", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
