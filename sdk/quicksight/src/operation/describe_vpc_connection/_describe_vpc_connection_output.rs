// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeVpcConnectionOutput {
    /// <p>A response object that provides information for the specified VPC connection.</p>
    pub vpc_connection: ::std::option::Option<crate::types::VpcConnection>,
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The HTTP status of the request.</p>
    pub status: i32,
    _request_id: Option<String>,
}
impl DescribeVpcConnectionOutput {
    /// <p>A response object that provides information for the specified VPC connection.</p>
    pub fn vpc_connection(&self) -> ::std::option::Option<&crate::types::VpcConnection> {
        self.vpc_connection.as_ref()
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
}
impl ::aws_http::request_id::RequestId for DescribeVpcConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeVpcConnectionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcConnectionOutput`](crate::operation::describe_vpc_connection::DescribeVpcConnectionOutput).
    pub fn builder() -> crate::operation::describe_vpc_connection::builders::DescribeVpcConnectionOutputBuilder {
        crate::operation::describe_vpc_connection::builders::DescribeVpcConnectionOutputBuilder::default()
    }
}

/// A builder for [`DescribeVpcConnectionOutput`](crate::operation::describe_vpc_connection::DescribeVpcConnectionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeVpcConnectionOutputBuilder {
    pub(crate) vpc_connection: ::std::option::Option<crate::types::VpcConnection>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl DescribeVpcConnectionOutputBuilder {
    /// <p>A response object that provides information for the specified VPC connection.</p>
    pub fn vpc_connection(mut self, input: crate::types::VpcConnection) -> Self {
        self.vpc_connection = ::std::option::Option::Some(input);
        self
    }
    /// <p>A response object that provides information for the specified VPC connection.</p>
    pub fn set_vpc_connection(mut self, input: ::std::option::Option<crate::types::VpcConnection>) -> Self {
        self.vpc_connection = input;
        self
    }
    /// <p>A response object that provides information for the specified VPC connection.</p>
    pub fn get_vpc_connection(&self) -> &::std::option::Option<crate::types::VpcConnection> {
        &self.vpc_connection
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The Amazon Web Services request ID for this operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The HTTP status of the request.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The HTTP status of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<i32> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeVpcConnectionOutput`](crate::operation::describe_vpc_connection::DescribeVpcConnectionOutput).
    pub fn build(self) -> crate::operation::describe_vpc_connection::DescribeVpcConnectionOutput {
        crate::operation::describe_vpc_connection::DescribeVpcConnectionOutput {
            vpc_connection: self.vpc_connection,
            request_id: self.request_id,
            status: self.status.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
