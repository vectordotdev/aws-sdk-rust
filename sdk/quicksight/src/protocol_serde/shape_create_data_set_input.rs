// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_set_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_set::CreateDataSetInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.column_groups {
        let mut array_2 = object.key("ColumnGroups").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_column_group::ser_column_group(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.column_level_permission_rules {
        let mut array_6 = object.key("ColumnLevelPermissionRules").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_column_level_permission_rule::ser_column_level_permission_rule(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.data_set_id {
        object.key("DataSetId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.data_set_usage_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("DataSetUsageConfiguration").start_object();
        crate::protocol_serde::shape_data_set_usage_configuration::ser_data_set_usage_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.dataset_parameters {
        let mut array_13 = object.key("DatasetParameters").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_dataset_parameter::ser_dataset_parameter(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.field_folders {
        #[allow(unused_mut)]
        let mut object_17 = object.key("FieldFolders").start_object();
        for (key_18, value_19) in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_20 = object_17.key(key_18.as_str()).start_object();
                crate::protocol_serde::shape_field_folder::ser_field_folder(&mut object_20, value_19)?;
                object_20.finish();
            }
        }
        object_17.finish();
    }
    if let Some(var_21) = &input.import_mode {
        object.key("ImportMode").string(var_21.as_str());
    }
    if let Some(var_22) = &input.logical_table_map {
        #[allow(unused_mut)]
        let mut object_23 = object.key("LogicalTableMap").start_object();
        for (key_24, value_25) in var_22 {
            {
                #[allow(unused_mut)]
                let mut object_26 = object_23.key(key_24.as_str()).start_object();
                crate::protocol_serde::shape_logical_table::ser_logical_table(&mut object_26, value_25)?;
                object_26.finish();
            }
        }
        object_23.finish();
    }
    if let Some(var_27) = &input.name {
        object.key("Name").string(var_27.as_str());
    }
    if let Some(var_28) = &input.permissions {
        let mut array_29 = object.key("Permissions").start_array();
        for item_30 in var_28 {
            {
                #[allow(unused_mut)]
                let mut object_31 = array_29.value().start_object();
                crate::protocol_serde::shape_resource_permission::ser_resource_permission(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.physical_table_map {
        #[allow(unused_mut)]
        let mut object_33 = object.key("PhysicalTableMap").start_object();
        for (key_34, value_35) in var_32 {
            {
                #[allow(unused_mut)]
                let mut object_36 = object_33.key(key_34.as_str()).start_object();
                crate::protocol_serde::shape_physical_table::ser_physical_table(&mut object_36, value_35)?;
                object_36.finish();
            }
        }
        object_33.finish();
    }
    if let Some(var_37) = &input.row_level_permission_data_set {
        #[allow(unused_mut)]
        let mut object_38 = object.key("RowLevelPermissionDataSet").start_object();
        crate::protocol_serde::shape_row_level_permission_data_set::ser_row_level_permission_data_set(&mut object_38, var_37)?;
        object_38.finish();
    }
    if let Some(var_39) = &input.row_level_permission_tag_configuration {
        #[allow(unused_mut)]
        let mut object_40 = object.key("RowLevelPermissionTagConfiguration").start_object();
        crate::protocol_serde::shape_row_level_permission_tag_configuration::ser_row_level_permission_tag_configuration(&mut object_40, var_39)?;
        object_40.finish();
    }
    if let Some(var_41) = &input.tags {
        let mut array_42 = object.key("Tags").start_array();
        for item_43 in var_41 {
            {
                #[allow(unused_mut)]
                let mut object_44 = array_42.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    Ok(())
}
