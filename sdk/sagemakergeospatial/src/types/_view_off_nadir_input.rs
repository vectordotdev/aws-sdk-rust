// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input structure for specifying ViewOffNadir property filter. ViewOffNadir refers to the angle from the sensor between nadir (straight down) and the scene center. Measured in degrees (0-90).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ViewOffNadirInput {
    /// <p>The minimum value for ViewOffNadir property filter. This filters items having ViewOffNadir greater than or equal to this value. </p>
    pub lower_bound: ::std::option::Option<f32>,
    /// <p>The maximum value for ViewOffNadir property filter. This filters items having ViewOffNadir lesser than or equal to this value.</p>
    pub upper_bound: ::std::option::Option<f32>,
}
impl ViewOffNadirInput {
    /// <p>The minimum value for ViewOffNadir property filter. This filters items having ViewOffNadir greater than or equal to this value. </p>
    pub fn lower_bound(&self) -> ::std::option::Option<f32> {
        self.lower_bound
    }
    /// <p>The maximum value for ViewOffNadir property filter. This filters items having ViewOffNadir lesser than or equal to this value.</p>
    pub fn upper_bound(&self) -> ::std::option::Option<f32> {
        self.upper_bound
    }
}
impl ViewOffNadirInput {
    /// Creates a new builder-style object to manufacture [`ViewOffNadirInput`](crate::types::ViewOffNadirInput).
    pub fn builder() -> crate::types::builders::ViewOffNadirInputBuilder {
        crate::types::builders::ViewOffNadirInputBuilder::default()
    }
}

/// A builder for [`ViewOffNadirInput`](crate::types::ViewOffNadirInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ViewOffNadirInputBuilder {
    pub(crate) lower_bound: ::std::option::Option<f32>,
    pub(crate) upper_bound: ::std::option::Option<f32>,
}
impl ViewOffNadirInputBuilder {
    /// <p>The minimum value for ViewOffNadir property filter. This filters items having ViewOffNadir greater than or equal to this value. </p>
    pub fn lower_bound(mut self, input: f32) -> Self {
        self.lower_bound = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum value for ViewOffNadir property filter. This filters items having ViewOffNadir greater than or equal to this value. </p>
    pub fn set_lower_bound(mut self, input: ::std::option::Option<f32>) -> Self {
        self.lower_bound = input;
        self
    }
    /// <p>The minimum value for ViewOffNadir property filter. This filters items having ViewOffNadir greater than or equal to this value. </p>
    pub fn get_lower_bound(&self) -> &::std::option::Option<f32> {
        &self.lower_bound
    }
    /// <p>The maximum value for ViewOffNadir property filter. This filters items having ViewOffNadir lesser than or equal to this value.</p>
    pub fn upper_bound(mut self, input: f32) -> Self {
        self.upper_bound = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum value for ViewOffNadir property filter. This filters items having ViewOffNadir lesser than or equal to this value.</p>
    pub fn set_upper_bound(mut self, input: ::std::option::Option<f32>) -> Self {
        self.upper_bound = input;
        self
    }
    /// <p>The maximum value for ViewOffNadir property filter. This filters items having ViewOffNadir lesser than or equal to this value.</p>
    pub fn get_upper_bound(&self) -> &::std::option::Option<f32> {
        &self.upper_bound
    }
    /// Consumes the builder and constructs a [`ViewOffNadirInput`](crate::types::ViewOffNadirInput).
    pub fn build(self) -> crate::types::ViewOffNadirInput {
        crate::types::ViewOffNadirInput {
            lower_bound: self.lower_bound,
            upper_bound: self.upper_bound,
        }
    }
}
