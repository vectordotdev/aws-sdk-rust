// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The supported properties for a PO type data set.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PoDetailAttributes {
    /// <p>The format of the data set records.</p>
    pub format: ::std::option::Option<::std::string::String>,
    /// <p>The character set encoding of the data set.</p>
    pub encoding: ::std::option::Option<::std::string::String>,
}
impl PoDetailAttributes {
    /// <p>The format of the data set records.</p>
    pub fn format(&self) -> ::std::option::Option<&str> {
        self.format.as_deref()
    }
    /// <p>The character set encoding of the data set.</p>
    pub fn encoding(&self) -> ::std::option::Option<&str> {
        self.encoding.as_deref()
    }
}
impl PoDetailAttributes {
    /// Creates a new builder-style object to manufacture [`PoDetailAttributes`](crate::types::PoDetailAttributes).
    pub fn builder() -> crate::types::builders::PoDetailAttributesBuilder {
        crate::types::builders::PoDetailAttributesBuilder::default()
    }
}

/// A builder for [`PoDetailAttributes`](crate::types::PoDetailAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PoDetailAttributesBuilder {
    pub(crate) format: ::std::option::Option<::std::string::String>,
    pub(crate) encoding: ::std::option::Option<::std::string::String>,
}
impl PoDetailAttributesBuilder {
    /// <p>The format of the data set records.</p>
    pub fn format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The format of the data set records.</p>
    pub fn set_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the data set records.</p>
    pub fn get_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.format
    }
    /// <p>The character set encoding of the data set.</p>
    pub fn encoding(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encoding = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The character set encoding of the data set.</p>
    pub fn set_encoding(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encoding = input;
        self
    }
    /// <p>The character set encoding of the data set.</p>
    pub fn get_encoding(&self) -> &::std::option::Option<::std::string::String> {
        &self.encoding
    }
    /// Consumes the builder and constructs a [`PoDetailAttributes`](crate::types::PoDetailAttributes).
    pub fn build(self) -> crate::types::PoDetailAttributes {
        crate::types::PoDetailAttributes {
            format: self.format,
            encoding: self.encoding,
        }
    }
}
