// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::import_application_usage::_import_application_usage_output::ImportApplicationUsageOutputBuilder;

pub use crate::operation::import_application_usage::_import_application_usage_input::ImportApplicationUsageInputBuilder;

impl ImportApplicationUsageInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::import_application_usage::ImportApplicationUsageOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::import_application_usage::ImportApplicationUsageError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.import_application_usage();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ImportApplicationUsage`.
///
/// <p>Ingests application usage data from Amazon Simple Storage Service (Amazon S3).</p>
/// <p>The data must already exist in the S3 location. As part of the action, AWS Application Cost Profiler copies the object from your S3 bucket to an S3 bucket owned by Amazon for processing asynchronously.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ImportApplicationUsageFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::import_application_usage::builders::ImportApplicationUsageInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl ImportApplicationUsageFluentBuilder {
    /// Creates a new `ImportApplicationUsage`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ImportApplicationUsage as a reference.
    pub fn as_input(&self) -> &crate::operation::import_application_usage::builders::ImportApplicationUsageInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::import_application_usage::ImportApplicationUsageOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::import_application_usage::ImportApplicationUsageError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::import_application_usage::ImportApplicationUsage::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::import_application_usage::ImportApplicationUsage::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::import_application_usage::ImportApplicationUsageOutput,
            crate::operation::import_application_usage::ImportApplicationUsageError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::import_application_usage::ImportApplicationUsageError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Amazon S3 location to import application usage data from.</p>
    pub fn source_s3_location(mut self, input: crate::types::SourceS3Location) -> Self {
        self.inner = self.inner.source_s3_location(input);
        self
    }
    /// <p>Amazon S3 location to import application usage data from.</p>
    pub fn set_source_s3_location(mut self, input: ::std::option::Option<crate::types::SourceS3Location>) -> Self {
        self.inner = self.inner.set_source_s3_location(input);
        self
    }
    /// <p>Amazon S3 location to import application usage data from.</p>
    pub fn get_source_s3_location(&self) -> &::std::option::Option<crate::types::SourceS3Location> {
        self.inner.get_source_s3_location()
    }
}
