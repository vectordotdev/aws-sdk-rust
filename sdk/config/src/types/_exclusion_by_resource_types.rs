// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies whether the configuration recorder excludes resource types from being recorded. Use the <code>resourceTypes</code> field to enter a comma-separated list of resource types to exclude as exemptions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExclusionByResourceTypes {
    /// <p>A comma-separated list of resource types to exclude from recording by the configuration recorder.</p>
    pub resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>,
}
impl ExclusionByResourceTypes {
    /// <p>A comma-separated list of resource types to exclude from recording by the configuration recorder.</p>
    pub fn resource_types(&self) -> ::std::option::Option<&[crate::types::ResourceType]> {
        self.resource_types.as_deref()
    }
}
impl ExclusionByResourceTypes {
    /// Creates a new builder-style object to manufacture [`ExclusionByResourceTypes`](crate::types::ExclusionByResourceTypes).
    pub fn builder() -> crate::types::builders::ExclusionByResourceTypesBuilder {
        crate::types::builders::ExclusionByResourceTypesBuilder::default()
    }
}

/// A builder for [`ExclusionByResourceTypes`](crate::types::ExclusionByResourceTypes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExclusionByResourceTypesBuilder {
    pub(crate) resource_types: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>,
}
impl ExclusionByResourceTypesBuilder {
    /// Appends an item to `resource_types`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>A comma-separated list of resource types to exclude from recording by the configuration recorder.</p>
    pub fn resource_types(mut self, input: crate::types::ResourceType) -> Self {
        let mut v = self.resource_types.unwrap_or_default();
        v.push(input);
        self.resource_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>A comma-separated list of resource types to exclude from recording by the configuration recorder.</p>
    pub fn set_resource_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>) -> Self {
        self.resource_types = input;
        self
    }
    /// <p>A comma-separated list of resource types to exclude from recording by the configuration recorder.</p>
    pub fn get_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceType>> {
        &self.resource_types
    }
    /// Consumes the builder and constructs a [`ExclusionByResourceTypes`](crate::types::ExclusionByResourceTypes).
    pub fn build(self) -> crate::types::ExclusionByResourceTypes {
        crate::types::ExclusionByResourceTypes {
            resource_types: self.resource_types,
        }
    }
}
