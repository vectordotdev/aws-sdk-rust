// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single product view aggregation value/count pair, containing metadata about each product to which the calling user has access.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProductViewAggregationValue {
    /// <p>The value of the product view aggregation.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>An approximate count of the products that match the value.</p>
    pub approximate_count: i32,
}
impl ProductViewAggregationValue {
    /// <p>The value of the product view aggregation.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>An approximate count of the products that match the value.</p>
    pub fn approximate_count(&self) -> i32 {
        self.approximate_count
    }
}
impl ProductViewAggregationValue {
    /// Creates a new builder-style object to manufacture [`ProductViewAggregationValue`](crate::types::ProductViewAggregationValue).
    pub fn builder() -> crate::types::builders::ProductViewAggregationValueBuilder {
        crate::types::builders::ProductViewAggregationValueBuilder::default()
    }
}

/// A builder for [`ProductViewAggregationValue`](crate::types::ProductViewAggregationValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProductViewAggregationValueBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) approximate_count: ::std::option::Option<i32>,
}
impl ProductViewAggregationValueBuilder {
    /// <p>The value of the product view aggregation.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the product view aggregation.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the product view aggregation.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>An approximate count of the products that match the value.</p>
    pub fn approximate_count(mut self, input: i32) -> Self {
        self.approximate_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>An approximate count of the products that match the value.</p>
    pub fn set_approximate_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.approximate_count = input;
        self
    }
    /// <p>An approximate count of the products that match the value.</p>
    pub fn get_approximate_count(&self) -> &::std::option::Option<i32> {
        &self.approximate_count
    }
    /// Consumes the builder and constructs a [`ProductViewAggregationValue`](crate::types::ProductViewAggregationValue).
    pub fn build(self) -> crate::types::ProductViewAggregationValue {
        crate::types::ProductViewAggregationValue {
            value: self.value,
            approximate_count: self.approximate_count.unwrap_or_default(),
        }
    }
}
