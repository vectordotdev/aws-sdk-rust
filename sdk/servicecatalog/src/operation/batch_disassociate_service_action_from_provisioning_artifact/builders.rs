// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_disassociate_service_action_from_provisioning_artifact::_batch_disassociate_service_action_from_provisioning_artifact_output::BatchDisassociateServiceActionFromProvisioningArtifactOutputBuilder;

pub use crate::operation::batch_disassociate_service_action_from_provisioning_artifact::_batch_disassociate_service_action_from_provisioning_artifact_input::BatchDisassociateServiceActionFromProvisioningArtifactInputBuilder;

impl BatchDisassociateServiceActionFromProvisioningArtifactInputBuilder {
    /// Sends a request with this input using the given client.
                    pub async fn send_with(
                        self,
                        client: &crate::Client
                    ) -> ::std::result::Result<
                        crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactOutput,
                        ::aws_smithy_http::result::SdkError<
                            crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactError,
                            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse
                        >
    >{
        let mut fluent_builder = client.batch_disassociate_service_action_from_provisioning_artifact();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `BatchDisassociateServiceActionFromProvisioningArtifact`.
///
/// <p>Disassociates a batch of self-service actions from the specified provisioning artifact.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct BatchDisassociateServiceActionFromProvisioningArtifactFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::batch_disassociate_service_action_from_provisioning_artifact::builders::BatchDisassociateServiceActionFromProvisioningArtifactInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl BatchDisassociateServiceActionFromProvisioningArtifactFluentBuilder {
    /// Creates a new `BatchDisassociateServiceActionFromProvisioningArtifact`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the BatchDisassociateServiceActionFromProvisioningArtifact as a reference.
    pub fn as_input(&self) -> &crate::operation::batch_disassociate_service_action_from_provisioning_artifact::builders::BatchDisassociateServiceActionFromProvisioningArtifactInputBuilder{
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(self) -> ::std::result::Result<crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactOutput, ::aws_smithy_http::result::SdkError<crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactError, ::aws_smithy_runtime_api::client::orchestrator::HttpResponse>>{
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifact::operation_runtime_plugins(
                                    self.handle.runtime_plugins.clone(),
                                    &self.handle.conf,
                                    self.config_override,
                                );
        crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifact::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
                            pub async fn customize(
                                self,
                            ) -> ::std::result::Result<
                                crate::client::customize::orchestrator::CustomizableOperation<
                                    crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactOutput,
                                    crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactError,
                                >,
                                ::aws_smithy_http::result::SdkError<crate::operation::batch_disassociate_service_action_from_provisioning_artifact::BatchDisassociateServiceActionFromProvisioningArtifactError>,
                            >
                            {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Appends an item to `ServiceActionAssociations`.
    ///
    /// To override the contents of this collection use [`set_service_action_associations`](Self::set_service_action_associations).
    ///
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    pub fn service_action_associations(mut self, input: crate::types::ServiceActionAssociation) -> Self {
        self.inner = self.inner.service_action_associations(input);
        self
    }
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    pub fn set_service_action_associations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceActionAssociation>>) -> Self {
        self.inner = self.inner.set_service_action_associations(input);
        self
    }
    /// <p>One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.</p>
    pub fn get_service_action_associations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceActionAssociation>> {
        self.inner.get_service_action_associations()
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn accept_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.accept_language(input.into());
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn set_accept_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_accept_language(input);
        self
    }
    /// <p>The language code.</p>
    /// <ul>
    /// <li> <p> <code>jp</code> - Japanese</p> </li>
    /// <li> <p> <code>zh</code> - Chinese</p> </li>
    /// </ul>
    pub fn get_accept_language(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_accept_language()
    }
}
