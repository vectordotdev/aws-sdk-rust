// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Gives a detailed description of the result of an action on each entry in the request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchResultErrorEntry {
    /// <p>The <code>Id</code> of an entry in a batch request.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the error happened due to the caller of the batch API action.</p>
    pub sender_fault: bool,
    /// <p>An error code representing why the action failed on this entry.</p>
    pub code: ::std::option::Option<::std::string::String>,
    /// <p>A message explaining why the action failed on this entry.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl BatchResultErrorEntry {
    /// <p>The <code>Id</code> of an entry in a batch request.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Specifies whether the error happened due to the caller of the batch API action.</p>
    pub fn sender_fault(&self) -> bool {
        self.sender_fault
    }
    /// <p>An error code representing why the action failed on this entry.</p>
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>A message explaining why the action failed on this entry.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl BatchResultErrorEntry {
    /// Creates a new builder-style object to manufacture [`BatchResultErrorEntry`](crate::types::BatchResultErrorEntry).
    pub fn builder() -> crate::types::builders::BatchResultErrorEntryBuilder {
        crate::types::builders::BatchResultErrorEntryBuilder::default()
    }
}

/// A builder for [`BatchResultErrorEntry`](crate::types::BatchResultErrorEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchResultErrorEntryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) sender_fault: ::std::option::Option<bool>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl BatchResultErrorEntryBuilder {
    /// <p>The <code>Id</code> of an entry in a batch request.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>Id</code> of an entry in a batch request.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The <code>Id</code> of an entry in a batch request.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Specifies whether the error happened due to the caller of the batch API action.</p>
    pub fn sender_fault(mut self, input: bool) -> Self {
        self.sender_fault = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the error happened due to the caller of the batch API action.</p>
    pub fn set_sender_fault(mut self, input: ::std::option::Option<bool>) -> Self {
        self.sender_fault = input;
        self
    }
    /// <p>Specifies whether the error happened due to the caller of the batch API action.</p>
    pub fn get_sender_fault(&self) -> &::std::option::Option<bool> {
        &self.sender_fault
    }
    /// <p>An error code representing why the action failed on this entry.</p>
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error code representing why the action failed on this entry.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>An error code representing why the action failed on this entry.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>A message explaining why the action failed on this entry.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message explaining why the action failed on this entry.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message explaining why the action failed on this entry.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`BatchResultErrorEntry`](crate::types::BatchResultErrorEntry).
    pub fn build(self) -> crate::types::BatchResultErrorEntry {
        crate::types::BatchResultErrorEntry {
            id: self.id,
            sender_fault: self.sender_fault.unwrap_or_default(),
            code: self.code,
            message: self.message,
        }
    }
}
