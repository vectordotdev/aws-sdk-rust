// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a subset of information about a job execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobExecutionSummary {
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The time, in milliseconds since the epoch, when the job execution was enqueued.</p>
    pub queued_at: i64,
    /// <p>The time, in milliseconds since the epoch, when the job execution started.</p>
    pub started_at: ::std::option::Option<i64>,
    /// <p>The time, in milliseconds since the epoch, when the job execution was last updated.</p>
    pub last_updated_at: i64,
    /// <p>The version of the job execution. Job execution versions are incremented each time AWS IoT Jobs receives an update from a device.</p>
    pub version_number: i64,
    /// <p>A number that identifies a particular job execution on a particular device.</p>
    pub execution_number: ::std::option::Option<i64>,
}
impl JobExecutionSummary {
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was enqueued.</p>
    pub fn queued_at(&self) -> i64 {
        self.queued_at
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution started.</p>
    pub fn started_at(&self) -> ::std::option::Option<i64> {
        self.started_at
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was last updated.</p>
    pub fn last_updated_at(&self) -> i64 {
        self.last_updated_at
    }
    /// <p>The version of the job execution. Job execution versions are incremented each time AWS IoT Jobs receives an update from a device.</p>
    pub fn version_number(&self) -> i64 {
        self.version_number
    }
    /// <p>A number that identifies a particular job execution on a particular device.</p>
    pub fn execution_number(&self) -> ::std::option::Option<i64> {
        self.execution_number
    }
}
impl JobExecutionSummary {
    /// Creates a new builder-style object to manufacture [`JobExecutionSummary`](crate::types::JobExecutionSummary).
    pub fn builder() -> crate::types::builders::JobExecutionSummaryBuilder {
        crate::types::builders::JobExecutionSummaryBuilder::default()
    }
}

/// A builder for [`JobExecutionSummary`](crate::types::JobExecutionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobExecutionSummaryBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) queued_at: ::std::option::Option<i64>,
    pub(crate) started_at: ::std::option::Option<i64>,
    pub(crate) last_updated_at: ::std::option::Option<i64>,
    pub(crate) version_number: ::std::option::Option<i64>,
    pub(crate) execution_number: ::std::option::Option<i64>,
}
impl JobExecutionSummaryBuilder {
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was enqueued.</p>
    pub fn queued_at(mut self, input: i64) -> Self {
        self.queued_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was enqueued.</p>
    pub fn set_queued_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.queued_at = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was enqueued.</p>
    pub fn get_queued_at(&self) -> &::std::option::Option<i64> {
        &self.queued_at
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution started.</p>
    pub fn started_at(mut self, input: i64) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution started.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution started.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<i64> {
        &self.started_at
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was last updated.</p>
    pub fn last_updated_at(mut self, input: i64) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<i64> {
        &self.last_updated_at
    }
    /// <p>The version of the job execution. Job execution versions are incremented each time AWS IoT Jobs receives an update from a device.</p>
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the job execution. Job execution versions are incremented each time AWS IoT Jobs receives an update from a device.</p>
    pub fn set_version_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The version of the job execution. Job execution versions are incremented each time AWS IoT Jobs receives an update from a device.</p>
    pub fn get_version_number(&self) -> &::std::option::Option<i64> {
        &self.version_number
    }
    /// <p>A number that identifies a particular job execution on a particular device.</p>
    pub fn execution_number(mut self, input: i64) -> Self {
        self.execution_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>A number that identifies a particular job execution on a particular device.</p>
    pub fn set_execution_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.execution_number = input;
        self
    }
    /// <p>A number that identifies a particular job execution on a particular device.</p>
    pub fn get_execution_number(&self) -> &::std::option::Option<i64> {
        &self.execution_number
    }
    /// Consumes the builder and constructs a [`JobExecutionSummary`](crate::types::JobExecutionSummary).
    pub fn build(self) -> crate::types::JobExecutionSummary {
        crate::types::JobExecutionSummary {
            job_id: self.job_id,
            queued_at: self.queued_at.unwrap_or_default(),
            started_at: self.started_at,
            last_updated_at: self.last_updated_at.unwrap_or_default(),
            version_number: self.version_number.unwrap_or_default(),
            execution_number: self.execution_number,
        }
    }
}
