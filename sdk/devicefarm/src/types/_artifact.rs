// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a test. Examples of artifacts include logs and screenshots.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Artifact {
    /// <p>The artifact's ARN.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The artifact's name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The artifact's type.</p>
    /// <p>Allowed values include the following:</p>
    /// <ul>
    /// <li> <p>UNKNOWN</p> </li>
    /// <li> <p>SCREENSHOT</p> </li>
    /// <li> <p>DEVICE_LOG</p> </li>
    /// <li> <p>MESSAGE_LOG</p> </li>
    /// <li> <p>VIDEO_LOG</p> </li>
    /// <li> <p>RESULT_LOG</p> </li>
    /// <li> <p>SERVICE_LOG</p> </li>
    /// <li> <p>WEBKIT_LOG</p> </li>
    /// <li> <p>INSTRUMENTATION_OUTPUT</p> </li>
    /// <li> <p>EXERCISER_MONKEY_OUTPUT: the artifact (log) generated by an Android fuzz test.</p> </li>
    /// <li> <p>CALABASH_JSON_OUTPUT</p> </li>
    /// <li> <p>CALABASH_PRETTY_OUTPUT</p> </li>
    /// <li> <p>CALABASH_STANDARD_OUTPUT</p> </li>
    /// <li> <p>CALABASH_JAVA_XML_OUTPUT</p> </li>
    /// <li> <p>AUTOMATION_OUTPUT</p> </li>
    /// <li> <p>APPIUM_SERVER_OUTPUT</p> </li>
    /// <li> <p>APPIUM_JAVA_OUTPUT</p> </li>
    /// <li> <p>APPIUM_JAVA_XML_OUTPUT</p> </li>
    /// <li> <p>APPIUM_PYTHON_OUTPUT</p> </li>
    /// <li> <p>APPIUM_PYTHON_XML_OUTPUT</p> </li>
    /// <li> <p>EXPLORER_EVENT_LOG</p> </li>
    /// <li> <p>EXPLORER_SUMMARY_LOG</p> </li>
    /// <li> <p>APPLICATION_CRASH_REPORT</p> </li>
    /// <li> <p>XCTEST_LOG</p> </li>
    /// <li> <p>VIDEO</p> </li>
    /// <li> <p>CUSTOMER_ARTIFACT</p> </li>
    /// <li> <p>CUSTOMER_ARTIFACT_LOG</p> </li>
    /// <li> <p>TESTSPEC_OUTPUT</p> </li>
    /// </ul>
    pub r#type: ::std::option::Option<crate::types::ArtifactType>,
    /// <p>The artifact's file extension.</p>
    pub extension: ::std::option::Option<::std::string::String>,
    /// <p>The presigned Amazon S3 URL that can be used with a GET request to download the artifact's file.</p>
    pub url: ::std::option::Option<::std::string::String>,
}
impl Artifact {
    /// <p>The artifact's ARN.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The artifact's name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The artifact's type.</p>
    /// <p>Allowed values include the following:</p>
    /// <ul>
    /// <li> <p>UNKNOWN</p> </li>
    /// <li> <p>SCREENSHOT</p> </li>
    /// <li> <p>DEVICE_LOG</p> </li>
    /// <li> <p>MESSAGE_LOG</p> </li>
    /// <li> <p>VIDEO_LOG</p> </li>
    /// <li> <p>RESULT_LOG</p> </li>
    /// <li> <p>SERVICE_LOG</p> </li>
    /// <li> <p>WEBKIT_LOG</p> </li>
    /// <li> <p>INSTRUMENTATION_OUTPUT</p> </li>
    /// <li> <p>EXERCISER_MONKEY_OUTPUT: the artifact (log) generated by an Android fuzz test.</p> </li>
    /// <li> <p>CALABASH_JSON_OUTPUT</p> </li>
    /// <li> <p>CALABASH_PRETTY_OUTPUT</p> </li>
    /// <li> <p>CALABASH_STANDARD_OUTPUT</p> </li>
    /// <li> <p>CALABASH_JAVA_XML_OUTPUT</p> </li>
    /// <li> <p>AUTOMATION_OUTPUT</p> </li>
    /// <li> <p>APPIUM_SERVER_OUTPUT</p> </li>
    /// <li> <p>APPIUM_JAVA_OUTPUT</p> </li>
    /// <li> <p>APPIUM_JAVA_XML_OUTPUT</p> </li>
    /// <li> <p>APPIUM_PYTHON_OUTPUT</p> </li>
    /// <li> <p>APPIUM_PYTHON_XML_OUTPUT</p> </li>
    /// <li> <p>EXPLORER_EVENT_LOG</p> </li>
    /// <li> <p>EXPLORER_SUMMARY_LOG</p> </li>
    /// <li> <p>APPLICATION_CRASH_REPORT</p> </li>
    /// <li> <p>XCTEST_LOG</p> </li>
    /// <li> <p>VIDEO</p> </li>
    /// <li> <p>CUSTOMER_ARTIFACT</p> </li>
    /// <li> <p>CUSTOMER_ARTIFACT_LOG</p> </li>
    /// <li> <p>TESTSPEC_OUTPUT</p> </li>
    /// </ul>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ArtifactType> {
        self.r#type.as_ref()
    }
    /// <p>The artifact's file extension.</p>
    pub fn extension(&self) -> ::std::option::Option<&str> {
        self.extension.as_deref()
    }
    /// <p>The presigned Amazon S3 URL that can be used with a GET request to download the artifact's file.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl Artifact {
    /// Creates a new builder-style object to manufacture [`Artifact`](crate::types::Artifact).
    pub fn builder() -> crate::types::builders::ArtifactBuilder {
        crate::types::builders::ArtifactBuilder::default()
    }
}

/// A builder for [`Artifact`](crate::types::Artifact).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ArtifactBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ArtifactType>,
    pub(crate) extension: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
}
impl ArtifactBuilder {
    /// <p>The artifact's ARN.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The artifact's ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The artifact's ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The artifact's name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The artifact's name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The artifact's name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The artifact's type.</p>
    /// <p>Allowed values include the following:</p>
    /// <ul>
    /// <li> <p>UNKNOWN</p> </li>
    /// <li> <p>SCREENSHOT</p> </li>
    /// <li> <p>DEVICE_LOG</p> </li>
    /// <li> <p>MESSAGE_LOG</p> </li>
    /// <li> <p>VIDEO_LOG</p> </li>
    /// <li> <p>RESULT_LOG</p> </li>
    /// <li> <p>SERVICE_LOG</p> </li>
    /// <li> <p>WEBKIT_LOG</p> </li>
    /// <li> <p>INSTRUMENTATION_OUTPUT</p> </li>
    /// <li> <p>EXERCISER_MONKEY_OUTPUT: the artifact (log) generated by an Android fuzz test.</p> </li>
    /// <li> <p>CALABASH_JSON_OUTPUT</p> </li>
    /// <li> <p>CALABASH_PRETTY_OUTPUT</p> </li>
    /// <li> <p>CALABASH_STANDARD_OUTPUT</p> </li>
    /// <li> <p>CALABASH_JAVA_XML_OUTPUT</p> </li>
    /// <li> <p>AUTOMATION_OUTPUT</p> </li>
    /// <li> <p>APPIUM_SERVER_OUTPUT</p> </li>
    /// <li> <p>APPIUM_JAVA_OUTPUT</p> </li>
    /// <li> <p>APPIUM_JAVA_XML_OUTPUT</p> </li>
    /// <li> <p>APPIUM_PYTHON_OUTPUT</p> </li>
    /// <li> <p>APPIUM_PYTHON_XML_OUTPUT</p> </li>
    /// <li> <p>EXPLORER_EVENT_LOG</p> </li>
    /// <li> <p>EXPLORER_SUMMARY_LOG</p> </li>
    /// <li> <p>APPLICATION_CRASH_REPORT</p> </li>
    /// <li> <p>XCTEST_LOG</p> </li>
    /// <li> <p>VIDEO</p> </li>
    /// <li> <p>CUSTOMER_ARTIFACT</p> </li>
    /// <li> <p>CUSTOMER_ARTIFACT_LOG</p> </li>
    /// <li> <p>TESTSPEC_OUTPUT</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::ArtifactType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The artifact's type.</p>
    /// <p>Allowed values include the following:</p>
    /// <ul>
    /// <li> <p>UNKNOWN</p> </li>
    /// <li> <p>SCREENSHOT</p> </li>
    /// <li> <p>DEVICE_LOG</p> </li>
    /// <li> <p>MESSAGE_LOG</p> </li>
    /// <li> <p>VIDEO_LOG</p> </li>
    /// <li> <p>RESULT_LOG</p> </li>
    /// <li> <p>SERVICE_LOG</p> </li>
    /// <li> <p>WEBKIT_LOG</p> </li>
    /// <li> <p>INSTRUMENTATION_OUTPUT</p> </li>
    /// <li> <p>EXERCISER_MONKEY_OUTPUT: the artifact (log) generated by an Android fuzz test.</p> </li>
    /// <li> <p>CALABASH_JSON_OUTPUT</p> </li>
    /// <li> <p>CALABASH_PRETTY_OUTPUT</p> </li>
    /// <li> <p>CALABASH_STANDARD_OUTPUT</p> </li>
    /// <li> <p>CALABASH_JAVA_XML_OUTPUT</p> </li>
    /// <li> <p>AUTOMATION_OUTPUT</p> </li>
    /// <li> <p>APPIUM_SERVER_OUTPUT</p> </li>
    /// <li> <p>APPIUM_JAVA_OUTPUT</p> </li>
    /// <li> <p>APPIUM_JAVA_XML_OUTPUT</p> </li>
    /// <li> <p>APPIUM_PYTHON_OUTPUT</p> </li>
    /// <li> <p>APPIUM_PYTHON_XML_OUTPUT</p> </li>
    /// <li> <p>EXPLORER_EVENT_LOG</p> </li>
    /// <li> <p>EXPLORER_SUMMARY_LOG</p> </li>
    /// <li> <p>APPLICATION_CRASH_REPORT</p> </li>
    /// <li> <p>XCTEST_LOG</p> </li>
    /// <li> <p>VIDEO</p> </li>
    /// <li> <p>CUSTOMER_ARTIFACT</p> </li>
    /// <li> <p>CUSTOMER_ARTIFACT_LOG</p> </li>
    /// <li> <p>TESTSPEC_OUTPUT</p> </li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ArtifactType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The artifact's type.</p>
    /// <p>Allowed values include the following:</p>
    /// <ul>
    /// <li> <p>UNKNOWN</p> </li>
    /// <li> <p>SCREENSHOT</p> </li>
    /// <li> <p>DEVICE_LOG</p> </li>
    /// <li> <p>MESSAGE_LOG</p> </li>
    /// <li> <p>VIDEO_LOG</p> </li>
    /// <li> <p>RESULT_LOG</p> </li>
    /// <li> <p>SERVICE_LOG</p> </li>
    /// <li> <p>WEBKIT_LOG</p> </li>
    /// <li> <p>INSTRUMENTATION_OUTPUT</p> </li>
    /// <li> <p>EXERCISER_MONKEY_OUTPUT: the artifact (log) generated by an Android fuzz test.</p> </li>
    /// <li> <p>CALABASH_JSON_OUTPUT</p> </li>
    /// <li> <p>CALABASH_PRETTY_OUTPUT</p> </li>
    /// <li> <p>CALABASH_STANDARD_OUTPUT</p> </li>
    /// <li> <p>CALABASH_JAVA_XML_OUTPUT</p> </li>
    /// <li> <p>AUTOMATION_OUTPUT</p> </li>
    /// <li> <p>APPIUM_SERVER_OUTPUT</p> </li>
    /// <li> <p>APPIUM_JAVA_OUTPUT</p> </li>
    /// <li> <p>APPIUM_JAVA_XML_OUTPUT</p> </li>
    /// <li> <p>APPIUM_PYTHON_OUTPUT</p> </li>
    /// <li> <p>APPIUM_PYTHON_XML_OUTPUT</p> </li>
    /// <li> <p>EXPLORER_EVENT_LOG</p> </li>
    /// <li> <p>EXPLORER_SUMMARY_LOG</p> </li>
    /// <li> <p>APPLICATION_CRASH_REPORT</p> </li>
    /// <li> <p>XCTEST_LOG</p> </li>
    /// <li> <p>VIDEO</p> </li>
    /// <li> <p>CUSTOMER_ARTIFACT</p> </li>
    /// <li> <p>CUSTOMER_ARTIFACT_LOG</p> </li>
    /// <li> <p>TESTSPEC_OUTPUT</p> </li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ArtifactType> {
        &self.r#type
    }
    /// <p>The artifact's file extension.</p>
    pub fn extension(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.extension = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The artifact's file extension.</p>
    pub fn set_extension(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.extension = input;
        self
    }
    /// <p>The artifact's file extension.</p>
    pub fn get_extension(&self) -> &::std::option::Option<::std::string::String> {
        &self.extension
    }
    /// <p>The presigned Amazon S3 URL that can be used with a GET request to download the artifact's file.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The presigned Amazon S3 URL that can be used with a GET request to download the artifact's file.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The presigned Amazon S3 URL that can be used with a GET request to download the artifact's file.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Consumes the builder and constructs a [`Artifact`](crate::types::Artifact).
    pub fn build(self) -> crate::types::Artifact {
        crate::types::Artifact {
            arn: self.arn,
            name: self.name,
            r#type: self.r#type,
            extension: self.extension,
            url: self.url,
        }
    }
}
