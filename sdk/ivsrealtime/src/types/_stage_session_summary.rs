// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a stage session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StageSessionSummary {
    /// <p>ID of the session within the stage.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p> ISO 8601 timestamp (returned as a string) when this stage session began.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>ISO 8601 timestamp (returned as a string) when the stage session ended. This is null if the stage is active.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StageSessionSummary {
    /// <p>ID of the session within the stage.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p> ISO 8601 timestamp (returned as a string) when this stage session began.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>ISO 8601 timestamp (returned as a string) when the stage session ended. This is null if the stage is active.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl StageSessionSummary {
    /// Creates a new builder-style object to manufacture [`StageSessionSummary`](crate::types::StageSessionSummary).
    pub fn builder() -> crate::types::builders::StageSessionSummaryBuilder {
        crate::types::builders::StageSessionSummaryBuilder::default()
    }
}

/// A builder for [`StageSessionSummary`](crate::types::StageSessionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StageSessionSummaryBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StageSessionSummaryBuilder {
    /// <p>ID of the session within the stage.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the session within the stage.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>ID of the session within the stage.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p> ISO 8601 timestamp (returned as a string) when this stage session began.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> ISO 8601 timestamp (returned as a string) when this stage session began.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p> ISO 8601 timestamp (returned as a string) when this stage session began.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>ISO 8601 timestamp (returned as a string) when the stage session ended. This is null if the stage is active.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>ISO 8601 timestamp (returned as a string) when the stage session ended. This is null if the stage is active.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>ISO 8601 timestamp (returned as a string) when the stage session ended. This is null if the stage is active.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`StageSessionSummary`](crate::types::StageSessionSummary).
    pub fn build(self) -> crate::types::StageSessionSummary {
        crate::types::StageSessionSummary {
            session_id: self.session_id,
            start_time: self.start_time,
            end_time: self.end_time,
        }
    }
}
