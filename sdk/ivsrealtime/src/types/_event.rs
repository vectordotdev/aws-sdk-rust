// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An occurrence during a stage session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Event {
    /// <p>The name of the event.</p>
    pub name: ::std::option::Option<crate::types::EventName>,
    /// <p>Unique identifier for the participant who triggered the event. This is assigned by IVS.</p>
    pub participant_id: ::std::option::Option<::std::string::String>,
    /// <p>ISO 8601 timestamp (returned as a string) for when the event occurred.</p>
    pub event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Unique identifier for the remote participant. For a subscribe event, this is the publisher. For a publish or join event, this is null. This is assigned by IVS.</p>
    pub remote_participant_id: ::std::option::Option<::std::string::String>,
    /// <p>If the event is an error event, the error code is provided to give insight into the specific error that occurred. If the event is not an error event, this field is null. <code>INSUFFICIENT_CAPABILITIES</code> indicates that the participant tried to take an action that the participant’s token is not allowed to do. For more information about participant capabilities, see the <code>capabilities</code> field in <code>CreateParticipantToken</code>.</p>
    pub error_code: ::std::option::Option<crate::types::EventErrorCode>,
}
impl Event {
    /// <p>The name of the event.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::EventName> {
        self.name.as_ref()
    }
    /// <p>Unique identifier for the participant who triggered the event. This is assigned by IVS.</p>
    pub fn participant_id(&self) -> ::std::option::Option<&str> {
        self.participant_id.as_deref()
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when the event occurred.</p>
    pub fn event_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_time.as_ref()
    }
    /// <p>Unique identifier for the remote participant. For a subscribe event, this is the publisher. For a publish or join event, this is null. This is assigned by IVS.</p>
    pub fn remote_participant_id(&self) -> ::std::option::Option<&str> {
        self.remote_participant_id.as_deref()
    }
    /// <p>If the event is an error event, the error code is provided to give insight into the specific error that occurred. If the event is not an error event, this field is null. <code>INSUFFICIENT_CAPABILITIES</code> indicates that the participant tried to take an action that the participant’s token is not allowed to do. For more information about participant capabilities, see the <code>capabilities</code> field in <code>CreateParticipantToken</code>.</p>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::EventErrorCode> {
        self.error_code.as_ref()
    }
}
impl Event {
    /// Creates a new builder-style object to manufacture [`Event`](crate::types::Event).
    pub fn builder() -> crate::types::builders::EventBuilder {
        crate::types::builders::EventBuilder::default()
    }
}

/// A builder for [`Event`](crate::types::Event).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventBuilder {
    pub(crate) name: ::std::option::Option<crate::types::EventName>,
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) remote_participant_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<crate::types::EventErrorCode>,
}
impl EventBuilder {
    /// <p>The name of the event.</p>
    pub fn name(mut self, input: crate::types::EventName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the event.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::EventName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the event.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::EventName> {
        &self.name
    }
    /// <p>Unique identifier for the participant who triggered the event. This is assigned by IVS.</p>
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the participant who triggered the event. This is assigned by IVS.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>Unique identifier for the participant who triggered the event. This is assigned by IVS.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when the event occurred.</p>
    pub fn event_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when the event occurred.</p>
    pub fn set_event_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_time = input;
        self
    }
    /// <p>ISO 8601 timestamp (returned as a string) for when the event occurred.</p>
    pub fn get_event_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_time
    }
    /// <p>Unique identifier for the remote participant. For a subscribe event, this is the publisher. For a publish or join event, this is null. This is assigned by IVS.</p>
    pub fn remote_participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for the remote participant. For a subscribe event, this is the publisher. For a publish or join event, this is null. This is assigned by IVS.</p>
    pub fn set_remote_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_participant_id = input;
        self
    }
    /// <p>Unique identifier for the remote participant. For a subscribe event, this is the publisher. For a publish or join event, this is null. This is assigned by IVS.</p>
    pub fn get_remote_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_participant_id
    }
    /// <p>If the event is an error event, the error code is provided to give insight into the specific error that occurred. If the event is not an error event, this field is null. <code>INSUFFICIENT_CAPABILITIES</code> indicates that the participant tried to take an action that the participant’s token is not allowed to do. For more information about participant capabilities, see the <code>capabilities</code> field in <code>CreateParticipantToken</code>.</p>
    pub fn error_code(mut self, input: crate::types::EventErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the event is an error event, the error code is provided to give insight into the specific error that occurred. If the event is not an error event, this field is null. <code>INSUFFICIENT_CAPABILITIES</code> indicates that the participant tried to take an action that the participant’s token is not allowed to do. For more information about participant capabilities, see the <code>capabilities</code> field in <code>CreateParticipantToken</code>.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::EventErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>If the event is an error event, the error code is provided to give insight into the specific error that occurred. If the event is not an error event, this field is null. <code>INSUFFICIENT_CAPABILITIES</code> indicates that the participant tried to take an action that the participant’s token is not allowed to do. For more information about participant capabilities, see the <code>capabilities</code> field in <code>CreateParticipantToken</code>.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::EventErrorCode> {
        &self.error_code
    }
    /// Consumes the builder and constructs a [`Event`](crate::types::Event).
    pub fn build(self) -> crate::types::Event {
        crate::types::Event {
            name: self.name,
            participant_id: self.participant_id,
            event_time: self.event_time,
            remote_participant_id: self.remote_participant_id,
            error_code: self.error_code,
        }
    }
}
