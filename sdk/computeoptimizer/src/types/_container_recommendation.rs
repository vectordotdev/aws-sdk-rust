// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The CPU and memory recommendations for a container within the tasks of your Amazon ECS service. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerRecommendation {
    /// <p> The name of the container. </p>
    pub container_name: ::std::option::Option<::std::string::String>,
    /// <p> The recommended memory size configurations for the container. </p>
    pub memory_size_configuration: ::std::option::Option<crate::types::MemorySizeConfiguration>,
    /// <p> The recommended number of CPU units reserved for the container. </p>
    pub cpu: ::std::option::Option<i32>,
}
impl ContainerRecommendation {
    /// <p> The name of the container. </p>
    pub fn container_name(&self) -> ::std::option::Option<&str> {
        self.container_name.as_deref()
    }
    /// <p> The recommended memory size configurations for the container. </p>
    pub fn memory_size_configuration(&self) -> ::std::option::Option<&crate::types::MemorySizeConfiguration> {
        self.memory_size_configuration.as_ref()
    }
    /// <p> The recommended number of CPU units reserved for the container. </p>
    pub fn cpu(&self) -> ::std::option::Option<i32> {
        self.cpu
    }
}
impl ContainerRecommendation {
    /// Creates a new builder-style object to manufacture [`ContainerRecommendation`](crate::types::ContainerRecommendation).
    pub fn builder() -> crate::types::builders::ContainerRecommendationBuilder {
        crate::types::builders::ContainerRecommendationBuilder::default()
    }
}

/// A builder for [`ContainerRecommendation`](crate::types::ContainerRecommendation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContainerRecommendationBuilder {
    pub(crate) container_name: ::std::option::Option<::std::string::String>,
    pub(crate) memory_size_configuration: ::std::option::Option<crate::types::MemorySizeConfiguration>,
    pub(crate) cpu: ::std::option::Option<i32>,
}
impl ContainerRecommendationBuilder {
    /// <p> The name of the container. </p>
    pub fn container_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the container. </p>
    pub fn set_container_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_name = input;
        self
    }
    /// <p> The name of the container. </p>
    pub fn get_container_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_name
    }
    /// <p> The recommended memory size configurations for the container. </p>
    pub fn memory_size_configuration(mut self, input: crate::types::MemorySizeConfiguration) -> Self {
        self.memory_size_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p> The recommended memory size configurations for the container. </p>
    pub fn set_memory_size_configuration(mut self, input: ::std::option::Option<crate::types::MemorySizeConfiguration>) -> Self {
        self.memory_size_configuration = input;
        self
    }
    /// <p> The recommended memory size configurations for the container. </p>
    pub fn get_memory_size_configuration(&self) -> &::std::option::Option<crate::types::MemorySizeConfiguration> {
        &self.memory_size_configuration
    }
    /// <p> The recommended number of CPU units reserved for the container. </p>
    pub fn cpu(mut self, input: i32) -> Self {
        self.cpu = ::std::option::Option::Some(input);
        self
    }
    /// <p> The recommended number of CPU units reserved for the container. </p>
    pub fn set_cpu(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cpu = input;
        self
    }
    /// <p> The recommended number of CPU units reserved for the container. </p>
    pub fn get_cpu(&self) -> &::std::option::Option<i32> {
        &self.cpu
    }
    /// Consumes the builder and constructs a [`ContainerRecommendation`](crate::types::ContainerRecommendation).
    pub fn build(self) -> crate::types::ContainerRecommendation {
        crate::types::ContainerRecommendation {
            container_name: self.container_name,
            memory_size_configuration: self.memory_size_configuration,
            cpu: self.cpu,
        }
    }
}
