// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Represents records that were not successfully inserted into Timestream due to data validation issues that must be resolved before reinserting time-series data into the system. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RejectedRecord {
    /// <p> The index of the record in the input request for WriteRecords. Indexes begin with 0. </p>
    pub record_index: i32,
    /// <p> The reason why a record was not successfully inserted into Timestream. Possible causes of failure include: </p>
    /// <ul>
    /// <li> <p>Records with duplicate data where there are multiple records with the same dimensions, timestamps, and measure names but: </p>
    /// <ul>
    /// <li> <p>Measure values are different</p> </li>
    /// <li> <p>Version is not present in the request, <i>or</i> the value of version in the new record is equal to or lower than the existing value</p> </li>
    /// </ul> <p>If Timestream rejects data for this case, the <code>ExistingVersion</code> field in the <code>RejectedRecords</code> response will indicate the current record’s version. To force an update, you can resend the request with a version for the record set to a value greater than the <code>ExistingVersion</code>.</p> </li>
    /// <li> <p> Records with timestamps that lie outside the retention duration of the memory store. </p> <note>
    /// <p>When the retention window is updated, you will receive a <code>RejectedRecords</code> exception if you immediately try to ingest data within the new window. To avoid a <code>RejectedRecords</code> exception, wait until the duration of the new window to ingest new data. For further information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/best-practices.html#configuration"> Best Practices for Configuring Timestream</a> and <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/storage.html">the explanation of how storage works in Timestream</a>.</p>
    /// </note> </li>
    /// <li> <p> Records with dimensions or measures that exceed the Timestream defined limits. </p> </li>
    /// </ul>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html">Access Management</a> in the Timestream Developer Guide. </p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>The existing version of the record. This value is populated in scenarios where an identical record exists with a higher version than the version in the write request.</p>
    pub existing_version: ::std::option::Option<i64>,
}
impl RejectedRecord {
    /// <p> The index of the record in the input request for WriteRecords. Indexes begin with 0. </p>
    pub fn record_index(&self) -> i32 {
        self.record_index
    }
    /// <p> The reason why a record was not successfully inserted into Timestream. Possible causes of failure include: </p>
    /// <ul>
    /// <li> <p>Records with duplicate data where there are multiple records with the same dimensions, timestamps, and measure names but: </p>
    /// <ul>
    /// <li> <p>Measure values are different</p> </li>
    /// <li> <p>Version is not present in the request, <i>or</i> the value of version in the new record is equal to or lower than the existing value</p> </li>
    /// </ul> <p>If Timestream rejects data for this case, the <code>ExistingVersion</code> field in the <code>RejectedRecords</code> response will indicate the current record’s version. To force an update, you can resend the request with a version for the record set to a value greater than the <code>ExistingVersion</code>.</p> </li>
    /// <li> <p> Records with timestamps that lie outside the retention duration of the memory store. </p> <note>
    /// <p>When the retention window is updated, you will receive a <code>RejectedRecords</code> exception if you immediately try to ingest data within the new window. To avoid a <code>RejectedRecords</code> exception, wait until the duration of the new window to ingest new data. For further information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/best-practices.html#configuration"> Best Practices for Configuring Timestream</a> and <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/storage.html">the explanation of how storage works in Timestream</a>.</p>
    /// </note> </li>
    /// <li> <p> Records with dimensions or measures that exceed the Timestream defined limits. </p> </li>
    /// </ul>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html">Access Management</a> in the Timestream Developer Guide. </p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>The existing version of the record. This value is populated in scenarios where an identical record exists with a higher version than the version in the write request.</p>
    pub fn existing_version(&self) -> ::std::option::Option<i64> {
        self.existing_version
    }
}
impl RejectedRecord {
    /// Creates a new builder-style object to manufacture [`RejectedRecord`](crate::types::RejectedRecord).
    pub fn builder() -> crate::types::builders::RejectedRecordBuilder {
        crate::types::builders::RejectedRecordBuilder::default()
    }
}

/// A builder for [`RejectedRecord`](crate::types::RejectedRecord).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RejectedRecordBuilder {
    pub(crate) record_index: ::std::option::Option<i32>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) existing_version: ::std::option::Option<i64>,
}
impl RejectedRecordBuilder {
    /// <p> The index of the record in the input request for WriteRecords. Indexes begin with 0. </p>
    pub fn record_index(mut self, input: i32) -> Self {
        self.record_index = ::std::option::Option::Some(input);
        self
    }
    /// <p> The index of the record in the input request for WriteRecords. Indexes begin with 0. </p>
    pub fn set_record_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.record_index = input;
        self
    }
    /// <p> The index of the record in the input request for WriteRecords. Indexes begin with 0. </p>
    pub fn get_record_index(&self) -> &::std::option::Option<i32> {
        &self.record_index
    }
    /// <p> The reason why a record was not successfully inserted into Timestream. Possible causes of failure include: </p>
    /// <ul>
    /// <li> <p>Records with duplicate data where there are multiple records with the same dimensions, timestamps, and measure names but: </p>
    /// <ul>
    /// <li> <p>Measure values are different</p> </li>
    /// <li> <p>Version is not present in the request, <i>or</i> the value of version in the new record is equal to or lower than the existing value</p> </li>
    /// </ul> <p>If Timestream rejects data for this case, the <code>ExistingVersion</code> field in the <code>RejectedRecords</code> response will indicate the current record’s version. To force an update, you can resend the request with a version for the record set to a value greater than the <code>ExistingVersion</code>.</p> </li>
    /// <li> <p> Records with timestamps that lie outside the retention duration of the memory store. </p> <note>
    /// <p>When the retention window is updated, you will receive a <code>RejectedRecords</code> exception if you immediately try to ingest data within the new window. To avoid a <code>RejectedRecords</code> exception, wait until the duration of the new window to ingest new data. For further information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/best-practices.html#configuration"> Best Practices for Configuring Timestream</a> and <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/storage.html">the explanation of how storage works in Timestream</a>.</p>
    /// </note> </li>
    /// <li> <p> Records with dimensions or measures that exceed the Timestream defined limits. </p> </li>
    /// </ul>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html">Access Management</a> in the Timestream Developer Guide. </p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The reason why a record was not successfully inserted into Timestream. Possible causes of failure include: </p>
    /// <ul>
    /// <li> <p>Records with duplicate data where there are multiple records with the same dimensions, timestamps, and measure names but: </p>
    /// <ul>
    /// <li> <p>Measure values are different</p> </li>
    /// <li> <p>Version is not present in the request, <i>or</i> the value of version in the new record is equal to or lower than the existing value</p> </li>
    /// </ul> <p>If Timestream rejects data for this case, the <code>ExistingVersion</code> field in the <code>RejectedRecords</code> response will indicate the current record’s version. To force an update, you can resend the request with a version for the record set to a value greater than the <code>ExistingVersion</code>.</p> </li>
    /// <li> <p> Records with timestamps that lie outside the retention duration of the memory store. </p> <note>
    /// <p>When the retention window is updated, you will receive a <code>RejectedRecords</code> exception if you immediately try to ingest data within the new window. To avoid a <code>RejectedRecords</code> exception, wait until the duration of the new window to ingest new data. For further information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/best-practices.html#configuration"> Best Practices for Configuring Timestream</a> and <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/storage.html">the explanation of how storage works in Timestream</a>.</p>
    /// </note> </li>
    /// <li> <p> Records with dimensions or measures that exceed the Timestream defined limits. </p> </li>
    /// </ul>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html">Access Management</a> in the Timestream Developer Guide. </p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p> The reason why a record was not successfully inserted into Timestream. Possible causes of failure include: </p>
    /// <ul>
    /// <li> <p>Records with duplicate data where there are multiple records with the same dimensions, timestamps, and measure names but: </p>
    /// <ul>
    /// <li> <p>Measure values are different</p> </li>
    /// <li> <p>Version is not present in the request, <i>or</i> the value of version in the new record is equal to or lower than the existing value</p> </li>
    /// </ul> <p>If Timestream rejects data for this case, the <code>ExistingVersion</code> field in the <code>RejectedRecords</code> response will indicate the current record’s version. To force an update, you can resend the request with a version for the record set to a value greater than the <code>ExistingVersion</code>.</p> </li>
    /// <li> <p> Records with timestamps that lie outside the retention duration of the memory store. </p> <note>
    /// <p>When the retention window is updated, you will receive a <code>RejectedRecords</code> exception if you immediately try to ingest data within the new window. To avoid a <code>RejectedRecords</code> exception, wait until the duration of the new window to ingest new data. For further information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/best-practices.html#configuration"> Best Practices for Configuring Timestream</a> and <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/storage.html">the explanation of how storage works in Timestream</a>.</p>
    /// </note> </li>
    /// <li> <p> Records with dimensions or measures that exceed the Timestream defined limits. </p> </li>
    /// </ul>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html">Access Management</a> in the Timestream Developer Guide. </p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>The existing version of the record. This value is populated in scenarios where an identical record exists with a higher version than the version in the write request.</p>
    pub fn existing_version(mut self, input: i64) -> Self {
        self.existing_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The existing version of the record. This value is populated in scenarios where an identical record exists with a higher version than the version in the write request.</p>
    pub fn set_existing_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.existing_version = input;
        self
    }
    /// <p>The existing version of the record. This value is populated in scenarios where an identical record exists with a higher version than the version in the write request.</p>
    pub fn get_existing_version(&self) -> &::std::option::Option<i64> {
        &self.existing_version
    }
    /// Consumes the builder and constructs a [`RejectedRecord`](crate::types::RejectedRecord).
    pub fn build(self) -> crate::types::RejectedRecord {
        crate::types::RejectedRecord {
            record_index: self.record_index.unwrap_or_default(),
            reason: self.reason,
            existing_version: self.existing_version,
        }
    }
}
