// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a batch load task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchLoadTask {
    /// <p>The ID of the batch load task.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>Status of the batch load task.</p>
    pub task_status: ::std::option::Option<crate::types::BatchLoadStatus>,
    /// <p>Database name for the database into which a batch load task loads data.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>Table name for the table into which a batch load task loads data.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The time when the Timestream batch load task was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the Timestream batch load task was last updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> </p>
    pub resumable_until: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BatchLoadTask {
    /// <p>The ID of the batch load task.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>Status of the batch load task.</p>
    pub fn task_status(&self) -> ::std::option::Option<&crate::types::BatchLoadStatus> {
        self.task_status.as_ref()
    }
    /// <p>Database name for the database into which a batch load task loads data.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>Table name for the table into which a batch load task loads data.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The time when the Timestream batch load task was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time when the Timestream batch load task was last updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p> </p>
    pub fn resumable_until(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.resumable_until.as_ref()
    }
}
impl BatchLoadTask {
    /// Creates a new builder-style object to manufacture [`BatchLoadTask`](crate::types::BatchLoadTask).
    pub fn builder() -> crate::types::builders::BatchLoadTaskBuilder {
        crate::types::builders::BatchLoadTaskBuilder::default()
    }
}

/// A builder for [`BatchLoadTask`](crate::types::BatchLoadTask).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchLoadTaskBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) task_status: ::std::option::Option<crate::types::BatchLoadStatus>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resumable_until: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BatchLoadTaskBuilder {
    /// <p>The ID of the batch load task.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the batch load task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The ID of the batch load task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>Status of the batch load task.</p>
    pub fn task_status(mut self, input: crate::types::BatchLoadStatus) -> Self {
        self.task_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the batch load task.</p>
    pub fn set_task_status(mut self, input: ::std::option::Option<crate::types::BatchLoadStatus>) -> Self {
        self.task_status = input;
        self
    }
    /// <p>Status of the batch load task.</p>
    pub fn get_task_status(&self) -> &::std::option::Option<crate::types::BatchLoadStatus> {
        &self.task_status
    }
    /// <p>Database name for the database into which a batch load task loads data.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Database name for the database into which a batch load task loads data.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>Database name for the database into which a batch load task loads data.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>Table name for the table into which a batch load task loads data.</p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Table name for the table into which a batch load task loads data.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>Table name for the table into which a batch load task loads data.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The time when the Timestream batch load task was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the Timestream batch load task was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when the Timestream batch load task was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time when the Timestream batch load task was last updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the Timestream batch load task was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The time when the Timestream batch load task was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p> </p>
    pub fn resumable_until(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.resumable_until = ::std::option::Option::Some(input);
        self
    }
    /// <p> </p>
    pub fn set_resumable_until(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.resumable_until = input;
        self
    }
    /// <p> </p>
    pub fn get_resumable_until(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.resumable_until
    }
    /// Consumes the builder and constructs a [`BatchLoadTask`](crate::types::BatchLoadTask).
    pub fn build(self) -> crate::types::BatchLoadTask {
        crate::types::BatchLoadTask {
            task_id: self.task_id,
            task_status: self.task_status,
            database_name: self.database_name,
            table_name: self.table_name,
            creation_time: self.creation_time,
            last_updated_time: self.last_updated_time,
            resumable_until: self.resumable_until,
        }
    }
}
