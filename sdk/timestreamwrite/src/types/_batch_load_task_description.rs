// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a batch load task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchLoadTaskDescription {
    /// <p>The ID of the batch load task.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>Configuration details about the data source for a batch load task.</p>
    pub data_source_configuration: ::std::option::Option<crate::types::DataSourceConfiguration>,
    /// <p></p>
    pub progress_report: ::std::option::Option<crate::types::BatchLoadProgressReport>,
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub report_configuration: ::std::option::Option<crate::types::ReportConfiguration>,
    /// <p>Data model configuration for a batch load task. This contains details about where a data model for a batch load task is stored.</p>
    pub data_model_configuration: ::std::option::Option<crate::types::DataModelConfiguration>,
    /// <p></p>
    pub target_database_name: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub target_table_name: ::std::option::Option<::std::string::String>,
    /// <p>Status of the batch load task.</p>
    pub task_status: ::std::option::Option<crate::types::BatchLoadStatus>,
    /// <p></p>
    pub record_version: i64,
    /// <p>The time when the Timestream batch load task was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time when the Timestream batch load task was last updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> </p>
    pub resumable_until: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BatchLoadTaskDescription {
    /// <p>The ID of the batch load task.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p></p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>Configuration details about the data source for a batch load task.</p>
    pub fn data_source_configuration(&self) -> ::std::option::Option<&crate::types::DataSourceConfiguration> {
        self.data_source_configuration.as_ref()
    }
    /// <p></p>
    pub fn progress_report(&self) -> ::std::option::Option<&crate::types::BatchLoadProgressReport> {
        self.progress_report.as_ref()
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub fn report_configuration(&self) -> ::std::option::Option<&crate::types::ReportConfiguration> {
        self.report_configuration.as_ref()
    }
    /// <p>Data model configuration for a batch load task. This contains details about where a data model for a batch load task is stored.</p>
    pub fn data_model_configuration(&self) -> ::std::option::Option<&crate::types::DataModelConfiguration> {
        self.data_model_configuration.as_ref()
    }
    /// <p></p>
    pub fn target_database_name(&self) -> ::std::option::Option<&str> {
        self.target_database_name.as_deref()
    }
    /// <p></p>
    pub fn target_table_name(&self) -> ::std::option::Option<&str> {
        self.target_table_name.as_deref()
    }
    /// <p>Status of the batch load task.</p>
    pub fn task_status(&self) -> ::std::option::Option<&crate::types::BatchLoadStatus> {
        self.task_status.as_ref()
    }
    /// <p></p>
    pub fn record_version(&self) -> i64 {
        self.record_version
    }
    /// <p>The time when the Timestream batch load task was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time when the Timestream batch load task was last updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p> </p>
    pub fn resumable_until(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.resumable_until.as_ref()
    }
}
impl BatchLoadTaskDescription {
    /// Creates a new builder-style object to manufacture [`BatchLoadTaskDescription`](crate::types::BatchLoadTaskDescription).
    pub fn builder() -> crate::types::builders::BatchLoadTaskDescriptionBuilder {
        crate::types::builders::BatchLoadTaskDescriptionBuilder::default()
    }
}

/// A builder for [`BatchLoadTaskDescription`](crate::types::BatchLoadTaskDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchLoadTaskDescriptionBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_configuration: ::std::option::Option<crate::types::DataSourceConfiguration>,
    pub(crate) progress_report: ::std::option::Option<crate::types::BatchLoadProgressReport>,
    pub(crate) report_configuration: ::std::option::Option<crate::types::ReportConfiguration>,
    pub(crate) data_model_configuration: ::std::option::Option<crate::types::DataModelConfiguration>,
    pub(crate) target_database_name: ::std::option::Option<::std::string::String>,
    pub(crate) target_table_name: ::std::option::Option<::std::string::String>,
    pub(crate) task_status: ::std::option::Option<crate::types::BatchLoadStatus>,
    pub(crate) record_version: ::std::option::Option<i64>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resumable_until: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BatchLoadTaskDescriptionBuilder {
    /// <p>The ID of the batch load task.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the batch load task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The ID of the batch load task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p></p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p></p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>Configuration details about the data source for a batch load task.</p>
    pub fn data_source_configuration(mut self, input: crate::types::DataSourceConfiguration) -> Self {
        self.data_source_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration details about the data source for a batch load task.</p>
    pub fn set_data_source_configuration(mut self, input: ::std::option::Option<crate::types::DataSourceConfiguration>) -> Self {
        self.data_source_configuration = input;
        self
    }
    /// <p>Configuration details about the data source for a batch load task.</p>
    pub fn get_data_source_configuration(&self) -> &::std::option::Option<crate::types::DataSourceConfiguration> {
        &self.data_source_configuration
    }
    /// <p></p>
    pub fn progress_report(mut self, input: crate::types::BatchLoadProgressReport) -> Self {
        self.progress_report = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_progress_report(mut self, input: ::std::option::Option<crate::types::BatchLoadProgressReport>) -> Self {
        self.progress_report = input;
        self
    }
    /// <p></p>
    pub fn get_progress_report(&self) -> &::std::option::Option<crate::types::BatchLoadProgressReport> {
        &self.progress_report
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub fn report_configuration(mut self, input: crate::types::ReportConfiguration) -> Self {
        self.report_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub fn set_report_configuration(mut self, input: ::std::option::Option<crate::types::ReportConfiguration>) -> Self {
        self.report_configuration = input;
        self
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub fn get_report_configuration(&self) -> &::std::option::Option<crate::types::ReportConfiguration> {
        &self.report_configuration
    }
    /// <p>Data model configuration for a batch load task. This contains details about where a data model for a batch load task is stored.</p>
    pub fn data_model_configuration(mut self, input: crate::types::DataModelConfiguration) -> Self {
        self.data_model_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Data model configuration for a batch load task. This contains details about where a data model for a batch load task is stored.</p>
    pub fn set_data_model_configuration(mut self, input: ::std::option::Option<crate::types::DataModelConfiguration>) -> Self {
        self.data_model_configuration = input;
        self
    }
    /// <p>Data model configuration for a batch load task. This contains details about where a data model for a batch load task is stored.</p>
    pub fn get_data_model_configuration(&self) -> &::std::option::Option<crate::types::DataModelConfiguration> {
        &self.data_model_configuration
    }
    /// <p></p>
    pub fn target_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_target_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_database_name = input;
        self
    }
    /// <p></p>
    pub fn get_target_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_database_name
    }
    /// <p></p>
    pub fn target_table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_target_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_table_name = input;
        self
    }
    /// <p></p>
    pub fn get_target_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_table_name
    }
    /// <p>Status of the batch load task.</p>
    pub fn task_status(mut self, input: crate::types::BatchLoadStatus) -> Self {
        self.task_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the batch load task.</p>
    pub fn set_task_status(mut self, input: ::std::option::Option<crate::types::BatchLoadStatus>) -> Self {
        self.task_status = input;
        self
    }
    /// <p>Status of the batch load task.</p>
    pub fn get_task_status(&self) -> &::std::option::Option<crate::types::BatchLoadStatus> {
        &self.task_status
    }
    /// <p></p>
    pub fn record_version(mut self, input: i64) -> Self {
        self.record_version = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_record_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.record_version = input;
        self
    }
    /// <p></p>
    pub fn get_record_version(&self) -> &::std::option::Option<i64> {
        &self.record_version
    }
    /// <p>The time when the Timestream batch load task was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the Timestream batch load task was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when the Timestream batch load task was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time when the Timestream batch load task was last updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the Timestream batch load task was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The time when the Timestream batch load task was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p> </p>
    pub fn resumable_until(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.resumable_until = ::std::option::Option::Some(input);
        self
    }
    /// <p> </p>
    pub fn set_resumable_until(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.resumable_until = input;
        self
    }
    /// <p> </p>
    pub fn get_resumable_until(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.resumable_until
    }
    /// Consumes the builder and constructs a [`BatchLoadTaskDescription`](crate::types::BatchLoadTaskDescription).
    pub fn build(self) -> crate::types::BatchLoadTaskDescription {
        crate::types::BatchLoadTaskDescription {
            task_id: self.task_id,
            error_message: self.error_message,
            data_source_configuration: self.data_source_configuration,
            progress_report: self.progress_report,
            report_configuration: self.report_configuration,
            data_model_configuration: self.data_model_configuration,
            target_database_name: self.target_database_name,
            target_table_name: self.target_table_name,
            task_status: self.task_status,
            record_version: self.record_version.unwrap_or_default(),
            creation_time: self.creation_time,
            last_updated_time: self.last_updated_time,
            resumable_until: self.resumable_until,
        }
    }
}
