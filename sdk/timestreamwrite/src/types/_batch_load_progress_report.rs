// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the progress of a batch load task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchLoadProgressReport {
    /// <p></p>
    pub records_processed: i64,
    /// <p></p>
    pub records_ingested: i64,
    /// <p></p>
    pub parse_failures: i64,
    /// <p></p>
    pub record_ingestion_failures: i64,
    /// <p></p>
    pub file_failures: i64,
    /// <p></p>
    pub bytes_metered: i64,
}
impl BatchLoadProgressReport {
    /// <p></p>
    pub fn records_processed(&self) -> i64 {
        self.records_processed
    }
    /// <p></p>
    pub fn records_ingested(&self) -> i64 {
        self.records_ingested
    }
    /// <p></p>
    pub fn parse_failures(&self) -> i64 {
        self.parse_failures
    }
    /// <p></p>
    pub fn record_ingestion_failures(&self) -> i64 {
        self.record_ingestion_failures
    }
    /// <p></p>
    pub fn file_failures(&self) -> i64 {
        self.file_failures
    }
    /// <p></p>
    pub fn bytes_metered(&self) -> i64 {
        self.bytes_metered
    }
}
impl BatchLoadProgressReport {
    /// Creates a new builder-style object to manufacture [`BatchLoadProgressReport`](crate::types::BatchLoadProgressReport).
    pub fn builder() -> crate::types::builders::BatchLoadProgressReportBuilder {
        crate::types::builders::BatchLoadProgressReportBuilder::default()
    }
}

/// A builder for [`BatchLoadProgressReport`](crate::types::BatchLoadProgressReport).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchLoadProgressReportBuilder {
    pub(crate) records_processed: ::std::option::Option<i64>,
    pub(crate) records_ingested: ::std::option::Option<i64>,
    pub(crate) parse_failures: ::std::option::Option<i64>,
    pub(crate) record_ingestion_failures: ::std::option::Option<i64>,
    pub(crate) file_failures: ::std::option::Option<i64>,
    pub(crate) bytes_metered: ::std::option::Option<i64>,
}
impl BatchLoadProgressReportBuilder {
    /// <p></p>
    pub fn records_processed(mut self, input: i64) -> Self {
        self.records_processed = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_records_processed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.records_processed = input;
        self
    }
    /// <p></p>
    pub fn get_records_processed(&self) -> &::std::option::Option<i64> {
        &self.records_processed
    }
    /// <p></p>
    pub fn records_ingested(mut self, input: i64) -> Self {
        self.records_ingested = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_records_ingested(mut self, input: ::std::option::Option<i64>) -> Self {
        self.records_ingested = input;
        self
    }
    /// <p></p>
    pub fn get_records_ingested(&self) -> &::std::option::Option<i64> {
        &self.records_ingested
    }
    /// <p></p>
    pub fn parse_failures(mut self, input: i64) -> Self {
        self.parse_failures = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_parse_failures(mut self, input: ::std::option::Option<i64>) -> Self {
        self.parse_failures = input;
        self
    }
    /// <p></p>
    pub fn get_parse_failures(&self) -> &::std::option::Option<i64> {
        &self.parse_failures
    }
    /// <p></p>
    pub fn record_ingestion_failures(mut self, input: i64) -> Self {
        self.record_ingestion_failures = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_record_ingestion_failures(mut self, input: ::std::option::Option<i64>) -> Self {
        self.record_ingestion_failures = input;
        self
    }
    /// <p></p>
    pub fn get_record_ingestion_failures(&self) -> &::std::option::Option<i64> {
        &self.record_ingestion_failures
    }
    /// <p></p>
    pub fn file_failures(mut self, input: i64) -> Self {
        self.file_failures = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_file_failures(mut self, input: ::std::option::Option<i64>) -> Self {
        self.file_failures = input;
        self
    }
    /// <p></p>
    pub fn get_file_failures(&self) -> &::std::option::Option<i64> {
        &self.file_failures
    }
    /// <p></p>
    pub fn bytes_metered(mut self, input: i64) -> Self {
        self.bytes_metered = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_bytes_metered(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_metered = input;
        self
    }
    /// <p></p>
    pub fn get_bytes_metered(&self) -> &::std::option::Option<i64> {
        &self.bytes_metered
    }
    /// Consumes the builder and constructs a [`BatchLoadProgressReport`](crate::types::BatchLoadProgressReport).
    pub fn build(self) -> crate::types::BatchLoadProgressReport {
        crate::types::BatchLoadProgressReport {
            records_processed: self.records_processed.unwrap_or_default(),
            records_ingested: self.records_ingested.unwrap_or_default(),
            parse_failures: self.parse_failures.unwrap_or_default(),
            record_ingestion_failures: self.record_ingestion_failures.unwrap_or_default(),
            file_failures: self.file_failures.unwrap_or_default(),
            bytes_metered: self.bytes_metered.unwrap_or_default(),
        }
    }
}
