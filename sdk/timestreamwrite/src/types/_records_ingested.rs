// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information on the records ingested by this request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecordsIngested {
    /// <p>Total count of successfully ingested records.</p>
    pub total: i32,
    /// <p>Count of records ingested into the memory store.</p>
    pub memory_store: i32,
    /// <p>Count of records ingested into the magnetic store.</p>
    pub magnetic_store: i32,
}
impl RecordsIngested {
    /// <p>Total count of successfully ingested records.</p>
    pub fn total(&self) -> i32 {
        self.total
    }
    /// <p>Count of records ingested into the memory store.</p>
    pub fn memory_store(&self) -> i32 {
        self.memory_store
    }
    /// <p>Count of records ingested into the magnetic store.</p>
    pub fn magnetic_store(&self) -> i32 {
        self.magnetic_store
    }
}
impl RecordsIngested {
    /// Creates a new builder-style object to manufacture [`RecordsIngested`](crate::types::RecordsIngested).
    pub fn builder() -> crate::types::builders::RecordsIngestedBuilder {
        crate::types::builders::RecordsIngestedBuilder::default()
    }
}

/// A builder for [`RecordsIngested`](crate::types::RecordsIngested).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecordsIngestedBuilder {
    pub(crate) total: ::std::option::Option<i32>,
    pub(crate) memory_store: ::std::option::Option<i32>,
    pub(crate) magnetic_store: ::std::option::Option<i32>,
}
impl RecordsIngestedBuilder {
    /// <p>Total count of successfully ingested records.</p>
    pub fn total(mut self, input: i32) -> Self {
        self.total = ::std::option::Option::Some(input);
        self
    }
    /// <p>Total count of successfully ingested records.</p>
    pub fn set_total(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total = input;
        self
    }
    /// <p>Total count of successfully ingested records.</p>
    pub fn get_total(&self) -> &::std::option::Option<i32> {
        &self.total
    }
    /// <p>Count of records ingested into the memory store.</p>
    pub fn memory_store(mut self, input: i32) -> Self {
        self.memory_store = ::std::option::Option::Some(input);
        self
    }
    /// <p>Count of records ingested into the memory store.</p>
    pub fn set_memory_store(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory_store = input;
        self
    }
    /// <p>Count of records ingested into the memory store.</p>
    pub fn get_memory_store(&self) -> &::std::option::Option<i32> {
        &self.memory_store
    }
    /// <p>Count of records ingested into the magnetic store.</p>
    pub fn magnetic_store(mut self, input: i32) -> Self {
        self.magnetic_store = ::std::option::Option::Some(input);
        self
    }
    /// <p>Count of records ingested into the magnetic store.</p>
    pub fn set_magnetic_store(mut self, input: ::std::option::Option<i32>) -> Self {
        self.magnetic_store = input;
        self
    }
    /// <p>Count of records ingested into the magnetic store.</p>
    pub fn get_magnetic_store(&self) -> &::std::option::Option<i32> {
        &self.magnetic_store
    }
    /// Consumes the builder and constructs a [`RecordsIngested`](crate::types::RecordsIngested).
    pub fn build(self) -> crate::types::RecordsIngested {
        crate::types::RecordsIngested {
            total: self.total.unwrap_or_default(),
            memory_store: self.memory_store.unwrap_or_default(),
            magnetic_store: self.magnetic_store.unwrap_or_default(),
        }
    }
}
