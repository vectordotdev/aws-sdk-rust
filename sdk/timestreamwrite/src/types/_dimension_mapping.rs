// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DimensionMapping {
    /// <p></p>
    pub source_column: ::std::option::Option<::std::string::String>,
    /// <p> </p>
    pub destination_column: ::std::option::Option<::std::string::String>,
}
impl DimensionMapping {
    /// <p></p>
    pub fn source_column(&self) -> ::std::option::Option<&str> {
        self.source_column.as_deref()
    }
    /// <p> </p>
    pub fn destination_column(&self) -> ::std::option::Option<&str> {
        self.destination_column.as_deref()
    }
}
impl DimensionMapping {
    /// Creates a new builder-style object to manufacture [`DimensionMapping`](crate::types::DimensionMapping).
    pub fn builder() -> crate::types::builders::DimensionMappingBuilder {
        crate::types::builders::DimensionMappingBuilder::default()
    }
}

/// A builder for [`DimensionMapping`](crate::types::DimensionMapping).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DimensionMappingBuilder {
    pub(crate) source_column: ::std::option::Option<::std::string::String>,
    pub(crate) destination_column: ::std::option::Option<::std::string::String>,
}
impl DimensionMappingBuilder {
    /// <p></p>
    pub fn source_column(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_column = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_source_column(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_column = input;
        self
    }
    /// <p></p>
    pub fn get_source_column(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_column
    }
    /// <p> </p>
    pub fn destination_column(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_column = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> </p>
    pub fn set_destination_column(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_column = input;
        self
    }
    /// <p> </p>
    pub fn get_destination_column(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_column
    }
    /// Consumes the builder and constructs a [`DimensionMapping`](crate::types::DimensionMapping).
    pub fn build(self) -> crate::types::DimensionMapping {
        crate::types::DimensionMapping {
            source_column: self.source_column,
            destination_column: self.destination_column,
        }
    }
}
