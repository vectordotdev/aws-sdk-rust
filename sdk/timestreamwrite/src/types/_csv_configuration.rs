// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A delimited data format where the column separator can be a comma and the record separator is a newline character.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CsvConfiguration {
    /// <p>Column separator can be one of comma (','), pipe ('|), semicolon (';'), tab('/t'), or blank space (' '). </p>
    pub column_separator: ::std::option::Option<::std::string::String>,
    /// <p>Escape character can be one of </p>
    pub escape_char: ::std::option::Option<::std::string::String>,
    /// <p>Can be single quote (') or double quote (").</p>
    pub quote_char: ::std::option::Option<::std::string::String>,
    /// <p>Can be blank space (' ').</p>
    pub null_value: ::std::option::Option<::std::string::String>,
    /// <p>Specifies to trim leading and trailing white space.</p>
    pub trim_white_space: ::std::option::Option<bool>,
}
impl CsvConfiguration {
    /// <p>Column separator can be one of comma (','), pipe ('|), semicolon (';'), tab('/t'), or blank space (' '). </p>
    pub fn column_separator(&self) -> ::std::option::Option<&str> {
        self.column_separator.as_deref()
    }
    /// <p>Escape character can be one of </p>
    pub fn escape_char(&self) -> ::std::option::Option<&str> {
        self.escape_char.as_deref()
    }
    /// <p>Can be single quote (') or double quote (").</p>
    pub fn quote_char(&self) -> ::std::option::Option<&str> {
        self.quote_char.as_deref()
    }
    /// <p>Can be blank space (' ').</p>
    pub fn null_value(&self) -> ::std::option::Option<&str> {
        self.null_value.as_deref()
    }
    /// <p>Specifies to trim leading and trailing white space.</p>
    pub fn trim_white_space(&self) -> ::std::option::Option<bool> {
        self.trim_white_space
    }
}
impl CsvConfiguration {
    /// Creates a new builder-style object to manufacture [`CsvConfiguration`](crate::types::CsvConfiguration).
    pub fn builder() -> crate::types::builders::CsvConfigurationBuilder {
        crate::types::builders::CsvConfigurationBuilder::default()
    }
}

/// A builder for [`CsvConfiguration`](crate::types::CsvConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CsvConfigurationBuilder {
    pub(crate) column_separator: ::std::option::Option<::std::string::String>,
    pub(crate) escape_char: ::std::option::Option<::std::string::String>,
    pub(crate) quote_char: ::std::option::Option<::std::string::String>,
    pub(crate) null_value: ::std::option::Option<::std::string::String>,
    pub(crate) trim_white_space: ::std::option::Option<bool>,
}
impl CsvConfigurationBuilder {
    /// <p>Column separator can be one of comma (','), pipe ('|), semicolon (';'), tab('/t'), or blank space (' '). </p>
    pub fn column_separator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.column_separator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Column separator can be one of comma (','), pipe ('|), semicolon (';'), tab('/t'), or blank space (' '). </p>
    pub fn set_column_separator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.column_separator = input;
        self
    }
    /// <p>Column separator can be one of comma (','), pipe ('|), semicolon (';'), tab('/t'), or blank space (' '). </p>
    pub fn get_column_separator(&self) -> &::std::option::Option<::std::string::String> {
        &self.column_separator
    }
    /// <p>Escape character can be one of </p>
    pub fn escape_char(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.escape_char = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Escape character can be one of </p>
    pub fn set_escape_char(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.escape_char = input;
        self
    }
    /// <p>Escape character can be one of </p>
    pub fn get_escape_char(&self) -> &::std::option::Option<::std::string::String> {
        &self.escape_char
    }
    /// <p>Can be single quote (') or double quote (").</p>
    pub fn quote_char(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.quote_char = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Can be single quote (') or double quote (").</p>
    pub fn set_quote_char(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.quote_char = input;
        self
    }
    /// <p>Can be single quote (') or double quote (").</p>
    pub fn get_quote_char(&self) -> &::std::option::Option<::std::string::String> {
        &self.quote_char
    }
    /// <p>Can be blank space (' ').</p>
    pub fn null_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.null_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Can be blank space (' ').</p>
    pub fn set_null_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.null_value = input;
        self
    }
    /// <p>Can be blank space (' ').</p>
    pub fn get_null_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.null_value
    }
    /// <p>Specifies to trim leading and trailing white space.</p>
    pub fn trim_white_space(mut self, input: bool) -> Self {
        self.trim_white_space = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies to trim leading and trailing white space.</p>
    pub fn set_trim_white_space(mut self, input: ::std::option::Option<bool>) -> Self {
        self.trim_white_space = input;
        self
    }
    /// <p>Specifies to trim leading and trailing white space.</p>
    pub fn get_trim_white_space(&self) -> &::std::option::Option<bool> {
        &self.trim_white_space
    }
    /// Consumes the builder and constructs a [`CsvConfiguration`](crate::types::CsvConfiguration).
    pub fn build(self) -> crate::types::CsvConfiguration {
        crate::types::CsvConfiguration {
            column_separator: self.column_separator,
            escape_char: self.escape_char,
            quote_char: self.quote_char,
            null_value: self.null_value,
            trim_white_space: self.trim_white_space,
        }
    }
}
