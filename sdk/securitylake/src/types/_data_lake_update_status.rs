// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request. This is set to Completed after the configuration is updated, or removed if deletion of the data lake is successful.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeUpdateStatus {
    /// <p>The unique ID for the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request.</p>
    pub request_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request that was requested.</p>
    pub status: ::std::option::Option<crate::types::DataLakeStatus>,
    /// <p>The details of the last <code>UpdateDataLake</code>or <code>DeleteDataLake</code> API request which failed.</p>
    pub exception: ::std::option::Option<crate::types::DataLakeUpdateException>,
}
impl DataLakeUpdateStatus {
    /// <p>The unique ID for the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request.</p>
    pub fn request_id(&self) -> ::std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>The status of the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request that was requested.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DataLakeStatus> {
        self.status.as_ref()
    }
    /// <p>The details of the last <code>UpdateDataLake</code>or <code>DeleteDataLake</code> API request which failed.</p>
    pub fn exception(&self) -> ::std::option::Option<&crate::types::DataLakeUpdateException> {
        self.exception.as_ref()
    }
}
impl DataLakeUpdateStatus {
    /// Creates a new builder-style object to manufacture [`DataLakeUpdateStatus`](crate::types::DataLakeUpdateStatus).
    pub fn builder() -> crate::types::builders::DataLakeUpdateStatusBuilder {
        crate::types::builders::DataLakeUpdateStatusBuilder::default()
    }
}

/// A builder for [`DataLakeUpdateStatus`](crate::types::DataLakeUpdateStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataLakeUpdateStatusBuilder {
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DataLakeStatus>,
    pub(crate) exception: ::std::option::Option<crate::types::DataLakeUpdateException>,
}
impl DataLakeUpdateStatusBuilder {
    /// <p>The unique ID for the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request.</p>
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The unique ID for the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The status of the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request that was requested.</p>
    pub fn status(mut self, input: crate::types::DataLakeStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request that was requested.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataLakeStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the last <code>UpdateDataLake</code> or <code>DeleteDataLake</code> API request that was requested.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataLakeStatus> {
        &self.status
    }
    /// <p>The details of the last <code>UpdateDataLake</code>or <code>DeleteDataLake</code> API request which failed.</p>
    pub fn exception(mut self, input: crate::types::DataLakeUpdateException) -> Self {
        self.exception = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the last <code>UpdateDataLake</code>or <code>DeleteDataLake</code> API request which failed.</p>
    pub fn set_exception(mut self, input: ::std::option::Option<crate::types::DataLakeUpdateException>) -> Self {
        self.exception = input;
        self
    }
    /// <p>The details of the last <code>UpdateDataLake</code>or <code>DeleteDataLake</code> API request which failed.</p>
    pub fn get_exception(&self) -> &::std::option::Option<crate::types::DataLakeUpdateException> {
        &self.exception
    }
    /// Consumes the builder and constructs a [`DataLakeUpdateStatus`](crate::types::DataLakeUpdateStatus).
    pub fn build(self) -> crate::types::DataLakeUpdateStatus {
        crate::types::DataLakeUpdateStatus {
            request_id: self.request_id,
            status: self.status,
            exception: self.exception,
        }
    }
}
