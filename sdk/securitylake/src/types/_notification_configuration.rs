// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specify the configurations you want to use for subscriber notification to notify the subscriber when new data is written to the data lake for sources that the subscriber consumes in Security Lake. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum NotificationConfiguration {
    /// <p>The configurations for HTTPS subscriber notification.</p>
    HttpsNotificationConfiguration(crate::types::HttpsNotificationConfiguration),
    /// <p>The configurations for SQS subscriber notification.</p>
    SqsNotificationConfiguration(crate::types::SqsNotificationConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl NotificationConfiguration {
    /// Tries to convert the enum instance into [`HttpsNotificationConfiguration`](crate::types::NotificationConfiguration::HttpsNotificationConfiguration), extracting the inner [`HttpsNotificationConfiguration`](crate::types::HttpsNotificationConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_https_notification_configuration(&self) -> ::std::result::Result<&crate::types::HttpsNotificationConfiguration, &Self> {
        if let NotificationConfiguration::HttpsNotificationConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`HttpsNotificationConfiguration`](crate::types::NotificationConfiguration::HttpsNotificationConfiguration).
    pub fn is_https_notification_configuration(&self) -> bool {
        self.as_https_notification_configuration().is_ok()
    }
    /// Tries to convert the enum instance into [`SqsNotificationConfiguration`](crate::types::NotificationConfiguration::SqsNotificationConfiguration), extracting the inner [`SqsNotificationConfiguration`](crate::types::SqsNotificationConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_sqs_notification_configuration(&self) -> ::std::result::Result<&crate::types::SqsNotificationConfiguration, &Self> {
        if let NotificationConfiguration::SqsNotificationConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SqsNotificationConfiguration`](crate::types::NotificationConfiguration::SqsNotificationConfiguration).
    pub fn is_sqs_notification_configuration(&self) -> bool {
        self.as_sqs_notification_configuration().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
