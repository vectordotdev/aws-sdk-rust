// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The attributes of a third-party custom source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomLogSourceAttributes {
    /// <p>The ARN of the Glue crawler.</p>
    pub crawler_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
    pub database_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Glue table.</p>
    pub table_arn: ::std::option::Option<::std::string::String>,
}
impl CustomLogSourceAttributes {
    /// <p>The ARN of the Glue crawler.</p>
    pub fn crawler_arn(&self) -> ::std::option::Option<&str> {
        self.crawler_arn.as_deref()
    }
    /// <p>The ARN of the Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
    pub fn database_arn(&self) -> ::std::option::Option<&str> {
        self.database_arn.as_deref()
    }
    /// <p>The ARN of the Glue table.</p>
    pub fn table_arn(&self) -> ::std::option::Option<&str> {
        self.table_arn.as_deref()
    }
}
impl CustomLogSourceAttributes {
    /// Creates a new builder-style object to manufacture [`CustomLogSourceAttributes`](crate::types::CustomLogSourceAttributes).
    pub fn builder() -> crate::types::builders::CustomLogSourceAttributesBuilder {
        crate::types::builders::CustomLogSourceAttributesBuilder::default()
    }
}

/// A builder for [`CustomLogSourceAttributes`](crate::types::CustomLogSourceAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomLogSourceAttributesBuilder {
    pub(crate) crawler_arn: ::std::option::Option<::std::string::String>,
    pub(crate) database_arn: ::std::option::Option<::std::string::String>,
    pub(crate) table_arn: ::std::option::Option<::std::string::String>,
}
impl CustomLogSourceAttributesBuilder {
    /// <p>The ARN of the Glue crawler.</p>
    pub fn crawler_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.crawler_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Glue crawler.</p>
    pub fn set_crawler_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.crawler_arn = input;
        self
    }
    /// <p>The ARN of the Glue crawler.</p>
    pub fn get_crawler_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.crawler_arn
    }
    /// <p>The ARN of the Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
    pub fn database_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
    pub fn set_database_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_arn = input;
        self
    }
    /// <p>The ARN of the Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
    pub fn get_database_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_arn
    }
    /// <p>The ARN of the Glue table.</p>
    pub fn table_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Glue table.</p>
    pub fn set_table_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_arn = input;
        self
    }
    /// <p>The ARN of the Glue table.</p>
    pub fn get_table_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_arn
    }
    /// Consumes the builder and constructs a [`CustomLogSourceAttributes`](crate::types::CustomLogSourceAttributes).
    pub fn build(self) -> crate::types::CustomLogSourceAttributes {
        crate::types::CustomLogSourceAttributes {
            crawler_arn: self.crawler_arn,
            database_arn: self.database_arn,
            table_arn: self.table_arn,
        }
    }
}
