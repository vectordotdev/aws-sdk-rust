// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provide expiration lifecycle details of Amazon Security Lake object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeLifecycleExpiration {
    /// <p>Number of days before data expires in the Amazon Security Lake object.</p>
    pub days: ::std::option::Option<i32>,
}
impl DataLakeLifecycleExpiration {
    /// <p>Number of days before data expires in the Amazon Security Lake object.</p>
    pub fn days(&self) -> ::std::option::Option<i32> {
        self.days
    }
}
impl DataLakeLifecycleExpiration {
    /// Creates a new builder-style object to manufacture [`DataLakeLifecycleExpiration`](crate::types::DataLakeLifecycleExpiration).
    pub fn builder() -> crate::types::builders::DataLakeLifecycleExpirationBuilder {
        crate::types::builders::DataLakeLifecycleExpirationBuilder::default()
    }
}

/// A builder for [`DataLakeLifecycleExpiration`](crate::types::DataLakeLifecycleExpiration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataLakeLifecycleExpirationBuilder {
    pub(crate) days: ::std::option::Option<i32>,
}
impl DataLakeLifecycleExpirationBuilder {
    /// <p>Number of days before data expires in the Amazon Security Lake object.</p>
    pub fn days(mut self, input: i32) -> Self {
        self.days = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of days before data expires in the Amazon Security Lake object.</p>
    pub fn set_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.days = input;
        self
    }
    /// <p>Number of days before data expires in the Amazon Security Lake object.</p>
    pub fn get_days(&self) -> &::std::option::Option<i32> {
        &self.days
    }
    /// Consumes the builder and constructs a [`DataLakeLifecycleExpiration`](crate::types::DataLakeLifecycleExpiration).
    pub fn build(self) -> crate::types::DataLakeLifecycleExpiration {
        crate::types::DataLakeLifecycleExpiration { days: self.days }
    }
}
