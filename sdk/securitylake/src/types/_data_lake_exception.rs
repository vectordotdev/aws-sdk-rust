// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for an Amazon Security Lake exception.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeException {
    /// <p>The Amazon Web Services Regions where the exception occurred.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The underlying exception of a Security Lake exception.</p>
    pub exception: ::std::option::Option<::std::string::String>,
    /// <p>List of all remediation steps for a Security Lake exception.</p>
    pub remediation: ::std::option::Option<::std::string::String>,
    /// <p>This error can occur if you configure the wrong timestamp format, or if the subset of entries used for validation had errors or missing values.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataLakeException {
    /// <p>The Amazon Web Services Regions where the exception occurred.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The underlying exception of a Security Lake exception.</p>
    pub fn exception(&self) -> ::std::option::Option<&str> {
        self.exception.as_deref()
    }
    /// <p>List of all remediation steps for a Security Lake exception.</p>
    pub fn remediation(&self) -> ::std::option::Option<&str> {
        self.remediation.as_deref()
    }
    /// <p>This error can occur if you configure the wrong timestamp format, or if the subset of entries used for validation had errors or missing values.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
}
impl DataLakeException {
    /// Creates a new builder-style object to manufacture [`DataLakeException`](crate::types::DataLakeException).
    pub fn builder() -> crate::types::builders::DataLakeExceptionBuilder {
        crate::types::builders::DataLakeExceptionBuilder::default()
    }
}

/// A builder for [`DataLakeException`](crate::types::DataLakeException).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataLakeExceptionBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) exception: ::std::option::Option<::std::string::String>,
    pub(crate) remediation: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataLakeExceptionBuilder {
    /// <p>The Amazon Web Services Regions where the exception occurred.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Regions where the exception occurred.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Regions where the exception occurred.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The underlying exception of a Security Lake exception.</p>
    pub fn exception(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.exception = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The underlying exception of a Security Lake exception.</p>
    pub fn set_exception(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.exception = input;
        self
    }
    /// <p>The underlying exception of a Security Lake exception.</p>
    pub fn get_exception(&self) -> &::std::option::Option<::std::string::String> {
        &self.exception
    }
    /// <p>List of all remediation steps for a Security Lake exception.</p>
    pub fn remediation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remediation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>List of all remediation steps for a Security Lake exception.</p>
    pub fn set_remediation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remediation = input;
        self
    }
    /// <p>List of all remediation steps for a Security Lake exception.</p>
    pub fn get_remediation(&self) -> &::std::option::Option<::std::string::String> {
        &self.remediation
    }
    /// <p>This error can occur if you configure the wrong timestamp format, or if the subset of entries used for validation had errors or missing values.</p>
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>This error can occur if you configure the wrong timestamp format, or if the subset of entries used for validation had errors or missing values.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>This error can occur if you configure the wrong timestamp format, or if the subset of entries used for validation had errors or missing values.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Consumes the builder and constructs a [`DataLakeException`](crate::types::DataLakeException).
    pub fn build(self) -> crate::types::DataLakeException {
        crate::types::DataLakeException {
            region: self.region,
            exception: self.exception,
            remediation: self.remediation,
            timestamp: self.timestamp,
        }
    }
}
