// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The supported source types from which logs and events are collected in Amazon Security Lake. For a list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum LogSourceResource {
    /// <p>Amazon Security Lake supports log and event collection for natively supported Amazon Web Services. For more information, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.</p>
    AwsLogSource(crate::types::AwsLogSourceResource),
    /// <p>Amazon Security Lake supports custom source types. For more information, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/custom-sources.html">Amazon Security Lake User Guide</a>.</p>
    CustomLogSource(crate::types::CustomLogSourceResource),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl LogSourceResource {
    /// Tries to convert the enum instance into [`AwsLogSource`](crate::types::LogSourceResource::AwsLogSource), extracting the inner [`AwsLogSourceResource`](crate::types::AwsLogSourceResource).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_aws_log_source(&self) -> ::std::result::Result<&crate::types::AwsLogSourceResource, &Self> {
        if let LogSourceResource::AwsLogSource(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AwsLogSource`](crate::types::LogSourceResource::AwsLogSource).
    pub fn is_aws_log_source(&self) -> bool {
        self.as_aws_log_source().is_ok()
    }
    /// Tries to convert the enum instance into [`CustomLogSource`](crate::types::LogSourceResource::CustomLogSource), extracting the inner [`CustomLogSourceResource`](crate::types::CustomLogSourceResource).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_custom_log_source(&self) -> ::std::result::Result<&crate::types::CustomLogSourceResource, &Self> {
        if let LogSourceResource::CustomLogSource(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CustomLogSource`](crate::types::LogSourceResource::CustomLogSource).
    pub fn is_custom_log_source(&self) -> bool {
        self.as_custom_log_source().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
