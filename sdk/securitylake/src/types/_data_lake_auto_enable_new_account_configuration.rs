// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Automatically enable new organization accounts as member accounts from an Amazon Security Lake administrator account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeAutoEnableNewAccountConfiguration {
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services sources that are automatically enabled in Security Lake.</p>
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::AwsLogSourceResource>>,
}
impl DataLakeAutoEnableNewAccountConfiguration {
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The Amazon Web Services sources that are automatically enabled in Security Lake.</p>
    pub fn sources(&self) -> ::std::option::Option<&[crate::types::AwsLogSourceResource]> {
        self.sources.as_deref()
    }
}
impl DataLakeAutoEnableNewAccountConfiguration {
    /// Creates a new builder-style object to manufacture [`DataLakeAutoEnableNewAccountConfiguration`](crate::types::DataLakeAutoEnableNewAccountConfiguration).
    pub fn builder() -> crate::types::builders::DataLakeAutoEnableNewAccountConfigurationBuilder {
        crate::types::builders::DataLakeAutoEnableNewAccountConfigurationBuilder::default()
    }
}

/// A builder for [`DataLakeAutoEnableNewAccountConfiguration`](crate::types::DataLakeAutoEnableNewAccountConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataLakeAutoEnableNewAccountConfigurationBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::AwsLogSourceResource>>,
}
impl DataLakeAutoEnableNewAccountConfigurationBuilder {
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The Amazon Web Services sources that are automatically enabled in Security Lake.</p>
    pub fn sources(mut self, input: crate::types::AwsLogSourceResource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services sources that are automatically enabled in Security Lake.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsLogSourceResource>>) -> Self {
        self.sources = input;
        self
    }
    /// <p>The Amazon Web Services sources that are automatically enabled in Security Lake.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsLogSourceResource>> {
        &self.sources
    }
    /// Consumes the builder and constructs a [`DataLakeAutoEnableNewAccountConfiguration`](crate::types::DataLakeAutoEnableNewAccountConfiguration).
    pub fn build(self) -> crate::types::DataLakeAutoEnableNewAccountConfiguration {
        crate::types::DataLakeAutoEnableNewAccountConfiguration {
            region: self.region,
            sources: self.sources,
        }
    }
}
