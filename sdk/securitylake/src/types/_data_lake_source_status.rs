// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Retrieves the Logs status for the Amazon Security Lake account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeSourceStatus {
    /// <p>Defines path the stored logs are available which has information on your systems, applications, and services.</p>
    pub resource: ::std::option::Option<::std::string::String>,
    /// <p>The health status of services, including error codes and patterns.</p>
    pub status: ::std::option::Option<crate::types::SourceCollectionStatus>,
}
impl DataLakeSourceStatus {
    /// <p>Defines path the stored logs are available which has information on your systems, applications, and services.</p>
    pub fn resource(&self) -> ::std::option::Option<&str> {
        self.resource.as_deref()
    }
    /// <p>The health status of services, including error codes and patterns.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SourceCollectionStatus> {
        self.status.as_ref()
    }
}
impl DataLakeSourceStatus {
    /// Creates a new builder-style object to manufacture [`DataLakeSourceStatus`](crate::types::DataLakeSourceStatus).
    pub fn builder() -> crate::types::builders::DataLakeSourceStatusBuilder {
        crate::types::builders::DataLakeSourceStatusBuilder::default()
    }
}

/// A builder for [`DataLakeSourceStatus`](crate::types::DataLakeSourceStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataLakeSourceStatusBuilder {
    pub(crate) resource: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SourceCollectionStatus>,
}
impl DataLakeSourceStatusBuilder {
    /// <p>Defines path the stored logs are available which has information on your systems, applications, and services.</p>
    pub fn resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Defines path the stored logs are available which has information on your systems, applications, and services.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource = input;
        self
    }
    /// <p>Defines path the stored logs are available which has information on your systems, applications, and services.</p>
    pub fn get_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource
    }
    /// <p>The health status of services, including error codes and patterns.</p>
    pub fn status(mut self, input: crate::types::SourceCollectionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health status of services, including error codes and patterns.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SourceCollectionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The health status of services, including error codes and patterns.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SourceCollectionStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`DataLakeSourceStatus`](crate::types::DataLakeSourceStatus).
    pub fn build(self) -> crate::types::DataLakeSourceStatus {
        crate::types::DataLakeSourceStatus {
            resource: self.resource,
            status: self.status,
        }
    }
}
