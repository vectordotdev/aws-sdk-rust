// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provide transition lifecycle details of Amazon Security Lake object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeLifecycleTransition {
    /// <p>The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.</p>
    pub storage_class: ::std::option::Option<::std::string::String>,
    /// <p>Number of days before data transitions to a different S3 Storage Class in the Amazon Security Lake object.</p>
    pub days: ::std::option::Option<i32>,
}
impl DataLakeLifecycleTransition {
    /// <p>The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.</p>
    pub fn storage_class(&self) -> ::std::option::Option<&str> {
        self.storage_class.as_deref()
    }
    /// <p>Number of days before data transitions to a different S3 Storage Class in the Amazon Security Lake object.</p>
    pub fn days(&self) -> ::std::option::Option<i32> {
        self.days
    }
}
impl DataLakeLifecycleTransition {
    /// Creates a new builder-style object to manufacture [`DataLakeLifecycleTransition`](crate::types::DataLakeLifecycleTransition).
    pub fn builder() -> crate::types::builders::DataLakeLifecycleTransitionBuilder {
        crate::types::builders::DataLakeLifecycleTransitionBuilder::default()
    }
}

/// A builder for [`DataLakeLifecycleTransition`](crate::types::DataLakeLifecycleTransition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataLakeLifecycleTransitionBuilder {
    pub(crate) storage_class: ::std::option::Option<::std::string::String>,
    pub(crate) days: ::std::option::Option<i32>,
}
impl DataLakeLifecycleTransitionBuilder {
    /// <p>The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.</p>
    pub fn storage_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.</p>
    pub fn set_storage_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_class = input;
        self
    }
    /// <p>The range of storage classes that you can choose from based on the data access, resiliency, and cost requirements of your workloads.</p>
    pub fn get_storage_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_class
    }
    /// <p>Number of days before data transitions to a different S3 Storage Class in the Amazon Security Lake object.</p>
    pub fn days(mut self, input: i32) -> Self {
        self.days = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of days before data transitions to a different S3 Storage Class in the Amazon Security Lake object.</p>
    pub fn set_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.days = input;
        self
    }
    /// <p>Number of days before data transitions to a different S3 Storage Class in the Amazon Security Lake object.</p>
    pub fn get_days(&self) -> &::std::option::Option<i32> {
        &self.days
    }
    /// Consumes the builder and constructs a [`DataLakeLifecycleTransition`](crate::types::DataLakeLifecycleTransition).
    pub fn build(self) -> crate::types::DataLakeLifecycleTransition {
        crate::types::DataLakeLifecycleTransition {
            storage_class: self.storage_class,
            days: self.days,
        }
    }
}
