// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Amazon Security Lake can collect logs and events from third-party custom sources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomLogSourceResource {
    /// <p>The name for a third-party custom source. This must be a Regionally unique value.</p>
    pub source_name: ::std::option::Option<::std::string::String>,
    /// <p>The version for a third-party custom source. This must be a Regionally unique value.</p>
    pub source_version: ::std::option::Option<::std::string::String>,
    /// <p>The details of the log provider for a third-party custom source.</p>
    pub provider: ::std::option::Option<crate::types::CustomLogSourceProvider>,
    /// <p>The attributes of a third-party custom source.</p>
    pub attributes: ::std::option::Option<crate::types::CustomLogSourceAttributes>,
}
impl CustomLogSourceResource {
    /// <p>The name for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn source_name(&self) -> ::std::option::Option<&str> {
        self.source_name.as_deref()
    }
    /// <p>The version for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn source_version(&self) -> ::std::option::Option<&str> {
        self.source_version.as_deref()
    }
    /// <p>The details of the log provider for a third-party custom source.</p>
    pub fn provider(&self) -> ::std::option::Option<&crate::types::CustomLogSourceProvider> {
        self.provider.as_ref()
    }
    /// <p>The attributes of a third-party custom source.</p>
    pub fn attributes(&self) -> ::std::option::Option<&crate::types::CustomLogSourceAttributes> {
        self.attributes.as_ref()
    }
}
impl CustomLogSourceResource {
    /// Creates a new builder-style object to manufacture [`CustomLogSourceResource`](crate::types::CustomLogSourceResource).
    pub fn builder() -> crate::types::builders::CustomLogSourceResourceBuilder {
        crate::types::builders::CustomLogSourceResourceBuilder::default()
    }
}

/// A builder for [`CustomLogSourceResource`](crate::types::CustomLogSourceResource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomLogSourceResourceBuilder {
    pub(crate) source_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_version: ::std::option::Option<::std::string::String>,
    pub(crate) provider: ::std::option::Option<crate::types::CustomLogSourceProvider>,
    pub(crate) attributes: ::std::option::Option<crate::types::CustomLogSourceAttributes>,
}
impl CustomLogSourceResourceBuilder {
    /// <p>The name for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn set_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_name = input;
        self
    }
    /// <p>The name for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn get_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_name
    }
    /// <p>The version for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn source_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn set_source_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_version = input;
        self
    }
    /// <p>The version for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn get_source_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_version
    }
    /// <p>The details of the log provider for a third-party custom source.</p>
    pub fn provider(mut self, input: crate::types::CustomLogSourceProvider) -> Self {
        self.provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the log provider for a third-party custom source.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<crate::types::CustomLogSourceProvider>) -> Self {
        self.provider = input;
        self
    }
    /// <p>The details of the log provider for a third-party custom source.</p>
    pub fn get_provider(&self) -> &::std::option::Option<crate::types::CustomLogSourceProvider> {
        &self.provider
    }
    /// <p>The attributes of a third-party custom source.</p>
    pub fn attributes(mut self, input: crate::types::CustomLogSourceAttributes) -> Self {
        self.attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attributes of a third-party custom source.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<crate::types::CustomLogSourceAttributes>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The attributes of a third-party custom source.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<crate::types::CustomLogSourceAttributes> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`CustomLogSourceResource`](crate::types::CustomLogSourceResource).
    pub fn build(self) -> crate::types::CustomLogSourceResource {
        crate::types::CustomLogSourceResource {
            source_name: self.source_name,
            source_version: self.source_version,
            provider: self.provider,
            attributes: self.attributes,
        }
    }
}
