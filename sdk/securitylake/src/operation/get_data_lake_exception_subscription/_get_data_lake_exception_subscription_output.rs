// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDataLakeExceptionSubscriptionOutput {
    /// <p>The subscription protocol to which exception notifications are posted.</p>
    pub subscription_protocol: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account where you receive exception notifications.</p>
    pub notification_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub exception_time_to_live: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetDataLakeExceptionSubscriptionOutput {
    /// <p>The subscription protocol to which exception notifications are posted.</p>
    pub fn subscription_protocol(&self) -> ::std::option::Option<&str> {
        self.subscription_protocol.as_deref()
    }
    /// <p>The Amazon Web Services account where you receive exception notifications.</p>
    pub fn notification_endpoint(&self) -> ::std::option::Option<&str> {
        self.notification_endpoint.as_deref()
    }
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn exception_time_to_live(&self) -> ::std::option::Option<i64> {
        self.exception_time_to_live
    }
}
impl ::aws_http::request_id::RequestId for GetDataLakeExceptionSubscriptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDataLakeExceptionSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`GetDataLakeExceptionSubscriptionOutput`](crate::operation::get_data_lake_exception_subscription::GetDataLakeExceptionSubscriptionOutput).
    pub fn builder() -> crate::operation::get_data_lake_exception_subscription::builders::GetDataLakeExceptionSubscriptionOutputBuilder {
        crate::operation::get_data_lake_exception_subscription::builders::GetDataLakeExceptionSubscriptionOutputBuilder::default()
    }
}

/// A builder for [`GetDataLakeExceptionSubscriptionOutput`](crate::operation::get_data_lake_exception_subscription::GetDataLakeExceptionSubscriptionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDataLakeExceptionSubscriptionOutputBuilder {
    pub(crate) subscription_protocol: ::std::option::Option<::std::string::String>,
    pub(crate) notification_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) exception_time_to_live: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetDataLakeExceptionSubscriptionOutputBuilder {
    /// <p>The subscription protocol to which exception notifications are posted.</p>
    pub fn subscription_protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subscription protocol to which exception notifications are posted.</p>
    pub fn set_subscription_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_protocol = input;
        self
    }
    /// <p>The subscription protocol to which exception notifications are posted.</p>
    pub fn get_subscription_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_protocol
    }
    /// <p>The Amazon Web Services account where you receive exception notifications.</p>
    pub fn notification_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notification_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account where you receive exception notifications.</p>
    pub fn set_notification_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notification_endpoint = input;
        self
    }
    /// <p>The Amazon Web Services account where you receive exception notifications.</p>
    pub fn get_notification_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.notification_endpoint
    }
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn exception_time_to_live(mut self, input: i64) -> Self {
        self.exception_time_to_live = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn set_exception_time_to_live(mut self, input: ::std::option::Option<i64>) -> Self {
        self.exception_time_to_live = input;
        self
    }
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn get_exception_time_to_live(&self) -> &::std::option::Option<i64> {
        &self.exception_time_to_live
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDataLakeExceptionSubscriptionOutput`](crate::operation::get_data_lake_exception_subscription::GetDataLakeExceptionSubscriptionOutput).
    pub fn build(self) -> crate::operation::get_data_lake_exception_subscription::GetDataLakeExceptionSubscriptionOutput {
        crate::operation::get_data_lake_exception_subscription::GetDataLakeExceptionSubscriptionOutput {
            subscription_protocol: self.subscription_protocol,
            notification_endpoint: self.notification_endpoint,
            exception_time_to_live: self.exception_time_to_live,
            _request_id: self._request_id,
        }
    }
}
