// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_aws_log_source;

pub(crate) mod shape_create_custom_log_source;

pub(crate) mod shape_create_data_lake;

pub(crate) mod shape_create_data_lake_exception_subscription;

pub(crate) mod shape_create_data_lake_organization_configuration;

pub(crate) mod shape_create_subscriber;

pub(crate) mod shape_create_subscriber_notification;

pub(crate) mod shape_delete_aws_log_source;

pub(crate) mod shape_delete_custom_log_source;

pub(crate) mod shape_delete_data_lake;

pub(crate) mod shape_delete_data_lake_exception_subscription;

pub(crate) mod shape_delete_data_lake_organization_configuration;

pub(crate) mod shape_delete_subscriber;

pub(crate) mod shape_delete_subscriber_notification;

pub(crate) mod shape_deregister_data_lake_delegated_administrator;

pub(crate) mod shape_get_data_lake_exception_subscription;

pub(crate) mod shape_get_data_lake_organization_configuration;

pub(crate) mod shape_get_data_lake_sources;

pub(crate) mod shape_get_subscriber;

pub(crate) mod shape_list_data_lake_exceptions;

pub(crate) mod shape_list_data_lakes;

pub(crate) mod shape_list_log_sources;

pub(crate) mod shape_list_subscribers;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_register_data_lake_delegated_administrator;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_data_lake;

pub(crate) mod shape_update_data_lake_exception_subscription;

pub(crate) mod shape_update_subscriber;

pub(crate) mod shape_update_subscriber_notification;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_bad_request_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_aws_log_source_input;

pub(crate) mod shape_create_custom_log_source_input;

pub(crate) mod shape_create_data_lake_exception_subscription_input;

pub(crate) mod shape_create_data_lake_input;

pub(crate) mod shape_create_data_lake_organization_configuration_input;

pub(crate) mod shape_create_subscriber_input;

pub(crate) mod shape_create_subscriber_notification_input;

pub(crate) mod shape_delete_aws_log_source_input;

pub(crate) mod shape_delete_data_lake_input;

pub(crate) mod shape_delete_data_lake_organization_configuration_input;

pub(crate) mod shape_get_data_lake_sources_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_data_lake_exceptions_input;

pub(crate) mod shape_list_log_sources_input;

pub(crate) mod shape_register_data_lake_delegated_administrator_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_data_lake_exception_subscription_input;

pub(crate) mod shape_update_data_lake_input;

pub(crate) mod shape_update_subscriber_input;

pub(crate) mod shape_update_subscriber_notification_input;

pub(crate) mod shape_account_list;

pub(crate) mod shape_aws_identity;

pub(crate) mod shape_aws_log_source_configuration;

pub(crate) mod shape_custom_log_source_configuration;

pub(crate) mod shape_custom_log_source_resource;

pub(crate) mod shape_data_lake_auto_enable_new_account_configuration;

pub(crate) mod shape_data_lake_auto_enable_new_account_configuration_list;

pub(crate) mod shape_data_lake_configuration;

pub(crate) mod shape_data_lake_exception_list;

pub(crate) mod shape_data_lake_resource_list;

pub(crate) mod shape_data_lake_source_list;

pub(crate) mod shape_log_source_list;

pub(crate) mod shape_log_source_resource;

pub(crate) mod shape_notification_configuration;

pub(crate) mod shape_subscriber_resource;

pub(crate) mod shape_subscriber_resource_list;

pub(crate) mod shape_tag;

pub(crate) mod shape_tag_list;

pub(crate) mod shape_access_type_list;

pub(crate) mod shape_aws_log_source_resource;

pub(crate) mod shape_custom_log_source_attributes;

pub(crate) mod shape_custom_log_source_crawler_configuration;

pub(crate) mod shape_custom_log_source_provider;

pub(crate) mod shape_data_lake_encryption_configuration;

pub(crate) mod shape_data_lake_exception;

pub(crate) mod shape_data_lake_lifecycle_configuration;

pub(crate) mod shape_data_lake_replication_configuration;

pub(crate) mod shape_data_lake_resource;

pub(crate) mod shape_data_lake_source;

pub(crate) mod shape_https_notification_configuration;

pub(crate) mod shape_log_source;

pub(crate) mod shape_log_source_resource_list;

pub(crate) mod shape_sqs_notification_configuration;

pub(crate) mod shape_aws_log_source_resource_list;

pub(crate) mod shape_data_lake_lifecycle_expiration;

pub(crate) mod shape_data_lake_lifecycle_transition;

pub(crate) mod shape_data_lake_source_status_list;

pub(crate) mod shape_data_lake_update_status;

pub(crate) mod shape_ocsf_event_class_list;

pub(crate) mod shape_data_lake_lifecycle_transition_list;

pub(crate) mod shape_data_lake_source_status;

pub(crate) mod shape_data_lake_update_exception;

pub(crate) mod shape_region_list;
