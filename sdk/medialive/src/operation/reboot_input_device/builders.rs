// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::reboot_input_device::_reboot_input_device_output::RebootInputDeviceOutputBuilder;

pub use crate::operation::reboot_input_device::_reboot_input_device_input::RebootInputDeviceInputBuilder;

impl RebootInputDeviceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::reboot_input_device::RebootInputDeviceOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::reboot_input_device::RebootInputDeviceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.reboot_input_device();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RebootInputDevice`.
///
/// Send a reboot command to the specified input device. The device will begin rebooting within a few seconds of sending the command. When the reboot is complete, the deviceâ€™s connection status will change to connected.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RebootInputDeviceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::reboot_input_device::builders::RebootInputDeviceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl RebootInputDeviceFluentBuilder {
    /// Creates a new `RebootInputDevice`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RebootInputDevice as a reference.
    pub fn as_input(&self) -> &crate::operation::reboot_input_device::builders::RebootInputDeviceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::reboot_input_device::RebootInputDeviceOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::reboot_input_device::RebootInputDeviceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::reboot_input_device::RebootInputDevice::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::reboot_input_device::RebootInputDevice::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::reboot_input_device::RebootInputDeviceOutput,
            crate::operation::reboot_input_device::RebootInputDeviceError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::reboot_input_device::RebootInputDeviceError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Force a reboot of an input device. If the device is streaming, it will stop streaming and begin rebooting within a few seconds of sending the command. If the device was streaming prior to the reboot, the device will resume streaming when the reboot completes.
    pub fn force(mut self, input: crate::types::RebootInputDeviceForce) -> Self {
        self.inner = self.inner.force(input);
        self
    }
    /// Force a reboot of an input device. If the device is streaming, it will stop streaming and begin rebooting within a few seconds of sending the command. If the device was streaming prior to the reboot, the device will resume streaming when the reboot completes.
    pub fn set_force(mut self, input: ::std::option::Option<crate::types::RebootInputDeviceForce>) -> Self {
        self.inner = self.inner.set_force(input);
        self
    }
    /// Force a reboot of an input device. If the device is streaming, it will stop streaming and begin rebooting within a few seconds of sending the command. If the device was streaming prior to the reboot, the device will resume streaming when the reboot completes.
    pub fn get_force(&self) -> &::std::option::Option<crate::types::RebootInputDeviceForce> {
        self.inner.get_force()
    }
    /// The unique ID of the input device to reboot. For example, hd-123456789abcdef.
    pub fn input_device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.input_device_id(input.into());
        self
    }
    /// The unique ID of the input device to reboot. For example, hd-123456789abcdef.
    pub fn set_input_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_input_device_id(input);
        self
    }
    /// The unique ID of the input device to reboot. For example, hd-123456789abcdef.
    pub fn get_input_device_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_input_device_id()
    }
}
