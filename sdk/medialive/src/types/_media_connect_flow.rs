// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// The settings for a MediaConnect Flow.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaConnectFlow {
    /// The unique ARN of the MediaConnect Flow being used as a source.
    pub flow_arn: ::std::option::Option<::std::string::String>,
}
impl MediaConnectFlow {
    /// The unique ARN of the MediaConnect Flow being used as a source.
    pub fn flow_arn(&self) -> ::std::option::Option<&str> {
        self.flow_arn.as_deref()
    }
}
impl MediaConnectFlow {
    /// Creates a new builder-style object to manufacture [`MediaConnectFlow`](crate::types::MediaConnectFlow).
    pub fn builder() -> crate::types::builders::MediaConnectFlowBuilder {
        crate::types::builders::MediaConnectFlowBuilder::default()
    }
}

/// A builder for [`MediaConnectFlow`](crate::types::MediaConnectFlow).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MediaConnectFlowBuilder {
    pub(crate) flow_arn: ::std::option::Option<::std::string::String>,
}
impl MediaConnectFlowBuilder {
    /// The unique ARN of the MediaConnect Flow being used as a source.
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The unique ARN of the MediaConnect Flow being used as a source.
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_arn = input;
        self
    }
    /// The unique ARN of the MediaConnect Flow being used as a source.
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_arn
    }
    /// Consumes the builder and constructs a [`MediaConnectFlow`](crate::types::MediaConnectFlow).
    pub fn build(self) -> crate::types::MediaConnectFlow {
        crate::types::MediaConnectFlow { flow_arn: self.flow_arn }
    }
}
