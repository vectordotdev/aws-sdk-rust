// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Ms Smooth Output Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MsSmoothOutputSettings {
    /// Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
    pub h265_packaging_type: ::std::option::Option<crate::types::MsSmoothH265PackagingType>,
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    pub name_modifier: ::std::option::Option<::std::string::String>,
}
impl MsSmoothOutputSettings {
    /// Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
    pub fn h265_packaging_type(&self) -> ::std::option::Option<&crate::types::MsSmoothH265PackagingType> {
        self.h265_packaging_type.as_ref()
    }
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    pub fn name_modifier(&self) -> ::std::option::Option<&str> {
        self.name_modifier.as_deref()
    }
}
impl MsSmoothOutputSettings {
    /// Creates a new builder-style object to manufacture [`MsSmoothOutputSettings`](crate::types::MsSmoothOutputSettings).
    pub fn builder() -> crate::types::builders::MsSmoothOutputSettingsBuilder {
        crate::types::builders::MsSmoothOutputSettingsBuilder::default()
    }
}

/// A builder for [`MsSmoothOutputSettings`](crate::types::MsSmoothOutputSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MsSmoothOutputSettingsBuilder {
    pub(crate) h265_packaging_type: ::std::option::Option<crate::types::MsSmoothH265PackagingType>,
    pub(crate) name_modifier: ::std::option::Option<::std::string::String>,
}
impl MsSmoothOutputSettingsBuilder {
    /// Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
    pub fn h265_packaging_type(mut self, input: crate::types::MsSmoothH265PackagingType) -> Self {
        self.h265_packaging_type = ::std::option::Option::Some(input);
        self
    }
    /// Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
    pub fn set_h265_packaging_type(mut self, input: ::std::option::Option<crate::types::MsSmoothH265PackagingType>) -> Self {
        self.h265_packaging_type = input;
        self
    }
    /// Only applicable when this output is referencing an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1 or HVC1.
    pub fn get_h265_packaging_type(&self) -> &::std::option::Option<crate::types::MsSmoothH265PackagingType> {
        &self.h265_packaging_type
    }
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    pub fn name_modifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_modifier = ::std::option::Option::Some(input.into());
        self
    }
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    pub fn set_name_modifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_modifier = input;
        self
    }
    /// String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
    pub fn get_name_modifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_modifier
    }
    /// Consumes the builder and constructs a [`MsSmoothOutputSettings`](crate::types::MsSmoothOutputSettings).
    pub fn build(self) -> crate::types::MsSmoothOutputSettings {
        crate::types::MsSmoothOutputSettings {
            h265_packaging_type: self.h265_packaging_type,
            name_modifier: self.name_modifier,
        }
    }
}
