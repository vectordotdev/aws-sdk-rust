// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Avail Configuration
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AvailConfiguration {
    /// Controls how SCTE-35 messages create cues. Splice Insert mode treats all segmentation signals traditionally. With Time Signal APOS mode only Time Signal Placement Opportunity and Break messages create segment breaks. With ESAM mode, signals are forwarded to an ESAM server for possible update.
    pub avail_settings: ::std::option::Option<crate::types::AvailSettings>,
}
impl AvailConfiguration {
    /// Controls how SCTE-35 messages create cues. Splice Insert mode treats all segmentation signals traditionally. With Time Signal APOS mode only Time Signal Placement Opportunity and Break messages create segment breaks. With ESAM mode, signals are forwarded to an ESAM server for possible update.
    pub fn avail_settings(&self) -> ::std::option::Option<&crate::types::AvailSettings> {
        self.avail_settings.as_ref()
    }
}
impl AvailConfiguration {
    /// Creates a new builder-style object to manufacture [`AvailConfiguration`](crate::types::AvailConfiguration).
    pub fn builder() -> crate::types::builders::AvailConfigurationBuilder {
        crate::types::builders::AvailConfigurationBuilder::default()
    }
}

/// A builder for [`AvailConfiguration`](crate::types::AvailConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AvailConfigurationBuilder {
    pub(crate) avail_settings: ::std::option::Option<crate::types::AvailSettings>,
}
impl AvailConfigurationBuilder {
    /// Controls how SCTE-35 messages create cues. Splice Insert mode treats all segmentation signals traditionally. With Time Signal APOS mode only Time Signal Placement Opportunity and Break messages create segment breaks. With ESAM mode, signals are forwarded to an ESAM server for possible update.
    pub fn avail_settings(mut self, input: crate::types::AvailSettings) -> Self {
        self.avail_settings = ::std::option::Option::Some(input);
        self
    }
    /// Controls how SCTE-35 messages create cues. Splice Insert mode treats all segmentation signals traditionally. With Time Signal APOS mode only Time Signal Placement Opportunity and Break messages create segment breaks. With ESAM mode, signals are forwarded to an ESAM server for possible update.
    pub fn set_avail_settings(mut self, input: ::std::option::Option<crate::types::AvailSettings>) -> Self {
        self.avail_settings = input;
        self
    }
    /// Controls how SCTE-35 messages create cues. Splice Insert mode treats all segmentation signals traditionally. With Time Signal APOS mode only Time Signal Placement Opportunity and Break messages create segment breaks. With ESAM mode, signals are forwarded to an ESAM server for possible update.
    pub fn get_avail_settings(&self) -> &::std::option::Option<crate::types::AvailSettings> {
        &self.avail_settings
    }
    /// Consumes the builder and constructs a [`AvailConfiguration`](crate::types::AvailConfiguration).
    pub fn build(self) -> crate::types::AvailConfiguration {
        crate::types::AvailConfiguration {
            avail_settings: self.avail_settings,
        }
    }
}
