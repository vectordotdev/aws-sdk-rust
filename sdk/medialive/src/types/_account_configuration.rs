// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Placeholder documentation for AccountConfiguration
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountConfiguration {
    /// Specifies the KMS key to use for all features that use key encryption. Specify the ARN of a KMS key that you have created. Or leave blank to use the key that MediaLive creates and manages for you.
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl AccountConfiguration {
    /// Specifies the KMS key to use for all features that use key encryption. Specify the ARN of a KMS key that you have created. Or leave blank to use the key that MediaLive creates and manages for you.
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl AccountConfiguration {
    /// Creates a new builder-style object to manufacture [`AccountConfiguration`](crate::types::AccountConfiguration).
    pub fn builder() -> crate::types::builders::AccountConfigurationBuilder {
        crate::types::builders::AccountConfigurationBuilder::default()
    }
}

/// A builder for [`AccountConfiguration`](crate::types::AccountConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccountConfigurationBuilder {
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl AccountConfigurationBuilder {
    /// Specifies the KMS key to use for all features that use key encryption. Specify the ARN of a KMS key that you have created. Or leave blank to use the key that MediaLive creates and manages for you.
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Specifies the KMS key to use for all features that use key encryption. Specify the ARN of a KMS key that you have created. Or leave blank to use the key that MediaLive creates and manages for you.
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// Specifies the KMS key to use for all features that use key encryption. Specify the ARN of a KMS key that you have created. Or leave blank to use the key that MediaLive creates and manages for you.
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`AccountConfiguration`](crate::types::AccountConfiguration).
    pub fn build(self) -> crate::types::AccountConfiguration {
        crate::types::AccountConfiguration { kms_key_id: self.kms_key_id }
    }
}
