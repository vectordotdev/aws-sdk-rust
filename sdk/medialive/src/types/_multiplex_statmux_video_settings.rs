// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Statmux rate control settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultiplexStatmuxVideoSettings {
    /// Maximum statmux bitrate.
    pub maximum_bitrate: ::std::option::Option<i32>,
    /// Minimum statmux bitrate.
    pub minimum_bitrate: ::std::option::Option<i32>,
    /// The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
    pub priority: ::std::option::Option<i32>,
}
impl MultiplexStatmuxVideoSettings {
    /// Maximum statmux bitrate.
    pub fn maximum_bitrate(&self) -> ::std::option::Option<i32> {
        self.maximum_bitrate
    }
    /// Minimum statmux bitrate.
    pub fn minimum_bitrate(&self) -> ::std::option::Option<i32> {
        self.minimum_bitrate
    }
    /// The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
}
impl MultiplexStatmuxVideoSettings {
    /// Creates a new builder-style object to manufacture [`MultiplexStatmuxVideoSettings`](crate::types::MultiplexStatmuxVideoSettings).
    pub fn builder() -> crate::types::builders::MultiplexStatmuxVideoSettingsBuilder {
        crate::types::builders::MultiplexStatmuxVideoSettingsBuilder::default()
    }
}

/// A builder for [`MultiplexStatmuxVideoSettings`](crate::types::MultiplexStatmuxVideoSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MultiplexStatmuxVideoSettingsBuilder {
    pub(crate) maximum_bitrate: ::std::option::Option<i32>,
    pub(crate) minimum_bitrate: ::std::option::Option<i32>,
    pub(crate) priority: ::std::option::Option<i32>,
}
impl MultiplexStatmuxVideoSettingsBuilder {
    /// Maximum statmux bitrate.
    pub fn maximum_bitrate(mut self, input: i32) -> Self {
        self.maximum_bitrate = ::std::option::Option::Some(input);
        self
    }
    /// Maximum statmux bitrate.
    pub fn set_maximum_bitrate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_bitrate = input;
        self
    }
    /// Maximum statmux bitrate.
    pub fn get_maximum_bitrate(&self) -> &::std::option::Option<i32> {
        &self.maximum_bitrate
    }
    /// Minimum statmux bitrate.
    pub fn minimum_bitrate(mut self, input: i32) -> Self {
        self.minimum_bitrate = ::std::option::Option::Some(input);
        self
    }
    /// Minimum statmux bitrate.
    pub fn set_minimum_bitrate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.minimum_bitrate = input;
        self
    }
    /// Minimum statmux bitrate.
    pub fn get_minimum_bitrate(&self) -> &::std::option::Option<i32> {
        &self.minimum_bitrate
    }
    /// The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// The purpose of the priority is to use a combination of the\nmultiplex rate control algorithm and the QVBR capability of the\nencoder to prioritize the video quality of some channels in a\nmultiplex over others. Channels that have a higher priority will\nget higher video quality at the expense of the video quality of\nother channels in the multiplex with lower priority.
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// Consumes the builder and constructs a [`MultiplexStatmuxVideoSettings`](crate::types::MultiplexStatmuxVideoSettings).
    pub fn build(self) -> crate::types::MultiplexStatmuxVideoSettings {
        crate::types::MultiplexStatmuxVideoSettings {
            maximum_bitrate: self.maximum_bitrate,
            minimum_bitrate: self.minimum_bitrate,
            priority: self.priority,
        }
    }
}
