// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of the phone number.</p>
/// <ul>
/// <li> <p> <code>CLAIMED</code> means the previous <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimedPhoneNumber.html">ClaimedPhoneNumber</a> or <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html">UpdatePhoneNumber</a> operation succeeded.</p> </li>
/// <li> <p> <code>IN_PROGRESS</code> means a <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimedPhoneNumber.html">ClaimedPhoneNumber</a> or <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html">UpdatePhoneNumber</a> operation is still in progress and has not yet completed. You can call <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_DescribePhoneNumber.html">DescribePhoneNumber</a> at a later time to verify if the previous operation has completed.</p> </li>
/// <li> <p> <code>FAILED</code> indicates that the previous <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_ClaimedPhoneNumber.html">ClaimedPhoneNumber</a> or <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdatePhoneNumber.html">UpdatePhoneNumber</a> operation has failed. It will include a message indicating the failure reason. A common reason for a failure may be that the <code>TargetArn</code> value you are claiming or updating a phone number to has reached its limit of total claimed numbers. If you received a <code>FAILED</code> status from a <code>ClaimPhoneNumber</code> API call, you have one day to retry claiming the phone number before the number is released back to the inventory for other customers to claim.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PhoneNumberStatus {
    /// <p>The status.</p>
    pub status: ::std::option::Option<crate::types::PhoneNumberWorkflowStatus>,
    /// <p>The status message.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl PhoneNumberStatus {
    /// <p>The status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PhoneNumberWorkflowStatus> {
        self.status.as_ref()
    }
    /// <p>The status message.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl PhoneNumberStatus {
    /// Creates a new builder-style object to manufacture [`PhoneNumberStatus`](crate::types::PhoneNumberStatus).
    pub fn builder() -> crate::types::builders::PhoneNumberStatusBuilder {
        crate::types::builders::PhoneNumberStatusBuilder::default()
    }
}

/// A builder for [`PhoneNumberStatus`](crate::types::PhoneNumberStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PhoneNumberStatusBuilder {
    pub(crate) status: ::std::option::Option<crate::types::PhoneNumberWorkflowStatus>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl PhoneNumberStatusBuilder {
    /// <p>The status.</p>
    pub fn status(mut self, input: crate::types::PhoneNumberWorkflowStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PhoneNumberWorkflowStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PhoneNumberWorkflowStatus> {
        &self.status
    }
    /// <p>The status message.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The status message.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`PhoneNumberStatus`](crate::types::PhoneNumberStatus).
    pub fn build(self) -> crate::types::PhoneNumberStatus {
        crate::types::PhoneNumberStatus {
            status: self.status,
            message: self.message,
        }
    }
}
