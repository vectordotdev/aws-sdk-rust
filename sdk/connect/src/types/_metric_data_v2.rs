// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the name, thresholds, and metric filters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricDataV2 {
    /// <p>The metric name, thresholds, and metric filters of the returned metric.</p>
    pub metric: ::std::option::Option<crate::types::MetricV2>,
    /// <p>The corresponding value of the metric returned in the response.</p>
    pub value: ::std::option::Option<f64>,
}
impl MetricDataV2 {
    /// <p>The metric name, thresholds, and metric filters of the returned metric.</p>
    pub fn metric(&self) -> ::std::option::Option<&crate::types::MetricV2> {
        self.metric.as_ref()
    }
    /// <p>The corresponding value of the metric returned in the response.</p>
    pub fn value(&self) -> ::std::option::Option<f64> {
        self.value
    }
}
impl MetricDataV2 {
    /// Creates a new builder-style object to manufacture [`MetricDataV2`](crate::types::MetricDataV2).
    pub fn builder() -> crate::types::builders::MetricDataV2Builder {
        crate::types::builders::MetricDataV2Builder::default()
    }
}

/// A builder for [`MetricDataV2`](crate::types::MetricDataV2).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricDataV2Builder {
    pub(crate) metric: ::std::option::Option<crate::types::MetricV2>,
    pub(crate) value: ::std::option::Option<f64>,
}
impl MetricDataV2Builder {
    /// <p>The metric name, thresholds, and metric filters of the returned metric.</p>
    pub fn metric(mut self, input: crate::types::MetricV2) -> Self {
        self.metric = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metric name, thresholds, and metric filters of the returned metric.</p>
    pub fn set_metric(mut self, input: ::std::option::Option<crate::types::MetricV2>) -> Self {
        self.metric = input;
        self
    }
    /// <p>The metric name, thresholds, and metric filters of the returned metric.</p>
    pub fn get_metric(&self) -> &::std::option::Option<crate::types::MetricV2> {
        &self.metric
    }
    /// <p>The corresponding value of the metric returned in the response.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The corresponding value of the metric returned in the response.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The corresponding value of the metric returned in the response.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`MetricDataV2`](crate::types::MetricDataV2).
    pub fn build(self) -> crate::types::MetricDataV2 {
        crate::types::MetricDataV2 {
            metric: self.metric,
            value: self.value,
        }
    }
}
