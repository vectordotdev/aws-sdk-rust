// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The customer's details.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParticipantDetails {
    /// <p>Display name of the participant.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
}
impl ParticipantDetails {
    /// <p>Display name of the participant.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
}
impl ParticipantDetails {
    /// Creates a new builder-style object to manufacture [`ParticipantDetails`](crate::types::ParticipantDetails).
    pub fn builder() -> crate::types::builders::ParticipantDetailsBuilder {
        crate::types::builders::ParticipantDetailsBuilder::default()
    }
}

/// A builder for [`ParticipantDetails`](crate::types::ParticipantDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParticipantDetailsBuilder {
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
}
impl ParticipantDetailsBuilder {
    /// <p>Display name of the participant.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Display name of the participant.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>Display name of the participant.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// Consumes the builder and constructs a [`ParticipantDetails`](crate::types::ParticipantDetails).
    pub fn build(self) -> crate::types::ParticipantDetails {
        crate::types::ParticipantDetails {
            display_name: self.display_name,
        }
    }
}
