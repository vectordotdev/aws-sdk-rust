// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about scores of a contact evaluation item (section or question).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluationScore {
    /// <p>The score percentage for an item in a contact evaluation.</p>
    pub percentage: f64,
    /// <p>The flag to mark the item as not applicable for scoring.</p>
    pub not_applicable: bool,
    /// <p>The flag that marks the item as automatic fail. If the item or a child item gets an automatic fail answer, this flag will be true.</p>
    pub automatic_fail: bool,
}
impl EvaluationScore {
    /// <p>The score percentage for an item in a contact evaluation.</p>
    pub fn percentage(&self) -> f64 {
        self.percentage
    }
    /// <p>The flag to mark the item as not applicable for scoring.</p>
    pub fn not_applicable(&self) -> bool {
        self.not_applicable
    }
    /// <p>The flag that marks the item as automatic fail. If the item or a child item gets an automatic fail answer, this flag will be true.</p>
    pub fn automatic_fail(&self) -> bool {
        self.automatic_fail
    }
}
impl EvaluationScore {
    /// Creates a new builder-style object to manufacture [`EvaluationScore`](crate::types::EvaluationScore).
    pub fn builder() -> crate::types::builders::EvaluationScoreBuilder {
        crate::types::builders::EvaluationScoreBuilder::default()
    }
}

/// A builder for [`EvaluationScore`](crate::types::EvaluationScore).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EvaluationScoreBuilder {
    pub(crate) percentage: ::std::option::Option<f64>,
    pub(crate) not_applicable: ::std::option::Option<bool>,
    pub(crate) automatic_fail: ::std::option::Option<bool>,
}
impl EvaluationScoreBuilder {
    /// <p>The score percentage for an item in a contact evaluation.</p>
    pub fn percentage(mut self, input: f64) -> Self {
        self.percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The score percentage for an item in a contact evaluation.</p>
    pub fn set_percentage(mut self, input: ::std::option::Option<f64>) -> Self {
        self.percentage = input;
        self
    }
    /// <p>The score percentage for an item in a contact evaluation.</p>
    pub fn get_percentage(&self) -> &::std::option::Option<f64> {
        &self.percentage
    }
    /// <p>The flag to mark the item as not applicable for scoring.</p>
    pub fn not_applicable(mut self, input: bool) -> Self {
        self.not_applicable = ::std::option::Option::Some(input);
        self
    }
    /// <p>The flag to mark the item as not applicable for scoring.</p>
    pub fn set_not_applicable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.not_applicable = input;
        self
    }
    /// <p>The flag to mark the item as not applicable for scoring.</p>
    pub fn get_not_applicable(&self) -> &::std::option::Option<bool> {
        &self.not_applicable
    }
    /// <p>The flag that marks the item as automatic fail. If the item or a child item gets an automatic fail answer, this flag will be true.</p>
    pub fn automatic_fail(mut self, input: bool) -> Self {
        self.automatic_fail = ::std::option::Option::Some(input);
        self
    }
    /// <p>The flag that marks the item as automatic fail. If the item or a child item gets an automatic fail answer, this flag will be true.</p>
    pub fn set_automatic_fail(mut self, input: ::std::option::Option<bool>) -> Self {
        self.automatic_fail = input;
        self
    }
    /// <p>The flag that marks the item as automatic fail. If the item or a child item gets an automatic fail answer, this flag will be true.</p>
    pub fn get_automatic_fail(&self) -> &::std::option::Option<bool> {
        &self.automatic_fail
    }
    /// Consumes the builder and constructs a [`EvaluationScore`](crate::types::EvaluationScore).
    pub fn build(self) -> crate::types::EvaluationScore {
        crate::types::EvaluationScore {
            percentage: self.percentage.unwrap_or_default(),
            not_applicable: self.not_applicable.unwrap_or_default(),
            automatic_fail: self.automatic_fail.unwrap_or_default(),
        }
    }
}
