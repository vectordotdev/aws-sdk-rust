// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a contact.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Contact {
    /// <p>The Amazon Resource Name (ARN) for the contact.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the contact.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>If this contact is related to other contacts, this is the ID of the initial contact.</p>
    pub initial_contact_id: ::std::option::Option<::std::string::String>,
    /// <p>If this contact is not the first contact, this is the ID of the previous contact.</p>
    pub previous_contact_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates how the contact was initiated.</p>
    pub initiation_method: ::std::option::Option<crate::types::ContactInitiationMethod>,
    /// <p>The name of the contact.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the contact.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>How the contact reached your contact center.</p>
    pub channel: ::std::option::Option<crate::types::Channel>,
    /// <p>If this contact was queued, this contains information about the queue. </p>
    pub queue_info: ::std::option::Option<crate::types::QueueInfo>,
    /// <p>Information about the agent who accepted the contact.</p>
    pub agent_info: ::std::option::Option<crate::types::AgentInfo>,
    /// <p>The date and time this contact was initiated, in UTC time. For <code>INBOUND</code>, this is when the contact arrived. For <code>OUTBOUND</code>, this is when the agent began dialing. For <code>CALLBACK</code>, this is when the callback contact was created. For <code>TRANSFER</code> and <code>QUEUE_TRANSFER</code>, this is when the transfer was initiated. For <code>API</code>, this is when the request arrived. For <code>EXTERNAL_OUTBOUND</code>, this is when the agent started dialing the external participant. For <code>MONITOR</code>, this is when the supervisor started listening to a contact.</p>
    pub initiation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the customer endpoint disconnected from Amazon Connect.</p>
    pub disconnect_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when contact was last updated.</p>
    pub last_update_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp, in Unix epoch time format, at which to start running the inbound flow. </p>
    pub scheduled_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The contactId that is <a href="https://docs.aws.amazon.com/connect/latest/adminguide/chat-persistence.html#relatedcontactid">related</a> to this contact.</p>
    pub related_contact_id: ::std::option::Option<::std::string::String>,
    /// <p>Information about Amazon Connect Wisdom.</p>
    pub wisdom_info: ::std::option::Option<crate::types::WisdomInfo>,
}
impl Contact {
    /// <p>The Amazon Resource Name (ARN) for the contact.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The identifier for the contact.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>If this contact is related to other contacts, this is the ID of the initial contact.</p>
    pub fn initial_contact_id(&self) -> ::std::option::Option<&str> {
        self.initial_contact_id.as_deref()
    }
    /// <p>If this contact is not the first contact, this is the ID of the previous contact.</p>
    pub fn previous_contact_id(&self) -> ::std::option::Option<&str> {
        self.previous_contact_id.as_deref()
    }
    /// <p>Indicates how the contact was initiated.</p>
    pub fn initiation_method(&self) -> ::std::option::Option<&crate::types::ContactInitiationMethod> {
        self.initiation_method.as_ref()
    }
    /// <p>The name of the contact.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the contact.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>How the contact reached your contact center.</p>
    pub fn channel(&self) -> ::std::option::Option<&crate::types::Channel> {
        self.channel.as_ref()
    }
    /// <p>If this contact was queued, this contains information about the queue. </p>
    pub fn queue_info(&self) -> ::std::option::Option<&crate::types::QueueInfo> {
        self.queue_info.as_ref()
    }
    /// <p>Information about the agent who accepted the contact.</p>
    pub fn agent_info(&self) -> ::std::option::Option<&crate::types::AgentInfo> {
        self.agent_info.as_ref()
    }
    /// <p>The date and time this contact was initiated, in UTC time. For <code>INBOUND</code>, this is when the contact arrived. For <code>OUTBOUND</code>, this is when the agent began dialing. For <code>CALLBACK</code>, this is when the callback contact was created. For <code>TRANSFER</code> and <code>QUEUE_TRANSFER</code>, this is when the transfer was initiated. For <code>API</code>, this is when the request arrived. For <code>EXTERNAL_OUTBOUND</code>, this is when the agent started dialing the external participant. For <code>MONITOR</code>, this is when the supervisor started listening to a contact.</p>
    pub fn initiation_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.initiation_timestamp.as_ref()
    }
    /// <p>The timestamp when the customer endpoint disconnected from Amazon Connect.</p>
    pub fn disconnect_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.disconnect_timestamp.as_ref()
    }
    /// <p>The timestamp when contact was last updated.</p>
    pub fn last_update_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_timestamp.as_ref()
    }
    /// <p>The timestamp, in Unix epoch time format, at which to start running the inbound flow. </p>
    pub fn scheduled_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.scheduled_timestamp.as_ref()
    }
    /// <p>The contactId that is <a href="https://docs.aws.amazon.com/connect/latest/adminguide/chat-persistence.html#relatedcontactid">related</a> to this contact.</p>
    pub fn related_contact_id(&self) -> ::std::option::Option<&str> {
        self.related_contact_id.as_deref()
    }
    /// <p>Information about Amazon Connect Wisdom.</p>
    pub fn wisdom_info(&self) -> ::std::option::Option<&crate::types::WisdomInfo> {
        self.wisdom_info.as_ref()
    }
}
impl Contact {
    /// Creates a new builder-style object to manufacture [`Contact`](crate::types::Contact).
    pub fn builder() -> crate::types::builders::ContactBuilder {
        crate::types::builders::ContactBuilder::default()
    }
}

/// A builder for [`Contact`](crate::types::Contact).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContactBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) initial_contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) previous_contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) initiation_method: ::std::option::Option<crate::types::ContactInitiationMethod>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) channel: ::std::option::Option<crate::types::Channel>,
    pub(crate) queue_info: ::std::option::Option<crate::types::QueueInfo>,
    pub(crate) agent_info: ::std::option::Option<crate::types::AgentInfo>,
    pub(crate) initiation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) disconnect_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) scheduled_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) related_contact_id: ::std::option::Option<::std::string::String>,
    pub(crate) wisdom_info: ::std::option::Option<crate::types::WisdomInfo>,
}
impl ContactBuilder {
    /// <p>The Amazon Resource Name (ARN) for the contact.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the contact.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the contact.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The identifier for the contact.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the contact.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier for the contact.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>If this contact is related to other contacts, this is the ID of the initial contact.</p>
    pub fn initial_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.initial_contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If this contact is related to other contacts, this is the ID of the initial contact.</p>
    pub fn set_initial_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.initial_contact_id = input;
        self
    }
    /// <p>If this contact is related to other contacts, this is the ID of the initial contact.</p>
    pub fn get_initial_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.initial_contact_id
    }
    /// <p>If this contact is not the first contact, this is the ID of the previous contact.</p>
    pub fn previous_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.previous_contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If this contact is not the first contact, this is the ID of the previous contact.</p>
    pub fn set_previous_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.previous_contact_id = input;
        self
    }
    /// <p>If this contact is not the first contact, this is the ID of the previous contact.</p>
    pub fn get_previous_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.previous_contact_id
    }
    /// <p>Indicates how the contact was initiated.</p>
    pub fn initiation_method(mut self, input: crate::types::ContactInitiationMethod) -> Self {
        self.initiation_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how the contact was initiated.</p>
    pub fn set_initiation_method(mut self, input: ::std::option::Option<crate::types::ContactInitiationMethod>) -> Self {
        self.initiation_method = input;
        self
    }
    /// <p>Indicates how the contact was initiated.</p>
    pub fn get_initiation_method(&self) -> &::std::option::Option<crate::types::ContactInitiationMethod> {
        &self.initiation_method
    }
    /// <p>The name of the contact.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the contact.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the contact.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the contact.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the contact.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the contact.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>How the contact reached your contact center.</p>
    pub fn channel(mut self, input: crate::types::Channel) -> Self {
        self.channel = ::std::option::Option::Some(input);
        self
    }
    /// <p>How the contact reached your contact center.</p>
    pub fn set_channel(mut self, input: ::std::option::Option<crate::types::Channel>) -> Self {
        self.channel = input;
        self
    }
    /// <p>How the contact reached your contact center.</p>
    pub fn get_channel(&self) -> &::std::option::Option<crate::types::Channel> {
        &self.channel
    }
    /// <p>If this contact was queued, this contains information about the queue. </p>
    pub fn queue_info(mut self, input: crate::types::QueueInfo) -> Self {
        self.queue_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this contact was queued, this contains information about the queue. </p>
    pub fn set_queue_info(mut self, input: ::std::option::Option<crate::types::QueueInfo>) -> Self {
        self.queue_info = input;
        self
    }
    /// <p>If this contact was queued, this contains information about the queue. </p>
    pub fn get_queue_info(&self) -> &::std::option::Option<crate::types::QueueInfo> {
        &self.queue_info
    }
    /// <p>Information about the agent who accepted the contact.</p>
    pub fn agent_info(mut self, input: crate::types::AgentInfo) -> Self {
        self.agent_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the agent who accepted the contact.</p>
    pub fn set_agent_info(mut self, input: ::std::option::Option<crate::types::AgentInfo>) -> Self {
        self.agent_info = input;
        self
    }
    /// <p>Information about the agent who accepted the contact.</p>
    pub fn get_agent_info(&self) -> &::std::option::Option<crate::types::AgentInfo> {
        &self.agent_info
    }
    /// <p>The date and time this contact was initiated, in UTC time. For <code>INBOUND</code>, this is when the contact arrived. For <code>OUTBOUND</code>, this is when the agent began dialing. For <code>CALLBACK</code>, this is when the callback contact was created. For <code>TRANSFER</code> and <code>QUEUE_TRANSFER</code>, this is when the transfer was initiated. For <code>API</code>, this is when the request arrived. For <code>EXTERNAL_OUTBOUND</code>, this is when the agent started dialing the external participant. For <code>MONITOR</code>, this is when the supervisor started listening to a contact.</p>
    pub fn initiation_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.initiation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time this contact was initiated, in UTC time. For <code>INBOUND</code>, this is when the contact arrived. For <code>OUTBOUND</code>, this is when the agent began dialing. For <code>CALLBACK</code>, this is when the callback contact was created. For <code>TRANSFER</code> and <code>QUEUE_TRANSFER</code>, this is when the transfer was initiated. For <code>API</code>, this is when the request arrived. For <code>EXTERNAL_OUTBOUND</code>, this is when the agent started dialing the external participant. For <code>MONITOR</code>, this is when the supervisor started listening to a contact.</p>
    pub fn set_initiation_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.initiation_timestamp = input;
        self
    }
    /// <p>The date and time this contact was initiated, in UTC time. For <code>INBOUND</code>, this is when the contact arrived. For <code>OUTBOUND</code>, this is when the agent began dialing. For <code>CALLBACK</code>, this is when the callback contact was created. For <code>TRANSFER</code> and <code>QUEUE_TRANSFER</code>, this is when the transfer was initiated. For <code>API</code>, this is when the request arrived. For <code>EXTERNAL_OUTBOUND</code>, this is when the agent started dialing the external participant. For <code>MONITOR</code>, this is when the supervisor started listening to a contact.</p>
    pub fn get_initiation_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.initiation_timestamp
    }
    /// <p>The timestamp when the customer endpoint disconnected from Amazon Connect.</p>
    pub fn disconnect_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.disconnect_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the customer endpoint disconnected from Amazon Connect.</p>
    pub fn set_disconnect_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.disconnect_timestamp = input;
        self
    }
    /// <p>The timestamp when the customer endpoint disconnected from Amazon Connect.</p>
    pub fn get_disconnect_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.disconnect_timestamp
    }
    /// <p>The timestamp when contact was last updated.</p>
    pub fn last_update_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when contact was last updated.</p>
    pub fn set_last_update_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_timestamp = input;
        self
    }
    /// <p>The timestamp when contact was last updated.</p>
    pub fn get_last_update_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_timestamp
    }
    /// <p>The timestamp, in Unix epoch time format, at which to start running the inbound flow. </p>
    pub fn scheduled_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.scheduled_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp, in Unix epoch time format, at which to start running the inbound flow. </p>
    pub fn set_scheduled_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.scheduled_timestamp = input;
        self
    }
    /// <p>The timestamp, in Unix epoch time format, at which to start running the inbound flow. </p>
    pub fn get_scheduled_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.scheduled_timestamp
    }
    /// <p>The contactId that is <a href="https://docs.aws.amazon.com/connect/latest/adminguide/chat-persistence.html#relatedcontactid">related</a> to this contact.</p>
    pub fn related_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.related_contact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contactId that is <a href="https://docs.aws.amazon.com/connect/latest/adminguide/chat-persistence.html#relatedcontactid">related</a> to this contact.</p>
    pub fn set_related_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.related_contact_id = input;
        self
    }
    /// <p>The contactId that is <a href="https://docs.aws.amazon.com/connect/latest/adminguide/chat-persistence.html#relatedcontactid">related</a> to this contact.</p>
    pub fn get_related_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.related_contact_id
    }
    /// <p>Information about Amazon Connect Wisdom.</p>
    pub fn wisdom_info(mut self, input: crate::types::WisdomInfo) -> Self {
        self.wisdom_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about Amazon Connect Wisdom.</p>
    pub fn set_wisdom_info(mut self, input: ::std::option::Option<crate::types::WisdomInfo>) -> Self {
        self.wisdom_info = input;
        self
    }
    /// <p>Information about Amazon Connect Wisdom.</p>
    pub fn get_wisdom_info(&self) -> &::std::option::Option<crate::types::WisdomInfo> {
        &self.wisdom_info
    }
    /// Consumes the builder and constructs a [`Contact`](crate::types::Contact).
    pub fn build(self) -> crate::types::Contact {
        crate::types::Contact {
            arn: self.arn,
            id: self.id,
            initial_contact_id: self.initial_contact_id,
            previous_contact_id: self.previous_contact_id,
            initiation_method: self.initiation_method,
            name: self.name,
            description: self.description,
            channel: self.channel,
            queue_info: self.queue_info,
            agent_info: self.agent_info,
            initiation_timestamp: self.initiation_timestamp,
            disconnect_timestamp: self.disconnect_timestamp,
            last_update_timestamp: self.last_update_timestamp,
            scheduled_timestamp: self.scheduled_timestamp,
            related_contact_id: self.related_contact_id,
            wisdom_info: self.wisdom_info,
        }
    }
}
