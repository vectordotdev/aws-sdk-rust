// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about properties for a question in an evaluation form. The question type properties must be either for a numeric question or a single select question.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum EvaluationFormQuestionTypeProperties {
    /// <p>The properties of the numeric question.</p>
    Numeric(crate::types::EvaluationFormNumericQuestionProperties),
    /// <p>The properties of the numeric question.</p>
    SingleSelect(crate::types::EvaluationFormSingleSelectQuestionProperties),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl EvaluationFormQuestionTypeProperties {
    /// Tries to convert the enum instance into [`Numeric`](crate::types::EvaluationFormQuestionTypeProperties::Numeric), extracting the inner [`EvaluationFormNumericQuestionProperties`](crate::types::EvaluationFormNumericQuestionProperties).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_numeric(&self) -> ::std::result::Result<&crate::types::EvaluationFormNumericQuestionProperties, &Self> {
        if let EvaluationFormQuestionTypeProperties::Numeric(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Numeric`](crate::types::EvaluationFormQuestionTypeProperties::Numeric).
    pub fn is_numeric(&self) -> bool {
        self.as_numeric().is_ok()
    }
    /// Tries to convert the enum instance into [`SingleSelect`](crate::types::EvaluationFormQuestionTypeProperties::SingleSelect), extracting the inner [`EvaluationFormSingleSelectQuestionProperties`](crate::types::EvaluationFormSingleSelectQuestionProperties).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_single_select(&self) -> ::std::result::Result<&crate::types::EvaluationFormSingleSelectQuestionProperties, &Self> {
        if let EvaluationFormQuestionTypeProperties::SingleSelect(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SingleSelect`](crate::types::EvaluationFormQuestionTypeProperties::SingleSelect).
    pub fn is_single_select(&self) -> bool {
        self.as_single_select().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
