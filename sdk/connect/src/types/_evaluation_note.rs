// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about notes for a contact evaluation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluationNote {
    /// <p>The note for an item (section or question) in a contact evaluation.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl EvaluationNote {
    /// <p>The note for an item (section or question) in a contact evaluation.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl EvaluationNote {
    /// Creates a new builder-style object to manufacture [`EvaluationNote`](crate::types::EvaluationNote).
    pub fn builder() -> crate::types::builders::EvaluationNoteBuilder {
        crate::types::builders::EvaluationNoteBuilder::default()
    }
}

/// A builder for [`EvaluationNote`](crate::types::EvaluationNote).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EvaluationNoteBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl EvaluationNoteBuilder {
    /// <p>The note for an item (section or question) in a contact evaluation.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The note for an item (section or question) in a contact evaluation.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The note for an item (section or question) in a contact evaluation.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`EvaluationNote`](crate::types::EvaluationNote).
    pub fn build(self) -> crate::types::EvaluationNote {
        crate::types::EvaluationNote { value: self.value }
    }
}
