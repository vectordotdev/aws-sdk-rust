// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a hierarchy group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HierarchyGroup {
    /// <p>The identifier of the hierarchy group.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the hierarchy group.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the hierarchy group.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the level in the hierarchy group.</p>
    pub level_id: ::std::option::Option<::std::string::String>,
    /// <p>Information about the levels in the hierarchy group.</p>
    pub hierarchy_path: ::std::option::Option<crate::types::HierarchyPath>,
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl HierarchyGroup {
    /// <p>The identifier of the hierarchy group.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the hierarchy group.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the hierarchy group.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The identifier of the level in the hierarchy group.</p>
    pub fn level_id(&self) -> ::std::option::Option<&str> {
        self.level_id.as_deref()
    }
    /// <p>Information about the levels in the hierarchy group.</p>
    pub fn hierarchy_path(&self) -> ::std::option::Option<&crate::types::HierarchyPath> {
        self.hierarchy_path.as_ref()
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl HierarchyGroup {
    /// Creates a new builder-style object to manufacture [`HierarchyGroup`](crate::types::HierarchyGroup).
    pub fn builder() -> crate::types::builders::HierarchyGroupBuilder {
        crate::types::builders::HierarchyGroupBuilder::default()
    }
}

/// A builder for [`HierarchyGroup`](crate::types::HierarchyGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HierarchyGroupBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) level_id: ::std::option::Option<::std::string::String>,
    pub(crate) hierarchy_path: ::std::option::Option<crate::types::HierarchyPath>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl HierarchyGroupBuilder {
    /// <p>The identifier of the hierarchy group.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the hierarchy group.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the hierarchy group.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the hierarchy group.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hierarchy group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the hierarchy group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the hierarchy group.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hierarchy group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the hierarchy group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The identifier of the level in the hierarchy group.</p>
    pub fn level_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.level_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the level in the hierarchy group.</p>
    pub fn set_level_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.level_id = input;
        self
    }
    /// <p>The identifier of the level in the hierarchy group.</p>
    pub fn get_level_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.level_id
    }
    /// <p>Information about the levels in the hierarchy group.</p>
    pub fn hierarchy_path(mut self, input: crate::types::HierarchyPath) -> Self {
        self.hierarchy_path = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the levels in the hierarchy group.</p>
    pub fn set_hierarchy_path(mut self, input: ::std::option::Option<crate::types::HierarchyPath>) -> Self {
        self.hierarchy_path = input;
        self
    }
    /// <p>Information about the levels in the hierarchy group.</p>
    pub fn get_hierarchy_path(&self) -> &::std::option::Option<crate::types::HierarchyPath> {
        &self.hierarchy_path
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags used to organize, track, or control access for this resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`HierarchyGroup`](crate::types::HierarchyGroup).
    pub fn build(self) -> crate::types::HierarchyGroup {
        crate::types::HierarchyGroup {
            id: self.id,
            arn: self.arn,
            name: self.name,
            level_id: self.level_id,
            hierarchy_path: self.hierarchy_path,
            tags: self.tags,
        }
    }
}
