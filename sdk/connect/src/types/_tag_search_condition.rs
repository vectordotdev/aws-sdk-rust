// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The search criteria to be used to return tags.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TagSearchCondition {
    /// <p>The tag key used in the tag search condition.</p>
    pub tag_key: ::std::option::Option<::std::string::String>,
    /// <p>The tag value used in the tag search condition.</p>
    pub tag_value: ::std::option::Option<::std::string::String>,
    /// <p>The type of comparison to be made when evaluating the tag key in tag search condition.</p>
    pub tag_key_comparison_type: ::std::option::Option<crate::types::StringComparisonType>,
    /// <p>The type of comparison to be made when evaluating the tag value in tag search condition.</p>
    pub tag_value_comparison_type: ::std::option::Option<crate::types::StringComparisonType>,
}
impl TagSearchCondition {
    /// <p>The tag key used in the tag search condition.</p>
    pub fn tag_key(&self) -> ::std::option::Option<&str> {
        self.tag_key.as_deref()
    }
    /// <p>The tag value used in the tag search condition.</p>
    pub fn tag_value(&self) -> ::std::option::Option<&str> {
        self.tag_value.as_deref()
    }
    /// <p>The type of comparison to be made when evaluating the tag key in tag search condition.</p>
    pub fn tag_key_comparison_type(&self) -> ::std::option::Option<&crate::types::StringComparisonType> {
        self.tag_key_comparison_type.as_ref()
    }
    /// <p>The type of comparison to be made when evaluating the tag value in tag search condition.</p>
    pub fn tag_value_comparison_type(&self) -> ::std::option::Option<&crate::types::StringComparisonType> {
        self.tag_value_comparison_type.as_ref()
    }
}
impl TagSearchCondition {
    /// Creates a new builder-style object to manufacture [`TagSearchCondition`](crate::types::TagSearchCondition).
    pub fn builder() -> crate::types::builders::TagSearchConditionBuilder {
        crate::types::builders::TagSearchConditionBuilder::default()
    }
}

/// A builder for [`TagSearchCondition`](crate::types::TagSearchCondition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TagSearchConditionBuilder {
    pub(crate) tag_key: ::std::option::Option<::std::string::String>,
    pub(crate) tag_value: ::std::option::Option<::std::string::String>,
    pub(crate) tag_key_comparison_type: ::std::option::Option<crate::types::StringComparisonType>,
    pub(crate) tag_value_comparison_type: ::std::option::Option<crate::types::StringComparisonType>,
}
impl TagSearchConditionBuilder {
    /// <p>The tag key used in the tag search condition.</p>
    pub fn tag_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tag_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tag key used in the tag search condition.</p>
    pub fn set_tag_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tag_key = input;
        self
    }
    /// <p>The tag key used in the tag search condition.</p>
    pub fn get_tag_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.tag_key
    }
    /// <p>The tag value used in the tag search condition.</p>
    pub fn tag_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tag_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tag value used in the tag search condition.</p>
    pub fn set_tag_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tag_value = input;
        self
    }
    /// <p>The tag value used in the tag search condition.</p>
    pub fn get_tag_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.tag_value
    }
    /// <p>The type of comparison to be made when evaluating the tag key in tag search condition.</p>
    pub fn tag_key_comparison_type(mut self, input: crate::types::StringComparisonType) -> Self {
        self.tag_key_comparison_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of comparison to be made when evaluating the tag key in tag search condition.</p>
    pub fn set_tag_key_comparison_type(mut self, input: ::std::option::Option<crate::types::StringComparisonType>) -> Self {
        self.tag_key_comparison_type = input;
        self
    }
    /// <p>The type of comparison to be made when evaluating the tag key in tag search condition.</p>
    pub fn get_tag_key_comparison_type(&self) -> &::std::option::Option<crate::types::StringComparisonType> {
        &self.tag_key_comparison_type
    }
    /// <p>The type of comparison to be made when evaluating the tag value in tag search condition.</p>
    pub fn tag_value_comparison_type(mut self, input: crate::types::StringComparisonType) -> Self {
        self.tag_value_comparison_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of comparison to be made when evaluating the tag value in tag search condition.</p>
    pub fn set_tag_value_comparison_type(mut self, input: ::std::option::Option<crate::types::StringComparisonType>) -> Self {
        self.tag_value_comparison_type = input;
        self
    }
    /// <p>The type of comparison to be made when evaluating the tag value in tag search condition.</p>
    pub fn get_tag_value_comparison_type(&self) -> &::std::option::Option<crate::types::StringComparisonType> {
        &self.tag_value_comparison_type
    }
    /// Consumes the builder and constructs a [`TagSearchCondition`](crate::types::TagSearchCondition).
    pub fn build(self) -> crate::types::TagSearchCondition {
        crate::types::TagSearchCondition {
            tag_key: self.tag_key,
            tag_value: self.tag_value,
            tag_key_comparison_type: self.tag_key_comparison_type,
            tag_value_comparison_type: self.tag_value_comparison_type,
        }
    }
}
