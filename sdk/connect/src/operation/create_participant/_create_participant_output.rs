// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateParticipantOutput {
    /// <p>The token used by the chat participant to call <code>CreateParticipantConnection</code>. The participant token is valid for the lifetime of a chat participant.</p>
    pub participant_credentials: ::std::option::Option<crate::types::ParticipantTokenCredentials>,
    /// <p>The identifier for a chat participant. The participantId for a chat participant is the same throughout the chat lifecycle.</p>
    pub participant_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateParticipantOutput {
    /// <p>The token used by the chat participant to call <code>CreateParticipantConnection</code>. The participant token is valid for the lifetime of a chat participant.</p>
    pub fn participant_credentials(&self) -> ::std::option::Option<&crate::types::ParticipantTokenCredentials> {
        self.participant_credentials.as_ref()
    }
    /// <p>The identifier for a chat participant. The participantId for a chat participant is the same throughout the chat lifecycle.</p>
    pub fn participant_id(&self) -> ::std::option::Option<&str> {
        self.participant_id.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for CreateParticipantOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateParticipantOutput {
    /// Creates a new builder-style object to manufacture [`CreateParticipantOutput`](crate::operation::create_participant::CreateParticipantOutput).
    pub fn builder() -> crate::operation::create_participant::builders::CreateParticipantOutputBuilder {
        crate::operation::create_participant::builders::CreateParticipantOutputBuilder::default()
    }
}

/// A builder for [`CreateParticipantOutput`](crate::operation::create_participant::CreateParticipantOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateParticipantOutputBuilder {
    pub(crate) participant_credentials: ::std::option::Option<crate::types::ParticipantTokenCredentials>,
    pub(crate) participant_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateParticipantOutputBuilder {
    /// <p>The token used by the chat participant to call <code>CreateParticipantConnection</code>. The participant token is valid for the lifetime of a chat participant.</p>
    pub fn participant_credentials(mut self, input: crate::types::ParticipantTokenCredentials) -> Self {
        self.participant_credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>The token used by the chat participant to call <code>CreateParticipantConnection</code>. The participant token is valid for the lifetime of a chat participant.</p>
    pub fn set_participant_credentials(mut self, input: ::std::option::Option<crate::types::ParticipantTokenCredentials>) -> Self {
        self.participant_credentials = input;
        self
    }
    /// <p>The token used by the chat participant to call <code>CreateParticipantConnection</code>. The participant token is valid for the lifetime of a chat participant.</p>
    pub fn get_participant_credentials(&self) -> &::std::option::Option<crate::types::ParticipantTokenCredentials> {
        &self.participant_credentials
    }
    /// <p>The identifier for a chat participant. The participantId for a chat participant is the same throughout the chat lifecycle.</p>
    pub fn participant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.participant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for a chat participant. The participantId for a chat participant is the same throughout the chat lifecycle.</p>
    pub fn set_participant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.participant_id = input;
        self
    }
    /// <p>The identifier for a chat participant. The participantId for a chat participant is the same throughout the chat lifecycle.</p>
    pub fn get_participant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.participant_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateParticipantOutput`](crate::operation::create_participant::CreateParticipantOutput).
    pub fn build(self) -> crate::operation::create_participant::CreateParticipantOutput {
        crate::operation::create_participant::CreateParticipantOutput {
            participant_credentials: self.participant_credentials,
            participant_id: self.participant_id,
            _request_id: self._request_id,
        }
    }
}
