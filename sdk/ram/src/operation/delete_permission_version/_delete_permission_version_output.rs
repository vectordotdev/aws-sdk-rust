// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeletePermissionVersionOutput {
    /// <p>A boolean value that indicates whether the operation is successful.</p>
    pub return_value: ::std::option::Option<bool>,
    /// <p>The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the <code>clientToken</code> request parameter of that later call. All other parameters must also have the same values that you used in the first call.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>This operation is performed asynchronously, and this response parameter indicates the current status.</p>
    pub permission_status: ::std::option::Option<crate::types::PermissionStatus>,
    _request_id: Option<String>,
}
impl DeletePermissionVersionOutput {
    /// <p>A boolean value that indicates whether the operation is successful.</p>
    pub fn return_value(&self) -> ::std::option::Option<bool> {
        self.return_value
    }
    /// <p>The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the <code>clientToken</code> request parameter of that later call. All other parameters must also have the same values that you used in the first call.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>This operation is performed asynchronously, and this response parameter indicates the current status.</p>
    pub fn permission_status(&self) -> ::std::option::Option<&crate::types::PermissionStatus> {
        self.permission_status.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DeletePermissionVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeletePermissionVersionOutput {
    /// Creates a new builder-style object to manufacture [`DeletePermissionVersionOutput`](crate::operation::delete_permission_version::DeletePermissionVersionOutput).
    pub fn builder() -> crate::operation::delete_permission_version::builders::DeletePermissionVersionOutputBuilder {
        crate::operation::delete_permission_version::builders::DeletePermissionVersionOutputBuilder::default()
    }
}

/// A builder for [`DeletePermissionVersionOutput`](crate::operation::delete_permission_version::DeletePermissionVersionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeletePermissionVersionOutputBuilder {
    pub(crate) return_value: ::std::option::Option<bool>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) permission_status: ::std::option::Option<crate::types::PermissionStatus>,
    _request_id: Option<String>,
}
impl DeletePermissionVersionOutputBuilder {
    /// <p>A boolean value that indicates whether the operation is successful.</p>
    pub fn return_value(mut self, input: bool) -> Self {
        self.return_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean value that indicates whether the operation is successful.</p>
    pub fn set_return_value(mut self, input: ::std::option::Option<bool>) -> Self {
        self.return_value = input;
        self
    }
    /// <p>A boolean value that indicates whether the operation is successful.</p>
    pub fn get_return_value(&self) -> &::std::option::Option<bool> {
        &self.return_value
    }
    /// <p>The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the <code>clientToken</code> request parameter of that later call. All other parameters must also have the same values that you used in the first call.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the <code>clientToken</code> request parameter of that later call. All other parameters must also have the same values that you used in the first call.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the <code>clientToken</code> request parameter of that later call. All other parameters must also have the same values that you used in the first call.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>This operation is performed asynchronously, and this response parameter indicates the current status.</p>
    pub fn permission_status(mut self, input: crate::types::PermissionStatus) -> Self {
        self.permission_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>This operation is performed asynchronously, and this response parameter indicates the current status.</p>
    pub fn set_permission_status(mut self, input: ::std::option::Option<crate::types::PermissionStatus>) -> Self {
        self.permission_status = input;
        self
    }
    /// <p>This operation is performed asynchronously, and this response parameter indicates the current status.</p>
    pub fn get_permission_status(&self) -> &::std::option::Option<crate::types::PermissionStatus> {
        &self.permission_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeletePermissionVersionOutput`](crate::operation::delete_permission_version::DeletePermissionVersionOutput).
    pub fn build(self) -> crate::operation::delete_permission_version::DeletePermissionVersionOutput {
        crate::operation::delete_permission_version::DeletePermissionVersionOutput {
            return_value: self.return_value,
            client_token: self.client_token,
            permission_status: self.permission_status,
            _request_id: self._request_id,
        }
    }
}
