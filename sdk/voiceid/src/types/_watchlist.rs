// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains all the information about a watchlist.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Watchlist {
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the watchlist.</p>
    pub watchlist_id: ::std::option::Option<::std::string::String>,
    /// <p>The name for the watchlist.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the watchlist.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Whether the specified watchlist is the default watchlist of a domain.</p>
    pub default_watchlist: bool,
    /// <p>The timestamp of when the watchlist was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the watchlist was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Watchlist {
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The identifier of the watchlist.</p>
    pub fn watchlist_id(&self) -> ::std::option::Option<&str> {
        self.watchlist_id.as_deref()
    }
    /// <p>The name for the watchlist.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the watchlist.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Whether the specified watchlist is the default watchlist of a domain.</p>
    pub fn default_watchlist(&self) -> bool {
        self.default_watchlist
    }
    /// <p>The timestamp of when the watchlist was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the watchlist was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ::std::fmt::Debug for Watchlist {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Watchlist");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("watchlist_id", &self.watchlist_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("default_watchlist", &self.default_watchlist);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.finish()
    }
}
impl Watchlist {
    /// Creates a new builder-style object to manufacture [`Watchlist`](crate::types::Watchlist).
    pub fn builder() -> crate::types::builders::WatchlistBuilder {
        crate::types::builders::WatchlistBuilder::default()
    }
}

/// A builder for [`Watchlist`](crate::types::Watchlist).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct WatchlistBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) watchlist_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) default_watchlist: ::std::option::Option<bool>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl WatchlistBuilder {
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The identifier of the domain that contains the watchlist.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The identifier of the watchlist.</p>
    pub fn watchlist_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.watchlist_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the watchlist.</p>
    pub fn set_watchlist_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.watchlist_id = input;
        self
    }
    /// <p>The identifier of the watchlist.</p>
    pub fn get_watchlist_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.watchlist_id
    }
    /// <p>The name for the watchlist.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the watchlist.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the watchlist.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the watchlist.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the watchlist.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the watchlist.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Whether the specified watchlist is the default watchlist of a domain.</p>
    pub fn default_watchlist(mut self, input: bool) -> Self {
        self.default_watchlist = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the specified watchlist is the default watchlist of a domain.</p>
    pub fn set_default_watchlist(mut self, input: ::std::option::Option<bool>) -> Self {
        self.default_watchlist = input;
        self
    }
    /// <p>Whether the specified watchlist is the default watchlist of a domain.</p>
    pub fn get_default_watchlist(&self) -> &::std::option::Option<bool> {
        &self.default_watchlist
    }
    /// <p>The timestamp of when the watchlist was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the watchlist was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the watchlist was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the watchlist was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the watchlist was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the watchlist was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`Watchlist`](crate::types::Watchlist).
    pub fn build(self) -> crate::types::Watchlist {
        crate::types::Watchlist {
            domain_id: self.domain_id,
            watchlist_id: self.watchlist_id,
            name: self.name,
            description: self.description,
            default_watchlist: self.default_watchlist.unwrap_or_default(),
            created_at: self.created_at,
            updated_at: self.updated_at,
        }
    }
}
impl ::std::fmt::Debug for WatchlistBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WatchlistBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("watchlist_id", &self.watchlist_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("default_watchlist", &self.default_watchlist);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.finish()
    }
}
