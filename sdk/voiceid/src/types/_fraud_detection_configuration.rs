// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration used for performing fraud detection over a speaker during a session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FraudDetectionConfiguration {
    /// <p>Threshold value for determining whether the speaker is a fraudster. If the detected risk score calculated by Voice ID is higher than the threshold, the speaker is considered a fraudster.</p>
    pub risk_threshold: ::std::option::Option<i32>,
    /// <p>The identifier of the watchlist against which fraud detection is performed. </p>
    pub watchlist_id: ::std::option::Option<::std::string::String>,
}
impl FraudDetectionConfiguration {
    /// <p>Threshold value for determining whether the speaker is a fraudster. If the detected risk score calculated by Voice ID is higher than the threshold, the speaker is considered a fraudster.</p>
    pub fn risk_threshold(&self) -> ::std::option::Option<i32> {
        self.risk_threshold
    }
    /// <p>The identifier of the watchlist against which fraud detection is performed. </p>
    pub fn watchlist_id(&self) -> ::std::option::Option<&str> {
        self.watchlist_id.as_deref()
    }
}
impl FraudDetectionConfiguration {
    /// Creates a new builder-style object to manufacture [`FraudDetectionConfiguration`](crate::types::FraudDetectionConfiguration).
    pub fn builder() -> crate::types::builders::FraudDetectionConfigurationBuilder {
        crate::types::builders::FraudDetectionConfigurationBuilder::default()
    }
}

/// A builder for [`FraudDetectionConfiguration`](crate::types::FraudDetectionConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FraudDetectionConfigurationBuilder {
    pub(crate) risk_threshold: ::std::option::Option<i32>,
    pub(crate) watchlist_id: ::std::option::Option<::std::string::String>,
}
impl FraudDetectionConfigurationBuilder {
    /// <p>Threshold value for determining whether the speaker is a fraudster. If the detected risk score calculated by Voice ID is higher than the threshold, the speaker is considered a fraudster.</p>
    pub fn risk_threshold(mut self, input: i32) -> Self {
        self.risk_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>Threshold value for determining whether the speaker is a fraudster. If the detected risk score calculated by Voice ID is higher than the threshold, the speaker is considered a fraudster.</p>
    pub fn set_risk_threshold(mut self, input: ::std::option::Option<i32>) -> Self {
        self.risk_threshold = input;
        self
    }
    /// <p>Threshold value for determining whether the speaker is a fraudster. If the detected risk score calculated by Voice ID is higher than the threshold, the speaker is considered a fraudster.</p>
    pub fn get_risk_threshold(&self) -> &::std::option::Option<i32> {
        &self.risk_threshold
    }
    /// <p>The identifier of the watchlist against which fraud detection is performed. </p>
    pub fn watchlist_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.watchlist_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the watchlist against which fraud detection is performed. </p>
    pub fn set_watchlist_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.watchlist_id = input;
        self
    }
    /// <p>The identifier of the watchlist against which fraud detection is performed. </p>
    pub fn get_watchlist_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.watchlist_id
    }
    /// Consumes the builder and constructs a [`FraudDetectionConfiguration`](crate::types::FraudDetectionConfiguration).
    pub fn build(self) -> crate::types::FraudDetectionConfiguration {
        crate::types::FraudDetectionConfiguration {
            risk_threshold: self.risk_threshold,
            watchlist_id: self.watchlist_id,
        }
    }
}
