// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains all the information about a domain.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Domain {
    /// <p>The identifier of the domain.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the domain.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name for the domain.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the domain.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the domain.</p>
    pub domain_status: ::std::option::Option<crate::types::DomainStatus>,
    /// <p>The server-side encryption configuration containing the KMS key identifier you want Voice ID to use to encrypt your data.</p>
    pub server_side_encryption_configuration: ::std::option::Option<crate::types::ServerSideEncryptionConfiguration>,
    /// <p>The timestamp of when the domain was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the domain was last update.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Details about the most recent server-side encryption configuration update. When the server-side encryption configuration is changed, dependency on the old KMS key is removed through an asynchronous process. When this update is complete, the domain's data can only be accessed using the new KMS key.</p>
    pub server_side_encryption_update_details: ::std::option::Option<crate::types::ServerSideEncryptionUpdateDetails>,
    /// <p>The watchlist details of a domain. Contains the default watchlist ID of the domain.</p>
    pub watchlist_details: ::std::option::Option<crate::types::WatchlistDetails>,
}
impl Domain {
    /// <p>The identifier of the domain.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the domain.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name for the domain.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the domain.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The current status of the domain.</p>
    pub fn domain_status(&self) -> ::std::option::Option<&crate::types::DomainStatus> {
        self.domain_status.as_ref()
    }
    /// <p>The server-side encryption configuration containing the KMS key identifier you want Voice ID to use to encrypt your data.</p>
    pub fn server_side_encryption_configuration(&self) -> ::std::option::Option<&crate::types::ServerSideEncryptionConfiguration> {
        self.server_side_encryption_configuration.as_ref()
    }
    /// <p>The timestamp of when the domain was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the domain was last update.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>Details about the most recent server-side encryption configuration update. When the server-side encryption configuration is changed, dependency on the old KMS key is removed through an asynchronous process. When this update is complete, the domain's data can only be accessed using the new KMS key.</p>
    pub fn server_side_encryption_update_details(&self) -> ::std::option::Option<&crate::types::ServerSideEncryptionUpdateDetails> {
        self.server_side_encryption_update_details.as_ref()
    }
    /// <p>The watchlist details of a domain. Contains the default watchlist ID of the domain.</p>
    pub fn watchlist_details(&self) -> ::std::option::Option<&crate::types::WatchlistDetails> {
        self.watchlist_details.as_ref()
    }
}
impl ::std::fmt::Debug for Domain {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Domain");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("domain_status", &self.domain_status);
        formatter.field("server_side_encryption_configuration", &self.server_side_encryption_configuration);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("server_side_encryption_update_details", &self.server_side_encryption_update_details);
        formatter.field("watchlist_details", &self.watchlist_details);
        formatter.finish()
    }
}
impl Domain {
    /// Creates a new builder-style object to manufacture [`Domain`](crate::types::Domain).
    pub fn builder() -> crate::types::builders::DomainBuilder {
        crate::types::builders::DomainBuilder::default()
    }
}

/// A builder for [`Domain`](crate::types::Domain).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DomainBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) domain_status: ::std::option::Option<crate::types::DomainStatus>,
    pub(crate) server_side_encryption_configuration: ::std::option::Option<crate::types::ServerSideEncryptionConfiguration>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) server_side_encryption_update_details: ::std::option::Option<crate::types::ServerSideEncryptionUpdateDetails>,
    pub(crate) watchlist_details: ::std::option::Option<crate::types::WatchlistDetails>,
}
impl DomainBuilder {
    /// <p>The identifier of the domain.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the domain.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The identifier of the domain.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The Amazon Resource Name (ARN) for the domain.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the domain.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the domain.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name for the domain.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the domain.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the domain.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the domain.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the domain.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the domain.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The current status of the domain.</p>
    pub fn domain_status(mut self, input: crate::types::DomainStatus) -> Self {
        self.domain_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the domain.</p>
    pub fn set_domain_status(mut self, input: ::std::option::Option<crate::types::DomainStatus>) -> Self {
        self.domain_status = input;
        self
    }
    /// <p>The current status of the domain.</p>
    pub fn get_domain_status(&self) -> &::std::option::Option<crate::types::DomainStatus> {
        &self.domain_status
    }
    /// <p>The server-side encryption configuration containing the KMS key identifier you want Voice ID to use to encrypt your data.</p>
    pub fn server_side_encryption_configuration(mut self, input: crate::types::ServerSideEncryptionConfiguration) -> Self {
        self.server_side_encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The server-side encryption configuration containing the KMS key identifier you want Voice ID to use to encrypt your data.</p>
    pub fn set_server_side_encryption_configuration(mut self, input: ::std::option::Option<crate::types::ServerSideEncryptionConfiguration>) -> Self {
        self.server_side_encryption_configuration = input;
        self
    }
    /// <p>The server-side encryption configuration containing the KMS key identifier you want Voice ID to use to encrypt your data.</p>
    pub fn get_server_side_encryption_configuration(&self) -> &::std::option::Option<crate::types::ServerSideEncryptionConfiguration> {
        &self.server_side_encryption_configuration
    }
    /// <p>The timestamp of when the domain was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the domain was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the domain was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the domain was last update.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the domain was last update.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the domain was last update.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>Details about the most recent server-side encryption configuration update. When the server-side encryption configuration is changed, dependency on the old KMS key is removed through an asynchronous process. When this update is complete, the domain's data can only be accessed using the new KMS key.</p>
    pub fn server_side_encryption_update_details(mut self, input: crate::types::ServerSideEncryptionUpdateDetails) -> Self {
        self.server_side_encryption_update_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the most recent server-side encryption configuration update. When the server-side encryption configuration is changed, dependency on the old KMS key is removed through an asynchronous process. When this update is complete, the domain's data can only be accessed using the new KMS key.</p>
    pub fn set_server_side_encryption_update_details(
        mut self,
        input: ::std::option::Option<crate::types::ServerSideEncryptionUpdateDetails>,
    ) -> Self {
        self.server_side_encryption_update_details = input;
        self
    }
    /// <p>Details about the most recent server-side encryption configuration update. When the server-side encryption configuration is changed, dependency on the old KMS key is removed through an asynchronous process. When this update is complete, the domain's data can only be accessed using the new KMS key.</p>
    pub fn get_server_side_encryption_update_details(&self) -> &::std::option::Option<crate::types::ServerSideEncryptionUpdateDetails> {
        &self.server_side_encryption_update_details
    }
    /// <p>The watchlist details of a domain. Contains the default watchlist ID of the domain.</p>
    pub fn watchlist_details(mut self, input: crate::types::WatchlistDetails) -> Self {
        self.watchlist_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The watchlist details of a domain. Contains the default watchlist ID of the domain.</p>
    pub fn set_watchlist_details(mut self, input: ::std::option::Option<crate::types::WatchlistDetails>) -> Self {
        self.watchlist_details = input;
        self
    }
    /// <p>The watchlist details of a domain. Contains the default watchlist ID of the domain.</p>
    pub fn get_watchlist_details(&self) -> &::std::option::Option<crate::types::WatchlistDetails> {
        &self.watchlist_details
    }
    /// Consumes the builder and constructs a [`Domain`](crate::types::Domain).
    pub fn build(self) -> crate::types::Domain {
        crate::types::Domain {
            domain_id: self.domain_id,
            arn: self.arn,
            name: self.name,
            description: self.description,
            domain_status: self.domain_status,
            server_side_encryption_configuration: self.server_side_encryption_configuration,
            created_at: self.created_at,
            updated_at: self.updated_at,
            server_side_encryption_update_details: self.server_side_encryption_update_details,
            watchlist_details: self.watchlist_details,
        }
    }
}
impl ::std::fmt::Debug for DomainBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DomainBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("arn", &self.arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("domain_status", &self.domain_status);
        formatter.field("server_side_encryption_configuration", &self.server_side_encryption_configuration);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("server_side_encryption_update_details", &self.server_side_encryption_update_details);
        formatter.field("watchlist_details", &self.watchlist_details);
        formatter.finish()
    }
}
