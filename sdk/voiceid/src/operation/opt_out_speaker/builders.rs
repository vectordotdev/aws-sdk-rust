// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::opt_out_speaker::_opt_out_speaker_output::OptOutSpeakerOutputBuilder;

pub use crate::operation::opt_out_speaker::_opt_out_speaker_input::OptOutSpeakerInputBuilder;

impl OptOutSpeakerInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::opt_out_speaker::OptOutSpeakerOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::opt_out_speaker::OptOutSpeakerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.opt_out_speaker();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `OptOutSpeaker`.
///
/// <p>Opts out a speaker from Voice ID. A speaker can be opted out regardless of whether or not they already exist in Voice ID. If they don't yet exist, a new speaker is created in an opted out state. If they already exist, their existing status is overridden and they are opted out. Enrollment and evaluation authentication requests are rejected for opted out speakers, and opted out speakers have no voice embeddings stored in Voice ID.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct OptOutSpeakerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::opt_out_speaker::builders::OptOutSpeakerInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl OptOutSpeakerFluentBuilder {
    /// Creates a new `OptOutSpeaker`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the OptOutSpeaker as a reference.
    pub fn as_input(&self) -> &crate::operation::opt_out_speaker::builders::OptOutSpeakerInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::opt_out_speaker::OptOutSpeakerOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::opt_out_speaker::OptOutSpeakerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::opt_out_speaker::OptOutSpeaker::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::opt_out_speaker::OptOutSpeaker::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::opt_out_speaker::OptOutSpeakerOutput,
            crate::operation::opt_out_speaker::OptOutSpeakerError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::opt_out_speaker::OptOutSpeakerError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the domain that contains the speaker.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_id(input.into());
        self
    }
    /// <p>The identifier of the domain that contains the speaker.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_id(input);
        self
    }
    /// <p>The identifier of the domain that contains the speaker.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_id()
    }
    /// <p>The identifier of the speaker you want opted-out.</p>
    pub fn speaker_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.speaker_id(input.into());
        self
    }
    /// <p>The identifier of the speaker you want opted-out.</p>
    pub fn set_speaker_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_speaker_id(input);
        self
    }
    /// <p>The identifier of the speaker you want opted-out.</p>
    pub fn get_speaker_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_speaker_id()
    }
}
