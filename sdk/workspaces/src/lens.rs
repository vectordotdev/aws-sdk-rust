// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_workspace_bundles_output_next_token(
    input: &crate::operation::describe_workspace_bundles::DescribeWorkspaceBundlesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_workspace_directories_output_next_token(
    input: &crate::operation::describe_workspace_directories::DescribeWorkspaceDirectoriesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_workspaces_output_next_token(
    input: &crate::operation::describe_workspaces::DescribeWorkspacesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_workspace_bundles_output_bundles(
    input: crate::operation::describe_workspace_bundles::DescribeWorkspaceBundlesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceBundle>> {
    let input = match input.bundles {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_workspace_directories_output_directories(
    input: crate::operation::describe_workspace_directories::DescribeWorkspaceDirectoriesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceDirectory>> {
    let input = match input.directories {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_workspaces_output_workspaces(
    input: crate::operation::describe_workspaces::DescribeWorkspacesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Workspace>> {
    let input = match input.workspaces {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
