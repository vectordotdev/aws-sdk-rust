// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the standby WorkSpace.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PendingCreateStandbyWorkspacesRequest {
    /// <p>Describes the standby WorkSpace that was created.</p>
    /// <p>Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html"> DescribeWorkspaces</a> before the WorkSpace is created, the information returned can be incomplete. </p>
    pub user_name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the directory for the standby WorkSpace.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The operational state of the standby WorkSpace.</p>
    pub state: ::std::option::Option<crate::types::WorkspaceState>,
    /// <p>The identifier of the standby WorkSpace.</p>
    pub workspace_id: ::std::option::Option<::std::string::String>,
}
impl PendingCreateStandbyWorkspacesRequest {
    /// <p>Describes the standby WorkSpace that was created.</p>
    /// <p>Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html"> DescribeWorkspaces</a> before the WorkSpace is created, the information returned can be incomplete. </p>
    pub fn user_name(&self) -> ::std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The identifier of the directory for the standby WorkSpace.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The operational state of the standby WorkSpace.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::WorkspaceState> {
        self.state.as_ref()
    }
    /// <p>The identifier of the standby WorkSpace.</p>
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
}
impl PendingCreateStandbyWorkspacesRequest {
    /// Creates a new builder-style object to manufacture [`PendingCreateStandbyWorkspacesRequest`](crate::types::PendingCreateStandbyWorkspacesRequest).
    pub fn builder() -> crate::types::builders::PendingCreateStandbyWorkspacesRequestBuilder {
        crate::types::builders::PendingCreateStandbyWorkspacesRequestBuilder::default()
    }
}

/// A builder for [`PendingCreateStandbyWorkspacesRequest`](crate::types::PendingCreateStandbyWorkspacesRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PendingCreateStandbyWorkspacesRequestBuilder {
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::WorkspaceState>,
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
}
impl PendingCreateStandbyWorkspacesRequestBuilder {
    /// <p>Describes the standby WorkSpace that was created.</p>
    /// <p>Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html"> DescribeWorkspaces</a> before the WorkSpace is created, the information returned can be incomplete. </p>
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the standby WorkSpace that was created.</p>
    /// <p>Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html"> DescribeWorkspaces</a> before the WorkSpace is created, the information returned can be incomplete. </p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>Describes the standby WorkSpace that was created.</p>
    /// <p>Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html"> DescribeWorkspaces</a> before the WorkSpace is created, the information returned can be incomplete. </p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>The identifier of the directory for the standby WorkSpace.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the directory for the standby WorkSpace.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the directory for the standby WorkSpace.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The operational state of the standby WorkSpace.</p>
    pub fn state(mut self, input: crate::types::WorkspaceState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operational state of the standby WorkSpace.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::WorkspaceState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The operational state of the standby WorkSpace.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::WorkspaceState> {
        &self.state
    }
    /// <p>The identifier of the standby WorkSpace.</p>
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the standby WorkSpace.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The identifier of the standby WorkSpace.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// Consumes the builder and constructs a [`PendingCreateStandbyWorkspacesRequest`](crate::types::PendingCreateStandbyWorkspacesRequest).
    pub fn build(self) -> crate::types::PendingCreateStandbyWorkspacesRequest {
        crate::types::PendingCreateStandbyWorkspacesRequest {
            user_name: self.user_name,
            directory_id: self.directory_id,
            state: self.state,
            workspace_id: self.workspace_id,
        }
    }
}
