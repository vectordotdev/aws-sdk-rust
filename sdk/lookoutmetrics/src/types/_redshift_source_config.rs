// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the Amazon Redshift database configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RedshiftSourceConfig {
    /// <p>A string identifying the Redshift cluster.</p>
    pub cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database host.</p>
    pub database_host: ::std::option::Option<::std::string::String>,
    /// <p>The port number where the database can be accessed.</p>
    pub database_port: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager role.</p>
    pub secret_manager_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Redshift database name.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The table name of the Redshift database.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the role providing access to the database.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about the Amazon Virtual Private Cloud (VPC) configuration.</p>
    pub vpc_configuration: ::std::option::Option<crate::types::VpcConfiguration>,
}
impl RedshiftSourceConfig {
    /// <p>A string identifying the Redshift cluster.</p>
    pub fn cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
    /// <p>The name of the database host.</p>
    pub fn database_host(&self) -> ::std::option::Option<&str> {
        self.database_host.as_deref()
    }
    /// <p>The port number where the database can be accessed.</p>
    pub fn database_port(&self) -> ::std::option::Option<i32> {
        self.database_port
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager role.</p>
    pub fn secret_manager_arn(&self) -> ::std::option::Option<&str> {
        self.secret_manager_arn.as_deref()
    }
    /// <p>The Redshift database name.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The table name of the Redshift database.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the role providing access to the database.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Contains information about the Amazon Virtual Private Cloud (VPC) configuration.</p>
    pub fn vpc_configuration(&self) -> ::std::option::Option<&crate::types::VpcConfiguration> {
        self.vpc_configuration.as_ref()
    }
}
impl RedshiftSourceConfig {
    /// Creates a new builder-style object to manufacture [`RedshiftSourceConfig`](crate::types::RedshiftSourceConfig).
    pub fn builder() -> crate::types::builders::RedshiftSourceConfigBuilder {
        crate::types::builders::RedshiftSourceConfigBuilder::default()
    }
}

/// A builder for [`RedshiftSourceConfig`](crate::types::RedshiftSourceConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RedshiftSourceConfigBuilder {
    pub(crate) cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) database_host: ::std::option::Option<::std::string::String>,
    pub(crate) database_port: ::std::option::Option<i32>,
    pub(crate) secret_manager_arn: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_configuration: ::std::option::Option<crate::types::VpcConfiguration>,
}
impl RedshiftSourceConfigBuilder {
    /// <p>A string identifying the Redshift cluster.</p>
    pub fn cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string identifying the Redshift cluster.</p>
    pub fn set_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// <p>A string identifying the Redshift cluster.</p>
    pub fn get_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_identifier
    }
    /// <p>The name of the database host.</p>
    pub fn database_host(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_host = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database host.</p>
    pub fn set_database_host(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_host = input;
        self
    }
    /// <p>The name of the database host.</p>
    pub fn get_database_host(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_host
    }
    /// <p>The port number where the database can be accessed.</p>
    pub fn database_port(mut self, input: i32) -> Self {
        self.database_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number where the database can be accessed.</p>
    pub fn set_database_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.database_port = input;
        self
    }
    /// <p>The port number where the database can be accessed.</p>
    pub fn get_database_port(&self) -> &::std::option::Option<i32> {
        &self.database_port
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager role.</p>
    pub fn secret_manager_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_manager_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager role.</p>
    pub fn set_secret_manager_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_manager_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager role.</p>
    pub fn get_secret_manager_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_manager_arn
    }
    /// <p>The Redshift database name.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Redshift database name.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The Redshift database name.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The table name of the Redshift database.</p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The table name of the Redshift database.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The table name of the Redshift database.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The Amazon Resource Name (ARN) of the role providing access to the database.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role providing access to the database.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role providing access to the database.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Contains information about the Amazon Virtual Private Cloud (VPC) configuration.</p>
    pub fn vpc_configuration(mut self, input: crate::types::VpcConfiguration) -> Self {
        self.vpc_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the Amazon Virtual Private Cloud (VPC) configuration.</p>
    pub fn set_vpc_configuration(mut self, input: ::std::option::Option<crate::types::VpcConfiguration>) -> Self {
        self.vpc_configuration = input;
        self
    }
    /// <p>Contains information about the Amazon Virtual Private Cloud (VPC) configuration.</p>
    pub fn get_vpc_configuration(&self) -> &::std::option::Option<crate::types::VpcConfiguration> {
        &self.vpc_configuration
    }
    /// Consumes the builder and constructs a [`RedshiftSourceConfig`](crate::types::RedshiftSourceConfig).
    pub fn build(self) -> crate::types::RedshiftSourceConfig {
        crate::types::RedshiftSourceConfig {
            cluster_identifier: self.cluster_identifier,
            database_host: self.database_host,
            database_port: self.database_port,
            secret_manager_arn: self.secret_manager_arn,
            database_name: self.database_name,
            table_name: self.table_name,
            role_arn: self.role_arn,
            vpc_configuration: self.vpc_configuration,
        }
    }
}
