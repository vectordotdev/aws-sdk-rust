// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The choice content.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChoiceContent {
    /// <p>The display text for the choice content.</p>
    pub display_text: ::std::option::Option<::std::string::String>,
    /// <p>The URL for the choice content.</p>
    pub url: ::std::option::Option<::std::string::String>,
}
impl ChoiceContent {
    /// <p>The display text for the choice content.</p>
    pub fn display_text(&self) -> ::std::option::Option<&str> {
        self.display_text.as_deref()
    }
    /// <p>The URL for the choice content.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl ChoiceContent {
    /// Creates a new builder-style object to manufacture [`ChoiceContent`](crate::types::ChoiceContent).
    pub fn builder() -> crate::types::builders::ChoiceContentBuilder {
        crate::types::builders::ChoiceContentBuilder::default()
    }
}

/// A builder for [`ChoiceContent`](crate::types::ChoiceContent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChoiceContentBuilder {
    pub(crate) display_text: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
}
impl ChoiceContentBuilder {
    /// <p>The display text for the choice content.</p>
    pub fn display_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display text for the choice content.</p>
    pub fn set_display_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_text = input;
        self
    }
    /// <p>The display text for the choice content.</p>
    pub fn get_display_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_text
    }
    /// <p>The URL for the choice content.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL for the choice content.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL for the choice content.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Consumes the builder and constructs a [`ChoiceContent`](crate::types::ChoiceContent).
    pub fn build(self) -> crate::types::ChoiceContent {
        crate::types::ChoiceContent {
            display_text: self.display_text,
            url: self.url,
        }
    }
}
