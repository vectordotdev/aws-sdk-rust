// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The profile notification summary.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProfileNotificationSummary {
    /// <p>The current profile version.</p>
    pub current_profile_version: ::std::option::Option<::std::string::String>,
    /// <p>The latest profile version.</p>
    pub latest_profile_version: ::std::option::Option<::std::string::String>,
    /// <p>Type of notification.</p>
    pub r#type: ::std::option::Option<crate::types::ProfileNotificationType>,
    /// <p>The profile ARN.</p>
    pub profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The profile name.</p>
    pub profile_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub workload_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub workload_name: ::std::option::Option<::std::string::String>,
}
impl ProfileNotificationSummary {
    /// <p>The current profile version.</p>
    pub fn current_profile_version(&self) -> ::std::option::Option<&str> {
        self.current_profile_version.as_deref()
    }
    /// <p>The latest profile version.</p>
    pub fn latest_profile_version(&self) -> ::std::option::Option<&str> {
        self.latest_profile_version.as_deref()
    }
    /// <p>Type of notification.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ProfileNotificationType> {
        self.r#type.as_ref()
    }
    /// <p>The profile ARN.</p>
    pub fn profile_arn(&self) -> ::std::option::Option<&str> {
        self.profile_arn.as_deref()
    }
    /// <p>The profile name.</p>
    pub fn profile_name(&self) -> ::std::option::Option<&str> {
        self.profile_name.as_deref()
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(&self) -> ::std::option::Option<&str> {
        self.workload_id.as_deref()
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn workload_name(&self) -> ::std::option::Option<&str> {
        self.workload_name.as_deref()
    }
}
impl ProfileNotificationSummary {
    /// Creates a new builder-style object to manufacture [`ProfileNotificationSummary`](crate::types::ProfileNotificationSummary).
    pub fn builder() -> crate::types::builders::ProfileNotificationSummaryBuilder {
        crate::types::builders::ProfileNotificationSummaryBuilder::default()
    }
}

/// A builder for [`ProfileNotificationSummary`](crate::types::ProfileNotificationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProfileNotificationSummaryBuilder {
    pub(crate) current_profile_version: ::std::option::Option<::std::string::String>,
    pub(crate) latest_profile_version: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ProfileNotificationType>,
    pub(crate) profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) workload_id: ::std::option::Option<::std::string::String>,
    pub(crate) workload_name: ::std::option::Option<::std::string::String>,
}
impl ProfileNotificationSummaryBuilder {
    /// <p>The current profile version.</p>
    pub fn current_profile_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_profile_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current profile version.</p>
    pub fn set_current_profile_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_profile_version = input;
        self
    }
    /// <p>The current profile version.</p>
    pub fn get_current_profile_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_profile_version
    }
    /// <p>The latest profile version.</p>
    pub fn latest_profile_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_profile_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The latest profile version.</p>
    pub fn set_latest_profile_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_profile_version = input;
        self
    }
    /// <p>The latest profile version.</p>
    pub fn get_latest_profile_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_profile_version
    }
    /// <p>Type of notification.</p>
    pub fn r#type(mut self, input: crate::types::ProfileNotificationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of notification.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ProfileNotificationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Type of notification.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ProfileNotificationType> {
        &self.r#type
    }
    /// <p>The profile ARN.</p>
    pub fn profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The profile ARN.</p>
    pub fn set_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_arn = input;
        self
    }
    /// <p>The profile ARN.</p>
    pub fn get_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_arn
    }
    /// <p>The profile name.</p>
    pub fn profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The profile name.</p>
    pub fn set_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_name = input;
        self
    }
    /// <p>The profile name.</p>
    pub fn get_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_name
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn workload_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn set_workload_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_id = input;
        self
    }
    /// <p>The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.</p>
    pub fn get_workload_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_id
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn workload_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn set_workload_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_name = input;
        self
    }
    /// <p>The name of the workload.</p>
    /// <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
    pub fn get_workload_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_name
    }
    /// Consumes the builder and constructs a [`ProfileNotificationSummary`](crate::types::ProfileNotificationSummary).
    pub fn build(self) -> crate::types::ProfileNotificationSummary {
        crate::types::ProfileNotificationSummary {
            current_profile_version: self.current_profile_version,
            latest_profile_version: self.latest_profile_version,
            r#type: self.r#type,
            profile_arn: self.profile_arn,
            profile_name: self.profile_name,
            workload_id: self.workload_id,
            workload_name: self.workload_name,
        }
    }
}
