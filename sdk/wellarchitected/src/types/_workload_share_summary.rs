// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A workload share summary return object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkloadShareSummary {
    /// <p>The ID associated with the share.</p>
    pub share_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.</p>
    pub shared_with: ::std::option::Option<::std::string::String>,
    /// <p>Permission granted on a share request.</p>
    pub permission_type: ::std::option::Option<crate::types::PermissionType>,
    /// <p>The status of the share request.</p>
    pub status: ::std::option::Option<crate::types::ShareStatus>,
    /// <p>Optional message to compliment the Status field.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl WorkloadShareSummary {
    /// <p>The ID associated with the share.</p>
    pub fn share_id(&self) -> ::std::option::Option<&str> {
        self.share_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.</p>
    pub fn shared_with(&self) -> ::std::option::Option<&str> {
        self.shared_with.as_deref()
    }
    /// <p>Permission granted on a share request.</p>
    pub fn permission_type(&self) -> ::std::option::Option<&crate::types::PermissionType> {
        self.permission_type.as_ref()
    }
    /// <p>The status of the share request.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ShareStatus> {
        self.status.as_ref()
    }
    /// <p>Optional message to compliment the Status field.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl WorkloadShareSummary {
    /// Creates a new builder-style object to manufacture [`WorkloadShareSummary`](crate::types::WorkloadShareSummary).
    pub fn builder() -> crate::types::builders::WorkloadShareSummaryBuilder {
        crate::types::builders::WorkloadShareSummaryBuilder::default()
    }
}

/// A builder for [`WorkloadShareSummary`](crate::types::WorkloadShareSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkloadShareSummaryBuilder {
    pub(crate) share_id: ::std::option::Option<::std::string::String>,
    pub(crate) shared_with: ::std::option::Option<::std::string::String>,
    pub(crate) permission_type: ::std::option::Option<crate::types::PermissionType>,
    pub(crate) status: ::std::option::Option<crate::types::ShareStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl WorkloadShareSummaryBuilder {
    /// <p>The ID associated with the share.</p>
    pub fn share_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.share_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID associated with the share.</p>
    pub fn set_share_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.share_id = input;
        self
    }
    /// <p>The ID associated with the share.</p>
    pub fn get_share_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.share_id
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.</p>
    pub fn shared_with(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.shared_with = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.</p>
    pub fn set_shared_with(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.shared_with = input;
        self
    }
    /// <p>The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.</p>
    pub fn get_shared_with(&self) -> &::std::option::Option<::std::string::String> {
        &self.shared_with
    }
    /// <p>Permission granted on a share request.</p>
    pub fn permission_type(mut self, input: crate::types::PermissionType) -> Self {
        self.permission_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Permission granted on a share request.</p>
    pub fn set_permission_type(mut self, input: ::std::option::Option<crate::types::PermissionType>) -> Self {
        self.permission_type = input;
        self
    }
    /// <p>Permission granted on a share request.</p>
    pub fn get_permission_type(&self) -> &::std::option::Option<crate::types::PermissionType> {
        &self.permission_type
    }
    /// <p>The status of the share request.</p>
    pub fn status(mut self, input: crate::types::ShareStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the share request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ShareStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the share request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ShareStatus> {
        &self.status
    }
    /// <p>Optional message to compliment the Status field.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional message to compliment the Status field.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Optional message to compliment the Status field.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`WorkloadShareSummary`](crate::types::WorkloadShareSummary).
    pub fn build(self) -> crate::types::WorkloadShareSummary {
        crate::types::WorkloadShareSummary {
            share_id: self.share_id,
            shared_with: self.shared_with,
            permission_type: self.permission_type,
            status: self.status,
            status_message: self.status_message,
        }
    }
}
