// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::admin_set_user_mfa_preference::_admin_set_user_mfa_preference_output::AdminSetUserMfaPreferenceOutputBuilder;

pub use crate::operation::admin_set_user_mfa_preference::_admin_set_user_mfa_preference_input::AdminSetUserMfaPreferenceInputBuilder;

impl AdminSetUserMfaPreferenceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::admin_set_user_mfa_preference::AdminSetUserMfaPreferenceOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::admin_set_user_mfa_preference::AdminSetUserMFAPreferenceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.admin_set_user_mfa_preference();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `AdminSetUserMFAPreference`.
///
/// <p>The user's multi-factor authentication (MFA) preference, including which MFA options are activated, and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AdminSetUserMFAPreferenceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::admin_set_user_mfa_preference::builders::AdminSetUserMfaPreferenceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl AdminSetUserMFAPreferenceFluentBuilder {
    /// Creates a new `AdminSetUserMFAPreference`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the AdminSetUserMFAPreference as a reference.
    pub fn as_input(&self) -> &crate::operation::admin_set_user_mfa_preference::builders::AdminSetUserMfaPreferenceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::admin_set_user_mfa_preference::AdminSetUserMfaPreferenceOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::admin_set_user_mfa_preference::AdminSetUserMFAPreferenceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::admin_set_user_mfa_preference::AdminSetUserMFAPreference::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::admin_set_user_mfa_preference::AdminSetUserMFAPreference::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::admin_set_user_mfa_preference::AdminSetUserMfaPreferenceOutput,
            crate::operation::admin_set_user_mfa_preference::AdminSetUserMFAPreferenceError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::admin_set_user_mfa_preference::AdminSetUserMFAPreferenceError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The SMS text message MFA settings.</p>
    pub fn sms_mfa_settings(mut self, input: crate::types::SmsMfaSettingsType) -> Self {
        self.inner = self.inner.sms_mfa_settings(input);
        self
    }
    /// <p>The SMS text message MFA settings.</p>
    pub fn set_sms_mfa_settings(mut self, input: ::std::option::Option<crate::types::SmsMfaSettingsType>) -> Self {
        self.inner = self.inner.set_sms_mfa_settings(input);
        self
    }
    /// <p>The SMS text message MFA settings.</p>
    pub fn get_sms_mfa_settings(&self) -> &::std::option::Option<crate::types::SmsMfaSettingsType> {
        self.inner.get_sms_mfa_settings()
    }
    /// <p>The time-based one-time password software token MFA settings.</p>
    pub fn software_token_mfa_settings(mut self, input: crate::types::SoftwareTokenMfaSettingsType) -> Self {
        self.inner = self.inner.software_token_mfa_settings(input);
        self
    }
    /// <p>The time-based one-time password software token MFA settings.</p>
    pub fn set_software_token_mfa_settings(mut self, input: ::std::option::Option<crate::types::SoftwareTokenMfaSettingsType>) -> Self {
        self.inner = self.inner.set_software_token_mfa_settings(input);
        self
    }
    /// <p>The time-based one-time password software token MFA settings.</p>
    pub fn get_software_token_mfa_settings(&self) -> &::std::option::Option<crate::types::SoftwareTokenMfaSettingsType> {
        self.inner.get_software_token_mfa_settings()
    }
    /// <p>The user pool username or alias.</p>
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.username(input.into());
        self
    }
    /// <p>The user pool username or alias.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_username(input);
        self
    }
    /// <p>The user pool username or alias.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_username()
    }
    /// <p>The user pool ID.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_pool_id(input.into());
        self
    }
    /// <p>The user pool ID.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_pool_id(input);
        self
    }
    /// <p>The user pool ID.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_pool_id()
    }
}
