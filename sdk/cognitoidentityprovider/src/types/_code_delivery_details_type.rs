// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The delivery details for an email or SMS message that Amazon Cognito sent for authentication or verification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeDeliveryDetailsType {
    /// <p>The email address or phone number destination where Amazon Cognito sent the code.</p>
    pub destination: ::std::option::Option<::std::string::String>,
    /// <p>The method that Amazon Cognito used to send the code.</p>
    pub delivery_medium: ::std::option::Option<crate::types::DeliveryMediumType>,
    /// <p>The name of the attribute that Amazon Cognito verifies with the code.</p>
    pub attribute_name: ::std::option::Option<::std::string::String>,
}
impl CodeDeliveryDetailsType {
    /// <p>The email address or phone number destination where Amazon Cognito sent the code.</p>
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>The method that Amazon Cognito used to send the code.</p>
    pub fn delivery_medium(&self) -> ::std::option::Option<&crate::types::DeliveryMediumType> {
        self.delivery_medium.as_ref()
    }
    /// <p>The name of the attribute that Amazon Cognito verifies with the code.</p>
    pub fn attribute_name(&self) -> ::std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
}
impl CodeDeliveryDetailsType {
    /// Creates a new builder-style object to manufacture [`CodeDeliveryDetailsType`](crate::types::CodeDeliveryDetailsType).
    pub fn builder() -> crate::types::builders::CodeDeliveryDetailsTypeBuilder {
        crate::types::builders::CodeDeliveryDetailsTypeBuilder::default()
    }
}

/// A builder for [`CodeDeliveryDetailsType`](crate::types::CodeDeliveryDetailsType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeDeliveryDetailsTypeBuilder {
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) delivery_medium: ::std::option::Option<crate::types::DeliveryMediumType>,
    pub(crate) attribute_name: ::std::option::Option<::std::string::String>,
}
impl CodeDeliveryDetailsTypeBuilder {
    /// <p>The email address or phone number destination where Amazon Cognito sent the code.</p>
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address or phone number destination where Amazon Cognito sent the code.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The email address or phone number destination where Amazon Cognito sent the code.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p>The method that Amazon Cognito used to send the code.</p>
    pub fn delivery_medium(mut self, input: crate::types::DeliveryMediumType) -> Self {
        self.delivery_medium = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method that Amazon Cognito used to send the code.</p>
    pub fn set_delivery_medium(mut self, input: ::std::option::Option<crate::types::DeliveryMediumType>) -> Self {
        self.delivery_medium = input;
        self
    }
    /// <p>The method that Amazon Cognito used to send the code.</p>
    pub fn get_delivery_medium(&self) -> &::std::option::Option<crate::types::DeliveryMediumType> {
        &self.delivery_medium
    }
    /// <p>The name of the attribute that Amazon Cognito verifies with the code.</p>
    pub fn attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute that Amazon Cognito verifies with the code.</p>
    pub fn set_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The name of the attribute that Amazon Cognito verifies with the code.</p>
    pub fn get_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_name
    }
    /// Consumes the builder and constructs a [`CodeDeliveryDetailsType`](crate::types::CodeDeliveryDetailsType).
    pub fn build(self) -> crate::types::CodeDeliveryDetailsType {
        crate::types::CodeDeliveryDetailsType {
            destination: self.destination,
            delivery_medium: self.delivery_medium,
            attribute_name: self.attribute_name,
        }
    }
}
