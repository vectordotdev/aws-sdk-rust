// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_object_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::describe_object::DescribeObjectOutput, crate::operation::describe_object::DescribeObjectError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::describe_object::DescribeObjectError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::describe_object::DescribeObjectError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ContainerNotFoundException" => crate::operation::describe_object::DescribeObjectError::ContainerNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ContainerNotFoundExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_container_not_found_exception::de_container_not_found_exception_json_err(_response_body, output)
                        .map_err(crate::operation::describe_object::DescribeObjectError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerError" => crate::operation::describe_object::DescribeObjectError::InternalServerError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerErrorBuilder::default();
                output = crate::protocol_serde::shape_internal_server_error::de_internal_server_error_json_err(_response_body, output)
                    .map_err(crate::operation::describe_object::DescribeObjectError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ObjectNotFoundException" => crate::operation::describe_object::DescribeObjectError::ObjectNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ObjectNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_object_not_found_exception::de_object_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::describe_object::DescribeObjectError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::describe_object::DescribeObjectError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_object_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::describe_object::DescribeObjectOutput, crate::operation::describe_object::DescribeObjectError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::describe_object::builders::DescribeObjectOutputBuilder::default();
        output = output.set_cache_control(
            crate::protocol_serde::shape_describe_object_output::de_cache_control_header(_response_headers).map_err(|_| {
                crate::operation::describe_object::DescribeObjectError::unhandled("Failed to parse CacheControl from header `Cache-Control")
            })?,
        );
        output = output.set_content_length(
            crate::protocol_serde::shape_describe_object_output::de_content_length_header(_response_headers).map_err(|_| {
                crate::operation::describe_object::DescribeObjectError::unhandled("Failed to parse ContentLength from header `Content-Length")
            })?,
        );
        output = output.set_content_type(
            crate::protocol_serde::shape_describe_object_output::de_content_type_header(_response_headers).map_err(|_| {
                crate::operation::describe_object::DescribeObjectError::unhandled("Failed to parse ContentType from header `Content-Type")
            })?,
        );
        output = output.set_e_tag(
            crate::protocol_serde::shape_describe_object_output::de_e_tag_header(_response_headers)
                .map_err(|_| crate::operation::describe_object::DescribeObjectError::unhandled("Failed to parse ETag from header `ETag"))?,
        );
        output = output.set_last_modified(
            crate::protocol_serde::shape_describe_object_output::de_last_modified_header(_response_headers).map_err(|_| {
                crate::operation::describe_object::DescribeObjectError::unhandled("Failed to parse LastModified from header `Last-Modified")
            })?,
        );
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}
