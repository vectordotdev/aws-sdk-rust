// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a game.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GameDetails {
    /// <p>The name of the game.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of this game.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The description of the game.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date when the game was created.</p>
    pub created: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date when the game was last modified.</p>
    pub last_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The state of the game.</p>
    pub state: ::std::option::Option<crate::types::GameState>,
    /// <p>Determines if the game can be deleted.</p>
    pub enable_termination_protection: bool,
    /// <p>The tags associated with the game.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl GameDetails {
    /// <p>The name of the game.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of this game.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The description of the game.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date when the game was created.</p>
    pub fn created(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
    /// <p>The date when the game was last modified.</p>
    pub fn last_updated(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
    /// <p>The state of the game.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::GameState> {
        self.state.as_ref()
    }
    /// <p>Determines if the game can be deleted.</p>
    pub fn enable_termination_protection(&self) -> bool {
        self.enable_termination_protection
    }
    /// <p>The tags associated with the game.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl GameDetails {
    /// Creates a new builder-style object to manufacture [`GameDetails`](crate::types::GameDetails).
    pub fn builder() -> crate::types::builders::GameDetailsBuilder {
        crate::types::builders::GameDetailsBuilder::default()
    }
}

/// A builder for [`GameDetails`](crate::types::GameDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GameDetailsBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state: ::std::option::Option<crate::types::GameState>,
    pub(crate) enable_termination_protection: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl GameDetailsBuilder {
    /// <p>The name of the game.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the game.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the game.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of this game.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this game.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this game.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The description of the game.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the game.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the game.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date when the game was created.</p>
    pub fn created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the game was created.</p>
    pub fn set_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>The date when the game was created.</p>
    pub fn get_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created
    }
    /// <p>The date when the game was last modified.</p>
    pub fn last_updated(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the game was last modified.</p>
    pub fn set_last_updated(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated = input;
        self
    }
    /// <p>The date when the game was last modified.</p>
    pub fn get_last_updated(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated
    }
    /// <p>The state of the game.</p>
    pub fn state(mut self, input: crate::types::GameState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the game.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::GameState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the game.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::GameState> {
        &self.state
    }
    /// <p>Determines if the game can be deleted.</p>
    pub fn enable_termination_protection(mut self, input: bool) -> Self {
        self.enable_termination_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines if the game can be deleted.</p>
    pub fn set_enable_termination_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_termination_protection = input;
        self
    }
    /// <p>Determines if the game can be deleted.</p>
    pub fn get_enable_termination_protection(&self) -> &::std::option::Option<bool> {
        &self.enable_termination_protection
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the game.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags associated with the game.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with the game.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`GameDetails`](crate::types::GameDetails).
    pub fn build(self) -> crate::types::GameDetails {
        crate::types::GameDetails {
            name: self.name,
            arn: self.arn,
            description: self.description,
            created: self.created,
            last_updated: self.last_updated,
            state: self.state,
            enable_termination_protection: self.enable_termination_protection.unwrap_or_default(),
            tags: self.tags,
        }
    }
}
