// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_stage_deployment::_start_stage_deployment_output::StartStageDeploymentOutputBuilder;

pub use crate::operation::start_stage_deployment::_start_stage_deployment_input::StartStageDeploymentInputBuilder;

impl StartStageDeploymentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_stage_deployment::StartStageDeploymentOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::start_stage_deployment::StartStageDeploymentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_stage_deployment();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartStageDeployment`.
///
/// <p>Deploys a snapshot to the stage and creates a new game runtime.</p>
/// <p> After you call this operation, you can check the deployment status by using <code>GetStageDeployment</code>. </p>
/// <p> If there are any players connected to the previous game runtime, then both runtimes persist. Existing connections to the previous runtime are maintained. When players disconnect and reconnect, they connect to the new runtime. After there are no connections to the previous game runtime, it is deleted. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartStageDeploymentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_stage_deployment::builders::StartStageDeploymentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl StartStageDeploymentFluentBuilder {
    /// Creates a new `StartStageDeployment`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartStageDeployment as a reference.
    pub fn as_input(&self) -> &crate::operation::start_stage_deployment::builders::StartStageDeploymentInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_stage_deployment::StartStageDeploymentOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::start_stage_deployment::StartStageDeploymentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_stage_deployment::StartStageDeployment::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_stage_deployment::StartStageDeployment::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::start_stage_deployment::StartStageDeploymentOutput,
            crate::operation::start_stage_deployment::StartStageDeploymentError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::start_stage_deployment::StartStageDeploymentError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the game.</p>
    pub fn game_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.game_name(input.into());
        self
    }
    /// <p>The name of the game.</p>
    pub fn set_game_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_game_name(input);
        self
    }
    /// <p>The name of the game.</p>
    pub fn get_game_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_game_name()
    }
    /// <p>The name of the stage to deploy the snapshot onto.</p>
    pub fn stage_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.stage_name(input.into());
        self
    }
    /// <p>The name of the stage to deploy the snapshot onto.</p>
    pub fn set_stage_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_stage_name(input);
        self
    }
    /// <p>The name of the stage to deploy the snapshot onto.</p>
    pub fn get_stage_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_stage_name()
    }
    /// <p>The identifier of the snapshot to deploy.</p>
    pub fn snapshot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.snapshot_id(input.into());
        self
    }
    /// <p>The identifier of the snapshot to deploy.</p>
    pub fn set_snapshot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_snapshot_id(input);
        self
    }
    /// <p>The identifier of the snapshot to deploy.</p>
    pub fn get_snapshot_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_snapshot_id()
    }
    /// <p> A client-defined token. With an active client token in the request, this action is idempotent. </p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p> A client-defined token. With an active client token in the request, this action is idempotent. </p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p> A client-defined token. With an active client token in the request, this action is idempotent. </p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
