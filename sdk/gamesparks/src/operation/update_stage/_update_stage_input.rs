// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateStageInput {
    /// <p>The name of the game.</p>
    pub game_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the stage.</p>
    pub stage_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the role to use for the game snapshots deployed to this stage.</p>
    pub role: ::std::option::Option<::std::string::String>,
    /// <p>The description of the stage.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl UpdateStageInput {
    /// <p>The name of the game.</p>
    pub fn game_name(&self) -> ::std::option::Option<&str> {
        self.game_name.as_deref()
    }
    /// <p>The name of the stage.</p>
    pub fn stage_name(&self) -> ::std::option::Option<&str> {
        self.stage_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the role to use for the game snapshots deployed to this stage.</p>
    pub fn role(&self) -> ::std::option::Option<&str> {
        self.role.as_deref()
    }
    /// <p>The description of the stage.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl UpdateStageInput {
    /// Creates a new builder-style object to manufacture [`UpdateStageInput`](crate::operation::update_stage::UpdateStageInput).
    pub fn builder() -> crate::operation::update_stage::builders::UpdateStageInputBuilder {
        crate::operation::update_stage::builders::UpdateStageInputBuilder::default()
    }
}

/// A builder for [`UpdateStageInput`](crate::operation::update_stage::UpdateStageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateStageInputBuilder {
    pub(crate) game_name: ::std::option::Option<::std::string::String>,
    pub(crate) stage_name: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl UpdateStageInputBuilder {
    /// <p>The name of the game.</p>
    pub fn game_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.game_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the game.</p>
    pub fn set_game_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.game_name = input;
        self
    }
    /// <p>The name of the game.</p>
    pub fn get_game_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.game_name
    }
    /// <p>The name of the stage.</p>
    pub fn stage_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stage.</p>
    pub fn set_stage_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// <p>The name of the stage.</p>
    pub fn get_stage_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_name
    }
    /// <p>The Amazon Resource Name (ARN) of the role to use for the game snapshots deployed to this stage.</p>
    pub fn role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role to use for the game snapshots deployed to this stage.</p>
    pub fn set_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role to use for the game snapshots deployed to this stage.</p>
    pub fn get_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.role
    }
    /// <p>The description of the stage.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the stage.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the stage.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`UpdateStageInput`](crate::operation::update_stage::UpdateStageInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_stage::UpdateStageInput, ::aws_smithy_http::operation::error::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_stage::UpdateStageInput {
            game_name: self.game_name,
            stage_name: self.stage_name,
            role: self.role,
            description: self.description,
        })
    }
}
