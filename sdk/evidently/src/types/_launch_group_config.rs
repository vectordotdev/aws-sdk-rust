// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that defines one launch group in a launch. A launch group is a variation of the feature that you are including in the launch.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LaunchGroupConfig {
    /// <p>A name for this launch group.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the launch group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The feature that this launch is using.</p>
    pub feature: ::std::option::Option<::std::string::String>,
    /// <p>The feature variation to use for this launch group.</p>
    pub variation: ::std::option::Option<::std::string::String>,
}
impl LaunchGroupConfig {
    /// <p>A name for this launch group.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the launch group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The feature that this launch is using.</p>
    pub fn feature(&self) -> ::std::option::Option<&str> {
        self.feature.as_deref()
    }
    /// <p>The feature variation to use for this launch group.</p>
    pub fn variation(&self) -> ::std::option::Option<&str> {
        self.variation.as_deref()
    }
}
impl LaunchGroupConfig {
    /// Creates a new builder-style object to manufacture [`LaunchGroupConfig`](crate::types::LaunchGroupConfig).
    pub fn builder() -> crate::types::builders::LaunchGroupConfigBuilder {
        crate::types::builders::LaunchGroupConfigBuilder::default()
    }
}

/// A builder for [`LaunchGroupConfig`](crate::types::LaunchGroupConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LaunchGroupConfigBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) feature: ::std::option::Option<::std::string::String>,
    pub(crate) variation: ::std::option::Option<::std::string::String>,
}
impl LaunchGroupConfigBuilder {
    /// <p>A name for this launch group.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for this launch group.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for this launch group.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the launch group.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the launch group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the launch group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The feature that this launch is using.</p>
    pub fn feature(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feature = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The feature that this launch is using.</p>
    pub fn set_feature(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feature = input;
        self
    }
    /// <p>The feature that this launch is using.</p>
    pub fn get_feature(&self) -> &::std::option::Option<::std::string::String> {
        &self.feature
    }
    /// <p>The feature variation to use for this launch group.</p>
    pub fn variation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.variation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The feature variation to use for this launch group.</p>
    pub fn set_variation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.variation = input;
        self
    }
    /// <p>The feature variation to use for this launch group.</p>
    pub fn get_variation(&self) -> &::std::option::Option<::std::string::String> {
        &self.variation
    }
    /// Consumes the builder and constructs a [`LaunchGroupConfig`](crate::types::LaunchGroupConfig).
    pub fn build(self) -> crate::types::LaunchGroupConfig {
        crate::types::LaunchGroupConfig {
            name: self.name,
            description: self.description,
            feature: self.feature,
            variation: self.variation,
        }
    }
}
