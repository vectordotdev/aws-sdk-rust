// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure defines a metric that you want to use to evaluate the variations during a launch or experiment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricDefinitionConfig {
    /// <p>A name for the metric.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is <code>userDetails.userID</code>.</p>
    pub entity_id_key: ::std::option::Option<::std::string::String>,
    /// <p>The value that is tracked to produce the metric.</p>
    pub value_key: ::std::option::Option<::std::string::String>,
    /// <p>The EventBridge event pattern that defines how the metric is recorded.</p>
    /// <p>For more information about EventBridge event patterns, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
    pub event_pattern: ::std::option::Option<::std::string::String>,
    /// <p>A label for the units that the metric is measuring.</p>
    pub unit_label: ::std::option::Option<::std::string::String>,
}
impl MetricDefinitionConfig {
    /// <p>A name for the metric.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is <code>userDetails.userID</code>.</p>
    pub fn entity_id_key(&self) -> ::std::option::Option<&str> {
        self.entity_id_key.as_deref()
    }
    /// <p>The value that is tracked to produce the metric.</p>
    pub fn value_key(&self) -> ::std::option::Option<&str> {
        self.value_key.as_deref()
    }
    /// <p>The EventBridge event pattern that defines how the metric is recorded.</p>
    /// <p>For more information about EventBridge event patterns, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
    pub fn event_pattern(&self) -> ::std::option::Option<&str> {
        self.event_pattern.as_deref()
    }
    /// <p>A label for the units that the metric is measuring.</p>
    pub fn unit_label(&self) -> ::std::option::Option<&str> {
        self.unit_label.as_deref()
    }
}
impl MetricDefinitionConfig {
    /// Creates a new builder-style object to manufacture [`MetricDefinitionConfig`](crate::types::MetricDefinitionConfig).
    pub fn builder() -> crate::types::builders::MetricDefinitionConfigBuilder {
        crate::types::builders::MetricDefinitionConfigBuilder::default()
    }
}

/// A builder for [`MetricDefinitionConfig`](crate::types::MetricDefinitionConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricDefinitionConfigBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) entity_id_key: ::std::option::Option<::std::string::String>,
    pub(crate) value_key: ::std::option::Option<::std::string::String>,
    pub(crate) event_pattern: ::std::option::Option<::std::string::String>,
    pub(crate) unit_label: ::std::option::Option<::std::string::String>,
}
impl MetricDefinitionConfigBuilder {
    /// <p>A name for the metric.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the metric.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the metric.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is <code>userDetails.userID</code>.</p>
    pub fn entity_id_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is <code>userDetails.userID</code>.</p>
    pub fn set_entity_id_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id_key = input;
        self
    }
    /// <p>The entity, such as a user or session, that does an action that causes a metric value to be recorded. An example is <code>userDetails.userID</code>.</p>
    pub fn get_entity_id_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id_key
    }
    /// <p>The value that is tracked to produce the metric.</p>
    pub fn value_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value that is tracked to produce the metric.</p>
    pub fn set_value_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value_key = input;
        self
    }
    /// <p>The value that is tracked to produce the metric.</p>
    pub fn get_value_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.value_key
    }
    /// <p>The EventBridge event pattern that defines how the metric is recorded.</p>
    /// <p>For more information about EventBridge event patterns, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
    pub fn event_pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The EventBridge event pattern that defines how the metric is recorded.</p>
    /// <p>For more information about EventBridge event patterns, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
    pub fn set_event_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_pattern = input;
        self
    }
    /// <p>The EventBridge event pattern that defines how the metric is recorded.</p>
    /// <p>For more information about EventBridge event patterns, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
    pub fn get_event_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_pattern
    }
    /// <p>A label for the units that the metric is measuring.</p>
    pub fn unit_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unit_label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A label for the units that the metric is measuring.</p>
    pub fn set_unit_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unit_label = input;
        self
    }
    /// <p>A label for the units that the metric is measuring.</p>
    pub fn get_unit_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.unit_label
    }
    /// Consumes the builder and constructs a [`MetricDefinitionConfig`](crate::types::MetricDefinitionConfig).
    pub fn build(self) -> crate::types::MetricDefinitionConfig {
        crate::types::MetricDefinitionConfig {
            name: self.name,
            entity_id_key: self.entity_id_key,
            value_key: self.value_key,
            event_pattern: self.event_pattern,
            unit_label: self.unit_label,
        }
    }
}
