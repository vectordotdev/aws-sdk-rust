// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_recommender::_update_recommender_output::UpdateRecommenderOutputBuilder;

pub use crate::operation::update_recommender::_update_recommender_input::UpdateRecommenderInputBuilder;

impl UpdateRecommenderInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_recommender::UpdateRecommenderOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::update_recommender::UpdateRecommenderError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_recommender();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateRecommender`.
///
/// <p>Updates the recommender to modify the recommender configuration. If you update the recommender to modify the columns used in training, Amazon Personalize automatically starts a full retraining of the models backing your recommender. While the update completes, you can still get recommendations from the recommender. The recommender uses the previous configuration until the update completes. To track the status of this update, use the <code>latestRecommenderUpdate</code> returned in the <a href="https://docs.aws.amazon.com/personalize/latest/dg/API_DescribeRecommender.html">DescribeRecommender</a> operation. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateRecommenderFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_recommender::builders::UpdateRecommenderInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl UpdateRecommenderFluentBuilder {
    /// Creates a new `UpdateRecommender`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateRecommender as a reference.
    pub fn as_input(&self) -> &crate::operation::update_recommender::builders::UpdateRecommenderInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_recommender::UpdateRecommenderOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::update_recommender::UpdateRecommenderError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_recommender::UpdateRecommender::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_recommender::UpdateRecommender::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::update_recommender::UpdateRecommenderOutput,
            crate::operation::update_recommender::UpdateRecommenderError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::update_recommender::UpdateRecommenderError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recommender to modify.</p>
    pub fn recommender_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.recommender_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recommender to modify.</p>
    pub fn set_recommender_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_recommender_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recommender to modify.</p>
    pub fn get_recommender_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_recommender_arn()
    }
    /// <p>The configuration details of the recommender.</p>
    pub fn recommender_config(mut self, input: crate::types::RecommenderConfig) -> Self {
        self.inner = self.inner.recommender_config(input);
        self
    }
    /// <p>The configuration details of the recommender.</p>
    pub fn set_recommender_config(mut self, input: ::std::option::Option<crate::types::RecommenderConfig>) -> Self {
        self.inner = self.inner.set_recommender_config(input);
        self
    }
    /// <p>The configuration details of the recommender.</p>
    pub fn get_recommender_config(&self) -> &::std::option::Option<crate::types::RecommenderConfig> {
        self.inner.get_recommender_config()
    }
}
