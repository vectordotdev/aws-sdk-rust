// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the name and range of a continuous hyperparameter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContinuousHyperParameterRange {
    /// <p>The name of the hyperparameter.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The minimum allowable value for the hyperparameter.</p>
    pub min_value: f64,
    /// <p>The maximum allowable value for the hyperparameter.</p>
    pub max_value: f64,
}
impl ContinuousHyperParameterRange {
    /// <p>The name of the hyperparameter.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The minimum allowable value for the hyperparameter.</p>
    pub fn min_value(&self) -> f64 {
        self.min_value
    }
    /// <p>The maximum allowable value for the hyperparameter.</p>
    pub fn max_value(&self) -> f64 {
        self.max_value
    }
}
impl ContinuousHyperParameterRange {
    /// Creates a new builder-style object to manufacture [`ContinuousHyperParameterRange`](crate::types::ContinuousHyperParameterRange).
    pub fn builder() -> crate::types::builders::ContinuousHyperParameterRangeBuilder {
        crate::types::builders::ContinuousHyperParameterRangeBuilder::default()
    }
}

/// A builder for [`ContinuousHyperParameterRange`](crate::types::ContinuousHyperParameterRange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContinuousHyperParameterRangeBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) min_value: ::std::option::Option<f64>,
    pub(crate) max_value: ::std::option::Option<f64>,
}
impl ContinuousHyperParameterRangeBuilder {
    /// <p>The name of the hyperparameter.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the hyperparameter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the hyperparameter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The minimum allowable value for the hyperparameter.</p>
    pub fn min_value(mut self, input: f64) -> Self {
        self.min_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum allowable value for the hyperparameter.</p>
    pub fn set_min_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.min_value = input;
        self
    }
    /// <p>The minimum allowable value for the hyperparameter.</p>
    pub fn get_min_value(&self) -> &::std::option::Option<f64> {
        &self.min_value
    }
    /// <p>The maximum allowable value for the hyperparameter.</p>
    pub fn max_value(mut self, input: f64) -> Self {
        self.max_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum allowable value for the hyperparameter.</p>
    pub fn set_max_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max_value = input;
        self
    }
    /// <p>The maximum allowable value for the hyperparameter.</p>
    pub fn get_max_value(&self) -> &::std::option::Option<f64> {
        &self.max_value
    }
    /// Consumes the builder and constructs a [`ContinuousHyperParameterRange`](crate::types::ContinuousHyperParameterRange).
    pub fn build(self) -> crate::types::ContinuousHyperParameterRange {
        crate::types::ContinuousHyperParameterRange {
            name: self.name,
            min_value: self.min_value.unwrap_or_default(),
            max_value: self.max_value.unwrap_or_default(),
        }
    }
}
