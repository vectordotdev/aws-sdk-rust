// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration details of the recommender.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommenderConfig {
    /// <p>Specifies the exploration configuration hyperparameters, including <code>explorationWeight</code> and <code>explorationItemAgeCutOff</code>, you want to use to configure the amount of item exploration Amazon Personalize uses when recommending items. Provide <code>itemExplorationConfig</code> data only if your recommenders generate personalized recommendations for a user (not popular items or similar items).</p>
    pub item_exploration_config: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Specifies the requested minimum provisioned recommendation requests per second that Amazon Personalize will support. A high <code>minRecommendationRequestsPerSecond</code> will increase your bill. We recommend starting with 1 for <code>minRecommendationRequestsPerSecond</code> (the default). Track your usage using Amazon CloudWatch metrics, and increase the <code>minRecommendationRequestsPerSecond</code> as necessary.</p>
    pub min_recommendation_requests_per_second: ::std::option::Option<i32>,
    /// <p> Specifies the training data configuration to use when creating a domain recommender. </p>
    pub training_data_config: ::std::option::Option<crate::types::TrainingDataConfig>,
}
impl RecommenderConfig {
    /// <p>Specifies the exploration configuration hyperparameters, including <code>explorationWeight</code> and <code>explorationItemAgeCutOff</code>, you want to use to configure the amount of item exploration Amazon Personalize uses when recommending items. Provide <code>itemExplorationConfig</code> data only if your recommenders generate personalized recommendations for a user (not popular items or similar items).</p>
    pub fn item_exploration_config(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.item_exploration_config.as_ref()
    }
    /// <p>Specifies the requested minimum provisioned recommendation requests per second that Amazon Personalize will support. A high <code>minRecommendationRequestsPerSecond</code> will increase your bill. We recommend starting with 1 for <code>minRecommendationRequestsPerSecond</code> (the default). Track your usage using Amazon CloudWatch metrics, and increase the <code>minRecommendationRequestsPerSecond</code> as necessary.</p>
    pub fn min_recommendation_requests_per_second(&self) -> ::std::option::Option<i32> {
        self.min_recommendation_requests_per_second
    }
    /// <p> Specifies the training data configuration to use when creating a domain recommender. </p>
    pub fn training_data_config(&self) -> ::std::option::Option<&crate::types::TrainingDataConfig> {
        self.training_data_config.as_ref()
    }
}
impl RecommenderConfig {
    /// Creates a new builder-style object to manufacture [`RecommenderConfig`](crate::types::RecommenderConfig).
    pub fn builder() -> crate::types::builders::RecommenderConfigBuilder {
        crate::types::builders::RecommenderConfigBuilder::default()
    }
}

/// A builder for [`RecommenderConfig`](crate::types::RecommenderConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommenderConfigBuilder {
    pub(crate) item_exploration_config: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) min_recommendation_requests_per_second: ::std::option::Option<i32>,
    pub(crate) training_data_config: ::std::option::Option<crate::types::TrainingDataConfig>,
}
impl RecommenderConfigBuilder {
    /// Adds a key-value pair to `item_exploration_config`.
    ///
    /// To override the contents of this collection use [`set_item_exploration_config`](Self::set_item_exploration_config).
    ///
    /// <p>Specifies the exploration configuration hyperparameters, including <code>explorationWeight</code> and <code>explorationItemAgeCutOff</code>, you want to use to configure the amount of item exploration Amazon Personalize uses when recommending items. Provide <code>itemExplorationConfig</code> data only if your recommenders generate personalized recommendations for a user (not popular items or similar items).</p>
    pub fn item_exploration_config(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.item_exploration_config.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.item_exploration_config = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Specifies the exploration configuration hyperparameters, including <code>explorationWeight</code> and <code>explorationItemAgeCutOff</code>, you want to use to configure the amount of item exploration Amazon Personalize uses when recommending items. Provide <code>itemExplorationConfig</code> data only if your recommenders generate personalized recommendations for a user (not popular items or similar items).</p>
    pub fn set_item_exploration_config(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.item_exploration_config = input;
        self
    }
    /// <p>Specifies the exploration configuration hyperparameters, including <code>explorationWeight</code> and <code>explorationItemAgeCutOff</code>, you want to use to configure the amount of item exploration Amazon Personalize uses when recommending items. Provide <code>itemExplorationConfig</code> data only if your recommenders generate personalized recommendations for a user (not popular items or similar items).</p>
    pub fn get_item_exploration_config(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.item_exploration_config
    }
    /// <p>Specifies the requested minimum provisioned recommendation requests per second that Amazon Personalize will support. A high <code>minRecommendationRequestsPerSecond</code> will increase your bill. We recommend starting with 1 for <code>minRecommendationRequestsPerSecond</code> (the default). Track your usage using Amazon CloudWatch metrics, and increase the <code>minRecommendationRequestsPerSecond</code> as necessary.</p>
    pub fn min_recommendation_requests_per_second(mut self, input: i32) -> Self {
        self.min_recommendation_requests_per_second = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the requested minimum provisioned recommendation requests per second that Amazon Personalize will support. A high <code>minRecommendationRequestsPerSecond</code> will increase your bill. We recommend starting with 1 for <code>minRecommendationRequestsPerSecond</code> (the default). Track your usage using Amazon CloudWatch metrics, and increase the <code>minRecommendationRequestsPerSecond</code> as necessary.</p>
    pub fn set_min_recommendation_requests_per_second(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_recommendation_requests_per_second = input;
        self
    }
    /// <p>Specifies the requested minimum provisioned recommendation requests per second that Amazon Personalize will support. A high <code>minRecommendationRequestsPerSecond</code> will increase your bill. We recommend starting with 1 for <code>minRecommendationRequestsPerSecond</code> (the default). Track your usage using Amazon CloudWatch metrics, and increase the <code>minRecommendationRequestsPerSecond</code> as necessary.</p>
    pub fn get_min_recommendation_requests_per_second(&self) -> &::std::option::Option<i32> {
        &self.min_recommendation_requests_per_second
    }
    /// <p> Specifies the training data configuration to use when creating a domain recommender. </p>
    pub fn training_data_config(mut self, input: crate::types::TrainingDataConfig) -> Self {
        self.training_data_config = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies the training data configuration to use when creating a domain recommender. </p>
    pub fn set_training_data_config(mut self, input: ::std::option::Option<crate::types::TrainingDataConfig>) -> Self {
        self.training_data_config = input;
        self
    }
    /// <p> Specifies the training data configuration to use when creating a domain recommender. </p>
    pub fn get_training_data_config(&self) -> &::std::option::Option<crate::types::TrainingDataConfig> {
        &self.training_data_config
    }
    /// Consumes the builder and constructs a [`RecommenderConfig`](crate::types::RecommenderConfig).
    pub fn build(self) -> crate::types::RecommenderConfig {
        crate::types::RecommenderConfig {
            item_exploration_config: self.item_exploration_config,
            min_recommendation_requests_per_second: self.min_recommendation_requests_per_second,
            training_data_config: self.training_data_config,
        }
    }
}
