// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegistrySummary {
    /// <p>The ARN of the registry.</p>
    pub registry_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the registry.</p>
    pub registry_name: ::std::option::Option<::std::string::String>,
    /// <p>Tags associated with the registry.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RegistrySummary {
    /// <p>The ARN of the registry.</p>
    pub fn registry_arn(&self) -> ::std::option::Option<&str> {
        self.registry_arn.as_deref()
    }
    /// <p>The name of the registry.</p>
    pub fn registry_name(&self) -> ::std::option::Option<&str> {
        self.registry_name.as_deref()
    }
    /// <p>Tags associated with the registry.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl RegistrySummary {
    /// Creates a new builder-style object to manufacture [`RegistrySummary`](crate::types::RegistrySummary).
    pub fn builder() -> crate::types::builders::RegistrySummaryBuilder {
        crate::types::builders::RegistrySummaryBuilder::default()
    }
}

/// A builder for [`RegistrySummary`](crate::types::RegistrySummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegistrySummaryBuilder {
    pub(crate) registry_arn: ::std::option::Option<::std::string::String>,
    pub(crate) registry_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RegistrySummaryBuilder {
    /// <p>The ARN of the registry.</p>
    pub fn registry_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the registry.</p>
    pub fn set_registry_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_arn = input;
        self
    }
    /// <p>The ARN of the registry.</p>
    pub fn get_registry_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_arn
    }
    /// <p>The name of the registry.</p>
    pub fn registry_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the registry.</p>
    pub fn set_registry_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_name = input;
        self
    }
    /// <p>The name of the registry.</p>
    pub fn get_registry_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_name
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags associated with the registry.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags associated with the registry.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags associated with the registry.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`RegistrySummary`](crate::types::RegistrySummary).
    pub fn build(self) -> crate::types::RegistrySummary {
        crate::types::RegistrySummary {
            registry_arn: self.registry_arn,
            registry_name: self.registry_name,
            tags: self.tags,
        }
    }
}
