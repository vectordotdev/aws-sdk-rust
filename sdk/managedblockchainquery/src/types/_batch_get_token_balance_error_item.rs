// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Error generated from a failed <code>BatchGetTokenBalance</code> request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetTokenBalanceErrorItem {
    /// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note>
    /// <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p>
    /// </note>
    pub token_identifier: ::std::option::Option<crate::types::TokenIdentifier>,
    /// <p>The container for the identifier of the owner.</p>
    pub owner_identifier: ::std::option::Option<crate::types::OwnerIdentifier>,
    /// <p>The container for time.</p>
    pub at_blockchain_instant: ::std::option::Option<crate::types::BlockchainInstant>,
    /// <p>The error code associated with the error.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>The message associated with the error.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>The type of error.</p>
    pub error_type: ::std::option::Option<crate::types::ErrorType>,
}
impl BatchGetTokenBalanceErrorItem {
    /// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note>
    /// <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p>
    /// </note>
    pub fn token_identifier(&self) -> ::std::option::Option<&crate::types::TokenIdentifier> {
        self.token_identifier.as_ref()
    }
    /// <p>The container for the identifier of the owner.</p>
    pub fn owner_identifier(&self) -> ::std::option::Option<&crate::types::OwnerIdentifier> {
        self.owner_identifier.as_ref()
    }
    /// <p>The container for time.</p>
    pub fn at_blockchain_instant(&self) -> ::std::option::Option<&crate::types::BlockchainInstant> {
        self.at_blockchain_instant.as_ref()
    }
    /// <p>The error code associated with the error.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The message associated with the error.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The type of error.</p>
    pub fn error_type(&self) -> ::std::option::Option<&crate::types::ErrorType> {
        self.error_type.as_ref()
    }
}
impl BatchGetTokenBalanceErrorItem {
    /// Creates a new builder-style object to manufacture [`BatchGetTokenBalanceErrorItem`](crate::types::BatchGetTokenBalanceErrorItem).
    pub fn builder() -> crate::types::builders::BatchGetTokenBalanceErrorItemBuilder {
        crate::types::builders::BatchGetTokenBalanceErrorItemBuilder::default()
    }
}

/// A builder for [`BatchGetTokenBalanceErrorItem`](crate::types::BatchGetTokenBalanceErrorItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetTokenBalanceErrorItemBuilder {
    pub(crate) token_identifier: ::std::option::Option<crate::types::TokenIdentifier>,
    pub(crate) owner_identifier: ::std::option::Option<crate::types::OwnerIdentifier>,
    pub(crate) at_blockchain_instant: ::std::option::Option<crate::types::BlockchainInstant>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) error_type: ::std::option::Option<crate::types::ErrorType>,
}
impl BatchGetTokenBalanceErrorItemBuilder {
    /// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note>
    /// <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p>
    /// </note>
    pub fn token_identifier(mut self, input: crate::types::TokenIdentifier) -> Self {
        self.token_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note>
    /// <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p>
    /// </note>
    pub fn set_token_identifier(mut self, input: ::std::option::Option<crate::types::TokenIdentifier>) -> Self {
        self.token_identifier = input;
        self
    }
    /// <p>The container for the identifier for the token including the unique token ID and its blockchain network.</p> <note>
    /// <p>Only the native tokens BTC,ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.</p>
    /// </note>
    pub fn get_token_identifier(&self) -> &::std::option::Option<crate::types::TokenIdentifier> {
        &self.token_identifier
    }
    /// <p>The container for the identifier of the owner.</p>
    pub fn owner_identifier(mut self, input: crate::types::OwnerIdentifier) -> Self {
        self.owner_identifier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the identifier of the owner.</p>
    pub fn set_owner_identifier(mut self, input: ::std::option::Option<crate::types::OwnerIdentifier>) -> Self {
        self.owner_identifier = input;
        self
    }
    /// <p>The container for the identifier of the owner.</p>
    pub fn get_owner_identifier(&self) -> &::std::option::Option<crate::types::OwnerIdentifier> {
        &self.owner_identifier
    }
    /// <p>The container for time.</p>
    pub fn at_blockchain_instant(mut self, input: crate::types::BlockchainInstant) -> Self {
        self.at_blockchain_instant = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for time.</p>
    pub fn set_at_blockchain_instant(mut self, input: ::std::option::Option<crate::types::BlockchainInstant>) -> Self {
        self.at_blockchain_instant = input;
        self
    }
    /// <p>The container for time.</p>
    pub fn get_at_blockchain_instant(&self) -> &::std::option::Option<crate::types::BlockchainInstant> {
        &self.at_blockchain_instant
    }
    /// <p>The error code associated with the error.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code associated with the error.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code associated with the error.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>The message associated with the error.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message associated with the error.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The message associated with the error.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>The type of error.</p>
    pub fn error_type(mut self, input: crate::types::ErrorType) -> Self {
        self.error_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of error.</p>
    pub fn set_error_type(mut self, input: ::std::option::Option<crate::types::ErrorType>) -> Self {
        self.error_type = input;
        self
    }
    /// <p>The type of error.</p>
    pub fn get_error_type(&self) -> &::std::option::Option<crate::types::ErrorType> {
        &self.error_type
    }
    /// Consumes the builder and constructs a [`BatchGetTokenBalanceErrorItem`](crate::types::BatchGetTokenBalanceErrorItem).
    pub fn build(self) -> crate::types::BatchGetTokenBalanceErrorItem {
        crate::types::BatchGetTokenBalanceErrorItem {
            token_identifier: self.token_identifier,
            owner_identifier: self.owner_identifier,
            at_blockchain_instant: self.at_blockchain_instant,
            error_code: self.error_code,
            error_message: self.error_message,
            error_type: self.error_type,
        }
    }
}
