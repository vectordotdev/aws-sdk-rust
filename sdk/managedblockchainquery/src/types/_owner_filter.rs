// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The container for the owner information to filter by.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OwnerFilter {
    /// <p>The contract or wallet address.</p>
    pub address: ::std::option::Option<::std::string::String>,
}
impl OwnerFilter {
    /// <p>The contract or wallet address.</p>
    pub fn address(&self) -> ::std::option::Option<&str> {
        self.address.as_deref()
    }
}
impl OwnerFilter {
    /// Creates a new builder-style object to manufacture [`OwnerFilter`](crate::types::OwnerFilter).
    pub fn builder() -> crate::types::builders::OwnerFilterBuilder {
        crate::types::builders::OwnerFilterBuilder::default()
    }
}

/// A builder for [`OwnerFilter`](crate::types::OwnerFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OwnerFilterBuilder {
    pub(crate) address: ::std::option::Option<::std::string::String>,
}
impl OwnerFilterBuilder {
    /// <p>The contract or wallet address.</p>
    pub fn address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The contract or wallet address.</p>
    pub fn set_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// <p>The contract or wallet address.</p>
    pub fn get_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.address
    }
    /// Consumes the builder and constructs a [`OwnerFilter`](crate::types::OwnerFilter).
    pub fn build(self) -> crate::types::OwnerFilter {
        crate::types::OwnerFilter { address: self.address }
    }
}
