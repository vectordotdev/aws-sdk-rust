// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The container for determining how the list transaction result will be sorted.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTransactionsSort {
    /// <p>Defaults to the value <code>TRANSACTION_TIMESTAMP</code>.</p>
    pub sort_by: ::std::option::Option<crate::types::ListTransactionsSortBy>,
    /// <p>The container for the <i>sort order</i> for <code>ListTransactions</code>. The <code>SortOrder</code> field only accepts the values <code>ASCENDING</code> and <code>DESCENDING</code>. Not providing <code>SortOrder</code> will default to <code>ASCENDING</code>.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
}
impl ListTransactionsSort {
    /// <p>Defaults to the value <code>TRANSACTION_TIMESTAMP</code>.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::ListTransactionsSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The container for the <i>sort order</i> for <code>ListTransactions</code>. The <code>SortOrder</code> field only accepts the values <code>ASCENDING</code> and <code>DESCENDING</code>. Not providing <code>SortOrder</code> will default to <code>ASCENDING</code>.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
}
impl ListTransactionsSort {
    /// Creates a new builder-style object to manufacture [`ListTransactionsSort`](crate::types::ListTransactionsSort).
    pub fn builder() -> crate::types::builders::ListTransactionsSortBuilder {
        crate::types::builders::ListTransactionsSortBuilder::default()
    }
}

/// A builder for [`ListTransactionsSort`](crate::types::ListTransactionsSort).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTransactionsSortBuilder {
    pub(crate) sort_by: ::std::option::Option<crate::types::ListTransactionsSortBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
}
impl ListTransactionsSortBuilder {
    /// <p>Defaults to the value <code>TRANSACTION_TIMESTAMP</code>.</p>
    pub fn sort_by(mut self, input: crate::types::ListTransactionsSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defaults to the value <code>TRANSACTION_TIMESTAMP</code>.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::ListTransactionsSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>Defaults to the value <code>TRANSACTION_TIMESTAMP</code>.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::ListTransactionsSortBy> {
        &self.sort_by
    }
    /// <p>The container for the <i>sort order</i> for <code>ListTransactions</code>. The <code>SortOrder</code> field only accepts the values <code>ASCENDING</code> and <code>DESCENDING</code>. Not providing <code>SortOrder</code> will default to <code>ASCENDING</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The container for the <i>sort order</i> for <code>ListTransactions</code>. The <code>SortOrder</code> field only accepts the values <code>ASCENDING</code> and <code>DESCENDING</code>. Not providing <code>SortOrder</code> will default to <code>ASCENDING</code>.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The container for the <i>sort order</i> for <code>ListTransactions</code>. The <code>SortOrder</code> field only accepts the values <code>ASCENDING</code> and <code>DESCENDING</code>. Not providing <code>SortOrder</code> will default to <code>ASCENDING</code>.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// Consumes the builder and constructs a [`ListTransactionsSort`](crate::types::ListTransactionsSort).
    pub fn build(self) -> crate::types::ListTransactionsSort {
        crate::types::ListTransactionsSort {
            sort_by: self.sort_by,
            sort_order: self.sort_order,
        }
    }
}
