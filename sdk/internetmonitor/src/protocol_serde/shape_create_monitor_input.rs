// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_monitor_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_monitor::CreateMonitorInput,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.health_events_config {
        #[allow(unused_mut)]
        let mut object_3 = object.key("HealthEventsConfig").start_object();
        crate::protocol_serde::shape_health_events_config::ser_health_events_config(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.internet_measurements_log_delivery {
        #[allow(unused_mut)]
        let mut object_5 = object.key("InternetMeasurementsLogDelivery").start_object();
        crate::protocol_serde::shape_internet_measurements_log_delivery::ser_internet_measurements_log_delivery(&mut object_5, var_4)?;
        object_5.finish();
    }
    if input.max_city_networks_to_monitor != 0 {
        object.key("MaxCityNetworksToMonitor").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.max_city_networks_to_monitor).into()),
        );
    }
    if let Some(var_6) = &input.monitor_name {
        object.key("MonitorName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.resources {
        let mut array_8 = object.key("Resources").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if input.traffic_percentage_to_monitor != 0 {
        object.key("TrafficPercentageToMonitor").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.traffic_percentage_to_monitor).into()),
        );
    }
    Ok(())
}
