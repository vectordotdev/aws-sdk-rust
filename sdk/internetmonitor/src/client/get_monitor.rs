// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetMonitor`](crate::operation::get_monitor::builders::GetMonitorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_name(impl ::std::convert::Into<String>)`](crate::operation::get_monitor::builders::GetMonitorFluentBuilder::monitor_name) / [`set_monitor_name(Option<String>)`](crate::operation::get_monitor::builders::GetMonitorFluentBuilder::set_monitor_name): <p>The name of the monitor.</p>
    /// - On success, responds with [`GetMonitorOutput`](crate::operation::get_monitor::GetMonitorOutput) with field(s):
    ///   - [`monitor_name(Option<String>)`](crate::operation::get_monitor::GetMonitorOutput::monitor_name): <p>The name of the monitor.</p>
    ///   - [`monitor_arn(Option<String>)`](crate::operation::get_monitor::GetMonitorOutput::monitor_arn): <p>The Amazon Resource Name (ARN) of the monitor.</p>
    ///   - [`resources(Option<Vec<String>>)`](crate::operation::get_monitor::GetMonitorOutput::resources): <p>The resources that have been added for the monitor. Resources are listed by their Amazon Resource Names (ARNs).</p>
    ///   - [`status(Option<MonitorConfigState>)`](crate::operation::get_monitor::GetMonitorOutput::status): <p>The status of the monitor.</p>
    ///   - [`created_at(Option<DateTime>)`](crate::operation::get_monitor::GetMonitorOutput::created_at): <p>The time when the monitor was created.</p>
    ///   - [`modified_at(Option<DateTime>)`](crate::operation::get_monitor::GetMonitorOutput::modified_at): <p>The last time that the monitor was modified.</p>
    ///   - [`processing_status(Option<MonitorProcessingStatusCode>)`](crate::operation::get_monitor::GetMonitorOutput::processing_status): <p>The health of the data processing for the monitor.</p>
    ///   - [`processing_status_info(Option<String>)`](crate::operation::get_monitor::GetMonitorOutput::processing_status_info): <p>Additional information about the health of the data processing for the monitor.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::operation::get_monitor::GetMonitorOutput::tags): <p>The tags that have been added to monitor.</p>
    ///   - [`max_city_networks_to_monitor(i32)`](crate::operation::get_monitor::GetMonitorOutput::max_city_networks_to_monitor): <p>The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.</p>  <p>To learn more, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html">Choosing a city-network maximum value </a> in the Amazon CloudWatch Internet Monitor section of the <i>CloudWatch User Guide</i>.</p>
    ///   - [`internet_measurements_log_delivery(Option<InternetMeasurementsLogDelivery>)`](crate::operation::get_monitor::GetMonitorOutput::internet_measurements_log_delivery): <p>Publish internet measurements for Internet Monitor to another location, such as an Amazon S3 bucket. The measurements are also published to Amazon CloudWatch Logs.</p>
    ///   - [`traffic_percentage_to_monitor(i32)`](crate::operation::get_monitor::GetMonitorOutput::traffic_percentage_to_monitor): <p>The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.</p>
    ///   - [`health_events_config(Option<HealthEventsConfig>)`](crate::operation::get_monitor::GetMonitorOutput::health_events_config): <p>The list of health event thresholds. A health event threshold percentage, for performance and availability, determines the level of impact at which Amazon CloudWatch Internet Monitor creates a health event when there's an internet issue that affects your application end users.</p>
    /// - On failure, responds with [`SdkError<GetMonitorError>`](crate::operation::get_monitor::GetMonitorError)
    pub fn get_monitor(&self) -> crate::operation::get_monitor::builders::GetMonitorFluentBuilder {
        crate::operation::get_monitor::builders::GetMonitorFluentBuilder::new(self.handle.clone())
    }
}
