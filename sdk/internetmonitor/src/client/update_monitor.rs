// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateMonitor`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_name(impl ::std::convert::Into<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::monitor_name) / [`set_monitor_name(Option<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_monitor_name): <p>The name of the monitor. </p>
    ///   - [`resources_to_add(Vec<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::resources_to_add) / [`set_resources_to_add(Option<Vec<String>>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_resources_to_add): <p>The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).</p>  <p>You can add a combination of Amazon Virtual Private Clouds (VPCs) and Amazon CloudFront distributions, or you can add Amazon WorkSpaces directories. You can't add all three types of resources.</p> <note>   <p>If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.</p>  </note>
    ///   - [`resources_to_remove(Vec<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::resources_to_remove) / [`set_resources_to_remove(Option<Vec<String>>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_resources_to_remove): <p>The resources to remove from a monitor, which you provide as a set of Amazon Resource Names (ARNs).</p>
    ///   - [`status(MonitorConfigState)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::status) / [`set_status(Option<MonitorConfigState>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_status): <p>The status for a monitor. The accepted values for <code>Status</code> with the <code>UpdateMonitor</code> API call are the following: <code>ACTIVE</code> and <code>INACTIVE</code>. The following values are <i>not</i> accepted: <code>PENDING</code>, and <code>ERROR</code>.</p>
    ///   - [`client_token(impl ::std::convert::Into<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_client_token): <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. You should not reuse the same client token for other API requests.</p>
    ///   - [`max_city_networks_to_monitor(i32)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::max_city_networks_to_monitor) / [`set_max_city_networks_to_monitor(i32)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_max_city_networks_to_monitor): <p>The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider, that clients access the resources through.</p>
    ///   - [`internet_measurements_log_delivery(InternetMeasurementsLogDelivery)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::internet_measurements_log_delivery) / [`set_internet_measurements_log_delivery(Option<InternetMeasurementsLogDelivery>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_internet_measurements_log_delivery): <p>Publish internet measurements for Internet Monitor to another location, such as an Amazon S3 bucket. The measurements are also published to Amazon CloudWatch Logs.</p>
    ///   - [`traffic_percentage_to_monitor(i32)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::traffic_percentage_to_monitor) / [`set_traffic_percentage_to_monitor(i32)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_traffic_percentage_to_monitor): <p>The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.</p>
    ///   - [`health_events_config(HealthEventsConfig)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::health_events_config) / [`set_health_events_config(Option<HealthEventsConfig>)`](crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::set_health_events_config): <p>The list of health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users.</p>
    /// - On success, responds with [`UpdateMonitorOutput`](crate::operation::update_monitor::UpdateMonitorOutput) with field(s):
    ///   - [`monitor_arn(Option<String>)`](crate::operation::update_monitor::UpdateMonitorOutput::monitor_arn): <p>The Amazon Resource Name (ARN) of the monitor.</p>
    ///   - [`status(Option<MonitorConfigState>)`](crate::operation::update_monitor::UpdateMonitorOutput::status): <p>The status of a monitor.</p>
    /// - On failure, responds with [`SdkError<UpdateMonitorError>`](crate::operation::update_monitor::UpdateMonitorError)
    pub fn update_monitor(&self) -> crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder {
        crate::operation::update_monitor::builders::UpdateMonitorFluentBuilder::new(self.handle.clone())
    }
}
