// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type for the configuration. Defines the health event threshold percentages, for performance score and availability score. Amazon CloudWatch Internet Monitor creates a health event when there's an internet issue that affects your application end users where a health score percentage is at or below a set threshold. If you don't set a health event threshold, the default value is 95%.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HealthEventsConfig {
    /// <p>The health event threshold percentage set for availability scores.</p>
    pub availability_score_threshold: f64,
    /// <p>The health event threshold percentage set for performance scores.</p>
    pub performance_score_threshold: f64,
}
impl HealthEventsConfig {
    /// <p>The health event threshold percentage set for availability scores.</p>
    pub fn availability_score_threshold(&self) -> f64 {
        self.availability_score_threshold
    }
    /// <p>The health event threshold percentage set for performance scores.</p>
    pub fn performance_score_threshold(&self) -> f64 {
        self.performance_score_threshold
    }
}
impl HealthEventsConfig {
    /// Creates a new builder-style object to manufacture [`HealthEventsConfig`](crate::types::HealthEventsConfig).
    pub fn builder() -> crate::types::builders::HealthEventsConfigBuilder {
        crate::types::builders::HealthEventsConfigBuilder::default()
    }
}

/// A builder for [`HealthEventsConfig`](crate::types::HealthEventsConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HealthEventsConfigBuilder {
    pub(crate) availability_score_threshold: ::std::option::Option<f64>,
    pub(crate) performance_score_threshold: ::std::option::Option<f64>,
}
impl HealthEventsConfigBuilder {
    /// <p>The health event threshold percentage set for availability scores.</p>
    pub fn availability_score_threshold(mut self, input: f64) -> Self {
        self.availability_score_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health event threshold percentage set for availability scores.</p>
    pub fn set_availability_score_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.availability_score_threshold = input;
        self
    }
    /// <p>The health event threshold percentage set for availability scores.</p>
    pub fn get_availability_score_threshold(&self) -> &::std::option::Option<f64> {
        &self.availability_score_threshold
    }
    /// <p>The health event threshold percentage set for performance scores.</p>
    pub fn performance_score_threshold(mut self, input: f64) -> Self {
        self.performance_score_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health event threshold percentage set for performance scores.</p>
    pub fn set_performance_score_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.performance_score_threshold = input;
        self
    }
    /// <p>The health event threshold percentage set for performance scores.</p>
    pub fn get_performance_score_threshold(&self) -> &::std::option::Option<f64> {
        &self.performance_score_threshold
    }
    /// Consumes the builder and constructs a [`HealthEventsConfig`](crate::types::HealthEventsConfig).
    pub fn build(self) -> crate::types::HealthEventsConfig {
        crate::types::HealthEventsConfig {
            availability_score_threshold: self.availability_score_threshold.unwrap_or_default(),
            performance_score_threshold: self.performance_score_threshold.unwrap_or_default(),
        }
    }
}
