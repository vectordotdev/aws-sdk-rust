// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for publishing Amazon CloudWatch Internet Monitor internet measurements to Amazon S3. The configuration includes the bucket name and (optionally) prefix for the S3 bucket to store the measurements, and the delivery status. The delivery status is <code>ENABLED</code> or <code>DISABLED</code>, depending on whether you choose to deliver internet measurements to S3 logs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Config {
    /// <p>The Amazon S3 bucket name.</p>
    pub bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 bucket prefix.</p>
    pub bucket_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The status of publishing Internet Monitor internet measurements to an Amazon S3 bucket.</p>
    pub log_delivery_status: ::std::option::Option<crate::types::LogDeliveryStatus>,
}
impl S3Config {
    /// <p>The Amazon S3 bucket name.</p>
    pub fn bucket_name(&self) -> ::std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>The Amazon S3 bucket prefix.</p>
    pub fn bucket_prefix(&self) -> ::std::option::Option<&str> {
        self.bucket_prefix.as_deref()
    }
    /// <p>The status of publishing Internet Monitor internet measurements to an Amazon S3 bucket.</p>
    pub fn log_delivery_status(&self) -> ::std::option::Option<&crate::types::LogDeliveryStatus> {
        self.log_delivery_status.as_ref()
    }
}
impl S3Config {
    /// Creates a new builder-style object to manufacture [`S3Config`](crate::types::S3Config).
    pub fn builder() -> crate::types::builders::S3ConfigBuilder {
        crate::types::builders::S3ConfigBuilder::default()
    }
}

/// A builder for [`S3Config`](crate::types::S3Config).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3ConfigBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) log_delivery_status: ::std::option::Option<crate::types::LogDeliveryStatus>,
}
impl S3ConfigBuilder {
    /// <p>The Amazon S3 bucket name.</p>
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket name.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The Amazon S3 bucket name.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p>The Amazon S3 bucket prefix.</p>
    pub fn bucket_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket prefix.</p>
    pub fn set_bucket_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_prefix = input;
        self
    }
    /// <p>The Amazon S3 bucket prefix.</p>
    pub fn get_bucket_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_prefix
    }
    /// <p>The status of publishing Internet Monitor internet measurements to an Amazon S3 bucket.</p>
    pub fn log_delivery_status(mut self, input: crate::types::LogDeliveryStatus) -> Self {
        self.log_delivery_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of publishing Internet Monitor internet measurements to an Amazon S3 bucket.</p>
    pub fn set_log_delivery_status(mut self, input: ::std::option::Option<crate::types::LogDeliveryStatus>) -> Self {
        self.log_delivery_status = input;
        self
    }
    /// <p>The status of publishing Internet Monitor internet measurements to an Amazon S3 bucket.</p>
    pub fn get_log_delivery_status(&self) -> &::std::option::Option<crate::types::LogDeliveryStatus> {
        &self.log_delivery_status
    }
    /// Consumes the builder and constructs a [`S3Config`](crate::types::S3Config).
    pub fn build(self) -> crate::types::S3Config {
        crate::types::S3Config {
            bucket_name: self.bucket_name,
            bucket_prefix: self.bucket_prefix,
            log_delivery_status: self.log_delivery_status,
        }
    }
}
