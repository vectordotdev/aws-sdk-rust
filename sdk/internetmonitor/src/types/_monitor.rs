// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The description of and information about a monitor in Amazon CloudWatch Internet Monitor. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Monitor {
    /// <p>The name of the monitor.</p>
    pub monitor_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub monitor_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of a monitor.</p>
    pub status: ::std::option::Option<crate::types::MonitorConfigState>,
    /// <p>The health of data processing for the monitor.</p>
    pub processing_status: ::std::option::Option<crate::types::MonitorProcessingStatusCode>,
}
impl Monitor {
    /// <p>The name of the monitor.</p>
    pub fn monitor_name(&self) -> ::std::option::Option<&str> {
        self.monitor_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub fn monitor_arn(&self) -> ::std::option::Option<&str> {
        self.monitor_arn.as_deref()
    }
    /// <p>The status of a monitor.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MonitorConfigState> {
        self.status.as_ref()
    }
    /// <p>The health of data processing for the monitor.</p>
    pub fn processing_status(&self) -> ::std::option::Option<&crate::types::MonitorProcessingStatusCode> {
        self.processing_status.as_ref()
    }
}
impl Monitor {
    /// Creates a new builder-style object to manufacture [`Monitor`](crate::types::Monitor).
    pub fn builder() -> crate::types::builders::MonitorBuilder {
        crate::types::builders::MonitorBuilder::default()
    }
}

/// A builder for [`Monitor`](crate::types::Monitor).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MonitorBuilder {
    pub(crate) monitor_name: ::std::option::Option<::std::string::String>,
    pub(crate) monitor_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::MonitorConfigState>,
    pub(crate) processing_status: ::std::option::Option<crate::types::MonitorProcessingStatusCode>,
}
impl MonitorBuilder {
    /// <p>The name of the monitor.</p>
    pub fn monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn set_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_name = input;
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn get_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_name
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub fn monitor_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitor_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub fn set_monitor_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitor_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor.</p>
    pub fn get_monitor_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitor_arn
    }
    /// <p>The status of a monitor.</p>
    pub fn status(mut self, input: crate::types::MonitorConfigState) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a monitor.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MonitorConfigState>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of a monitor.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MonitorConfigState> {
        &self.status
    }
    /// <p>The health of data processing for the monitor.</p>
    pub fn processing_status(mut self, input: crate::types::MonitorProcessingStatusCode) -> Self {
        self.processing_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health of data processing for the monitor.</p>
    pub fn set_processing_status(mut self, input: ::std::option::Option<crate::types::MonitorProcessingStatusCode>) -> Self {
        self.processing_status = input;
        self
    }
    /// <p>The health of data processing for the monitor.</p>
    pub fn get_processing_status(&self) -> &::std::option::Option<crate::types::MonitorProcessingStatusCode> {
        &self.processing_status
    }
    /// Consumes the builder and constructs a [`Monitor`](crate::types::Monitor).
    pub fn build(self) -> crate::types::Monitor {
        crate::types::Monitor {
            monitor_name: self.monitor_name,
            monitor_arn: self.monitor_arn,
            status: self.status,
            processing_status: self.processing_status,
        }
    }
}
