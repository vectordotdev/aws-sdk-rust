// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Round-trip time (RTT) is how long it takes for a request from the user to return a response to the user. Amazon CloudWatch Internet Monitor calculates RTT at different percentiles: p50, p90, and p95.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoundTripTime {
    /// <p>RTT at the 50th percentile (p50).</p>
    pub p50: ::std::option::Option<f64>,
    /// <p>RTT at the 90th percentile (p90). </p>
    pub p90: ::std::option::Option<f64>,
    /// <p>RTT at the 95th percentile (p95). </p>
    pub p95: ::std::option::Option<f64>,
}
impl RoundTripTime {
    /// <p>RTT at the 50th percentile (p50).</p>
    pub fn p50(&self) -> ::std::option::Option<f64> {
        self.p50
    }
    /// <p>RTT at the 90th percentile (p90). </p>
    pub fn p90(&self) -> ::std::option::Option<f64> {
        self.p90
    }
    /// <p>RTT at the 95th percentile (p95). </p>
    pub fn p95(&self) -> ::std::option::Option<f64> {
        self.p95
    }
}
impl RoundTripTime {
    /// Creates a new builder-style object to manufacture [`RoundTripTime`](crate::types::RoundTripTime).
    pub fn builder() -> crate::types::builders::RoundTripTimeBuilder {
        crate::types::builders::RoundTripTimeBuilder::default()
    }
}

/// A builder for [`RoundTripTime`](crate::types::RoundTripTime).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RoundTripTimeBuilder {
    pub(crate) p50: ::std::option::Option<f64>,
    pub(crate) p90: ::std::option::Option<f64>,
    pub(crate) p95: ::std::option::Option<f64>,
}
impl RoundTripTimeBuilder {
    /// <p>RTT at the 50th percentile (p50).</p>
    pub fn p50(mut self, input: f64) -> Self {
        self.p50 = ::std::option::Option::Some(input);
        self
    }
    /// <p>RTT at the 50th percentile (p50).</p>
    pub fn set_p50(mut self, input: ::std::option::Option<f64>) -> Self {
        self.p50 = input;
        self
    }
    /// <p>RTT at the 50th percentile (p50).</p>
    pub fn get_p50(&self) -> &::std::option::Option<f64> {
        &self.p50
    }
    /// <p>RTT at the 90th percentile (p90). </p>
    pub fn p90(mut self, input: f64) -> Self {
        self.p90 = ::std::option::Option::Some(input);
        self
    }
    /// <p>RTT at the 90th percentile (p90). </p>
    pub fn set_p90(mut self, input: ::std::option::Option<f64>) -> Self {
        self.p90 = input;
        self
    }
    /// <p>RTT at the 90th percentile (p90). </p>
    pub fn get_p90(&self) -> &::std::option::Option<f64> {
        &self.p90
    }
    /// <p>RTT at the 95th percentile (p95). </p>
    pub fn p95(mut self, input: f64) -> Self {
        self.p95 = ::std::option::Option::Some(input);
        self
    }
    /// <p>RTT at the 95th percentile (p95). </p>
    pub fn set_p95(mut self, input: ::std::option::Option<f64>) -> Self {
        self.p95 = input;
        self
    }
    /// <p>RTT at the 95th percentile (p95). </p>
    pub fn get_p95(&self) -> &::std::option::Option<f64> {
        &self.p95
    }
    /// Consumes the builder and constructs a [`RoundTripTime`](crate::types::RoundTripTime).
    pub fn build(self) -> crate::types::RoundTripTime {
        crate::types::RoundTripTime {
            p50: self.p50,
            p90: self.p90,
            p95: self.p95,
        }
    }
}
