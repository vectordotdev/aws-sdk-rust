// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_virtual_service::_delete_virtual_service_output::DeleteVirtualServiceOutputBuilder;

pub use crate::operation::delete_virtual_service::_delete_virtual_service_input::DeleteVirtualServiceInputBuilder;

impl DeleteVirtualServiceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_virtual_service::DeleteVirtualServiceOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_virtual_service::DeleteVirtualServiceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_virtual_service();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteVirtualService`.
///
/// <p>Deletes an existing virtual service.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteVirtualServiceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_virtual_service::builders::DeleteVirtualServiceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl DeleteVirtualServiceFluentBuilder {
    /// Creates a new `DeleteVirtualService`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteVirtualService as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_virtual_service::builders::DeleteVirtualServiceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_virtual_service::DeleteVirtualServiceOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_virtual_service::DeleteVirtualServiceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_virtual_service::DeleteVirtualService::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_virtual_service::DeleteVirtualService::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::delete_virtual_service::DeleteVirtualServiceOutput,
            crate::operation::delete_virtual_service::DeleteVirtualServiceError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::delete_virtual_service::DeleteVirtualServiceError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the virtual service to delete.</p>
    pub fn virtual_service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.virtual_service_name(input.into());
        self
    }
    /// <p>The name of the virtual service to delete.</p>
    pub fn set_virtual_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_virtual_service_name(input);
        self
    }
    /// <p>The name of the virtual service to delete.</p>
    pub fn get_virtual_service_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_virtual_service_name()
    }
    /// <p>The name of the service mesh to delete the virtual service in.</p>
    pub fn mesh_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.mesh_name(input.into());
        self
    }
    /// <p>The name of the service mesh to delete the virtual service in.</p>
    pub fn set_mesh_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_mesh_name(input);
        self
    }
    /// <p>The name of the service mesh to delete the virtual service in.</p>
    pub fn get_mesh_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_mesh_name()
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn mesh_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.mesh_owner(input.into());
        self
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn set_mesh_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_mesh_owner(input);
        self
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn get_mesh_owner(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_mesh_owner()
    }
}
