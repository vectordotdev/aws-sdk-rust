// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A workflow run task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TaskListItem {
    /// <p>The task's ID.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>The task's status.</p>
    pub status: ::std::option::Option<crate::types::TaskStatus>,
    /// <p>The task's name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The task's CPU count.</p>
    pub cpus: ::std::option::Option<i32>,
    /// <p>The task's memory use in gigabyes.</p>
    pub memory: ::std::option::Option<i32>,
    /// <p>When the task was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the task started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the task stopped.</p>
    pub stop_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The number of Graphics Processing Units (GPU) specified for the task. </p>
    pub gpus: ::std::option::Option<i32>,
}
impl TaskListItem {
    /// <p>The task's ID.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The task's status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TaskStatus> {
        self.status.as_ref()
    }
    /// <p>The task's name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The task's CPU count.</p>
    pub fn cpus(&self) -> ::std::option::Option<i32> {
        self.cpus
    }
    /// <p>The task's memory use in gigabyes.</p>
    pub fn memory(&self) -> ::std::option::Option<i32> {
        self.memory
    }
    /// <p>When the task was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the task started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>When the task stopped.</p>
    pub fn stop_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.stop_time.as_ref()
    }
    /// <p> The number of Graphics Processing Units (GPU) specified for the task. </p>
    pub fn gpus(&self) -> ::std::option::Option<i32> {
        self.gpus
    }
}
impl TaskListItem {
    /// Creates a new builder-style object to manufacture [`TaskListItem`](crate::types::TaskListItem).
    pub fn builder() -> crate::types::builders::TaskListItemBuilder {
        crate::types::builders::TaskListItemBuilder::default()
    }
}

/// A builder for [`TaskListItem`](crate::types::TaskListItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TaskListItemBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TaskStatus>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) cpus: ::std::option::Option<i32>,
    pub(crate) memory: ::std::option::Option<i32>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) stop_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) gpus: ::std::option::Option<i32>,
}
impl TaskListItemBuilder {
    /// <p>The task's ID.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The task's ID.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The task's ID.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The task's status.</p>
    pub fn status(mut self, input: crate::types::TaskStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task's status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TaskStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The task's status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TaskStatus> {
        &self.status
    }
    /// <p>The task's name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The task's name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The task's name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The task's CPU count.</p>
    pub fn cpus(mut self, input: i32) -> Self {
        self.cpus = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task's CPU count.</p>
    pub fn set_cpus(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cpus = input;
        self
    }
    /// <p>The task's CPU count.</p>
    pub fn get_cpus(&self) -> &::std::option::Option<i32> {
        &self.cpus
    }
    /// <p>The task's memory use in gigabyes.</p>
    pub fn memory(mut self, input: i32) -> Self {
        self.memory = ::std::option::Option::Some(input);
        self
    }
    /// <p>The task's memory use in gigabyes.</p>
    pub fn set_memory(mut self, input: ::std::option::Option<i32>) -> Self {
        self.memory = input;
        self
    }
    /// <p>The task's memory use in gigabyes.</p>
    pub fn get_memory(&self) -> &::std::option::Option<i32> {
        &self.memory
    }
    /// <p>When the task was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the task was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the task was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>When the task started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the task started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>When the task started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>When the task stopped.</p>
    pub fn stop_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.stop_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the task stopped.</p>
    pub fn set_stop_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.stop_time = input;
        self
    }
    /// <p>When the task stopped.</p>
    pub fn get_stop_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.stop_time
    }
    /// <p> The number of Graphics Processing Units (GPU) specified for the task. </p>
    pub fn gpus(mut self, input: i32) -> Self {
        self.gpus = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of Graphics Processing Units (GPU) specified for the task. </p>
    pub fn set_gpus(mut self, input: ::std::option::Option<i32>) -> Self {
        self.gpus = input;
        self
    }
    /// <p> The number of Graphics Processing Units (GPU) specified for the task. </p>
    pub fn get_gpus(&self) -> &::std::option::Option<i32> {
        &self.gpus
    }
    /// Consumes the builder and constructs a [`TaskListItem`](crate::types::TaskListItem).
    pub fn build(self) -> crate::types::TaskListItem {
        crate::types::TaskListItem {
            task_id: self.task_id,
            status: self.status,
            name: self.name,
            cpus: self.cpus,
            memory: self.memory,
            creation_time: self.creation_time,
            start_time: self.start_time,
            stop_time: self.stop_time,
            gpus: self.gpus,
        }
    }
}
