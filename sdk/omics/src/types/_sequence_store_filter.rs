// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter for a sequence store.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SequenceStoreFilter {
    /// <p>A name to filter on.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The filter's start date.</p>
    pub created_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The filter's end date.</p>
    pub created_before: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SequenceStoreFilter {
    /// <p>A name to filter on.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The filter's start date.</p>
    pub fn created_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_after.as_ref()
    }
    /// <p>The filter's end date.</p>
    pub fn created_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_before.as_ref()
    }
}
impl SequenceStoreFilter {
    /// Creates a new builder-style object to manufacture [`SequenceStoreFilter`](crate::types::SequenceStoreFilter).
    pub fn builder() -> crate::types::builders::SequenceStoreFilterBuilder {
        crate::types::builders::SequenceStoreFilterBuilder::default()
    }
}

/// A builder for [`SequenceStoreFilter`](crate::types::SequenceStoreFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SequenceStoreFilterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) created_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_before: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SequenceStoreFilterBuilder {
    /// <p>A name to filter on.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name to filter on.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name to filter on.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The filter's start date.</p>
    pub fn created_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter's start date.</p>
    pub fn set_created_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_after = input;
        self
    }
    /// <p>The filter's start date.</p>
    pub fn get_created_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_after
    }
    /// <p>The filter's end date.</p>
    pub fn created_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter's end date.</p>
    pub fn set_created_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_before = input;
        self
    }
    /// <p>The filter's end date.</p>
    pub fn get_created_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_before
    }
    /// Consumes the builder and constructs a [`SequenceStoreFilter`](crate::types::SequenceStoreFilter).
    pub fn build(self) -> crate::types::SequenceStoreFilter {
        crate::types::SequenceStoreFilter {
            name: self.name,
            created_after: self.created_after,
            created_before: self.created_before,
        }
    }
}
