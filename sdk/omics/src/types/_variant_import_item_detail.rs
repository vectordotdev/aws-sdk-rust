// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an imported variant item.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VariantImportItemDetail {
    /// <p>The source file's location in Amazon S3.</p>
    pub source: ::std::option::Option<::std::string::String>,
    /// <p>The item's job status.</p>
    pub job_status: ::std::option::Option<crate::types::JobStatus>,
    /// <p> A message that provides additional context about a job </p>
    pub status_message: ::std::option::Option<::std::string::String>,
}
impl VariantImportItemDetail {
    /// <p>The source file's location in Amazon S3.</p>
    pub fn source(&self) -> ::std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>The item's job status.</p>
    pub fn job_status(&self) -> ::std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
    /// <p> A message that provides additional context about a job </p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl VariantImportItemDetail {
    /// Creates a new builder-style object to manufacture [`VariantImportItemDetail`](crate::types::VariantImportItemDetail).
    pub fn builder() -> crate::types::builders::VariantImportItemDetailBuilder {
        crate::types::builders::VariantImportItemDetailBuilder::default()
    }
}

/// A builder for [`VariantImportItemDetail`](crate::types::VariantImportItemDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VariantImportItemDetailBuilder {
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) job_status: ::std::option::Option<crate::types::JobStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
}
impl VariantImportItemDetailBuilder {
    /// <p>The source file's location in Amazon S3.</p>
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source file's location in Amazon S3.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source file's location in Amazon S3.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>The item's job status.</p>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The item's job status.</p>
    pub fn set_job_status(mut self, input: ::std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The item's job status.</p>
    pub fn get_job_status(&self) -> &::std::option::Option<crate::types::JobStatus> {
        &self.job_status
    }
    /// <p> A message that provides additional context about a job </p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A message that provides additional context about a job </p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p> A message that provides additional context about a job </p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// Consumes the builder and constructs a [`VariantImportItemDetail`](crate::types::VariantImportItemDetail).
    pub fn build(self) -> crate::types::VariantImportItemDetail {
        crate::types::VariantImportItemDetail {
            source: self.source,
            job_status: self.job_status,
            status_message: self.status_message,
        }
    }
}
