// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An annotation store.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnnotationStoreItem {
    /// <p>The store's ID.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The store's genome reference.</p>
    pub reference: ::std::option::Option<crate::types::ReferenceItem>,
    /// <p>The store's status.</p>
    pub status: ::std::option::Option<crate::types::StoreStatus>,
    /// <p>The store's ARN.</p>
    pub store_arn: ::std::option::Option<::std::string::String>,
    /// <p>The store's name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The store's file format.</p>
    pub store_format: ::std::option::Option<crate::types::StoreFormat>,
    /// <p>The store's description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub sse_config: ::std::option::Option<crate::types::SseConfig>,
    /// <p>The store's creation time.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the store was updated.</p>
    pub update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The store's status message.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The store's size in bytes.</p>
    pub store_size_bytes: ::std::option::Option<i64>,
}
impl AnnotationStoreItem {
    /// <p>The store's ID.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The store's genome reference.</p>
    pub fn reference(&self) -> ::std::option::Option<&crate::types::ReferenceItem> {
        self.reference.as_ref()
    }
    /// <p>The store's status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::StoreStatus> {
        self.status.as_ref()
    }
    /// <p>The store's ARN.</p>
    pub fn store_arn(&self) -> ::std::option::Option<&str> {
        self.store_arn.as_deref()
    }
    /// <p>The store's name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The store's file format.</p>
    pub fn store_format(&self) -> ::std::option::Option<&crate::types::StoreFormat> {
        self.store_format.as_ref()
    }
    /// <p>The store's description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn sse_config(&self) -> ::std::option::Option<&crate::types::SseConfig> {
        self.sse_config.as_ref()
    }
    /// <p>The store's creation time.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the store was updated.</p>
    pub fn update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>The store's status message.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The store's size in bytes.</p>
    pub fn store_size_bytes(&self) -> ::std::option::Option<i64> {
        self.store_size_bytes
    }
}
impl AnnotationStoreItem {
    /// Creates a new builder-style object to manufacture [`AnnotationStoreItem`](crate::types::AnnotationStoreItem).
    pub fn builder() -> crate::types::builders::AnnotationStoreItemBuilder {
        crate::types::builders::AnnotationStoreItemBuilder::default()
    }
}

/// A builder for [`AnnotationStoreItem`](crate::types::AnnotationStoreItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnnotationStoreItemBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) reference: ::std::option::Option<crate::types::ReferenceItem>,
    pub(crate) status: ::std::option::Option<crate::types::StoreStatus>,
    pub(crate) store_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) store_format: ::std::option::Option<crate::types::StoreFormat>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) sse_config: ::std::option::Option<crate::types::SseConfig>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) store_size_bytes: ::std::option::Option<i64>,
}
impl AnnotationStoreItemBuilder {
    /// <p>The store's ID.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The store's ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The store's genome reference.</p>
    pub fn reference(mut self, input: crate::types::ReferenceItem) -> Self {
        self.reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's genome reference.</p>
    pub fn set_reference(mut self, input: ::std::option::Option<crate::types::ReferenceItem>) -> Self {
        self.reference = input;
        self
    }
    /// <p>The store's genome reference.</p>
    pub fn get_reference(&self) -> &::std::option::Option<crate::types::ReferenceItem> {
        &self.reference
    }
    /// <p>The store's status.</p>
    pub fn status(mut self, input: crate::types::StoreStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StoreStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The store's status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StoreStatus> {
        &self.status
    }
    /// <p>The store's ARN.</p>
    pub fn store_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.store_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's ARN.</p>
    pub fn set_store_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.store_arn = input;
        self
    }
    /// <p>The store's ARN.</p>
    pub fn get_store_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.store_arn
    }
    /// <p>The store's name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The store's name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The store's file format.</p>
    pub fn store_format(mut self, input: crate::types::StoreFormat) -> Self {
        self.store_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's file format.</p>
    pub fn set_store_format(mut self, input: ::std::option::Option<crate::types::StoreFormat>) -> Self {
        self.store_format = input;
        self
    }
    /// <p>The store's file format.</p>
    pub fn get_store_format(&self) -> &::std::option::Option<crate::types::StoreFormat> {
        &self.store_format
    }
    /// <p>The store's description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The store's description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn sse_config(mut self, input: crate::types::SseConfig) -> Self {
        self.sse_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn set_sse_config(mut self, input: ::std::option::Option<crate::types::SseConfig>) -> Self {
        self.sse_config = input;
        self
    }
    /// <p>The store's server-side encryption (SSE) settings.</p>
    pub fn get_sse_config(&self) -> &::std::option::Option<crate::types::SseConfig> {
        &self.sse_config
    }
    /// <p>The store's creation time.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's creation time.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The store's creation time.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>When the store was updated.</p>
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the store was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>When the store was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The store's status message.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The store's status message.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The store's status message.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The store's size in bytes.</p>
    pub fn store_size_bytes(mut self, input: i64) -> Self {
        self.store_size_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The store's size in bytes.</p>
    pub fn set_store_size_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.store_size_bytes = input;
        self
    }
    /// <p>The store's size in bytes.</p>
    pub fn get_store_size_bytes(&self) -> &::std::option::Option<i64> {
        &self.store_size_bytes
    }
    /// Consumes the builder and constructs a [`AnnotationStoreItem`](crate::types::AnnotationStoreItem).
    pub fn build(self) -> crate::types::AnnotationStoreItem {
        crate::types::AnnotationStoreItem {
            id: self.id,
            reference: self.reference,
            status: self.status,
            store_arn: self.store_arn,
            name: self.name,
            store_format: self.store_format,
            description: self.description,
            sse_config: self.sse_config,
            creation_time: self.creation_time,
            update_time: self.update_time,
            status_message: self.status_message,
            store_size_bytes: self.store_size_bytes,
        }
    }
}
