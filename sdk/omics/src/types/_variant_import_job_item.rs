// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A variant import job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VariantImportJobItem {
    /// <p>The job's ID.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The job's destination variant store.</p>
    pub destination_name: ::std::option::Option<::std::string::String>,
    /// <p>The job's service role ARN.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The job's status.</p>
    pub status: ::std::option::Option<crate::types::JobStatus>,
    /// <p>When the job was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the job was updated.</p>
    pub update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the job completed.</p>
    pub completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The job's left normalization setting.</p>
    pub run_left_normalization: bool,
    /// <p> The annotation schema generated by the parsed annotation data. </p>
    pub annotation_fields: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl VariantImportJobItem {
    /// <p>The job's ID.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The job's destination variant store.</p>
    pub fn destination_name(&self) -> ::std::option::Option<&str> {
        self.destination_name.as_deref()
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The job's status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::JobStatus> {
        self.status.as_ref()
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the job was updated.</p>
    pub fn update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The job's left normalization setting.</p>
    pub fn run_left_normalization(&self) -> bool {
        self.run_left_normalization
    }
    /// <p> The annotation schema generated by the parsed annotation data. </p>
    pub fn annotation_fields(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.annotation_fields.as_ref()
    }
}
impl VariantImportJobItem {
    /// Creates a new builder-style object to manufacture [`VariantImportJobItem`](crate::types::VariantImportJobItem).
    pub fn builder() -> crate::types::builders::VariantImportJobItemBuilder {
        crate::types::builders::VariantImportJobItemBuilder::default()
    }
}

/// A builder for [`VariantImportJobItem`](crate::types::VariantImportJobItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VariantImportJobItemBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) destination_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::JobStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) run_left_normalization: ::std::option::Option<bool>,
    pub(crate) annotation_fields: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl VariantImportJobItemBuilder {
    /// <p>The job's ID.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job's ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The job's ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The job's destination variant store.</p>
    pub fn destination_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job's destination variant store.</p>
    pub fn set_destination_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_name = input;
        self
    }
    /// <p>The job's destination variant store.</p>
    pub fn get_destination_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_name
    }
    /// <p>The job's service role ARN.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job's service role ARN.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The job's service role ARN.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The job's status.</p>
    pub fn status(mut self, input: crate::types::JobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job's status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::JobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The job's status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::JobStatus> {
        &self.status
    }
    /// <p>When the job was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the job was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the job was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>When the job was updated.</p>
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the job was updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>When the job was updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>When the job completed.</p>
    pub fn completion_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the job completed.</p>
    pub fn set_completion_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_time = input;
        self
    }
    /// <p>When the job completed.</p>
    pub fn get_completion_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_time
    }
    /// <p>The job's left normalization setting.</p>
    pub fn run_left_normalization(mut self, input: bool) -> Self {
        self.run_left_normalization = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job's left normalization setting.</p>
    pub fn set_run_left_normalization(mut self, input: ::std::option::Option<bool>) -> Self {
        self.run_left_normalization = input;
        self
    }
    /// <p>The job's left normalization setting.</p>
    pub fn get_run_left_normalization(&self) -> &::std::option::Option<bool> {
        &self.run_left_normalization
    }
    /// Adds a key-value pair to `annotation_fields`.
    ///
    /// To override the contents of this collection use [`set_annotation_fields`](Self::set_annotation_fields).
    ///
    /// <p> The annotation schema generated by the parsed annotation data. </p>
    pub fn annotation_fields(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.annotation_fields.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.annotation_fields = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> The annotation schema generated by the parsed annotation data. </p>
    pub fn set_annotation_fields(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.annotation_fields = input;
        self
    }
    /// <p> The annotation schema generated by the parsed annotation data. </p>
    pub fn get_annotation_fields(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.annotation_fields
    }
    /// Consumes the builder and constructs a [`VariantImportJobItem`](crate::types::VariantImportJobItem).
    pub fn build(self) -> crate::types::VariantImportJobItem {
        crate::types::VariantImportJobItem {
            id: self.id,
            destination_name: self.destination_name,
            role_arn: self.role_arn,
            status: self.status,
            creation_time: self.creation_time,
            update_time: self.update_time,
            completion_time: self.completion_time,
            run_left_normalization: self.run_left_normalization.unwrap_or_default(),
            annotation_fields: self.annotation_fields,
        }
    }
}
