// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Use these settings to insert a DVB Time and Date Table (TDT) in the transport stream of this output.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DvbTdtSettings {
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub tdt_interval: ::std::option::Option<i32>,
}
impl DvbTdtSettings {
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn tdt_interval(&self) -> ::std::option::Option<i32> {
        self.tdt_interval
    }
}
impl DvbTdtSettings {
    /// Creates a new builder-style object to manufacture [`DvbTdtSettings`](crate::types::DvbTdtSettings).
    pub fn builder() -> crate::types::builders::DvbTdtSettingsBuilder {
        crate::types::builders::DvbTdtSettingsBuilder::default()
    }
}

/// A builder for [`DvbTdtSettings`](crate::types::DvbTdtSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DvbTdtSettingsBuilder {
    pub(crate) tdt_interval: ::std::option::Option<i32>,
}
impl DvbTdtSettingsBuilder {
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn tdt_interval(mut self, input: i32) -> Self {
        self.tdt_interval = ::std::option::Option::Some(input);
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn set_tdt_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.tdt_interval = input;
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn get_tdt_interval(&self) -> &::std::option::Option<i32> {
        &self.tdt_interval
    }
    /// Consumes the builder and constructs a [`DvbTdtSettings`](crate::types::DvbTdtSettings).
    pub fn build(self) -> crate::types::DvbTdtSettings {
        crate::types::DvbTdtSettings {
            tdt_interval: self.tdt_interval,
        }
    }
}
