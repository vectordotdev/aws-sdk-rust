// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value OPUS.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpusSettings {
    /// Optional. Specify the average bitrate in bits per second. Valid values are multiples of 8000, from 32000 through 192000. The default value is 96000, which we recommend for quality and bandwidth.
    pub bitrate: ::std::option::Option<i32>,
    /// Specify the number of channels in this output audio track. Choosing Mono on gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    pub channels: ::std::option::Option<i32>,
    /// Optional. Sample rate in hz. Valid values are 16000, 24000, and 48000. The default value is 48000.
    pub sample_rate: ::std::option::Option<i32>,
}
impl OpusSettings {
    /// Optional. Specify the average bitrate in bits per second. Valid values are multiples of 8000, from 32000 through 192000. The default value is 96000, which we recommend for quality and bandwidth.
    pub fn bitrate(&self) -> ::std::option::Option<i32> {
        self.bitrate
    }
    /// Specify the number of channels in this output audio track. Choosing Mono on gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    pub fn channels(&self) -> ::std::option::Option<i32> {
        self.channels
    }
    /// Optional. Sample rate in hz. Valid values are 16000, 24000, and 48000. The default value is 48000.
    pub fn sample_rate(&self) -> ::std::option::Option<i32> {
        self.sample_rate
    }
}
impl OpusSettings {
    /// Creates a new builder-style object to manufacture [`OpusSettings`](crate::types::OpusSettings).
    pub fn builder() -> crate::types::builders::OpusSettingsBuilder {
        crate::types::builders::OpusSettingsBuilder::default()
    }
}

/// A builder for [`OpusSettings`](crate::types::OpusSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OpusSettingsBuilder {
    pub(crate) bitrate: ::std::option::Option<i32>,
    pub(crate) channels: ::std::option::Option<i32>,
    pub(crate) sample_rate: ::std::option::Option<i32>,
}
impl OpusSettingsBuilder {
    /// Optional. Specify the average bitrate in bits per second. Valid values are multiples of 8000, from 32000 through 192000. The default value is 96000, which we recommend for quality and bandwidth.
    pub fn bitrate(mut self, input: i32) -> Self {
        self.bitrate = ::std::option::Option::Some(input);
        self
    }
    /// Optional. Specify the average bitrate in bits per second. Valid values are multiples of 8000, from 32000 through 192000. The default value is 96000, which we recommend for quality and bandwidth.
    pub fn set_bitrate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bitrate = input;
        self
    }
    /// Optional. Specify the average bitrate in bits per second. Valid values are multiples of 8000, from 32000 through 192000. The default value is 96000, which we recommend for quality and bandwidth.
    pub fn get_bitrate(&self) -> &::std::option::Option<i32> {
        &self.bitrate
    }
    /// Specify the number of channels in this output audio track. Choosing Mono on gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    pub fn channels(mut self, input: i32) -> Self {
        self.channels = ::std::option::Option::Some(input);
        self
    }
    /// Specify the number of channels in this output audio track. Choosing Mono on gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    pub fn set_channels(mut self, input: ::std::option::Option<i32>) -> Self {
        self.channels = input;
        self
    }
    /// Specify the number of channels in this output audio track. Choosing Mono on gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    pub fn get_channels(&self) -> &::std::option::Option<i32> {
        &self.channels
    }
    /// Optional. Sample rate in hz. Valid values are 16000, 24000, and 48000. The default value is 48000.
    pub fn sample_rate(mut self, input: i32) -> Self {
        self.sample_rate = ::std::option::Option::Some(input);
        self
    }
    /// Optional. Sample rate in hz. Valid values are 16000, 24000, and 48000. The default value is 48000.
    pub fn set_sample_rate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.sample_rate = input;
        self
    }
    /// Optional. Sample rate in hz. Valid values are 16000, 24000, and 48000. The default value is 48000.
    pub fn get_sample_rate(&self) -> &::std::option::Option<i32> {
        &self.sample_rate
    }
    /// Consumes the builder and constructs a [`OpusSettings`](crate::types::OpusSettings).
    pub fn build(self) -> crate::types::OpusSettings {
        crate::types::OpusSettings {
            bitrate: self.bitrate,
            channels: self.channels,
            sample_rate: self.sample_rate,
        }
    }
}
