// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Optional settings for Advanced input filter when you set Advanced input filter to Enabled.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdvancedInputFilterSettings {
    /// Add texture and detail to areas of your input video content that were lost after applying the Advanced input filter. To adaptively add texture and reduce softness: Choose Enabled. To not add any texture: Keep the default value, Disabled. We recommend that you choose Disabled for input video content that doesn't have texture, including screen recordings, computer graphics, or cartoons.
    pub add_texture: ::std::option::Option<crate::types::AdvancedInputFilterAddTexture>,
    /// Optionally specify the amount of sharpening to apply when you use the Advanced input filter. Sharpening adds contrast to the edges of your video content and can reduce softness. To apply no sharpening: Keep the default value, Off. To apply a minimal amount of sharpening choose Low, or for the maximum choose High.
    pub sharpening: ::std::option::Option<crate::types::AdvancedInputFilterSharpen>,
}
impl AdvancedInputFilterSettings {
    /// Add texture and detail to areas of your input video content that were lost after applying the Advanced input filter. To adaptively add texture and reduce softness: Choose Enabled. To not add any texture: Keep the default value, Disabled. We recommend that you choose Disabled for input video content that doesn't have texture, including screen recordings, computer graphics, or cartoons.
    pub fn add_texture(&self) -> ::std::option::Option<&crate::types::AdvancedInputFilterAddTexture> {
        self.add_texture.as_ref()
    }
    /// Optionally specify the amount of sharpening to apply when you use the Advanced input filter. Sharpening adds contrast to the edges of your video content and can reduce softness. To apply no sharpening: Keep the default value, Off. To apply a minimal amount of sharpening choose Low, or for the maximum choose High.
    pub fn sharpening(&self) -> ::std::option::Option<&crate::types::AdvancedInputFilterSharpen> {
        self.sharpening.as_ref()
    }
}
impl AdvancedInputFilterSettings {
    /// Creates a new builder-style object to manufacture [`AdvancedInputFilterSettings`](crate::types::AdvancedInputFilterSettings).
    pub fn builder() -> crate::types::builders::AdvancedInputFilterSettingsBuilder {
        crate::types::builders::AdvancedInputFilterSettingsBuilder::default()
    }
}

/// A builder for [`AdvancedInputFilterSettings`](crate::types::AdvancedInputFilterSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AdvancedInputFilterSettingsBuilder {
    pub(crate) add_texture: ::std::option::Option<crate::types::AdvancedInputFilterAddTexture>,
    pub(crate) sharpening: ::std::option::Option<crate::types::AdvancedInputFilterSharpen>,
}
impl AdvancedInputFilterSettingsBuilder {
    /// Add texture and detail to areas of your input video content that were lost after applying the Advanced input filter. To adaptively add texture and reduce softness: Choose Enabled. To not add any texture: Keep the default value, Disabled. We recommend that you choose Disabled for input video content that doesn't have texture, including screen recordings, computer graphics, or cartoons.
    pub fn add_texture(mut self, input: crate::types::AdvancedInputFilterAddTexture) -> Self {
        self.add_texture = ::std::option::Option::Some(input);
        self
    }
    /// Add texture and detail to areas of your input video content that were lost after applying the Advanced input filter. To adaptively add texture and reduce softness: Choose Enabled. To not add any texture: Keep the default value, Disabled. We recommend that you choose Disabled for input video content that doesn't have texture, including screen recordings, computer graphics, or cartoons.
    pub fn set_add_texture(mut self, input: ::std::option::Option<crate::types::AdvancedInputFilterAddTexture>) -> Self {
        self.add_texture = input;
        self
    }
    /// Add texture and detail to areas of your input video content that were lost after applying the Advanced input filter. To adaptively add texture and reduce softness: Choose Enabled. To not add any texture: Keep the default value, Disabled. We recommend that you choose Disabled for input video content that doesn't have texture, including screen recordings, computer graphics, or cartoons.
    pub fn get_add_texture(&self) -> &::std::option::Option<crate::types::AdvancedInputFilterAddTexture> {
        &self.add_texture
    }
    /// Optionally specify the amount of sharpening to apply when you use the Advanced input filter. Sharpening adds contrast to the edges of your video content and can reduce softness. To apply no sharpening: Keep the default value, Off. To apply a minimal amount of sharpening choose Low, or for the maximum choose High.
    pub fn sharpening(mut self, input: crate::types::AdvancedInputFilterSharpen) -> Self {
        self.sharpening = ::std::option::Option::Some(input);
        self
    }
    /// Optionally specify the amount of sharpening to apply when you use the Advanced input filter. Sharpening adds contrast to the edges of your video content and can reduce softness. To apply no sharpening: Keep the default value, Off. To apply a minimal amount of sharpening choose Low, or for the maximum choose High.
    pub fn set_sharpening(mut self, input: ::std::option::Option<crate::types::AdvancedInputFilterSharpen>) -> Self {
        self.sharpening = input;
        self
    }
    /// Optionally specify the amount of sharpening to apply when you use the Advanced input filter. Sharpening adds contrast to the edges of your video content and can reduce softness. To apply no sharpening: Keep the default value, Off. To apply a minimal amount of sharpening choose Low, or for the maximum choose High.
    pub fn get_sharpening(&self) -> &::std::option::Option<crate::types::AdvancedInputFilterSharpen> {
        &self.sharpening
    }
    /// Consumes the builder and constructs a [`AdvancedInputFilterSettings`](crate::types::AdvancedInputFilterSettings).
    pub fn build(self) -> crate::types::AdvancedInputFilterSettings {
        crate::types::AdvancedInputFilterSettings {
            add_texture: self.add_texture,
            sharpening: self.sharpening,
        }
    }
}
