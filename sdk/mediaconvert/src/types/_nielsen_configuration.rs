// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings for your Nielsen configuration. If you don't do Nielsen measurement and analytics, ignore these settings. When you enable Nielsen configuration, MediaConvert enables PCM to ID3 tagging for all outputs in the job.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NielsenConfiguration {
    /// Nielsen has discontinued the use of breakout code functionality. If you must include this property, set the value to zero.
    pub breakout_code: ::std::option::Option<i32>,
    /// Use Distributor ID to specify the distributor ID that is assigned to your organization by Nielsen.
    pub distributor_id: ::std::option::Option<::std::string::String>,
}
impl NielsenConfiguration {
    /// Nielsen has discontinued the use of breakout code functionality. If you must include this property, set the value to zero.
    pub fn breakout_code(&self) -> ::std::option::Option<i32> {
        self.breakout_code
    }
    /// Use Distributor ID to specify the distributor ID that is assigned to your organization by Nielsen.
    pub fn distributor_id(&self) -> ::std::option::Option<&str> {
        self.distributor_id.as_deref()
    }
}
impl NielsenConfiguration {
    /// Creates a new builder-style object to manufacture [`NielsenConfiguration`](crate::types::NielsenConfiguration).
    pub fn builder() -> crate::types::builders::NielsenConfigurationBuilder {
        crate::types::builders::NielsenConfigurationBuilder::default()
    }
}

/// A builder for [`NielsenConfiguration`](crate::types::NielsenConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NielsenConfigurationBuilder {
    pub(crate) breakout_code: ::std::option::Option<i32>,
    pub(crate) distributor_id: ::std::option::Option<::std::string::String>,
}
impl NielsenConfigurationBuilder {
    /// Nielsen has discontinued the use of breakout code functionality. If you must include this property, set the value to zero.
    pub fn breakout_code(mut self, input: i32) -> Self {
        self.breakout_code = ::std::option::Option::Some(input);
        self
    }
    /// Nielsen has discontinued the use of breakout code functionality. If you must include this property, set the value to zero.
    pub fn set_breakout_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.breakout_code = input;
        self
    }
    /// Nielsen has discontinued the use of breakout code functionality. If you must include this property, set the value to zero.
    pub fn get_breakout_code(&self) -> &::std::option::Option<i32> {
        &self.breakout_code
    }
    /// Use Distributor ID to specify the distributor ID that is assigned to your organization by Nielsen.
    pub fn distributor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.distributor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Use Distributor ID to specify the distributor ID that is assigned to your organization by Nielsen.
    pub fn set_distributor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.distributor_id = input;
        self
    }
    /// Use Distributor ID to specify the distributor ID that is assigned to your organization by Nielsen.
    pub fn get_distributor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.distributor_id
    }
    /// Consumes the builder and constructs a [`NielsenConfiguration`](crate::types::NielsenConfiguration).
    pub fn build(self) -> crate::types::NielsenConfiguration {
        crate::types::NielsenConfiguration {
            breakout_code: self.breakout_code,
            distributor_id: self.distributor_id,
        }
    }
}
