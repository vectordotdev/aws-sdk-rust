// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value MP3.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Mp3Settings {
    /// Specify the average bitrate in bits per second.
    pub bitrate: ::std::option::Option<i32>,
    /// Specify the number of channels in this output audio track. Choosing Mono gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    pub channels: ::std::option::Option<i32>,
    /// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
    pub rate_control_mode: ::std::option::Option<crate::types::Mp3RateControlMode>,
    /// Sample rate in hz.
    pub sample_rate: ::std::option::Option<i32>,
    /// Required when you set Bitrate control mode to VBR. Specify the audio quality of this MP3 output from 0 (highest quality) to 9 (lowest quality).
    pub vbr_quality: ::std::option::Option<i32>,
}
impl Mp3Settings {
    /// Specify the average bitrate in bits per second.
    pub fn bitrate(&self) -> ::std::option::Option<i32> {
        self.bitrate
    }
    /// Specify the number of channels in this output audio track. Choosing Mono gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    pub fn channels(&self) -> ::std::option::Option<i32> {
        self.channels
    }
    /// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
    pub fn rate_control_mode(&self) -> ::std::option::Option<&crate::types::Mp3RateControlMode> {
        self.rate_control_mode.as_ref()
    }
    /// Sample rate in hz.
    pub fn sample_rate(&self) -> ::std::option::Option<i32> {
        self.sample_rate
    }
    /// Required when you set Bitrate control mode to VBR. Specify the audio quality of this MP3 output from 0 (highest quality) to 9 (lowest quality).
    pub fn vbr_quality(&self) -> ::std::option::Option<i32> {
        self.vbr_quality
    }
}
impl Mp3Settings {
    /// Creates a new builder-style object to manufacture [`Mp3Settings`](crate::types::Mp3Settings).
    pub fn builder() -> crate::types::builders::Mp3SettingsBuilder {
        crate::types::builders::Mp3SettingsBuilder::default()
    }
}

/// A builder for [`Mp3Settings`](crate::types::Mp3Settings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct Mp3SettingsBuilder {
    pub(crate) bitrate: ::std::option::Option<i32>,
    pub(crate) channels: ::std::option::Option<i32>,
    pub(crate) rate_control_mode: ::std::option::Option<crate::types::Mp3RateControlMode>,
    pub(crate) sample_rate: ::std::option::Option<i32>,
    pub(crate) vbr_quality: ::std::option::Option<i32>,
}
impl Mp3SettingsBuilder {
    /// Specify the average bitrate in bits per second.
    pub fn bitrate(mut self, input: i32) -> Self {
        self.bitrate = ::std::option::Option::Some(input);
        self
    }
    /// Specify the average bitrate in bits per second.
    pub fn set_bitrate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bitrate = input;
        self
    }
    /// Specify the average bitrate in bits per second.
    pub fn get_bitrate(&self) -> &::std::option::Option<i32> {
        &self.bitrate
    }
    /// Specify the number of channels in this output audio track. Choosing Mono gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    pub fn channels(mut self, input: i32) -> Self {
        self.channels = ::std::option::Option::Some(input);
        self
    }
    /// Specify the number of channels in this output audio track. Choosing Mono gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    pub fn set_channels(mut self, input: ::std::option::Option<i32>) -> Self {
        self.channels = input;
        self
    }
    /// Specify the number of channels in this output audio track. Choosing Mono gives you 1 output channel; choosing Stereo gives you 2. In the API, valid values are 1 and 2.
    pub fn get_channels(&self) -> &::std::option::Option<i32> {
        &self.channels
    }
    /// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
    pub fn rate_control_mode(mut self, input: crate::types::Mp3RateControlMode) -> Self {
        self.rate_control_mode = ::std::option::Option::Some(input);
        self
    }
    /// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
    pub fn set_rate_control_mode(mut self, input: ::std::option::Option<crate::types::Mp3RateControlMode>) -> Self {
        self.rate_control_mode = input;
        self
    }
    /// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
    pub fn get_rate_control_mode(&self) -> &::std::option::Option<crate::types::Mp3RateControlMode> {
        &self.rate_control_mode
    }
    /// Sample rate in hz.
    pub fn sample_rate(mut self, input: i32) -> Self {
        self.sample_rate = ::std::option::Option::Some(input);
        self
    }
    /// Sample rate in hz.
    pub fn set_sample_rate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.sample_rate = input;
        self
    }
    /// Sample rate in hz.
    pub fn get_sample_rate(&self) -> &::std::option::Option<i32> {
        &self.sample_rate
    }
    /// Required when you set Bitrate control mode to VBR. Specify the audio quality of this MP3 output from 0 (highest quality) to 9 (lowest quality).
    pub fn vbr_quality(mut self, input: i32) -> Self {
        self.vbr_quality = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Bitrate control mode to VBR. Specify the audio quality of this MP3 output from 0 (highest quality) to 9 (lowest quality).
    pub fn set_vbr_quality(mut self, input: ::std::option::Option<i32>) -> Self {
        self.vbr_quality = input;
        self
    }
    /// Required when you set Bitrate control mode to VBR. Specify the audio quality of this MP3 output from 0 (highest quality) to 9 (lowest quality).
    pub fn get_vbr_quality(&self) -> &::std::option::Option<i32> {
        &self.vbr_quality
    }
    /// Consumes the builder and constructs a [`Mp3Settings`](crate::types::Mp3Settings).
    pub fn build(self) -> crate::types::Mp3Settings {
        crate::types::Mp3Settings {
            bitrate: self.bitrate,
            channels: self.channels,
            rate_control_mode: self.rate_control_mode,
            sample_rate: self.sample_rate,
            vbr_quality: self.vbr_quality,
        }
    }
}
