// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings for HLS output groups
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HlsSettings {
    /// Specifies the group to which the audio rendition belongs.
    pub audio_group_id: ::std::option::Option<::std::string::String>,
    /// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic to create an audio-only file in a raw container. Regardless of the value that you specify here, if this output has video, the service will place the output into an MPEG2-TS container.
    pub audio_only_container: ::std::option::Option<crate::types::HlsAudioOnlyContainer>,
    /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
    pub audio_rendition_sets: ::std::option::Option<::std::string::String>,
    /// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
    pub audio_track_type: ::std::option::Option<crate::types::HlsAudioTrackType>,
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag, MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag, MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    pub descriptive_video_service_flag: ::std::option::Option<crate::types::HlsDescriptiveVideoServiceFlag>,
    /// Choose Include to have MediaConvert generate a child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude.
    pub i_frame_only_manifest: ::std::option::Option<crate::types::HlsIFrameOnlyManifest>,
    /// Use this setting to add an identifying string to the filename of each segment. The service adds this string between the name modifier and segment index number. You can use format identifiers in the string. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/using-variables-in-your-job-settings.html
    pub segment_modifier: ::std::option::Option<::std::string::String>,
}
impl HlsSettings {
    /// Specifies the group to which the audio rendition belongs.
    pub fn audio_group_id(&self) -> ::std::option::Option<&str> {
        self.audio_group_id.as_deref()
    }
    /// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic to create an audio-only file in a raw container. Regardless of the value that you specify here, if this output has video, the service will place the output into an MPEG2-TS container.
    pub fn audio_only_container(&self) -> ::std::option::Option<&crate::types::HlsAudioOnlyContainer> {
        self.audio_only_container.as_ref()
    }
    /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
    pub fn audio_rendition_sets(&self) -> ::std::option::Option<&str> {
        self.audio_rendition_sets.as_deref()
    }
    /// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
    pub fn audio_track_type(&self) -> ::std::option::Option<&crate::types::HlsAudioTrackType> {
        self.audio_track_type.as_ref()
    }
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag, MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag, MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    pub fn descriptive_video_service_flag(&self) -> ::std::option::Option<&crate::types::HlsDescriptiveVideoServiceFlag> {
        self.descriptive_video_service_flag.as_ref()
    }
    /// Choose Include to have MediaConvert generate a child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude.
    pub fn i_frame_only_manifest(&self) -> ::std::option::Option<&crate::types::HlsIFrameOnlyManifest> {
        self.i_frame_only_manifest.as_ref()
    }
    /// Use this setting to add an identifying string to the filename of each segment. The service adds this string between the name modifier and segment index number. You can use format identifiers in the string. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/using-variables-in-your-job-settings.html
    pub fn segment_modifier(&self) -> ::std::option::Option<&str> {
        self.segment_modifier.as_deref()
    }
}
impl HlsSettings {
    /// Creates a new builder-style object to manufacture [`HlsSettings`](crate::types::HlsSettings).
    pub fn builder() -> crate::types::builders::HlsSettingsBuilder {
        crate::types::builders::HlsSettingsBuilder::default()
    }
}

/// A builder for [`HlsSettings`](crate::types::HlsSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HlsSettingsBuilder {
    pub(crate) audio_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) audio_only_container: ::std::option::Option<crate::types::HlsAudioOnlyContainer>,
    pub(crate) audio_rendition_sets: ::std::option::Option<::std::string::String>,
    pub(crate) audio_track_type: ::std::option::Option<crate::types::HlsAudioTrackType>,
    pub(crate) descriptive_video_service_flag: ::std::option::Option<crate::types::HlsDescriptiveVideoServiceFlag>,
    pub(crate) i_frame_only_manifest: ::std::option::Option<crate::types::HlsIFrameOnlyManifest>,
    pub(crate) segment_modifier: ::std::option::Option<::std::string::String>,
}
impl HlsSettingsBuilder {
    /// Specifies the group to which the audio rendition belongs.
    pub fn audio_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audio_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Specifies the group to which the audio rendition belongs.
    pub fn set_audio_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audio_group_id = input;
        self
    }
    /// Specifies the group to which the audio rendition belongs.
    pub fn get_audio_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.audio_group_id
    }
    /// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic to create an audio-only file in a raw container. Regardless of the value that you specify here, if this output has video, the service will place the output into an MPEG2-TS container.
    pub fn audio_only_container(mut self, input: crate::types::HlsAudioOnlyContainer) -> Self {
        self.audio_only_container = ::std::option::Option::Some(input);
        self
    }
    /// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic to create an audio-only file in a raw container. Regardless of the value that you specify here, if this output has video, the service will place the output into an MPEG2-TS container.
    pub fn set_audio_only_container(mut self, input: ::std::option::Option<crate::types::HlsAudioOnlyContainer>) -> Self {
        self.audio_only_container = input;
        self
    }
    /// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic to create an audio-only file in a raw container. Regardless of the value that you specify here, if this output has video, the service will place the output into an MPEG2-TS container.
    pub fn get_audio_only_container(&self) -> &::std::option::Option<crate::types::HlsAudioOnlyContainer> {
        &self.audio_only_container
    }
    /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
    pub fn audio_rendition_sets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audio_rendition_sets = ::std::option::Option::Some(input.into());
        self
    }
    /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
    pub fn set_audio_rendition_sets(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audio_rendition_sets = input;
        self
    }
    /// List all the audio groups that are used with the video output stream. Input all the audio GROUP-IDs that are associated to the video, separate by ','.
    pub fn get_audio_rendition_sets(&self) -> &::std::option::Option<::std::string::String> {
        &self.audio_rendition_sets
    }
    /// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
    pub fn audio_track_type(mut self, input: crate::types::HlsAudioTrackType) -> Self {
        self.audio_track_type = ::std::option::Option::Some(input);
        self
    }
    /// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
    pub fn set_audio_track_type(mut self, input: ::std::option::Option<crate::types::HlsAudioTrackType>) -> Self {
        self.audio_track_type = input;
        self
    }
    /// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
    pub fn get_audio_track_type(&self) -> &::std::option::Option<crate::types::HlsAudioTrackType> {
        &self.audio_track_type
    }
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag, MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag, MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    pub fn descriptive_video_service_flag(mut self, input: crate::types::HlsDescriptiveVideoServiceFlag) -> Self {
        self.descriptive_video_service_flag = ::std::option::Option::Some(input);
        self
    }
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag, MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag, MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    pub fn set_descriptive_video_service_flag(mut self, input: ::std::option::Option<crate::types::HlsDescriptiveVideoServiceFlag>) -> Self {
        self.descriptive_video_service_flag = input;
        self
    }
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag, MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag, MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    pub fn get_descriptive_video_service_flag(&self) -> &::std::option::Option<crate::types::HlsDescriptiveVideoServiceFlag> {
        &self.descriptive_video_service_flag
    }
    /// Choose Include to have MediaConvert generate a child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude.
    pub fn i_frame_only_manifest(mut self, input: crate::types::HlsIFrameOnlyManifest) -> Self {
        self.i_frame_only_manifest = ::std::option::Option::Some(input);
        self
    }
    /// Choose Include to have MediaConvert generate a child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude.
    pub fn set_i_frame_only_manifest(mut self, input: ::std::option::Option<crate::types::HlsIFrameOnlyManifest>) -> Self {
        self.i_frame_only_manifest = input;
        self
    }
    /// Choose Include to have MediaConvert generate a child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude.
    pub fn get_i_frame_only_manifest(&self) -> &::std::option::Option<crate::types::HlsIFrameOnlyManifest> {
        &self.i_frame_only_manifest
    }
    /// Use this setting to add an identifying string to the filename of each segment. The service adds this string between the name modifier and segment index number. You can use format identifiers in the string. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/using-variables-in-your-job-settings.html
    pub fn segment_modifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.segment_modifier = ::std::option::Option::Some(input.into());
        self
    }
    /// Use this setting to add an identifying string to the filename of each segment. The service adds this string between the name modifier and segment index number. You can use format identifiers in the string. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/using-variables-in-your-job-settings.html
    pub fn set_segment_modifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.segment_modifier = input;
        self
    }
    /// Use this setting to add an identifying string to the filename of each segment. The service adds this string between the name modifier and segment index number. You can use format identifiers in the string. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/using-variables-in-your-job-settings.html
    pub fn get_segment_modifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.segment_modifier
    }
    /// Consumes the builder and constructs a [`HlsSettings`](crate::types::HlsSettings).
    pub fn build(self) -> crate::types::HlsSettings {
        crate::types::HlsSettings {
            audio_group_id: self.audio_group_id,
            audio_only_container: self.audio_only_container,
            audio_rendition_sets: self.audio_rendition_sets,
            audio_track_type: self.audio_track_type,
            descriptive_video_service_flag: self.descriptive_video_service_flag,
            i_frame_only_manifest: self.i_frame_only_manifest,
            segment_modifier: self.segment_modifier,
        }
    }
}
