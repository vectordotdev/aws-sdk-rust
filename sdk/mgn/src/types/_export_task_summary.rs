// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Export task summary.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportTaskSummary {
    /// <p>Export task summary servers count.</p>
    pub servers_count: i64,
    /// <p>Export task summary applications count.</p>
    pub applications_count: i64,
    /// <p>Export task summary waves count.</p>
    pub waves_count: i64,
}
impl ExportTaskSummary {
    /// <p>Export task summary servers count.</p>
    pub fn servers_count(&self) -> i64 {
        self.servers_count
    }
    /// <p>Export task summary applications count.</p>
    pub fn applications_count(&self) -> i64 {
        self.applications_count
    }
    /// <p>Export task summary waves count.</p>
    pub fn waves_count(&self) -> i64 {
        self.waves_count
    }
}
impl ExportTaskSummary {
    /// Creates a new builder-style object to manufacture [`ExportTaskSummary`](crate::types::ExportTaskSummary).
    pub fn builder() -> crate::types::builders::ExportTaskSummaryBuilder {
        crate::types::builders::ExportTaskSummaryBuilder::default()
    }
}

/// A builder for [`ExportTaskSummary`](crate::types::ExportTaskSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportTaskSummaryBuilder {
    pub(crate) servers_count: ::std::option::Option<i64>,
    pub(crate) applications_count: ::std::option::Option<i64>,
    pub(crate) waves_count: ::std::option::Option<i64>,
}
impl ExportTaskSummaryBuilder {
    /// <p>Export task summary servers count.</p>
    pub fn servers_count(mut self, input: i64) -> Self {
        self.servers_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Export task summary servers count.</p>
    pub fn set_servers_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.servers_count = input;
        self
    }
    /// <p>Export task summary servers count.</p>
    pub fn get_servers_count(&self) -> &::std::option::Option<i64> {
        &self.servers_count
    }
    /// <p>Export task summary applications count.</p>
    pub fn applications_count(mut self, input: i64) -> Self {
        self.applications_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Export task summary applications count.</p>
    pub fn set_applications_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.applications_count = input;
        self
    }
    /// <p>Export task summary applications count.</p>
    pub fn get_applications_count(&self) -> &::std::option::Option<i64> {
        &self.applications_count
    }
    /// <p>Export task summary waves count.</p>
    pub fn waves_count(mut self, input: i64) -> Self {
        self.waves_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Export task summary waves count.</p>
    pub fn set_waves_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.waves_count = input;
        self
    }
    /// <p>Export task summary waves count.</p>
    pub fn get_waves_count(&self) -> &::std::option::Option<i64> {
        &self.waves_count
    }
    /// Consumes the builder and constructs a [`ExportTaskSummary`](crate::types::ExportTaskSummary).
    pub fn build(self) -> crate::types::ExportTaskSummary {
        crate::types::ExportTaskSummary {
            servers_count: self.servers_count.unwrap_or_default(),
            applications_count: self.applications_count.unwrap_or_default(),
            waves_count: self.waves_count.unwrap_or_default(),
        }
    }
}
