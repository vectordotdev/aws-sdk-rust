// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Import error data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportErrorData {
    /// <p>Import error data source server ID.</p>
    pub source_server_id: ::std::option::Option<::std::string::String>,
    /// <p>Import error data application ID.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>Import error data wave id.</p>
    pub wave_id: ::std::option::Option<::std::string::String>,
    /// <p>Import error data ec2 LaunchTemplate ID.</p>
    pub ec2_launch_template_id: ::std::option::Option<::std::string::String>,
    /// <p>Import error data row number.</p>
    pub row_number: i64,
    /// <p>Import error data raw error.</p>
    pub raw_error: ::std::option::Option<::std::string::String>,
    /// <p>Import error data source account ID.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
}
impl ImportErrorData {
    /// <p>Import error data source server ID.</p>
    pub fn source_server_id(&self) -> ::std::option::Option<&str> {
        self.source_server_id.as_deref()
    }
    /// <p>Import error data application ID.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>Import error data wave id.</p>
    pub fn wave_id(&self) -> ::std::option::Option<&str> {
        self.wave_id.as_deref()
    }
    /// <p>Import error data ec2 LaunchTemplate ID.</p>
    pub fn ec2_launch_template_id(&self) -> ::std::option::Option<&str> {
        self.ec2_launch_template_id.as_deref()
    }
    /// <p>Import error data row number.</p>
    pub fn row_number(&self) -> i64 {
        self.row_number
    }
    /// <p>Import error data raw error.</p>
    pub fn raw_error(&self) -> ::std::option::Option<&str> {
        self.raw_error.as_deref()
    }
    /// <p>Import error data source account ID.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
}
impl ImportErrorData {
    /// Creates a new builder-style object to manufacture [`ImportErrorData`](crate::types::ImportErrorData).
    pub fn builder() -> crate::types::builders::ImportErrorDataBuilder {
        crate::types::builders::ImportErrorDataBuilder::default()
    }
}

/// A builder for [`ImportErrorData`](crate::types::ImportErrorData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportErrorDataBuilder {
    pub(crate) source_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) wave_id: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_launch_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) row_number: ::std::option::Option<i64>,
    pub(crate) raw_error: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
}
impl ImportErrorDataBuilder {
    /// <p>Import error data source server ID.</p>
    pub fn source_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Import error data source server ID.</p>
    pub fn set_source_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_server_id = input;
        self
    }
    /// <p>Import error data source server ID.</p>
    pub fn get_source_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_server_id
    }
    /// <p>Import error data application ID.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Import error data application ID.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>Import error data application ID.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>Import error data wave id.</p>
    pub fn wave_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.wave_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Import error data wave id.</p>
    pub fn set_wave_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.wave_id = input;
        self
    }
    /// <p>Import error data wave id.</p>
    pub fn get_wave_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.wave_id
    }
    /// <p>Import error data ec2 LaunchTemplate ID.</p>
    pub fn ec2_launch_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_launch_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Import error data ec2 LaunchTemplate ID.</p>
    pub fn set_ec2_launch_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_launch_template_id = input;
        self
    }
    /// <p>Import error data ec2 LaunchTemplate ID.</p>
    pub fn get_ec2_launch_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_launch_template_id
    }
    /// <p>Import error data row number.</p>
    pub fn row_number(mut self, input: i64) -> Self {
        self.row_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>Import error data row number.</p>
    pub fn set_row_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.row_number = input;
        self
    }
    /// <p>Import error data row number.</p>
    pub fn get_row_number(&self) -> &::std::option::Option<i64> {
        &self.row_number
    }
    /// <p>Import error data raw error.</p>
    pub fn raw_error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.raw_error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Import error data raw error.</p>
    pub fn set_raw_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.raw_error = input;
        self
    }
    /// <p>Import error data raw error.</p>
    pub fn get_raw_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.raw_error
    }
    /// <p>Import error data source account ID.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Import error data source account ID.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Import error data source account ID.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Consumes the builder and constructs a [`ImportErrorData`](crate::types::ImportErrorData).
    pub fn build(self) -> crate::types::ImportErrorData {
        crate::types::ImportErrorData {
            source_server_id: self.source_server_id,
            application_id: self.application_id,
            wave_id: self.wave_id,
            ec2_launch_template_id: self.ec2_launch_template_id,
            row_number: self.row_number.unwrap_or_default(),
            raw_error: self.raw_error,
            account_id: self.account_id,
        }
    }
}
