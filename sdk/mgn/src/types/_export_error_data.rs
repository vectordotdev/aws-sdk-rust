// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Export errors data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportErrorData {
    /// <p>Export errors data raw error.</p>
    pub raw_error: ::std::option::Option<::std::string::String>,
}
impl ExportErrorData {
    /// <p>Export errors data raw error.</p>
    pub fn raw_error(&self) -> ::std::option::Option<&str> {
        self.raw_error.as_deref()
    }
}
impl ExportErrorData {
    /// Creates a new builder-style object to manufacture [`ExportErrorData`](crate::types::ExportErrorData).
    pub fn builder() -> crate::types::builders::ExportErrorDataBuilder {
        crate::types::builders::ExportErrorDataBuilder::default()
    }
}

/// A builder for [`ExportErrorData`](crate::types::ExportErrorData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportErrorDataBuilder {
    pub(crate) raw_error: ::std::option::Option<::std::string::String>,
}
impl ExportErrorDataBuilder {
    /// <p>Export errors data raw error.</p>
    pub fn raw_error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.raw_error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Export errors data raw error.</p>
    pub fn set_raw_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.raw_error = input;
        self
    }
    /// <p>Export errors data raw error.</p>
    pub fn get_raw_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.raw_error
    }
    /// Consumes the builder and constructs a [`ExportErrorData`](crate::types::ExportErrorData).
    pub fn build(self) -> crate::types::ExportErrorData {
        crate::types::ExportErrorData { raw_error: self.raw_error }
    }
}
