// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Import task summary.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportTaskSummary {
    /// <p>Import task summary waves.</p>
    pub waves: ::std::option::Option<crate::types::ImportTaskSummaryWaves>,
    /// <p>Import task summary applications.</p>
    pub applications: ::std::option::Option<crate::types::ImportTaskSummaryApplications>,
    /// <p>Import task summary servers.</p>
    pub servers: ::std::option::Option<crate::types::ImportTaskSummaryServers>,
}
impl ImportTaskSummary {
    /// <p>Import task summary waves.</p>
    pub fn waves(&self) -> ::std::option::Option<&crate::types::ImportTaskSummaryWaves> {
        self.waves.as_ref()
    }
    /// <p>Import task summary applications.</p>
    pub fn applications(&self) -> ::std::option::Option<&crate::types::ImportTaskSummaryApplications> {
        self.applications.as_ref()
    }
    /// <p>Import task summary servers.</p>
    pub fn servers(&self) -> ::std::option::Option<&crate::types::ImportTaskSummaryServers> {
        self.servers.as_ref()
    }
}
impl ImportTaskSummary {
    /// Creates a new builder-style object to manufacture [`ImportTaskSummary`](crate::types::ImportTaskSummary).
    pub fn builder() -> crate::types::builders::ImportTaskSummaryBuilder {
        crate::types::builders::ImportTaskSummaryBuilder::default()
    }
}

/// A builder for [`ImportTaskSummary`](crate::types::ImportTaskSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportTaskSummaryBuilder {
    pub(crate) waves: ::std::option::Option<crate::types::ImportTaskSummaryWaves>,
    pub(crate) applications: ::std::option::Option<crate::types::ImportTaskSummaryApplications>,
    pub(crate) servers: ::std::option::Option<crate::types::ImportTaskSummaryServers>,
}
impl ImportTaskSummaryBuilder {
    /// <p>Import task summary waves.</p>
    pub fn waves(mut self, input: crate::types::ImportTaskSummaryWaves) -> Self {
        self.waves = ::std::option::Option::Some(input);
        self
    }
    /// <p>Import task summary waves.</p>
    pub fn set_waves(mut self, input: ::std::option::Option<crate::types::ImportTaskSummaryWaves>) -> Self {
        self.waves = input;
        self
    }
    /// <p>Import task summary waves.</p>
    pub fn get_waves(&self) -> &::std::option::Option<crate::types::ImportTaskSummaryWaves> {
        &self.waves
    }
    /// <p>Import task summary applications.</p>
    pub fn applications(mut self, input: crate::types::ImportTaskSummaryApplications) -> Self {
        self.applications = ::std::option::Option::Some(input);
        self
    }
    /// <p>Import task summary applications.</p>
    pub fn set_applications(mut self, input: ::std::option::Option<crate::types::ImportTaskSummaryApplications>) -> Self {
        self.applications = input;
        self
    }
    /// <p>Import task summary applications.</p>
    pub fn get_applications(&self) -> &::std::option::Option<crate::types::ImportTaskSummaryApplications> {
        &self.applications
    }
    /// <p>Import task summary servers.</p>
    pub fn servers(mut self, input: crate::types::ImportTaskSummaryServers) -> Self {
        self.servers = ::std::option::Option::Some(input);
        self
    }
    /// <p>Import task summary servers.</p>
    pub fn set_servers(mut self, input: ::std::option::Option<crate::types::ImportTaskSummaryServers>) -> Self {
        self.servers = input;
        self
    }
    /// <p>Import task summary servers.</p>
    pub fn get_servers(&self) -> &::std::option::Option<crate::types::ImportTaskSummaryServers> {
        &self.servers
    }
    /// Consumes the builder and constructs a [`ImportTaskSummary`](crate::types::ImportTaskSummary).
    pub fn build(self) -> crate::types::ImportTaskSummary {
        crate::types::ImportTaskSummary {
            waves: self.waves,
            applications: self.applications,
            servers: self.servers,
        }
    }
}
