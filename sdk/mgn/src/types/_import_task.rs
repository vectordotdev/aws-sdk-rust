// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Import task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportTask {
    /// <p>Import task id.</p>
    pub import_id: ::std::option::Option<::std::string::String>,
    /// <p>Import task s3 bucket source.</p>
    pub s3_bucket_source: ::std::option::Option<crate::types::S3BucketSource>,
    /// <p>Import task creation datetime.</p>
    pub creation_date_time: ::std::option::Option<::std::string::String>,
    /// <p>Import task end datetime.</p>
    pub end_date_time: ::std::option::Option<::std::string::String>,
    /// <p>Import task status.</p>
    pub status: ::std::option::Option<crate::types::ImportStatus>,
    /// <p>Import task progress percentage.</p>
    pub progress_percentage: ::std::option::Option<f32>,
    /// <p>Import task summary.</p>
    pub summary: ::std::option::Option<crate::types::ImportTaskSummary>,
}
impl ImportTask {
    /// <p>Import task id.</p>
    pub fn import_id(&self) -> ::std::option::Option<&str> {
        self.import_id.as_deref()
    }
    /// <p>Import task s3 bucket source.</p>
    pub fn s3_bucket_source(&self) -> ::std::option::Option<&crate::types::S3BucketSource> {
        self.s3_bucket_source.as_ref()
    }
    /// <p>Import task creation datetime.</p>
    pub fn creation_date_time(&self) -> ::std::option::Option<&str> {
        self.creation_date_time.as_deref()
    }
    /// <p>Import task end datetime.</p>
    pub fn end_date_time(&self) -> ::std::option::Option<&str> {
        self.end_date_time.as_deref()
    }
    /// <p>Import task status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ImportStatus> {
        self.status.as_ref()
    }
    /// <p>Import task progress percentage.</p>
    pub fn progress_percentage(&self) -> ::std::option::Option<f32> {
        self.progress_percentage
    }
    /// <p>Import task summary.</p>
    pub fn summary(&self) -> ::std::option::Option<&crate::types::ImportTaskSummary> {
        self.summary.as_ref()
    }
}
impl ImportTask {
    /// Creates a new builder-style object to manufacture [`ImportTask`](crate::types::ImportTask).
    pub fn builder() -> crate::types::builders::ImportTaskBuilder {
        crate::types::builders::ImportTaskBuilder::default()
    }
}

/// A builder for [`ImportTask`](crate::types::ImportTask).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportTaskBuilder {
    pub(crate) import_id: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket_source: ::std::option::Option<crate::types::S3BucketSource>,
    pub(crate) creation_date_time: ::std::option::Option<::std::string::String>,
    pub(crate) end_date_time: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ImportStatus>,
    pub(crate) progress_percentage: ::std::option::Option<f32>,
    pub(crate) summary: ::std::option::Option<crate::types::ImportTaskSummary>,
}
impl ImportTaskBuilder {
    /// <p>Import task id.</p>
    pub fn import_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.import_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Import task id.</p>
    pub fn set_import_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.import_id = input;
        self
    }
    /// <p>Import task id.</p>
    pub fn get_import_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.import_id
    }
    /// <p>Import task s3 bucket source.</p>
    pub fn s3_bucket_source(mut self, input: crate::types::S3BucketSource) -> Self {
        self.s3_bucket_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Import task s3 bucket source.</p>
    pub fn set_s3_bucket_source(mut self, input: ::std::option::Option<crate::types::S3BucketSource>) -> Self {
        self.s3_bucket_source = input;
        self
    }
    /// <p>Import task s3 bucket source.</p>
    pub fn get_s3_bucket_source(&self) -> &::std::option::Option<crate::types::S3BucketSource> {
        &self.s3_bucket_source
    }
    /// <p>Import task creation datetime.</p>
    pub fn creation_date_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_date_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Import task creation datetime.</p>
    pub fn set_creation_date_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>Import task creation datetime.</p>
    pub fn get_creation_date_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_date_time
    }
    /// <p>Import task end datetime.</p>
    pub fn end_date_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end_date_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Import task end datetime.</p>
    pub fn set_end_date_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end_date_time = input;
        self
    }
    /// <p>Import task end datetime.</p>
    pub fn get_end_date_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.end_date_time
    }
    /// <p>Import task status.</p>
    pub fn status(mut self, input: crate::types::ImportStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Import task status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ImportStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Import task status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ImportStatus> {
        &self.status
    }
    /// <p>Import task progress percentage.</p>
    pub fn progress_percentage(mut self, input: f32) -> Self {
        self.progress_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Import task progress percentage.</p>
    pub fn set_progress_percentage(mut self, input: ::std::option::Option<f32>) -> Self {
        self.progress_percentage = input;
        self
    }
    /// <p>Import task progress percentage.</p>
    pub fn get_progress_percentage(&self) -> &::std::option::Option<f32> {
        &self.progress_percentage
    }
    /// <p>Import task summary.</p>
    pub fn summary(mut self, input: crate::types::ImportTaskSummary) -> Self {
        self.summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Import task summary.</p>
    pub fn set_summary(mut self, input: ::std::option::Option<crate::types::ImportTaskSummary>) -> Self {
        self.summary = input;
        self
    }
    /// <p>Import task summary.</p>
    pub fn get_summary(&self) -> &::std::option::Option<crate::types::ImportTaskSummary> {
        &self.summary
    }
    /// Consumes the builder and constructs a [`ImportTask`](crate::types::ImportTask).
    pub fn build(self) -> crate::types::ImportTask {
        crate::types::ImportTask {
            import_id: self.import_id,
            s3_bucket_source: self.s3_bucket_source,
            creation_date_time: self.creation_date_time,
            end_date_time: self.end_date_time,
            status: self.status,
            progress_percentage: self.progress_percentage,
            summary: self.summary,
        }
    }
}
