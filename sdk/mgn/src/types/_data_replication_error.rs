// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Error in data replication.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataReplicationError {
    /// <p>Error in data replication.</p>
    pub error: ::std::option::Option<crate::types::DataReplicationErrorString>,
    /// <p>Error in data replication.</p>
    pub raw_error: ::std::option::Option<::std::string::String>,
}
impl DataReplicationError {
    /// <p>Error in data replication.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::DataReplicationErrorString> {
        self.error.as_ref()
    }
    /// <p>Error in data replication.</p>
    pub fn raw_error(&self) -> ::std::option::Option<&str> {
        self.raw_error.as_deref()
    }
}
impl DataReplicationError {
    /// Creates a new builder-style object to manufacture [`DataReplicationError`](crate::types::DataReplicationError).
    pub fn builder() -> crate::types::builders::DataReplicationErrorBuilder {
        crate::types::builders::DataReplicationErrorBuilder::default()
    }
}

/// A builder for [`DataReplicationError`](crate::types::DataReplicationError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataReplicationErrorBuilder {
    pub(crate) error: ::std::option::Option<crate::types::DataReplicationErrorString>,
    pub(crate) raw_error: ::std::option::Option<::std::string::String>,
}
impl DataReplicationErrorBuilder {
    /// <p>Error in data replication.</p>
    pub fn error(mut self, input: crate::types::DataReplicationErrorString) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Error in data replication.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::DataReplicationErrorString>) -> Self {
        self.error = input;
        self
    }
    /// <p>Error in data replication.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::DataReplicationErrorString> {
        &self.error
    }
    /// <p>Error in data replication.</p>
    pub fn raw_error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.raw_error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error in data replication.</p>
    pub fn set_raw_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.raw_error = input;
        self
    }
    /// <p>Error in data replication.</p>
    pub fn get_raw_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.raw_error
    }
    /// Consumes the builder and constructs a [`DataReplicationError`](crate::types::DataReplicationError).
    pub fn build(self) -> crate::types::DataReplicationError {
        crate::types::DataReplicationError {
            error: self.error,
            raw_error: self.raw_error,
        }
    }
}
