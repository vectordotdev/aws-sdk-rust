// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MarkAsArchivedOutput {
    /// <p>Source server ID.</p>
    pub source_server_id: ::std::option::Option<::std::string::String>,
    /// <p>Source server ARN.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Source server archived status.</p>
    pub is_archived: ::std::option::Option<bool>,
    /// <p>Source server Tags.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Source server launched instance.</p>
    pub launched_instance: ::std::option::Option<crate::types::LaunchedInstance>,
    /// <p>Source server data replication info.</p>
    pub data_replication_info: ::std::option::Option<crate::types::DataReplicationInfo>,
    /// <p>Source server lifecycle state.</p>
    pub life_cycle: ::std::option::Option<crate::types::LifeCycle>,
    /// <p>Source server properties.</p>
    pub source_properties: ::std::option::Option<crate::types::SourceProperties>,
    /// <p>Source server replication type.</p>
    pub replication_type: ::std::option::Option<crate::types::ReplicationType>,
    /// <p>Source server vCenter client id.</p>
    pub vcenter_client_id: ::std::option::Option<::std::string::String>,
    /// <p>Source server application ID.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>Source server user provided ID.</p>
    pub user_provided_id: ::std::option::Option<::std::string::String>,
    /// <p>Source server fqdn for action framework.</p>
    pub fqdn_for_action_framework: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl MarkAsArchivedOutput {
    /// <p>Source server ID.</p>
    pub fn source_server_id(&self) -> ::std::option::Option<&str> {
        self.source_server_id.as_deref()
    }
    /// <p>Source server ARN.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Source server archived status.</p>
    pub fn is_archived(&self) -> ::std::option::Option<bool> {
        self.is_archived
    }
    /// <p>Source server Tags.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>Source server launched instance.</p>
    pub fn launched_instance(&self) -> ::std::option::Option<&crate::types::LaunchedInstance> {
        self.launched_instance.as_ref()
    }
    /// <p>Source server data replication info.</p>
    pub fn data_replication_info(&self) -> ::std::option::Option<&crate::types::DataReplicationInfo> {
        self.data_replication_info.as_ref()
    }
    /// <p>Source server lifecycle state.</p>
    pub fn life_cycle(&self) -> ::std::option::Option<&crate::types::LifeCycle> {
        self.life_cycle.as_ref()
    }
    /// <p>Source server properties.</p>
    pub fn source_properties(&self) -> ::std::option::Option<&crate::types::SourceProperties> {
        self.source_properties.as_ref()
    }
    /// <p>Source server replication type.</p>
    pub fn replication_type(&self) -> ::std::option::Option<&crate::types::ReplicationType> {
        self.replication_type.as_ref()
    }
    /// <p>Source server vCenter client id.</p>
    pub fn vcenter_client_id(&self) -> ::std::option::Option<&str> {
        self.vcenter_client_id.as_deref()
    }
    /// <p>Source server application ID.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>Source server user provided ID.</p>
    pub fn user_provided_id(&self) -> ::std::option::Option<&str> {
        self.user_provided_id.as_deref()
    }
    /// <p>Source server fqdn for action framework.</p>
    pub fn fqdn_for_action_framework(&self) -> ::std::option::Option<&str> {
        self.fqdn_for_action_framework.as_deref()
    }
}
impl ::std::fmt::Debug for MarkAsArchivedOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MarkAsArchivedOutput");
        formatter.field("source_server_id", &self.source_server_id);
        formatter.field("arn", &self.arn);
        formatter.field("is_archived", &self.is_archived);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("launched_instance", &self.launched_instance);
        formatter.field("data_replication_info", &self.data_replication_info);
        formatter.field("life_cycle", &self.life_cycle);
        formatter.field("source_properties", &self.source_properties);
        formatter.field("replication_type", &self.replication_type);
        formatter.field("vcenter_client_id", &self.vcenter_client_id);
        formatter.field("application_id", &self.application_id);
        formatter.field("user_provided_id", &self.user_provided_id);
        formatter.field("fqdn_for_action_framework", &self.fqdn_for_action_framework);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for MarkAsArchivedOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl MarkAsArchivedOutput {
    /// Creates a new builder-style object to manufacture [`MarkAsArchivedOutput`](crate::operation::mark_as_archived::MarkAsArchivedOutput).
    pub fn builder() -> crate::operation::mark_as_archived::builders::MarkAsArchivedOutputBuilder {
        crate::operation::mark_as_archived::builders::MarkAsArchivedOutputBuilder::default()
    }
}

/// A builder for [`MarkAsArchivedOutput`](crate::operation::mark_as_archived::MarkAsArchivedOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct MarkAsArchivedOutputBuilder {
    pub(crate) source_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) is_archived: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) launched_instance: ::std::option::Option<crate::types::LaunchedInstance>,
    pub(crate) data_replication_info: ::std::option::Option<crate::types::DataReplicationInfo>,
    pub(crate) life_cycle: ::std::option::Option<crate::types::LifeCycle>,
    pub(crate) source_properties: ::std::option::Option<crate::types::SourceProperties>,
    pub(crate) replication_type: ::std::option::Option<crate::types::ReplicationType>,
    pub(crate) vcenter_client_id: ::std::option::Option<::std::string::String>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_provided_id: ::std::option::Option<::std::string::String>,
    pub(crate) fqdn_for_action_framework: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl MarkAsArchivedOutputBuilder {
    /// <p>Source server ID.</p>
    pub fn source_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server ID.</p>
    pub fn set_source_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_server_id = input;
        self
    }
    /// <p>Source server ID.</p>
    pub fn get_source_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_server_id
    }
    /// <p>Source server ARN.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Source server ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Source server archived status.</p>
    pub fn is_archived(mut self, input: bool) -> Self {
        self.is_archived = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server archived status.</p>
    pub fn set_is_archived(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_archived = input;
        self
    }
    /// <p>Source server archived status.</p>
    pub fn get_is_archived(&self) -> &::std::option::Option<bool> {
        &self.is_archived
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Source server Tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Source server Tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Source server Tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>Source server launched instance.</p>
    pub fn launched_instance(mut self, input: crate::types::LaunchedInstance) -> Self {
        self.launched_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server launched instance.</p>
    pub fn set_launched_instance(mut self, input: ::std::option::Option<crate::types::LaunchedInstance>) -> Self {
        self.launched_instance = input;
        self
    }
    /// <p>Source server launched instance.</p>
    pub fn get_launched_instance(&self) -> &::std::option::Option<crate::types::LaunchedInstance> {
        &self.launched_instance
    }
    /// <p>Source server data replication info.</p>
    pub fn data_replication_info(mut self, input: crate::types::DataReplicationInfo) -> Self {
        self.data_replication_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server data replication info.</p>
    pub fn set_data_replication_info(mut self, input: ::std::option::Option<crate::types::DataReplicationInfo>) -> Self {
        self.data_replication_info = input;
        self
    }
    /// <p>Source server data replication info.</p>
    pub fn get_data_replication_info(&self) -> &::std::option::Option<crate::types::DataReplicationInfo> {
        &self.data_replication_info
    }
    /// <p>Source server lifecycle state.</p>
    pub fn life_cycle(mut self, input: crate::types::LifeCycle) -> Self {
        self.life_cycle = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server lifecycle state.</p>
    pub fn set_life_cycle(mut self, input: ::std::option::Option<crate::types::LifeCycle>) -> Self {
        self.life_cycle = input;
        self
    }
    /// <p>Source server lifecycle state.</p>
    pub fn get_life_cycle(&self) -> &::std::option::Option<crate::types::LifeCycle> {
        &self.life_cycle
    }
    /// <p>Source server properties.</p>
    pub fn source_properties(mut self, input: crate::types::SourceProperties) -> Self {
        self.source_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server properties.</p>
    pub fn set_source_properties(mut self, input: ::std::option::Option<crate::types::SourceProperties>) -> Self {
        self.source_properties = input;
        self
    }
    /// <p>Source server properties.</p>
    pub fn get_source_properties(&self) -> &::std::option::Option<crate::types::SourceProperties> {
        &self.source_properties
    }
    /// <p>Source server replication type.</p>
    pub fn replication_type(mut self, input: crate::types::ReplicationType) -> Self {
        self.replication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server replication type.</p>
    pub fn set_replication_type(mut self, input: ::std::option::Option<crate::types::ReplicationType>) -> Self {
        self.replication_type = input;
        self
    }
    /// <p>Source server replication type.</p>
    pub fn get_replication_type(&self) -> &::std::option::Option<crate::types::ReplicationType> {
        &self.replication_type
    }
    /// <p>Source server vCenter client id.</p>
    pub fn vcenter_client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vcenter_client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server vCenter client id.</p>
    pub fn set_vcenter_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vcenter_client_id = input;
        self
    }
    /// <p>Source server vCenter client id.</p>
    pub fn get_vcenter_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vcenter_client_id
    }
    /// <p>Source server application ID.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server application ID.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>Source server application ID.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>Source server user provided ID.</p>
    pub fn user_provided_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_provided_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server user provided ID.</p>
    pub fn set_user_provided_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_provided_id = input;
        self
    }
    /// <p>Source server user provided ID.</p>
    pub fn get_user_provided_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_provided_id
    }
    /// <p>Source server fqdn for action framework.</p>
    pub fn fqdn_for_action_framework(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fqdn_for_action_framework = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server fqdn for action framework.</p>
    pub fn set_fqdn_for_action_framework(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fqdn_for_action_framework = input;
        self
    }
    /// <p>Source server fqdn for action framework.</p>
    pub fn get_fqdn_for_action_framework(&self) -> &::std::option::Option<::std::string::String> {
        &self.fqdn_for_action_framework
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`MarkAsArchivedOutput`](crate::operation::mark_as_archived::MarkAsArchivedOutput).
    pub fn build(self) -> crate::operation::mark_as_archived::MarkAsArchivedOutput {
        crate::operation::mark_as_archived::MarkAsArchivedOutput {
            source_server_id: self.source_server_id,
            arn: self.arn,
            is_archived: self.is_archived,
            tags: self.tags,
            launched_instance: self.launched_instance,
            data_replication_info: self.data_replication_info,
            life_cycle: self.life_cycle,
            source_properties: self.source_properties,
            replication_type: self.replication_type,
            vcenter_client_id: self.vcenter_client_id,
            application_id: self.application_id,
            user_provided_id: self.user_provided_id,
            fqdn_for_action_framework: self.fqdn_for_action_framework,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for MarkAsArchivedOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MarkAsArchivedOutputBuilder");
        formatter.field("source_server_id", &self.source_server_id);
        formatter.field("arn", &self.arn);
        formatter.field("is_archived", &self.is_archived);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("launched_instance", &self.launched_instance);
        formatter.field("data_replication_info", &self.data_replication_info);
        formatter.field("life_cycle", &self.life_cycle);
        formatter.field("source_properties", &self.source_properties);
        formatter.field("replication_type", &self.replication_type);
        formatter.field("vcenter_client_id", &self.vcenter_client_id);
        formatter.field("application_id", &self.application_id);
        formatter.field("user_provided_id", &self.user_provided_id);
        formatter.field("fqdn_for_action_framework", &self.fqdn_for_action_framework);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
