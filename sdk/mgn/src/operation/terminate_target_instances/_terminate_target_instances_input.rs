// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TerminateTargetInstancesInput {
    /// <p>Terminate Target instance by Source Server IDs.</p>
    pub source_server_i_ds: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Terminate Target instance by Tags.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Terminate Target instance by Account ID</p>
    pub account_id: ::std::option::Option<::std::string::String>,
}
impl TerminateTargetInstancesInput {
    /// <p>Terminate Target instance by Source Server IDs.</p>
    pub fn source_server_i_ds(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.source_server_i_ds.as_deref()
    }
    /// <p>Terminate Target instance by Tags.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>Terminate Target instance by Account ID</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
}
impl ::std::fmt::Debug for TerminateTargetInstancesInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TerminateTargetInstancesInput");
        formatter.field("source_server_i_ds", &self.source_server_i_ds);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("account_id", &self.account_id);
        formatter.finish()
    }
}
impl TerminateTargetInstancesInput {
    /// Creates a new builder-style object to manufacture [`TerminateTargetInstancesInput`](crate::operation::terminate_target_instances::TerminateTargetInstancesInput).
    pub fn builder() -> crate::operation::terminate_target_instances::builders::TerminateTargetInstancesInputBuilder {
        crate::operation::terminate_target_instances::builders::TerminateTargetInstancesInputBuilder::default()
    }
}

/// A builder for [`TerminateTargetInstancesInput`](crate::operation::terminate_target_instances::TerminateTargetInstancesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TerminateTargetInstancesInputBuilder {
    pub(crate) source_server_i_ds: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
}
impl TerminateTargetInstancesInputBuilder {
    /// Appends an item to `source_server_i_ds`.
    ///
    /// To override the contents of this collection use [`set_source_server_i_ds`](Self::set_source_server_i_ds).
    ///
    /// <p>Terminate Target instance by Source Server IDs.</p>
    pub fn source_server_i_ds(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_server_i_ds.unwrap_or_default();
        v.push(input.into());
        self.source_server_i_ds = ::std::option::Option::Some(v);
        self
    }
    /// <p>Terminate Target instance by Source Server IDs.</p>
    pub fn set_source_server_i_ds(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_server_i_ds = input;
        self
    }
    /// <p>Terminate Target instance by Source Server IDs.</p>
    pub fn get_source_server_i_ds(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_server_i_ds
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Terminate Target instance by Tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Terminate Target instance by Tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Terminate Target instance by Tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>Terminate Target instance by Account ID</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Terminate Target instance by Account ID</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Terminate Target instance by Account ID</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Consumes the builder and constructs a [`TerminateTargetInstancesInput`](crate::operation::terminate_target_instances::TerminateTargetInstancesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::terminate_target_instances::TerminateTargetInstancesInput,
        ::aws_smithy_http::operation::error::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::terminate_target_instances::TerminateTargetInstancesInput {
            source_server_i_ds: self.source_server_i_ds,
            tags: self.tags,
            account_id: self.account_id,
        })
    }
}
impl ::std::fmt::Debug for TerminateTargetInstancesInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TerminateTargetInstancesInputBuilder");
        formatter.field("source_server_i_ds", &self.source_server_i_ds);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("account_id", &self.account_id);
        formatter.finish()
    }
}
