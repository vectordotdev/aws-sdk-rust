// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The combination of the existing analyzers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AnalyzerNameUnion {
    /// <p>The binary analyzer names.</p>
    BinaryAnalyzerName(crate::types::BinaryAnalyzerName),
    /// <p>The assessment analyzer names.</p>
    RunTimeAnalyzerName(crate::types::RunTimeAnalyzerName),
    /// <p>The source code analyzer names.</p>
    SourceCodeAnalyzerName(crate::types::SourceCodeAnalyzerName),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AnalyzerNameUnion {
    /// Tries to convert the enum instance into [`BinaryAnalyzerName`](crate::types::AnalyzerNameUnion::BinaryAnalyzerName), extracting the inner [`BinaryAnalyzerName`](crate::types::BinaryAnalyzerName).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_binary_analyzer_name(&self) -> ::std::result::Result<&crate::types::BinaryAnalyzerName, &Self> {
        if let AnalyzerNameUnion::BinaryAnalyzerName(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`BinaryAnalyzerName`](crate::types::AnalyzerNameUnion::BinaryAnalyzerName).
    pub fn is_binary_analyzer_name(&self) -> bool {
        self.as_binary_analyzer_name().is_ok()
    }
    /// Tries to convert the enum instance into [`RunTimeAnalyzerName`](crate::types::AnalyzerNameUnion::RunTimeAnalyzerName), extracting the inner [`RunTimeAnalyzerName`](crate::types::RunTimeAnalyzerName).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_run_time_analyzer_name(&self) -> ::std::result::Result<&crate::types::RunTimeAnalyzerName, &Self> {
        if let AnalyzerNameUnion::RunTimeAnalyzerName(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`RunTimeAnalyzerName`](crate::types::AnalyzerNameUnion::RunTimeAnalyzerName).
    pub fn is_run_time_analyzer_name(&self) -> bool {
        self.as_run_time_analyzer_name().is_ok()
    }
    /// Tries to convert the enum instance into [`SourceCodeAnalyzerName`](crate::types::AnalyzerNameUnion::SourceCodeAnalyzerName), extracting the inner [`SourceCodeAnalyzerName`](crate::types::SourceCodeAnalyzerName).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_source_code_analyzer_name(&self) -> ::std::result::Result<&crate::types::SourceCodeAnalyzerName, &Self> {
        if let AnalyzerNameUnion::SourceCodeAnalyzerName(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SourceCodeAnalyzerName`](crate::types::AnalyzerNameUnion::SourceCodeAnalyzerName).
    pub fn is_source_code_analyzer_name(&self) -> bool {
        self.as_source_code_analyzer_name().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
