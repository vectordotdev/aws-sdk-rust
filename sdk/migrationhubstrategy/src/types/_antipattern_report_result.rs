// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The anti-pattern report result.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AntipatternReportResult {
    /// <p>The analyzer name.</p>
    pub analyzer_name: ::std::option::Option<crate::types::AnalyzerNameUnion>,
    /// <p> Contains the S3 bucket name and the Amazon S3 key name. </p>
    pub anti_pattern_report_s3_object: ::std::option::Option<crate::types::S3Object>,
    /// <p>The status of the anti-pattern report generation.</p>
    pub antipattern_report_status: ::std::option::Option<crate::types::AntipatternReportStatus>,
    /// <p>The status message for the anti-pattern.</p>
    pub antipattern_report_status_message: ::std::option::Option<::std::string::String>,
}
impl AntipatternReportResult {
    /// <p>The analyzer name.</p>
    pub fn analyzer_name(&self) -> ::std::option::Option<&crate::types::AnalyzerNameUnion> {
        self.analyzer_name.as_ref()
    }
    /// <p> Contains the S3 bucket name and the Amazon S3 key name. </p>
    pub fn anti_pattern_report_s3_object(&self) -> ::std::option::Option<&crate::types::S3Object> {
        self.anti_pattern_report_s3_object.as_ref()
    }
    /// <p>The status of the anti-pattern report generation.</p>
    pub fn antipattern_report_status(&self) -> ::std::option::Option<&crate::types::AntipatternReportStatus> {
        self.antipattern_report_status.as_ref()
    }
    /// <p>The status message for the anti-pattern.</p>
    pub fn antipattern_report_status_message(&self) -> ::std::option::Option<&str> {
        self.antipattern_report_status_message.as_deref()
    }
}
impl AntipatternReportResult {
    /// Creates a new builder-style object to manufacture [`AntipatternReportResult`](crate::types::AntipatternReportResult).
    pub fn builder() -> crate::types::builders::AntipatternReportResultBuilder {
        crate::types::builders::AntipatternReportResultBuilder::default()
    }
}

/// A builder for [`AntipatternReportResult`](crate::types::AntipatternReportResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AntipatternReportResultBuilder {
    pub(crate) analyzer_name: ::std::option::Option<crate::types::AnalyzerNameUnion>,
    pub(crate) anti_pattern_report_s3_object: ::std::option::Option<crate::types::S3Object>,
    pub(crate) antipattern_report_status: ::std::option::Option<crate::types::AntipatternReportStatus>,
    pub(crate) antipattern_report_status_message: ::std::option::Option<::std::string::String>,
}
impl AntipatternReportResultBuilder {
    /// <p>The analyzer name.</p>
    pub fn analyzer_name(mut self, input: crate::types::AnalyzerNameUnion) -> Self {
        self.analyzer_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The analyzer name.</p>
    pub fn set_analyzer_name(mut self, input: ::std::option::Option<crate::types::AnalyzerNameUnion>) -> Self {
        self.analyzer_name = input;
        self
    }
    /// <p>The analyzer name.</p>
    pub fn get_analyzer_name(&self) -> &::std::option::Option<crate::types::AnalyzerNameUnion> {
        &self.analyzer_name
    }
    /// <p> Contains the S3 bucket name and the Amazon S3 key name. </p>
    pub fn anti_pattern_report_s3_object(mut self, input: crate::types::S3Object) -> Self {
        self.anti_pattern_report_s3_object = ::std::option::Option::Some(input);
        self
    }
    /// <p> Contains the S3 bucket name and the Amazon S3 key name. </p>
    pub fn set_anti_pattern_report_s3_object(mut self, input: ::std::option::Option<crate::types::S3Object>) -> Self {
        self.anti_pattern_report_s3_object = input;
        self
    }
    /// <p> Contains the S3 bucket name and the Amazon S3 key name. </p>
    pub fn get_anti_pattern_report_s3_object(&self) -> &::std::option::Option<crate::types::S3Object> {
        &self.anti_pattern_report_s3_object
    }
    /// <p>The status of the anti-pattern report generation.</p>
    pub fn antipattern_report_status(mut self, input: crate::types::AntipatternReportStatus) -> Self {
        self.antipattern_report_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the anti-pattern report generation.</p>
    pub fn set_antipattern_report_status(mut self, input: ::std::option::Option<crate::types::AntipatternReportStatus>) -> Self {
        self.antipattern_report_status = input;
        self
    }
    /// <p>The status of the anti-pattern report generation.</p>
    pub fn get_antipattern_report_status(&self) -> &::std::option::Option<crate::types::AntipatternReportStatus> {
        &self.antipattern_report_status
    }
    /// <p>The status message for the anti-pattern.</p>
    pub fn antipattern_report_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.antipattern_report_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message for the anti-pattern.</p>
    pub fn set_antipattern_report_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.antipattern_report_status_message = input;
        self
    }
    /// <p>The status message for the anti-pattern.</p>
    pub fn get_antipattern_report_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.antipattern_report_status_message
    }
    /// Consumes the builder and constructs a [`AntipatternReportResult`](crate::types::AntipatternReportResult).
    pub fn build(self) -> crate::types::AntipatternReportResult {
        crate::types::AntipatternReportResult {
            analyzer_name: self.analyzer_name,
            anti_pattern_report_s3_object: self.anti_pattern_report_s3_object,
            antipattern_report_status: self.antipattern_report_status,
            antipattern_report_status_message: self.antipattern_report_status_message,
        }
    }
}
