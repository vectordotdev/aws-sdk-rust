// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about an association between a service network and a VPC.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceNetworkVpcAssociationSummary {
    /// <p>The ID of the association.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The status.</p>
    pub status: ::std::option::Option<crate::types::ServiceNetworkVpcAssociationStatus>,
    /// <p>The account that created the association.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the association was created, specified in ISO-8601 format.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ID of the service network.</p>
    pub service_network_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service network.</p>
    pub service_network_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub service_network_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the association was last updated, specified in ISO-8601 format.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ServiceNetworkVpcAssociationSummary {
    /// <p>The ID of the association.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ServiceNetworkVpcAssociationStatus> {
        self.status.as_ref()
    }
    /// <p>The account that created the association.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The date and time that the association was created, specified in ISO-8601 format.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The ID of the service network.</p>
    pub fn service_network_id(&self) -> ::std::option::Option<&str> {
        self.service_network_id.as_deref()
    }
    /// <p>The name of the service network.</p>
    pub fn service_network_name(&self) -> ::std::option::Option<&str> {
        self.service_network_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn service_network_arn(&self) -> ::std::option::Option<&str> {
        self.service_network_arn.as_deref()
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The date and time that the association was last updated, specified in ISO-8601 format.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
}
impl ServiceNetworkVpcAssociationSummary {
    /// Creates a new builder-style object to manufacture [`ServiceNetworkVpcAssociationSummary`](crate::types::ServiceNetworkVpcAssociationSummary).
    pub fn builder() -> crate::types::builders::ServiceNetworkVpcAssociationSummaryBuilder {
        crate::types::builders::ServiceNetworkVpcAssociationSummaryBuilder::default()
    }
}

/// A builder for [`ServiceNetworkVpcAssociationSummary`](crate::types::ServiceNetworkVpcAssociationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServiceNetworkVpcAssociationSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ServiceNetworkVpcAssociationStatus>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) service_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) service_network_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ServiceNetworkVpcAssociationSummaryBuilder {
    /// <p>The ID of the association.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the association.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the association.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the association.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The status.</p>
    pub fn status(mut self, input: crate::types::ServiceNetworkVpcAssociationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ServiceNetworkVpcAssociationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ServiceNetworkVpcAssociationStatus> {
        &self.status
    }
    /// <p>The account that created the association.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account that created the association.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The account that created the association.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The date and time that the association was created, specified in ISO-8601 format.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the association was created, specified in ISO-8601 format.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the association was created, specified in ISO-8601 format.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The ID of the service network.</p>
    pub fn service_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the service network.</p>
    pub fn set_service_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_network_id = input;
        self
    }
    /// <p>The ID of the service network.</p>
    pub fn get_service_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_network_id
    }
    /// <p>The name of the service network.</p>
    pub fn service_network_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_network_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service network.</p>
    pub fn set_service_network_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_network_name = input;
        self
    }
    /// <p>The name of the service network.</p>
    pub fn get_service_network_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_network_name
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn service_network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn set_service_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_network_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service network.</p>
    pub fn get_service_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_network_arn
    }
    /// <p>The ID of the VPC.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The ID of the VPC.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The date and time that the association was last updated, specified in ISO-8601 format.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the association was last updated, specified in ISO-8601 format.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The date and time that the association was last updated, specified in ISO-8601 format.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Consumes the builder and constructs a [`ServiceNetworkVpcAssociationSummary`](crate::types::ServiceNetworkVpcAssociationSummary).
    pub fn build(self) -> crate::types::ServiceNetworkVpcAssociationSummary {
        crate::types::ServiceNetworkVpcAssociationSummary {
            id: self.id,
            arn: self.arn,
            status: self.status,
            created_by: self.created_by,
            created_at: self.created_at,
            service_network_id: self.service_network_id,
            service_network_name: self.service_network_name,
            service_network_arn: self.service_network_arn,
            vpc_id: self.vpc_id,
            last_updated_at: self.last_updated_at,
        }
    }
}
