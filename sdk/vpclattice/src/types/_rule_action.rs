// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the action for a rule. Each rule must include exactly one of the following types of actions: <code>forward </code>or <code>fixed-response</code>, and it must be the last action to be performed.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum RuleAction {
    /// <p> Describes the rule action that returns a custom HTTP response. </p>
    FixedResponse(crate::types::FixedResponseAction),
    /// <p>The forward action. Traffic that matches the rule is forwarded to the specified target groups.</p>
    Forward(crate::types::ForwardAction),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RuleAction {
    /// Tries to convert the enum instance into [`FixedResponse`](crate::types::RuleAction::FixedResponse), extracting the inner [`FixedResponseAction`](crate::types::FixedResponseAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_fixed_response(&self) -> ::std::result::Result<&crate::types::FixedResponseAction, &Self> {
        if let RuleAction::FixedResponse(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`FixedResponse`](crate::types::RuleAction::FixedResponse).
    pub fn is_fixed_response(&self) -> bool {
        self.as_fixed_response().is_ok()
    }
    /// Tries to convert the enum instance into [`Forward`](crate::types::RuleAction::Forward), extracting the inner [`ForwardAction`](crate::types::ForwardAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_forward(&self) -> ::std::result::Result<&crate::types::ForwardAction, &Self> {
        if let RuleAction::Forward(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Forward`](crate::types::RuleAction::Forward).
    pub fn is_forward(&self) -> bool {
        self.as_forward().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
