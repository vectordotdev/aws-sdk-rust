// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a rule update that failed.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleUpdateFailure {
    /// <p>The ID or Amazon Resource Name (ARN) of the rule.</p>
    pub rule_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The failure code.</p>
    pub failure_code: ::std::option::Option<::std::string::String>,
    /// <p>The failure message.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
}
impl RuleUpdateFailure {
    /// <p>The ID or Amazon Resource Name (ARN) of the rule.</p>
    pub fn rule_identifier(&self) -> ::std::option::Option<&str> {
        self.rule_identifier.as_deref()
    }
    /// <p>The failure code.</p>
    pub fn failure_code(&self) -> ::std::option::Option<&str> {
        self.failure_code.as_deref()
    }
    /// <p>The failure message.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
}
impl RuleUpdateFailure {
    /// Creates a new builder-style object to manufacture [`RuleUpdateFailure`](crate::types::RuleUpdateFailure).
    pub fn builder() -> crate::types::builders::RuleUpdateFailureBuilder {
        crate::types::builders::RuleUpdateFailureBuilder::default()
    }
}

/// A builder for [`RuleUpdateFailure`](crate::types::RuleUpdateFailure).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuleUpdateFailureBuilder {
    pub(crate) rule_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) failure_code: ::std::option::Option<::std::string::String>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
}
impl RuleUpdateFailureBuilder {
    /// <p>The ID or Amazon Resource Name (ARN) of the rule.</p>
    pub fn rule_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the rule.</p>
    pub fn set_rule_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_identifier = input;
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the rule.</p>
    pub fn get_rule_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_identifier
    }
    /// <p>The failure code.</p>
    pub fn failure_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure code.</p>
    pub fn set_failure_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The failure code.</p>
    pub fn get_failure_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_code
    }
    /// <p>The failure message.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure message.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>The failure message.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// Consumes the builder and constructs a [`RuleUpdateFailure`](crate::types::RuleUpdateFailure).
    pub fn build(self) -> crate::types::RuleUpdateFailure {
        crate::types::RuleUpdateFailure {
            rule_identifier: self.rule_identifier,
            failure_code: self.failure_code,
            failure_message: self.failure_message,
        }
    }
}
