// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_service_network_vpc_association::_update_service_network_vpc_association_output::UpdateServiceNetworkVpcAssociationOutputBuilder;

pub use crate::operation::update_service_network_vpc_association::_update_service_network_vpc_association_input::UpdateServiceNetworkVpcAssociationInputBuilder;

impl UpdateServiceNetworkVpcAssociationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_service_network_vpc_association();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateServiceNetworkVpcAssociation`.
///
/// <p>Updates the service network and VPC association. If you add a security group to the service network and VPC association, the association must continue to always have at least one security group. You can add or edit security groups at any time. However, to remove all security groups, you must first delete the association and recreate it without security groups.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateServiceNetworkVpcAssociationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_service_network_vpc_association::builders::UpdateServiceNetworkVpcAssociationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl UpdateServiceNetworkVpcAssociationFluentBuilder {
    /// Creates a new `UpdateServiceNetworkVpcAssociation`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateServiceNetworkVpcAssociation as a reference.
    pub fn as_input(&self) -> &crate::operation::update_service_network_vpc_association::builders::UpdateServiceNetworkVpcAssociationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationOutput,
            crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::update_service_network_vpc_association::UpdateServiceNetworkVpcAssociationError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the association.</p>
    pub fn service_network_vpc_association_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_network_vpc_association_identifier(input.into());
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the association.</p>
    pub fn set_service_network_vpc_association_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_network_vpc_association_identifier(input);
        self
    }
    /// <p>The ID or Amazon Resource Name (ARN) of the association.</p>
    pub fn get_service_network_vpc_association_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_network_vpc_association_identifier()
    }
    /// Appends an item to `securityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The IDs of the security groups. </p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.security_group_ids(input.into());
        self
    }
    /// <p>The IDs of the security groups. </p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_security_group_ids(input);
        self
    }
    /// <p>The IDs of the security groups. </p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_security_group_ids()
    }
}
