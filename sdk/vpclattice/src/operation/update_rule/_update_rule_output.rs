// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRuleOutput {
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the listener.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the listener.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether this is the default rule.</p>
    pub is_default: ::std::option::Option<bool>,
    /// <p>The rule match.</p>
    pub r#match: ::std::option::Option<crate::types::RuleMatch>,
    /// <p>The rule priority.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>Information about the action for the specified listener rule.</p>
    pub action: ::std::option::Option<crate::types::RuleAction>,
    _request_id: Option<String>,
}
impl UpdateRuleOutput {
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the listener.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the listener.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Indicates whether this is the default rule.</p>
    pub fn is_default(&self) -> ::std::option::Option<bool> {
        self.is_default
    }
    /// <p>The rule match.</p>
    pub fn r#match(&self) -> ::std::option::Option<&crate::types::RuleMatch> {
        self.r#match.as_ref()
    }
    /// <p>The rule priority.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>Information about the action for the specified listener rule.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::RuleAction> {
        self.action.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateRuleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateRuleOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRuleOutput`](crate::operation::update_rule::UpdateRuleOutput).
    pub fn builder() -> crate::operation::update_rule::builders::UpdateRuleOutputBuilder {
        crate::operation::update_rule::builders::UpdateRuleOutputBuilder::default()
    }
}

/// A builder for [`UpdateRuleOutput`](crate::operation::update_rule::UpdateRuleOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateRuleOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) is_default: ::std::option::Option<bool>,
    pub(crate) r#match: ::std::option::Option<crate::types::RuleMatch>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) action: ::std::option::Option<crate::types::RuleAction>,
    _request_id: Option<String>,
}
impl UpdateRuleOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the listener.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The ID of the listener.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the listener.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the listener.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the listener.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the listener.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the listener.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Indicates whether this is the default rule.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether this is the default rule.</p>
    pub fn set_is_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>Indicates whether this is the default rule.</p>
    pub fn get_is_default(&self) -> &::std::option::Option<bool> {
        &self.is_default
    }
    /// <p>The rule match.</p>
    pub fn r#match(mut self, input: crate::types::RuleMatch) -> Self {
        self.r#match = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rule match.</p>
    pub fn set_match(mut self, input: ::std::option::Option<crate::types::RuleMatch>) -> Self {
        self.r#match = input;
        self
    }
    /// <p>The rule match.</p>
    pub fn get_match(&self) -> &::std::option::Option<crate::types::RuleMatch> {
        &self.r#match
    }
    /// <p>The rule priority.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rule priority.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The rule priority.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>Information about the action for the specified listener rule.</p>
    pub fn action(mut self, input: crate::types::RuleAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the action for the specified listener rule.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::RuleAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>Information about the action for the specified listener rule.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::RuleAction> {
        &self.action
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateRuleOutput`](crate::operation::update_rule::UpdateRuleOutput).
    pub fn build(self) -> crate::operation::update_rule::UpdateRuleOutput {
        crate::operation::update_rule::UpdateRuleOutput {
            arn: self.arn,
            id: self.id,
            name: self.name,
            is_default: self.is_default,
            r#match: self.r#match,
            priority: self.priority,
            action: self.action,
            _request_id: self._request_id,
        }
    }
}
