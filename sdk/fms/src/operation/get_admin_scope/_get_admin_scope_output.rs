// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAdminScopeOutput {
    /// <p>Contains details about the administrative scope of the requested account.</p>
    pub admin_scope: ::std::option::Option<crate::types::AdminScope>,
    /// <p>The current status of the request to onboard a member account as an Firewall Manager administator.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The account is onboarding to Firewall Manager as an administrator.</p> </li>
    /// <li> <p> <code>ONBOARDING_COMPLETE</code> - Firewall Manager The account is onboarded to Firewall Manager as an administrator, and can perform actions on the resources defined in their <code>AdminScope</code>.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The account is being removed as an Firewall Manager administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING_COMPLETE</code> - The account has been removed as an Firewall Manager administrator.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::OrganizationStatus>,
    _request_id: Option<String>,
}
impl GetAdminScopeOutput {
    /// <p>Contains details about the administrative scope of the requested account.</p>
    pub fn admin_scope(&self) -> ::std::option::Option<&crate::types::AdminScope> {
        self.admin_scope.as_ref()
    }
    /// <p>The current status of the request to onboard a member account as an Firewall Manager administator.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The account is onboarding to Firewall Manager as an administrator.</p> </li>
    /// <li> <p> <code>ONBOARDING_COMPLETE</code> - Firewall Manager The account is onboarded to Firewall Manager as an administrator, and can perform actions on the resources defined in their <code>AdminScope</code>.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The account is being removed as an Firewall Manager administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING_COMPLETE</code> - The account has been removed as an Firewall Manager administrator.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::OrganizationStatus> {
        self.status.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetAdminScopeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAdminScopeOutput {
    /// Creates a new builder-style object to manufacture [`GetAdminScopeOutput`](crate::operation::get_admin_scope::GetAdminScopeOutput).
    pub fn builder() -> crate::operation::get_admin_scope::builders::GetAdminScopeOutputBuilder {
        crate::operation::get_admin_scope::builders::GetAdminScopeOutputBuilder::default()
    }
}

/// A builder for [`GetAdminScopeOutput`](crate::operation::get_admin_scope::GetAdminScopeOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetAdminScopeOutputBuilder {
    pub(crate) admin_scope: ::std::option::Option<crate::types::AdminScope>,
    pub(crate) status: ::std::option::Option<crate::types::OrganizationStatus>,
    _request_id: Option<String>,
}
impl GetAdminScopeOutputBuilder {
    /// <p>Contains details about the administrative scope of the requested account.</p>
    pub fn admin_scope(mut self, input: crate::types::AdminScope) -> Self {
        self.admin_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the administrative scope of the requested account.</p>
    pub fn set_admin_scope(mut self, input: ::std::option::Option<crate::types::AdminScope>) -> Self {
        self.admin_scope = input;
        self
    }
    /// <p>Contains details about the administrative scope of the requested account.</p>
    pub fn get_admin_scope(&self) -> &::std::option::Option<crate::types::AdminScope> {
        &self.admin_scope
    }
    /// <p>The current status of the request to onboard a member account as an Firewall Manager administator.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The account is onboarding to Firewall Manager as an administrator.</p> </li>
    /// <li> <p> <code>ONBOARDING_COMPLETE</code> - Firewall Manager The account is onboarded to Firewall Manager as an administrator, and can perform actions on the resources defined in their <code>AdminScope</code>.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The account is being removed as an Firewall Manager administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING_COMPLETE</code> - The account has been removed as an Firewall Manager administrator.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::OrganizationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the request to onboard a member account as an Firewall Manager administator.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The account is onboarding to Firewall Manager as an administrator.</p> </li>
    /// <li> <p> <code>ONBOARDING_COMPLETE</code> - Firewall Manager The account is onboarded to Firewall Manager as an administrator, and can perform actions on the resources defined in their <code>AdminScope</code>.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The account is being removed as an Firewall Manager administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING_COMPLETE</code> - The account has been removed as an Firewall Manager administrator.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OrganizationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the request to onboard a member account as an Firewall Manager administator.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The account is onboarding to Firewall Manager as an administrator.</p> </li>
    /// <li> <p> <code>ONBOARDING_COMPLETE</code> - Firewall Manager The account is onboarded to Firewall Manager as an administrator, and can perform actions on the resources defined in their <code>AdminScope</code>.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The account is being removed as an Firewall Manager administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING_COMPLETE</code> - The account has been removed as an Firewall Manager administrator.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OrganizationStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAdminScopeOutput`](crate::operation::get_admin_scope::GetAdminScopeOutput).
    pub fn build(self) -> crate::operation::get_admin_scope::GetAdminScopeOutput {
        crate::operation::get_admin_scope::GetAdminScopeOutput {
            admin_scope: self.admin_scope,
            status: self.status,
            _request_id: self._request_id,
        }
    }
}
