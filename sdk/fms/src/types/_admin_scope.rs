// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the resources that the Firewall Manager administrator can manage. For more information about administrative scope, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-administrators.html">Managing Firewall Manager administrators</a> in the <i>Firewall Manager Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdminScope {
    /// <p>Defines the accounts that the specified Firewall Manager administrator can apply policies to.</p>
    pub account_scope: ::std::option::Option<crate::types::AccountScope>,
    /// <p>Defines the Organizations organizational units that the specified Firewall Manager administrator can apply policies to. For more information about OUs in Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html">Managing organizational units (OUs) </a> in the <i>Organizations User Guide</i>.</p>
    pub organizational_unit_scope: ::std::option::Option<crate::types::OrganizationalUnitScope>,
    /// <p>Defines the Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.</p>
    pub region_scope: ::std::option::Option<crate::types::RegionScope>,
    /// <p>Defines the Firewall Manager policy types that the specified Firewall Manager administrator can create and manage.</p>
    pub policy_type_scope: ::std::option::Option<crate::types::PolicyTypeScope>,
}
impl AdminScope {
    /// <p>Defines the accounts that the specified Firewall Manager administrator can apply policies to.</p>
    pub fn account_scope(&self) -> ::std::option::Option<&crate::types::AccountScope> {
        self.account_scope.as_ref()
    }
    /// <p>Defines the Organizations organizational units that the specified Firewall Manager administrator can apply policies to. For more information about OUs in Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html">Managing organizational units (OUs) </a> in the <i>Organizations User Guide</i>.</p>
    pub fn organizational_unit_scope(&self) -> ::std::option::Option<&crate::types::OrganizationalUnitScope> {
        self.organizational_unit_scope.as_ref()
    }
    /// <p>Defines the Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.</p>
    pub fn region_scope(&self) -> ::std::option::Option<&crate::types::RegionScope> {
        self.region_scope.as_ref()
    }
    /// <p>Defines the Firewall Manager policy types that the specified Firewall Manager administrator can create and manage.</p>
    pub fn policy_type_scope(&self) -> ::std::option::Option<&crate::types::PolicyTypeScope> {
        self.policy_type_scope.as_ref()
    }
}
impl AdminScope {
    /// Creates a new builder-style object to manufacture [`AdminScope`](crate::types::AdminScope).
    pub fn builder() -> crate::types::builders::AdminScopeBuilder {
        crate::types::builders::AdminScopeBuilder::default()
    }
}

/// A builder for [`AdminScope`](crate::types::AdminScope).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AdminScopeBuilder {
    pub(crate) account_scope: ::std::option::Option<crate::types::AccountScope>,
    pub(crate) organizational_unit_scope: ::std::option::Option<crate::types::OrganizationalUnitScope>,
    pub(crate) region_scope: ::std::option::Option<crate::types::RegionScope>,
    pub(crate) policy_type_scope: ::std::option::Option<crate::types::PolicyTypeScope>,
}
impl AdminScopeBuilder {
    /// <p>Defines the accounts that the specified Firewall Manager administrator can apply policies to.</p>
    pub fn account_scope(mut self, input: crate::types::AccountScope) -> Self {
        self.account_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the accounts that the specified Firewall Manager administrator can apply policies to.</p>
    pub fn set_account_scope(mut self, input: ::std::option::Option<crate::types::AccountScope>) -> Self {
        self.account_scope = input;
        self
    }
    /// <p>Defines the accounts that the specified Firewall Manager administrator can apply policies to.</p>
    pub fn get_account_scope(&self) -> &::std::option::Option<crate::types::AccountScope> {
        &self.account_scope
    }
    /// <p>Defines the Organizations organizational units that the specified Firewall Manager administrator can apply policies to. For more information about OUs in Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html">Managing organizational units (OUs) </a> in the <i>Organizations User Guide</i>.</p>
    pub fn organizational_unit_scope(mut self, input: crate::types::OrganizationalUnitScope) -> Self {
        self.organizational_unit_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the Organizations organizational units that the specified Firewall Manager administrator can apply policies to. For more information about OUs in Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html">Managing organizational units (OUs) </a> in the <i>Organizations User Guide</i>.</p>
    pub fn set_organizational_unit_scope(mut self, input: ::std::option::Option<crate::types::OrganizationalUnitScope>) -> Self {
        self.organizational_unit_scope = input;
        self
    }
    /// <p>Defines the Organizations organizational units that the specified Firewall Manager administrator can apply policies to. For more information about OUs in Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html">Managing organizational units (OUs) </a> in the <i>Organizations User Guide</i>.</p>
    pub fn get_organizational_unit_scope(&self) -> &::std::option::Option<crate::types::OrganizationalUnitScope> {
        &self.organizational_unit_scope
    }
    /// <p>Defines the Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.</p>
    pub fn region_scope(mut self, input: crate::types::RegionScope) -> Self {
        self.region_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.</p>
    pub fn set_region_scope(mut self, input: ::std::option::Option<crate::types::RegionScope>) -> Self {
        self.region_scope = input;
        self
    }
    /// <p>Defines the Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.</p>
    pub fn get_region_scope(&self) -> &::std::option::Option<crate::types::RegionScope> {
        &self.region_scope
    }
    /// <p>Defines the Firewall Manager policy types that the specified Firewall Manager administrator can create and manage.</p>
    pub fn policy_type_scope(mut self, input: crate::types::PolicyTypeScope) -> Self {
        self.policy_type_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the Firewall Manager policy types that the specified Firewall Manager administrator can create and manage.</p>
    pub fn set_policy_type_scope(mut self, input: ::std::option::Option<crate::types::PolicyTypeScope>) -> Self {
        self.policy_type_scope = input;
        self
    }
    /// <p>Defines the Firewall Manager policy types that the specified Firewall Manager administrator can create and manage.</p>
    pub fn get_policy_type_scope(&self) -> &::std::option::Option<crate::types::PolicyTypeScope> {
        &self.policy_type_scope
    }
    /// Consumes the builder and constructs a [`AdminScope`](crate::types::AdminScope).
    pub fn build(self) -> crate::types::AdminScope {
        crate::types::AdminScope {
            account_scope: self.account_scope,
            organizational_unit_scope: self.organizational_unit_scope,
            region_scope: self.region_scope,
            policy_type_scope: self.policy_type_scope,
        }
    }
}
