// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summarizes the resource sets used in a policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceSetSummary {
    /// <p>A unique identifier for the resource set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The descriptive name of the resource set. You can't change the name of a resource set after you create it.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the resource set.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The last time that the resource set was changed.</p>
    pub last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates whether the resource set is in or out of an admin's Region scope.</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The administrator can manage and delete the resource set.</p> </li>
    /// <li> <p> <code>OUT_OF_ADMIN_SCOPE</code> - The administrator can view the resource set, but they can't edit or delete the resource set. Existing protections stay in place. Any new resource that come into scope of the resource set won't be protected.</p> </li>
    /// </ul>
    pub resource_set_status: ::std::option::Option<crate::types::ResourceSetStatus>,
}
impl ResourceSetSummary {
    /// <p>A unique identifier for the resource set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The descriptive name of the resource set. You can't change the name of a resource set after you create it.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the resource set.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The last time that the resource set was changed.</p>
    pub fn last_update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>Indicates whether the resource set is in or out of an admin's Region scope.</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The administrator can manage and delete the resource set.</p> </li>
    /// <li> <p> <code>OUT_OF_ADMIN_SCOPE</code> - The administrator can view the resource set, but they can't edit or delete the resource set. Existing protections stay in place. Any new resource that come into scope of the resource set won't be protected.</p> </li>
    /// </ul>
    pub fn resource_set_status(&self) -> ::std::option::Option<&crate::types::ResourceSetStatus> {
        self.resource_set_status.as_ref()
    }
}
impl ResourceSetSummary {
    /// Creates a new builder-style object to manufacture [`ResourceSetSummary`](crate::types::ResourceSetSummary).
    pub fn builder() -> crate::types::builders::ResourceSetSummaryBuilder {
        crate::types::builders::ResourceSetSummaryBuilder::default()
    }
}

/// A builder for [`ResourceSetSummary`](crate::types::ResourceSetSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceSetSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resource_set_status: ::std::option::Option<crate::types::ResourceSetStatus>,
}
impl ResourceSetSummaryBuilder {
    /// <p>A unique identifier for the resource set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the resource set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A unique identifier for the resource set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The descriptive name of the resource set. You can't change the name of a resource set after you create it.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The descriptive name of the resource set. You can't change the name of a resource set after you create it.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The descriptive name of the resource set. You can't change the name of a resource set after you create it.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the resource set.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the resource set.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the resource set.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The last time that the resource set was changed.</p>
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the resource set was changed.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The last time that the resource set was changed.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// <p>Indicates whether the resource set is in or out of an admin's Region scope.</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The administrator can manage and delete the resource set.</p> </li>
    /// <li> <p> <code>OUT_OF_ADMIN_SCOPE</code> - The administrator can view the resource set, but they can't edit or delete the resource set. Existing protections stay in place. Any new resource that come into scope of the resource set won't be protected.</p> </li>
    /// </ul>
    pub fn resource_set_status(mut self, input: crate::types::ResourceSetStatus) -> Self {
        self.resource_set_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the resource set is in or out of an admin's Region scope.</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The administrator can manage and delete the resource set.</p> </li>
    /// <li> <p> <code>OUT_OF_ADMIN_SCOPE</code> - The administrator can view the resource set, but they can't edit or delete the resource set. Existing protections stay in place. Any new resource that come into scope of the resource set won't be protected.</p> </li>
    /// </ul>
    pub fn set_resource_set_status(mut self, input: ::std::option::Option<crate::types::ResourceSetStatus>) -> Self {
        self.resource_set_status = input;
        self
    }
    /// <p>Indicates whether the resource set is in or out of an admin's Region scope.</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The administrator can manage and delete the resource set.</p> </li>
    /// <li> <p> <code>OUT_OF_ADMIN_SCOPE</code> - The administrator can view the resource set, but they can't edit or delete the resource set. Existing protections stay in place. Any new resource that come into scope of the resource set won't be protected.</p> </li>
    /// </ul>
    pub fn get_resource_set_status(&self) -> &::std::option::Option<crate::types::ResourceSetStatus> {
        &self.resource_set_status
    }
    /// Consumes the builder and constructs a [`ResourceSetSummary`](crate::types::ResourceSetSummary).
    pub fn build(self) -> crate::types::ResourceSetSummary {
        crate::types::ResourceSetSummary {
            id: self.id,
            name: self.name,
            description: self.description,
            last_update_time: self.last_update_time,
            resource_set_status: self.resource_set_status,
        }
    }
}
