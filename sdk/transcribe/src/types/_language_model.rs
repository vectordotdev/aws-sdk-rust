// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a custom language model, including:</p>
/// <ul>
/// <li> <p>The base model name</p> </li>
/// <li> <p>When the model was created</p> </li>
/// <li> <p>The location of the files used to train the model</p> </li>
/// <li> <p>When the model was last modified</p> </li>
/// <li> <p>The name you chose for the model</p> </li>
/// <li> <p>The model's language</p> </li>
/// <li> <p>The model's processing state</p> </li>
/// <li> <p>Any available upgrades for the base model</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LanguageModel {
    /// <p>A unique name, chosen by you, for your custom language model.</p>
    /// <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account.</p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the specified custom language model was created.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the specified custom language model was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The language code used to create your custom language model. Each custom language model must contain terms in only one language, and the language you select for your custom language model must match the language of your training and tuning data.</p>
    /// <p>For a list of supported languages and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table. Note that U.S. English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub language_code: ::std::option::Option<crate::types::ClmLanguageCode>,
    /// <p>The Amazon Transcribe standard language model, or base model, used to create your custom language model.</p>
    pub base_model_name: ::std::option::Option<crate::types::BaseModelName>,
    /// <p>The status of the specified custom language model. When the status displays as <code>COMPLETED</code> the model is ready for use.</p>
    pub model_status: ::std::option::Option<crate::types::ModelStatus>,
    /// <p>Shows if a more current base model is available for use with the specified custom language model.</p>
    /// <p>If <code>false</code>, your custom language model is using the most up-to-date base model.</p>
    /// <p>If <code>true</code>, there is a newer base model available than the one your language model is using.</p>
    /// <p>Note that to update a base model, you must recreate the custom language model using the new base model. Base model upgrades for existing custom language models are not supported.</p>
    pub upgrade_availability: ::std::option::Option<bool>,
    /// <p>If <code>ModelStatus</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom language model request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 location of the input files used to train and tune your custom language model, in addition to the data access role ARN (Amazon Resource Name) that has permissions to access these data.</p>
    pub input_data_config: ::std::option::Option<crate::types::InputDataConfig>,
}
impl LanguageModel {
    /// <p>A unique name, chosen by you, for your custom language model.</p>
    /// <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account.</p>
    pub fn model_name(&self) -> ::std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>The date and time the specified custom language model was created.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The date and time the specified custom language model was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>The language code used to create your custom language model. Each custom language model must contain terms in only one language, and the language you select for your custom language model must match the language of your training and tuning data.</p>
    /// <p>For a list of supported languages and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table. Note that U.S. English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub fn language_code(&self) -> ::std::option::Option<&crate::types::ClmLanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The Amazon Transcribe standard language model, or base model, used to create your custom language model.</p>
    pub fn base_model_name(&self) -> ::std::option::Option<&crate::types::BaseModelName> {
        self.base_model_name.as_ref()
    }
    /// <p>The status of the specified custom language model. When the status displays as <code>COMPLETED</code> the model is ready for use.</p>
    pub fn model_status(&self) -> ::std::option::Option<&crate::types::ModelStatus> {
        self.model_status.as_ref()
    }
    /// <p>Shows if a more current base model is available for use with the specified custom language model.</p>
    /// <p>If <code>false</code>, your custom language model is using the most up-to-date base model.</p>
    /// <p>If <code>true</code>, there is a newer base model available than the one your language model is using.</p>
    /// <p>Note that to update a base model, you must recreate the custom language model using the new base model. Base model upgrades for existing custom language models are not supported.</p>
    pub fn upgrade_availability(&self) -> ::std::option::Option<bool> {
        self.upgrade_availability
    }
    /// <p>If <code>ModelStatus</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom language model request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The Amazon S3 location of the input files used to train and tune your custom language model, in addition to the data access role ARN (Amazon Resource Name) that has permissions to access these data.</p>
    pub fn input_data_config(&self) -> ::std::option::Option<&crate::types::InputDataConfig> {
        self.input_data_config.as_ref()
    }
}
impl LanguageModel {
    /// Creates a new builder-style object to manufacture [`LanguageModel`](crate::types::LanguageModel).
    pub fn builder() -> crate::types::builders::LanguageModelBuilder {
        crate::types::builders::LanguageModelBuilder::default()
    }
}

/// A builder for [`LanguageModel`](crate::types::LanguageModel).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LanguageModelBuilder {
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) language_code: ::std::option::Option<crate::types::ClmLanguageCode>,
    pub(crate) base_model_name: ::std::option::Option<crate::types::BaseModelName>,
    pub(crate) model_status: ::std::option::Option<crate::types::ModelStatus>,
    pub(crate) upgrade_availability: ::std::option::Option<bool>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) input_data_config: ::std::option::Option<crate::types::InputDataConfig>,
}
impl LanguageModelBuilder {
    /// <p>A unique name, chosen by you, for your custom language model.</p>
    /// <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account.</p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique name, chosen by you, for your custom language model.</p>
    /// <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account.</p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>A unique name, chosen by you, for your custom language model.</p>
    /// <p>This name is case sensitive, cannot contain spaces, and must be unique within an Amazon Web Services account.</p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>The date and time the specified custom language model was created.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the specified custom language model was created.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The date and time the specified custom language model was created.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The date and time the specified custom language model was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the specified custom language model was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The date and time the specified custom language model was last modified.</p>
    /// <p>Timestamps are in the format <code>YYYY-MM-DD'T'HH:MM:SS.SSSSSS-UTC</code>. For example, <code>2022-05-04T12:32:58.761000-07:00</code> represents 12:32 PM UTC-7 on May 4, 2022.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>The language code used to create your custom language model. Each custom language model must contain terms in only one language, and the language you select for your custom language model must match the language of your training and tuning data.</p>
    /// <p>For a list of supported languages and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table. Note that U.S. English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub fn language_code(mut self, input: crate::types::ClmLanguageCode) -> Self {
        self.language_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The language code used to create your custom language model. Each custom language model must contain terms in only one language, and the language you select for your custom language model must match the language of your training and tuning data.</p>
    /// <p>For a list of supported languages and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table. Note that U.S. English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub fn set_language_code(mut self, input: ::std::option::Option<crate::types::ClmLanguageCode>) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The language code used to create your custom language model. Each custom language model must contain terms in only one language, and the language you select for your custom language model must match the language of your training and tuning data.</p>
    /// <p>For a list of supported languages and their associated language codes, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table. Note that U.S. English (<code>en-US</code>) is the only language supported with Amazon Transcribe Medical.</p>
    pub fn get_language_code(&self) -> &::std::option::Option<crate::types::ClmLanguageCode> {
        &self.language_code
    }
    /// <p>The Amazon Transcribe standard language model, or base model, used to create your custom language model.</p>
    pub fn base_model_name(mut self, input: crate::types::BaseModelName) -> Self {
        self.base_model_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Transcribe standard language model, or base model, used to create your custom language model.</p>
    pub fn set_base_model_name(mut self, input: ::std::option::Option<crate::types::BaseModelName>) -> Self {
        self.base_model_name = input;
        self
    }
    /// <p>The Amazon Transcribe standard language model, or base model, used to create your custom language model.</p>
    pub fn get_base_model_name(&self) -> &::std::option::Option<crate::types::BaseModelName> {
        &self.base_model_name
    }
    /// <p>The status of the specified custom language model. When the status displays as <code>COMPLETED</code> the model is ready for use.</p>
    pub fn model_status(mut self, input: crate::types::ModelStatus) -> Self {
        self.model_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the specified custom language model. When the status displays as <code>COMPLETED</code> the model is ready for use.</p>
    pub fn set_model_status(mut self, input: ::std::option::Option<crate::types::ModelStatus>) -> Self {
        self.model_status = input;
        self
    }
    /// <p>The status of the specified custom language model. When the status displays as <code>COMPLETED</code> the model is ready for use.</p>
    pub fn get_model_status(&self) -> &::std::option::Option<crate::types::ModelStatus> {
        &self.model_status
    }
    /// <p>Shows if a more current base model is available for use with the specified custom language model.</p>
    /// <p>If <code>false</code>, your custom language model is using the most up-to-date base model.</p>
    /// <p>If <code>true</code>, there is a newer base model available than the one your language model is using.</p>
    /// <p>Note that to update a base model, you must recreate the custom language model using the new base model. Base model upgrades for existing custom language models are not supported.</p>
    pub fn upgrade_availability(mut self, input: bool) -> Self {
        self.upgrade_availability = ::std::option::Option::Some(input);
        self
    }
    /// <p>Shows if a more current base model is available for use with the specified custom language model.</p>
    /// <p>If <code>false</code>, your custom language model is using the most up-to-date base model.</p>
    /// <p>If <code>true</code>, there is a newer base model available than the one your language model is using.</p>
    /// <p>Note that to update a base model, you must recreate the custom language model using the new base model. Base model upgrades for existing custom language models are not supported.</p>
    pub fn set_upgrade_availability(mut self, input: ::std::option::Option<bool>) -> Self {
        self.upgrade_availability = input;
        self
    }
    /// <p>Shows if a more current base model is available for use with the specified custom language model.</p>
    /// <p>If <code>false</code>, your custom language model is using the most up-to-date base model.</p>
    /// <p>If <code>true</code>, there is a newer base model available than the one your language model is using.</p>
    /// <p>Note that to update a base model, you must recreate the custom language model using the new base model. Base model upgrades for existing custom language models are not supported.</p>
    pub fn get_upgrade_availability(&self) -> &::std::option::Option<bool> {
        &self.upgrade_availability
    }
    /// <p>If <code>ModelStatus</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom language model request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>ModelStatus</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom language model request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>If <code>ModelStatus</code> is <code>FAILED</code>, <code>FailureReason</code> contains information about why the custom language model request failed. See also: <a href="https://docs.aws.amazon.com/transcribe/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The Amazon S3 location of the input files used to train and tune your custom language model, in addition to the data access role ARN (Amazon Resource Name) that has permissions to access these data.</p>
    pub fn input_data_config(mut self, input: crate::types::InputDataConfig) -> Self {
        self.input_data_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 location of the input files used to train and tune your custom language model, in addition to the data access role ARN (Amazon Resource Name) that has permissions to access these data.</p>
    pub fn set_input_data_config(mut self, input: ::std::option::Option<crate::types::InputDataConfig>) -> Self {
        self.input_data_config = input;
        self
    }
    /// <p>The Amazon S3 location of the input files used to train and tune your custom language model, in addition to the data access role ARN (Amazon Resource Name) that has permissions to access these data.</p>
    pub fn get_input_data_config(&self) -> &::std::option::Option<crate::types::InputDataConfig> {
        &self.input_data_config
    }
    /// Consumes the builder and constructs a [`LanguageModel`](crate::types::LanguageModel).
    pub fn build(self) -> crate::types::LanguageModel {
        crate::types::LanguageModel {
            model_name: self.model_name,
            create_time: self.create_time,
            last_modified_time: self.last_modified_time,
            language_code: self.language_code,
            base_model_name: self.base_model_name,
            model_status: self.model_status,
            upgrade_availability: self.upgrade_availability,
            failure_reason: self.failure_reason,
            input_data_config: self.input_data_config,
        }
    }
}
