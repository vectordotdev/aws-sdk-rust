// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The release label filters by application or version prefix.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReleaseLabelFilter {
    /// <p>Optional release label version prefix filter. For example, <code>emr-5</code>.</p>
    pub prefix: ::std::option::Option<::std::string::String>,
    /// <p>Optional release label application filter. For example, <code>spark@2.1.0</code>.</p>
    pub application: ::std::option::Option<::std::string::String>,
}
impl ReleaseLabelFilter {
    /// <p>Optional release label version prefix filter. For example, <code>emr-5</code>.</p>
    pub fn prefix(&self) -> ::std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p>Optional release label application filter. For example, <code>spark@2.1.0</code>.</p>
    pub fn application(&self) -> ::std::option::Option<&str> {
        self.application.as_deref()
    }
}
impl ReleaseLabelFilter {
    /// Creates a new builder-style object to manufacture [`ReleaseLabelFilter`](crate::types::ReleaseLabelFilter).
    pub fn builder() -> crate::types::builders::ReleaseLabelFilterBuilder {
        crate::types::builders::ReleaseLabelFilterBuilder::default()
    }
}

/// A builder for [`ReleaseLabelFilter`](crate::types::ReleaseLabelFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReleaseLabelFilterBuilder {
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) application: ::std::option::Option<::std::string::String>,
}
impl ReleaseLabelFilterBuilder {
    /// <p>Optional release label version prefix filter. For example, <code>emr-5</code>.</p>
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional release label version prefix filter. For example, <code>emr-5</code>.</p>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>Optional release label version prefix filter. For example, <code>emr-5</code>.</p>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    /// <p>Optional release label application filter. For example, <code>spark@2.1.0</code>.</p>
    pub fn application(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional release label application filter. For example, <code>spark@2.1.0</code>.</p>
    pub fn set_application(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application = input;
        self
    }
    /// <p>Optional release label application filter. For example, <code>spark@2.1.0</code>.</p>
    pub fn get_application(&self) -> &::std::option::Option<::std::string::String> {
        &self.application
    }
    /// Consumes the builder and constructs a [`ReleaseLabelFilter`](crate::types::ReleaseLabelFilter).
    pub fn build(self) -> crate::types::ReleaseLabelFilter {
        crate::types::ReleaseLabelFilter {
            prefix: self.prefix,
            application: self.application,
        }
    }
}
