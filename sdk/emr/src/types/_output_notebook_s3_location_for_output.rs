// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 location that stores the notebook execution output.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutputNotebookS3LocationForOutput {
    /// <p>The Amazon S3 bucket that stores the notebook execution output.</p>
    pub bucket: ::std::option::Option<::std::string::String>,
    /// <p>The key to the Amazon S3 location that stores the notebook execution output.</p>
    pub key: ::std::option::Option<::std::string::String>,
}
impl OutputNotebookS3LocationForOutput {
    /// <p>The Amazon S3 bucket that stores the notebook execution output.</p>
    pub fn bucket(&self) -> ::std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The key to the Amazon S3 location that stores the notebook execution output.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
}
impl OutputNotebookS3LocationForOutput {
    /// Creates a new builder-style object to manufacture [`OutputNotebookS3LocationForOutput`](crate::types::OutputNotebookS3LocationForOutput).
    pub fn builder() -> crate::types::builders::OutputNotebookS3LocationForOutputBuilder {
        crate::types::builders::OutputNotebookS3LocationForOutputBuilder::default()
    }
}

/// A builder for [`OutputNotebookS3LocationForOutput`](crate::types::OutputNotebookS3LocationForOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OutputNotebookS3LocationForOutputBuilder {
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
}
impl OutputNotebookS3LocationForOutputBuilder {
    /// <p>The Amazon S3 bucket that stores the notebook execution output.</p>
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket that stores the notebook execution output.</p>
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The Amazon S3 bucket that stores the notebook execution output.</p>
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    /// <p>The key to the Amazon S3 location that stores the notebook execution output.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key to the Amazon S3 location that stores the notebook execution output.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key to the Amazon S3 location that stores the notebook execution output.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Consumes the builder and constructs a [`OutputNotebookS3LocationForOutput`](crate::types::OutputNotebookS3LocationForOutput).
    pub fn build(self) -> crate::types::OutputNotebookS3LocationForOutput {
        crate::types::OutputNotebookS3LocationForOutput {
            bucket: self.bucket,
            key: self.key,
        }
    }
}
