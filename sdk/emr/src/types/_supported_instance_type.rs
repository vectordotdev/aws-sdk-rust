// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An instance type that the specified Amazon EMR release supports.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SupportedInstanceType {
    /// <p>The <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 instance type</a>, for example <code>m5.xlarge</code>, of the <code>SupportedInstanceType</code>.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The amount of memory that is available to Amazon EMR from the <code>SupportedInstanceType</code>. The kernel and hypervisor software consume some memory, so this value might be lower than the overall memory for the instance type.</p>
    pub memory_gb: f32,
    /// <p> <code>StorageGB</code> represents the storage capacity of the <code>SupportedInstanceType</code>. This value is <code>0</code> for Amazon EBS-only instance types.</p>
    pub storage_gb: ::std::option::Option<i32>,
    /// <p>The number of vCPUs available for the <code>SupportedInstanceType</code>.</p>
    pub vcpu: ::std::option::Option<i32>,
    /// <p>Indicates whether the <code>SupportedInstanceType</code> only supports 64-bit architecture.</p>
    pub is64_bits_only: bool,
    /// <p>The Amazon EC2 family and generation for the <code>SupportedInstanceType</code>.</p>
    pub instance_family_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the <code>SupportedInstanceType</code> supports Amazon EBS optimization.</p>
    pub ebs_optimized_available: bool,
    /// <p>Indicates whether the <code>SupportedInstanceType</code> uses Amazon EBS optimization by default.</p>
    pub ebs_optimized_by_default: bool,
    /// <p>Number of disks for the <code>SupportedInstanceType</code>. This value is <code>0</code> for Amazon EBS-only instance types.</p>
    pub number_of_disks: ::std::option::Option<i32>,
    /// <p>Indicates whether the <code>SupportedInstanceType</code> only supports Amazon EBS.</p>
    pub ebs_storage_only: bool,
    /// <p>The CPU architecture, for example <code>X86_64</code> or <code>AARCH64</code>.</p>
    pub architecture: ::std::option::Option<::std::string::String>,
}
impl SupportedInstanceType {
    /// <p>The <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 instance type</a>, for example <code>m5.xlarge</code>, of the <code>SupportedInstanceType</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The amount of memory that is available to Amazon EMR from the <code>SupportedInstanceType</code>. The kernel and hypervisor software consume some memory, so this value might be lower than the overall memory for the instance type.</p>
    pub fn memory_gb(&self) -> f32 {
        self.memory_gb
    }
    /// <p> <code>StorageGB</code> represents the storage capacity of the <code>SupportedInstanceType</code>. This value is <code>0</code> for Amazon EBS-only instance types.</p>
    pub fn storage_gb(&self) -> ::std::option::Option<i32> {
        self.storage_gb
    }
    /// <p>The number of vCPUs available for the <code>SupportedInstanceType</code>.</p>
    pub fn vcpu(&self) -> ::std::option::Option<i32> {
        self.vcpu
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> only supports 64-bit architecture.</p>
    pub fn is64_bits_only(&self) -> bool {
        self.is64_bits_only
    }
    /// <p>The Amazon EC2 family and generation for the <code>SupportedInstanceType</code>.</p>
    pub fn instance_family_id(&self) -> ::std::option::Option<&str> {
        self.instance_family_id.as_deref()
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> supports Amazon EBS optimization.</p>
    pub fn ebs_optimized_available(&self) -> bool {
        self.ebs_optimized_available
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> uses Amazon EBS optimization by default.</p>
    pub fn ebs_optimized_by_default(&self) -> bool {
        self.ebs_optimized_by_default
    }
    /// <p>Number of disks for the <code>SupportedInstanceType</code>. This value is <code>0</code> for Amazon EBS-only instance types.</p>
    pub fn number_of_disks(&self) -> ::std::option::Option<i32> {
        self.number_of_disks
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> only supports Amazon EBS.</p>
    pub fn ebs_storage_only(&self) -> bool {
        self.ebs_storage_only
    }
    /// <p>The CPU architecture, for example <code>X86_64</code> or <code>AARCH64</code>.</p>
    pub fn architecture(&self) -> ::std::option::Option<&str> {
        self.architecture.as_deref()
    }
}
impl SupportedInstanceType {
    /// Creates a new builder-style object to manufacture [`SupportedInstanceType`](crate::types::SupportedInstanceType).
    pub fn builder() -> crate::types::builders::SupportedInstanceTypeBuilder {
        crate::types::builders::SupportedInstanceTypeBuilder::default()
    }
}

/// A builder for [`SupportedInstanceType`](crate::types::SupportedInstanceType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SupportedInstanceTypeBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) memory_gb: ::std::option::Option<f32>,
    pub(crate) storage_gb: ::std::option::Option<i32>,
    pub(crate) vcpu: ::std::option::Option<i32>,
    pub(crate) is64_bits_only: ::std::option::Option<bool>,
    pub(crate) instance_family_id: ::std::option::Option<::std::string::String>,
    pub(crate) ebs_optimized_available: ::std::option::Option<bool>,
    pub(crate) ebs_optimized_by_default: ::std::option::Option<bool>,
    pub(crate) number_of_disks: ::std::option::Option<i32>,
    pub(crate) ebs_storage_only: ::std::option::Option<bool>,
    pub(crate) architecture: ::std::option::Option<::std::string::String>,
}
impl SupportedInstanceTypeBuilder {
    /// <p>The <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 instance type</a>, for example <code>m5.xlarge</code>, of the <code>SupportedInstanceType</code>.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 instance type</a>, for example <code>m5.xlarge</code>, of the <code>SupportedInstanceType</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The <a href="http://aws.amazon.com/ec2/instance-types/">Amazon EC2 instance type</a>, for example <code>m5.xlarge</code>, of the <code>SupportedInstanceType</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The amount of memory that is available to Amazon EMR from the <code>SupportedInstanceType</code>. The kernel and hypervisor software consume some memory, so this value might be lower than the overall memory for the instance type.</p>
    pub fn memory_gb(mut self, input: f32) -> Self {
        self.memory_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of memory that is available to Amazon EMR from the <code>SupportedInstanceType</code>. The kernel and hypervisor software consume some memory, so this value might be lower than the overall memory for the instance type.</p>
    pub fn set_memory_gb(mut self, input: ::std::option::Option<f32>) -> Self {
        self.memory_gb = input;
        self
    }
    /// <p>The amount of memory that is available to Amazon EMR from the <code>SupportedInstanceType</code>. The kernel and hypervisor software consume some memory, so this value might be lower than the overall memory for the instance type.</p>
    pub fn get_memory_gb(&self) -> &::std::option::Option<f32> {
        &self.memory_gb
    }
    /// <p> <code>StorageGB</code> represents the storage capacity of the <code>SupportedInstanceType</code>. This value is <code>0</code> for Amazon EBS-only instance types.</p>
    pub fn storage_gb(mut self, input: i32) -> Self {
        self.storage_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p> <code>StorageGB</code> represents the storage capacity of the <code>SupportedInstanceType</code>. This value is <code>0</code> for Amazon EBS-only instance types.</p>
    pub fn set_storage_gb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.storage_gb = input;
        self
    }
    /// <p> <code>StorageGB</code> represents the storage capacity of the <code>SupportedInstanceType</code>. This value is <code>0</code> for Amazon EBS-only instance types.</p>
    pub fn get_storage_gb(&self) -> &::std::option::Option<i32> {
        &self.storage_gb
    }
    /// <p>The number of vCPUs available for the <code>SupportedInstanceType</code>.</p>
    pub fn vcpu(mut self, input: i32) -> Self {
        self.vcpu = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of vCPUs available for the <code>SupportedInstanceType</code>.</p>
    pub fn set_vcpu(mut self, input: ::std::option::Option<i32>) -> Self {
        self.vcpu = input;
        self
    }
    /// <p>The number of vCPUs available for the <code>SupportedInstanceType</code>.</p>
    pub fn get_vcpu(&self) -> &::std::option::Option<i32> {
        &self.vcpu
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> only supports 64-bit architecture.</p>
    pub fn is64_bits_only(mut self, input: bool) -> Self {
        self.is64_bits_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> only supports 64-bit architecture.</p>
    pub fn set_is64_bits_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is64_bits_only = input;
        self
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> only supports 64-bit architecture.</p>
    pub fn get_is64_bits_only(&self) -> &::std::option::Option<bool> {
        &self.is64_bits_only
    }
    /// <p>The Amazon EC2 family and generation for the <code>SupportedInstanceType</code>.</p>
    pub fn instance_family_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_family_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon EC2 family and generation for the <code>SupportedInstanceType</code>.</p>
    pub fn set_instance_family_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_family_id = input;
        self
    }
    /// <p>The Amazon EC2 family and generation for the <code>SupportedInstanceType</code>.</p>
    pub fn get_instance_family_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_family_id
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> supports Amazon EBS optimization.</p>
    pub fn ebs_optimized_available(mut self, input: bool) -> Self {
        self.ebs_optimized_available = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> supports Amazon EBS optimization.</p>
    pub fn set_ebs_optimized_available(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ebs_optimized_available = input;
        self
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> supports Amazon EBS optimization.</p>
    pub fn get_ebs_optimized_available(&self) -> &::std::option::Option<bool> {
        &self.ebs_optimized_available
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> uses Amazon EBS optimization by default.</p>
    pub fn ebs_optimized_by_default(mut self, input: bool) -> Self {
        self.ebs_optimized_by_default = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> uses Amazon EBS optimization by default.</p>
    pub fn set_ebs_optimized_by_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ebs_optimized_by_default = input;
        self
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> uses Amazon EBS optimization by default.</p>
    pub fn get_ebs_optimized_by_default(&self) -> &::std::option::Option<bool> {
        &self.ebs_optimized_by_default
    }
    /// <p>Number of disks for the <code>SupportedInstanceType</code>. This value is <code>0</code> for Amazon EBS-only instance types.</p>
    pub fn number_of_disks(mut self, input: i32) -> Self {
        self.number_of_disks = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of disks for the <code>SupportedInstanceType</code>. This value is <code>0</code> for Amazon EBS-only instance types.</p>
    pub fn set_number_of_disks(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_disks = input;
        self
    }
    /// <p>Number of disks for the <code>SupportedInstanceType</code>. This value is <code>0</code> for Amazon EBS-only instance types.</p>
    pub fn get_number_of_disks(&self) -> &::std::option::Option<i32> {
        &self.number_of_disks
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> only supports Amazon EBS.</p>
    pub fn ebs_storage_only(mut self, input: bool) -> Self {
        self.ebs_storage_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> only supports Amazon EBS.</p>
    pub fn set_ebs_storage_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ebs_storage_only = input;
        self
    }
    /// <p>Indicates whether the <code>SupportedInstanceType</code> only supports Amazon EBS.</p>
    pub fn get_ebs_storage_only(&self) -> &::std::option::Option<bool> {
        &self.ebs_storage_only
    }
    /// <p>The CPU architecture, for example <code>X86_64</code> or <code>AARCH64</code>.</p>
    pub fn architecture(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.architecture = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CPU architecture, for example <code>X86_64</code> or <code>AARCH64</code>.</p>
    pub fn set_architecture(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.architecture = input;
        self
    }
    /// <p>The CPU architecture, for example <code>X86_64</code> or <code>AARCH64</code>.</p>
    pub fn get_architecture(&self) -> &::std::option::Option<::std::string::String> {
        &self.architecture
    }
    /// Consumes the builder and constructs a [`SupportedInstanceType`](crate::types::SupportedInstanceType).
    pub fn build(self) -> crate::types::SupportedInstanceType {
        crate::types::SupportedInstanceType {
            r#type: self.r#type,
            memory_gb: self.memory_gb.unwrap_or_default(),
            storage_gb: self.storage_gb,
            vcpu: self.vcpu,
            is64_bits_only: self.is64_bits_only.unwrap_or_default(),
            instance_family_id: self.instance_family_id,
            ebs_optimized_available: self.ebs_optimized_available.unwrap_or_default(),
            ebs_optimized_by_default: self.ebs_optimized_by_default.unwrap_or_default(),
            number_of_disks: self.number_of_disks,
            ebs_storage_only: self.ebs_storage_only.unwrap_or_default(),
            architecture: self.architecture,
        }
    }
}
