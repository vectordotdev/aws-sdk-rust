// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::terminate_job_flows::_terminate_job_flows_output::TerminateJobFlowsOutputBuilder;

pub use crate::operation::terminate_job_flows::_terminate_job_flows_input::TerminateJobFlowsInputBuilder;

impl TerminateJobFlowsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::terminate_job_flows::TerminateJobFlowsOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::terminate_job_flows::TerminateJobFlowsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.terminate_job_flows();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `TerminateJobFlows`.
///
/// <p>TerminateJobFlows shuts a list of clusters (job flows) down. When a job flow is shut down, any step not yet completed is canceled and the Amazon EC2 instances on which the cluster is running are stopped. Any log files not already saved are uploaded to Amazon S3 if a LogUri was specified when the cluster was created.</p>
/// <p>The maximum number of clusters allowed is 10. The call to <code>TerminateJobFlows</code> is asynchronous. Depending on the configuration of the cluster, it may take up to 1-5 minutes for the cluster to completely terminate and release allocated resources, such as Amazon EC2 instances.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct TerminateJobFlowsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::terminate_job_flows::builders::TerminateJobFlowsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl TerminateJobFlowsFluentBuilder {
    /// Creates a new `TerminateJobFlows`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the TerminateJobFlows as a reference.
    pub fn as_input(&self) -> &crate::operation::terminate_job_flows::builders::TerminateJobFlowsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::terminate_job_flows::TerminateJobFlowsOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::terminate_job_flows::TerminateJobFlowsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::terminate_job_flows::TerminateJobFlows::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::terminate_job_flows::TerminateJobFlows::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::terminate_job_flows::TerminateJobFlowsOutput,
            crate::operation::terminate_job_flows::TerminateJobFlowsError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::terminate_job_flows::TerminateJobFlowsError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Appends an item to `JobFlowIds`.
    ///
    /// To override the contents of this collection use [`set_job_flow_ids`](Self::set_job_flow_ids).
    ///
    /// <p>A list of job flows to be shut down.</p>
    pub fn job_flow_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_flow_ids(input.into());
        self
    }
    /// <p>A list of job flows to be shut down.</p>
    pub fn set_job_flow_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_job_flow_ids(input);
        self
    }
    /// <p>A list of job flows to be shut down.</p>
    pub fn get_job_flow_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_job_flow_ids()
    }
}
