// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Option settings are the actual settings being applied or configured for that option. It is used when you modify an option group or describe option groups. For example, the NATIVE_NETWORK_ENCRYPTION option has a setting called SQLNET.ENCRYPTION_SERVER that can have several different values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OptionSetting {
    /// <p>The name of the option that has settings that you can set.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The current value of the option setting.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The default value of the option setting.</p>
    pub default_value: ::std::option::Option<::std::string::String>,
    /// <p>The description of the option setting.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The DB engine specific parameter type.</p>
    pub apply_type: ::std::option::Option<::std::string::String>,
    /// <p>The data type of the option setting.</p>
    pub data_type: ::std::option::Option<::std::string::String>,
    /// <p>The allowed values of the option setting.</p>
    pub allowed_values: ::std::option::Option<::std::string::String>,
    /// <p>A Boolean value that, when true, indicates the option setting can be modified from the default.</p>
    pub is_modifiable: bool,
    /// <p>Indicates if the option setting is part of a collection.</p>
    pub is_collection: bool,
}
impl OptionSetting {
    /// <p>The name of the option that has settings that you can set.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current value of the option setting.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The default value of the option setting.</p>
    pub fn default_value(&self) -> ::std::option::Option<&str> {
        self.default_value.as_deref()
    }
    /// <p>The description of the option setting.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The DB engine specific parameter type.</p>
    pub fn apply_type(&self) -> ::std::option::Option<&str> {
        self.apply_type.as_deref()
    }
    /// <p>The data type of the option setting.</p>
    pub fn data_type(&self) -> ::std::option::Option<&str> {
        self.data_type.as_deref()
    }
    /// <p>The allowed values of the option setting.</p>
    pub fn allowed_values(&self) -> ::std::option::Option<&str> {
        self.allowed_values.as_deref()
    }
    /// <p>A Boolean value that, when true, indicates the option setting can be modified from the default.</p>
    pub fn is_modifiable(&self) -> bool {
        self.is_modifiable
    }
    /// <p>Indicates if the option setting is part of a collection.</p>
    pub fn is_collection(&self) -> bool {
        self.is_collection
    }
}
impl OptionSetting {
    /// Creates a new builder-style object to manufacture [`OptionSetting`](crate::types::OptionSetting).
    pub fn builder() -> crate::types::builders::OptionSettingBuilder {
        crate::types::builders::OptionSettingBuilder::default()
    }
}

/// A builder for [`OptionSetting`](crate::types::OptionSetting).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OptionSettingBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) default_value: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) apply_type: ::std::option::Option<::std::string::String>,
    pub(crate) data_type: ::std::option::Option<::std::string::String>,
    pub(crate) allowed_values: ::std::option::Option<::std::string::String>,
    pub(crate) is_modifiable: ::std::option::Option<bool>,
    pub(crate) is_collection: ::std::option::Option<bool>,
}
impl OptionSettingBuilder {
    /// <p>The name of the option that has settings that you can set.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the option that has settings that you can set.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the option that has settings that you can set.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The current value of the option setting.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current value of the option setting.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The current value of the option setting.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The default value of the option setting.</p>
    pub fn default_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default value of the option setting.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value of the option setting.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_value
    }
    /// <p>The description of the option setting.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the option setting.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the option setting.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The DB engine specific parameter type.</p>
    pub fn apply_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.apply_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DB engine specific parameter type.</p>
    pub fn set_apply_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.apply_type = input;
        self
    }
    /// <p>The DB engine specific parameter type.</p>
    pub fn get_apply_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.apply_type
    }
    /// <p>The data type of the option setting.</p>
    pub fn data_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data type of the option setting.</p>
    pub fn set_data_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>The data type of the option setting.</p>
    pub fn get_data_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_type
    }
    /// <p>The allowed values of the option setting.</p>
    pub fn allowed_values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.allowed_values = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The allowed values of the option setting.</p>
    pub fn set_allowed_values(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.allowed_values = input;
        self
    }
    /// <p>The allowed values of the option setting.</p>
    pub fn get_allowed_values(&self) -> &::std::option::Option<::std::string::String> {
        &self.allowed_values
    }
    /// <p>A Boolean value that, when true, indicates the option setting can be modified from the default.</p>
    pub fn is_modifiable(mut self, input: bool) -> Self {
        self.is_modifiable = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value that, when true, indicates the option setting can be modified from the default.</p>
    pub fn set_is_modifiable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_modifiable = input;
        self
    }
    /// <p>A Boolean value that, when true, indicates the option setting can be modified from the default.</p>
    pub fn get_is_modifiable(&self) -> &::std::option::Option<bool> {
        &self.is_modifiable
    }
    /// <p>Indicates if the option setting is part of a collection.</p>
    pub fn is_collection(mut self, input: bool) -> Self {
        self.is_collection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the option setting is part of a collection.</p>
    pub fn set_is_collection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_collection = input;
        self
    }
    /// <p>Indicates if the option setting is part of a collection.</p>
    pub fn get_is_collection(&self) -> &::std::option::Option<bool> {
        &self.is_collection
    }
    /// Consumes the builder and constructs a [`OptionSetting`](crate::types::OptionSetting).
    pub fn build(self) -> crate::types::OptionSetting {
        crate::types::OptionSetting {
            name: self.name,
            value: self.value,
            default_value: self.default_value,
            description: self.description,
            apply_type: self.apply_type,
            data_type: self.data_type,
            allowed_values: self.allowed_values,
            is_modifiable: self.is_modifiable.unwrap_or_default(),
            is_collection: self.is_collection.unwrap_or_default(),
        }
    }
}
