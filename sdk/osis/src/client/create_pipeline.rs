// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePipeline`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pipeline_name(impl ::std::convert::Into<String>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::pipeline_name) / [`set_pipeline_name(Option<String>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_pipeline_name): <p>The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an Amazon Web Services Region.</p>
    ///   - [`min_units(i32)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::min_units) / [`set_min_units(Option<i32>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_min_units): <p>The minimum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    ///   - [`max_units(i32)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::max_units) / [`set_max_units(Option<i32>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_max_units): <p>The maximum pipeline capacity, in Ingestion Compute Units (ICUs).</p>
    ///   - [`pipeline_configuration_body(impl ::std::convert::Into<String>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::pipeline_configuration_body) / [`set_pipeline_configuration_body(Option<String>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_pipeline_configuration_body): <p>The pipeline configuration in YAML format. The command accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with <code>\n</code>.</p>
    ///   - [`log_publishing_options(LogPublishingOptions)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::log_publishing_options) / [`set_log_publishing_options(Option<LogPublishingOptions>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_log_publishing_options): <p>Key-value pairs to configure log publishing.</p>
    ///   - [`vpc_options(VpcOptions)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::vpc_options) / [`set_vpc_options(Option<VpcOptions>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_vpc_options): <p>Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint.</p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::set_tags): <p>List of tags to add to the pipeline upon creation.</p>
    /// - On success, responds with [`CreatePipelineOutput`](crate::operation::create_pipeline::CreatePipelineOutput) with field(s):
    ///   - [`pipeline(Option<Pipeline>)`](crate::operation::create_pipeline::CreatePipelineOutput::pipeline): <p>Container for information about the created pipeline.</p>
    /// - On failure, responds with [`SdkError<CreatePipelineError>`](crate::operation::create_pipeline::CreatePipelineError)
    pub fn create_pipeline(&self) -> crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder {
        crate::operation::create_pipeline::builders::CreatePipelineFluentBuilder::new(self.handle.clone())
    }
}
