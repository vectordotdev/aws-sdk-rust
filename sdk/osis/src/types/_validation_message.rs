// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A validation message associated with a <code>ValidatePipeline</code> request in OpenSearch Ingestion.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValidationMessage {
    /// <p>The validation message.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl ValidationMessage {
    /// <p>The validation message.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ValidationMessage {
    /// Creates a new builder-style object to manufacture [`ValidationMessage`](crate::types::ValidationMessage).
    pub fn builder() -> crate::types::builders::ValidationMessageBuilder {
        crate::types::builders::ValidationMessageBuilder::default()
    }
}

/// A builder for [`ValidationMessage`](crate::types::ValidationMessage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ValidationMessageBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl ValidationMessageBuilder {
    /// <p>The validation message.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The validation message.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The validation message.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`ValidationMessage`](crate::types::ValidationMessage).
    pub fn build(self) -> crate::types::ValidationMessage {
        crate::types::ValidationMessage { message: self.message }
    }
}
