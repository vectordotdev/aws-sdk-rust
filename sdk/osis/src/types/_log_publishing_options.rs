// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the values required to configure logging for the pipeline. If you don't specify these values, OpenSearch Ingestion will not publish logs from your application to CloudWatch Logs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogPublishingOptions {
    /// <p>Whether logs should be published.</p>
    pub is_logging_enabled: ::std::option::Option<bool>,
    /// <p>The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if <code>IsLoggingEnabled</code> is set to <code>true</code>.</p>
    pub cloud_watch_log_destination: ::std::option::Option<crate::types::CloudWatchLogDestination>,
}
impl LogPublishingOptions {
    /// <p>Whether logs should be published.</p>
    pub fn is_logging_enabled(&self) -> ::std::option::Option<bool> {
        self.is_logging_enabled
    }
    /// <p>The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if <code>IsLoggingEnabled</code> is set to <code>true</code>.</p>
    pub fn cloud_watch_log_destination(&self) -> ::std::option::Option<&crate::types::CloudWatchLogDestination> {
        self.cloud_watch_log_destination.as_ref()
    }
}
impl LogPublishingOptions {
    /// Creates a new builder-style object to manufacture [`LogPublishingOptions`](crate::types::LogPublishingOptions).
    pub fn builder() -> crate::types::builders::LogPublishingOptionsBuilder {
        crate::types::builders::LogPublishingOptionsBuilder::default()
    }
}

/// A builder for [`LogPublishingOptions`](crate::types::LogPublishingOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LogPublishingOptionsBuilder {
    pub(crate) is_logging_enabled: ::std::option::Option<bool>,
    pub(crate) cloud_watch_log_destination: ::std::option::Option<crate::types::CloudWatchLogDestination>,
}
impl LogPublishingOptionsBuilder {
    /// <p>Whether logs should be published.</p>
    pub fn is_logging_enabled(mut self, input: bool) -> Self {
        self.is_logging_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether logs should be published.</p>
    pub fn set_is_logging_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_logging_enabled = input;
        self
    }
    /// <p>Whether logs should be published.</p>
    pub fn get_is_logging_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_logging_enabled
    }
    /// <p>The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if <code>IsLoggingEnabled</code> is set to <code>true</code>.</p>
    pub fn cloud_watch_log_destination(mut self, input: crate::types::CloudWatchLogDestination) -> Self {
        self.cloud_watch_log_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if <code>IsLoggingEnabled</code> is set to <code>true</code>.</p>
    pub fn set_cloud_watch_log_destination(mut self, input: ::std::option::Option<crate::types::CloudWatchLogDestination>) -> Self {
        self.cloud_watch_log_destination = input;
        self
    }
    /// <p>The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if <code>IsLoggingEnabled</code> is set to <code>true</code>.</p>
    pub fn get_cloud_watch_log_destination(&self) -> &::std::option::Option<crate::types::CloudWatchLogDestination> {
        &self.cloud_watch_log_destination
    }
    /// Consumes the builder and constructs a [`LogPublishingOptions`](crate::types::LogPublishingOptions).
    pub fn build(self) -> crate::types::LogPublishingOptions {
        crate::types::LogPublishingOptions {
            is_logging_enabled: self.is_logging_enabled,
            cloud_watch_log_destination: self.cloud_watch_log_destination,
        }
    }
}
