// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartSuiteRunOutput {
    /// <p>Suite Run ID of the started suite run.</p>
    pub suite_run_id: ::std::option::Option<::std::string::String>,
    /// <p>Amazon Resource Name (ARN) of the started suite run.</p>
    pub suite_run_arn: ::std::option::Option<::std::string::String>,
    /// <p>Starts a Device Advisor test suite run based on suite create time.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The response of an Device Advisor test endpoint.</p>
    pub endpoint: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartSuiteRunOutput {
    /// <p>Suite Run ID of the started suite run.</p>
    pub fn suite_run_id(&self) -> ::std::option::Option<&str> {
        self.suite_run_id.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) of the started suite run.</p>
    pub fn suite_run_arn(&self) -> ::std::option::Option<&str> {
        self.suite_run_arn.as_deref()
    }
    /// <p>Starts a Device Advisor test suite run based on suite create time.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The response of an Device Advisor test endpoint.</p>
    pub fn endpoint(&self) -> ::std::option::Option<&str> {
        self.endpoint.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for StartSuiteRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartSuiteRunOutput {
    /// Creates a new builder-style object to manufacture [`StartSuiteRunOutput`](crate::operation::start_suite_run::StartSuiteRunOutput).
    pub fn builder() -> crate::operation::start_suite_run::builders::StartSuiteRunOutputBuilder {
        crate::operation::start_suite_run::builders::StartSuiteRunOutputBuilder::default()
    }
}

/// A builder for [`StartSuiteRunOutput`](crate::operation::start_suite_run::StartSuiteRunOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartSuiteRunOutputBuilder {
    pub(crate) suite_run_id: ::std::option::Option<::std::string::String>,
    pub(crate) suite_run_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartSuiteRunOutputBuilder {
    /// <p>Suite Run ID of the started suite run.</p>
    pub fn suite_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.suite_run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Suite Run ID of the started suite run.</p>
    pub fn set_suite_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.suite_run_id = input;
        self
    }
    /// <p>Suite Run ID of the started suite run.</p>
    pub fn get_suite_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.suite_run_id
    }
    /// <p>Amazon Resource Name (ARN) of the started suite run.</p>
    pub fn suite_run_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.suite_run_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the started suite run.</p>
    pub fn set_suite_run_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.suite_run_arn = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the started suite run.</p>
    pub fn get_suite_run_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.suite_run_arn
    }
    /// <p>Starts a Device Advisor test suite run based on suite create time.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>Starts a Device Advisor test suite run based on suite create time.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Starts a Device Advisor test suite run based on suite create time.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The response of an Device Advisor test endpoint.</p>
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The response of an Device Advisor test endpoint.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The response of an Device Advisor test endpoint.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartSuiteRunOutput`](crate::operation::start_suite_run::StartSuiteRunOutput).
    pub fn build(self) -> crate::operation::start_suite_run::StartSuiteRunOutput {
        crate::operation::start_suite_run::StartSuiteRunOutput {
            suite_run_id: self.suite_run_id,
            suite_run_arn: self.suite_run_arn,
            created_at: self.created_at,
            endpoint: self.endpoint,
            _request_id: self._request_id,
        }
    }
}
