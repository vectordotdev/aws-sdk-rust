// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the response parameters when OAuth is specified as the authorization type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectionOAuthResponseParameters {
    /// <p>A <code>ConnectionOAuthClientResponseParameters</code> object that contains details about the client parameters returned when OAuth is specified as the authorization type.</p>
    pub client_parameters: ::std::option::Option<crate::types::ConnectionOAuthClientResponseParameters>,
    /// <p>The URL to the HTTP endpoint that authorized the request.</p>
    pub authorization_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The method used to connect to the HTTP endpoint.</p>
    pub http_method: ::std::option::Option<crate::types::ConnectionOAuthHttpMethod>,
    /// <p>The additional HTTP parameters used for the OAuth authorization request.</p>
    pub o_auth_http_parameters: ::std::option::Option<crate::types::ConnectionHttpParameters>,
}
impl ConnectionOAuthResponseParameters {
    /// <p>A <code>ConnectionOAuthClientResponseParameters</code> object that contains details about the client parameters returned when OAuth is specified as the authorization type.</p>
    pub fn client_parameters(&self) -> ::std::option::Option<&crate::types::ConnectionOAuthClientResponseParameters> {
        self.client_parameters.as_ref()
    }
    /// <p>The URL to the HTTP endpoint that authorized the request.</p>
    pub fn authorization_endpoint(&self) -> ::std::option::Option<&str> {
        self.authorization_endpoint.as_deref()
    }
    /// <p>The method used to connect to the HTTP endpoint.</p>
    pub fn http_method(&self) -> ::std::option::Option<&crate::types::ConnectionOAuthHttpMethod> {
        self.http_method.as_ref()
    }
    /// <p>The additional HTTP parameters used for the OAuth authorization request.</p>
    pub fn o_auth_http_parameters(&self) -> ::std::option::Option<&crate::types::ConnectionHttpParameters> {
        self.o_auth_http_parameters.as_ref()
    }
}
impl ConnectionOAuthResponseParameters {
    /// Creates a new builder-style object to manufacture [`ConnectionOAuthResponseParameters`](crate::types::ConnectionOAuthResponseParameters).
    pub fn builder() -> crate::types::builders::ConnectionOAuthResponseParametersBuilder {
        crate::types::builders::ConnectionOAuthResponseParametersBuilder::default()
    }
}

/// A builder for [`ConnectionOAuthResponseParameters`](crate::types::ConnectionOAuthResponseParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConnectionOAuthResponseParametersBuilder {
    pub(crate) client_parameters: ::std::option::Option<crate::types::ConnectionOAuthClientResponseParameters>,
    pub(crate) authorization_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) http_method: ::std::option::Option<crate::types::ConnectionOAuthHttpMethod>,
    pub(crate) o_auth_http_parameters: ::std::option::Option<crate::types::ConnectionHttpParameters>,
}
impl ConnectionOAuthResponseParametersBuilder {
    /// <p>A <code>ConnectionOAuthClientResponseParameters</code> object that contains details about the client parameters returned when OAuth is specified as the authorization type.</p>
    pub fn client_parameters(mut self, input: crate::types::ConnectionOAuthClientResponseParameters) -> Self {
        self.client_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>ConnectionOAuthClientResponseParameters</code> object that contains details about the client parameters returned when OAuth is specified as the authorization type.</p>
    pub fn set_client_parameters(mut self, input: ::std::option::Option<crate::types::ConnectionOAuthClientResponseParameters>) -> Self {
        self.client_parameters = input;
        self
    }
    /// <p>A <code>ConnectionOAuthClientResponseParameters</code> object that contains details about the client parameters returned when OAuth is specified as the authorization type.</p>
    pub fn get_client_parameters(&self) -> &::std::option::Option<crate::types::ConnectionOAuthClientResponseParameters> {
        &self.client_parameters
    }
    /// <p>The URL to the HTTP endpoint that authorized the request.</p>
    pub fn authorization_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to the HTTP endpoint that authorized the request.</p>
    pub fn set_authorization_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_endpoint = input;
        self
    }
    /// <p>The URL to the HTTP endpoint that authorized the request.</p>
    pub fn get_authorization_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_endpoint
    }
    /// <p>The method used to connect to the HTTP endpoint.</p>
    pub fn http_method(mut self, input: crate::types::ConnectionOAuthHttpMethod) -> Self {
        self.http_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method used to connect to the HTTP endpoint.</p>
    pub fn set_http_method(mut self, input: ::std::option::Option<crate::types::ConnectionOAuthHttpMethod>) -> Self {
        self.http_method = input;
        self
    }
    /// <p>The method used to connect to the HTTP endpoint.</p>
    pub fn get_http_method(&self) -> &::std::option::Option<crate::types::ConnectionOAuthHttpMethod> {
        &self.http_method
    }
    /// <p>The additional HTTP parameters used for the OAuth authorization request.</p>
    pub fn o_auth_http_parameters(mut self, input: crate::types::ConnectionHttpParameters) -> Self {
        self.o_auth_http_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The additional HTTP parameters used for the OAuth authorization request.</p>
    pub fn set_o_auth_http_parameters(mut self, input: ::std::option::Option<crate::types::ConnectionHttpParameters>) -> Self {
        self.o_auth_http_parameters = input;
        self
    }
    /// <p>The additional HTTP parameters used for the OAuth authorization request.</p>
    pub fn get_o_auth_http_parameters(&self) -> &::std::option::Option<crate::types::ConnectionHttpParameters> {
        &self.o_auth_http_parameters
    }
    /// Consumes the builder and constructs a [`ConnectionOAuthResponseParameters`](crate::types::ConnectionOAuthResponseParameters).
    pub fn build(self) -> crate::types::ConnectionOAuthResponseParameters {
        crate::types::ConnectionOAuthResponseParameters {
            client_parameters: self.client_parameters,
            authorization_endpoint: self.authorization_endpoint,
            http_method: self.http_method,
            o_auth_http_parameters: self.o_auth_http_parameters,
        }
    }
}
