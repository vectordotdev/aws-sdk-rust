// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates the direction the eyes are gazing in (independent of the head pose) as determined by its pitch and yaw. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EyeDirection {
    /// <p>Value representing eye direction on the yaw axis.</p>
    pub yaw: ::std::option::Option<f32>,
    /// <p>Value representing eye direction on the pitch axis.</p>
    pub pitch: ::std::option::Option<f32>,
    /// <p>The confidence that the service has in its predicted eye direction.</p>
    pub confidence: ::std::option::Option<f32>,
}
impl EyeDirection {
    /// <p>Value representing eye direction on the yaw axis.</p>
    pub fn yaw(&self) -> ::std::option::Option<f32> {
        self.yaw
    }
    /// <p>Value representing eye direction on the pitch axis.</p>
    pub fn pitch(&self) -> ::std::option::Option<f32> {
        self.pitch
    }
    /// <p>The confidence that the service has in its predicted eye direction.</p>
    pub fn confidence(&self) -> ::std::option::Option<f32> {
        self.confidence
    }
}
impl EyeDirection {
    /// Creates a new builder-style object to manufacture [`EyeDirection`](crate::types::EyeDirection).
    pub fn builder() -> crate::types::builders::EyeDirectionBuilder {
        crate::types::builders::EyeDirectionBuilder::default()
    }
}

/// A builder for [`EyeDirection`](crate::types::EyeDirection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EyeDirectionBuilder {
    pub(crate) yaw: ::std::option::Option<f32>,
    pub(crate) pitch: ::std::option::Option<f32>,
    pub(crate) confidence: ::std::option::Option<f32>,
}
impl EyeDirectionBuilder {
    /// <p>Value representing eye direction on the yaw axis.</p>
    pub fn yaw(mut self, input: f32) -> Self {
        self.yaw = ::std::option::Option::Some(input);
        self
    }
    /// <p>Value representing eye direction on the yaw axis.</p>
    pub fn set_yaw(mut self, input: ::std::option::Option<f32>) -> Self {
        self.yaw = input;
        self
    }
    /// <p>Value representing eye direction on the yaw axis.</p>
    pub fn get_yaw(&self) -> &::std::option::Option<f32> {
        &self.yaw
    }
    /// <p>Value representing eye direction on the pitch axis.</p>
    pub fn pitch(mut self, input: f32) -> Self {
        self.pitch = ::std::option::Option::Some(input);
        self
    }
    /// <p>Value representing eye direction on the pitch axis.</p>
    pub fn set_pitch(mut self, input: ::std::option::Option<f32>) -> Self {
        self.pitch = input;
        self
    }
    /// <p>Value representing eye direction on the pitch axis.</p>
    pub fn get_pitch(&self) -> &::std::option::Option<f32> {
        &self.pitch
    }
    /// <p>The confidence that the service has in its predicted eye direction.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence that the service has in its predicted eye direction.</p>
    pub fn set_confidence(mut self, input: ::std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The confidence that the service has in its predicted eye direction.</p>
    pub fn get_confidence(&self) -> &::std::option::Option<f32> {
        &self.confidence
    }
    /// Consumes the builder and constructs a [`EyeDirection`](crate::types::EyeDirection).
    pub fn build(self) -> crate::types::EyeDirection {
        crate::types::EyeDirection {
            yaw: self.yaw,
            pitch: self.pitch,
            confidence: self.confidence,
        }
    }
}
