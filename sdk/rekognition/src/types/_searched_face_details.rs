// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains data regarding the input face used for a search.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchedFaceDetails {
    /// <p>Structure containing attributes of the face that the algorithm detected.</p>
    /// <p>A <code>FaceDetail</code> object contains either the default facial attributes or all facial attributes. The default attributes are <code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>.</p>
    /// <p> <code>GetFaceDetection</code> is the only Amazon Rekognition Video stored video operation that can return a <code>FaceDetail</code> object with all attributes. To specify which attributes to return, use the <code>FaceAttributes</code> input parameter for <code>StartFaceDetection</code>. The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations don't have a <code>FaceAttributes</code> input parameter:</p>
    /// <ul>
    /// <li> <p>GetCelebrityRecognition</p> </li>
    /// <li> <p>GetPersonTracking</p> </li>
    /// <li> <p>GetFaceSearch</p> </li>
    /// </ul>
    /// <p>The Amazon Rekognition Image <code>DetectFaces</code> and <code>IndexFaces</code> operations can return all facial attributes. To specify which attributes to return, use the <code>Attributes</code> input parameter for <code>DetectFaces</code>. For <code>IndexFaces</code>, use the <code>DetectAttributes</code> input parameter.</p>
    pub face_detail: ::std::option::Option<crate::types::FaceDetail>,
}
impl SearchedFaceDetails {
    /// <p>Structure containing attributes of the face that the algorithm detected.</p>
    /// <p>A <code>FaceDetail</code> object contains either the default facial attributes or all facial attributes. The default attributes are <code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>.</p>
    /// <p> <code>GetFaceDetection</code> is the only Amazon Rekognition Video stored video operation that can return a <code>FaceDetail</code> object with all attributes. To specify which attributes to return, use the <code>FaceAttributes</code> input parameter for <code>StartFaceDetection</code>. The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations don't have a <code>FaceAttributes</code> input parameter:</p>
    /// <ul>
    /// <li> <p>GetCelebrityRecognition</p> </li>
    /// <li> <p>GetPersonTracking</p> </li>
    /// <li> <p>GetFaceSearch</p> </li>
    /// </ul>
    /// <p>The Amazon Rekognition Image <code>DetectFaces</code> and <code>IndexFaces</code> operations can return all facial attributes. To specify which attributes to return, use the <code>Attributes</code> input parameter for <code>DetectFaces</code>. For <code>IndexFaces</code>, use the <code>DetectAttributes</code> input parameter.</p>
    pub fn face_detail(&self) -> ::std::option::Option<&crate::types::FaceDetail> {
        self.face_detail.as_ref()
    }
}
impl SearchedFaceDetails {
    /// Creates a new builder-style object to manufacture [`SearchedFaceDetails`](crate::types::SearchedFaceDetails).
    pub fn builder() -> crate::types::builders::SearchedFaceDetailsBuilder {
        crate::types::builders::SearchedFaceDetailsBuilder::default()
    }
}

/// A builder for [`SearchedFaceDetails`](crate::types::SearchedFaceDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchedFaceDetailsBuilder {
    pub(crate) face_detail: ::std::option::Option<crate::types::FaceDetail>,
}
impl SearchedFaceDetailsBuilder {
    /// <p>Structure containing attributes of the face that the algorithm detected.</p>
    /// <p>A <code>FaceDetail</code> object contains either the default facial attributes or all facial attributes. The default attributes are <code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>.</p>
    /// <p> <code>GetFaceDetection</code> is the only Amazon Rekognition Video stored video operation that can return a <code>FaceDetail</code> object with all attributes. To specify which attributes to return, use the <code>FaceAttributes</code> input parameter for <code>StartFaceDetection</code>. The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations don't have a <code>FaceAttributes</code> input parameter:</p>
    /// <ul>
    /// <li> <p>GetCelebrityRecognition</p> </li>
    /// <li> <p>GetPersonTracking</p> </li>
    /// <li> <p>GetFaceSearch</p> </li>
    /// </ul>
    /// <p>The Amazon Rekognition Image <code>DetectFaces</code> and <code>IndexFaces</code> operations can return all facial attributes. To specify which attributes to return, use the <code>Attributes</code> input parameter for <code>DetectFaces</code>. For <code>IndexFaces</code>, use the <code>DetectAttributes</code> input parameter.</p>
    pub fn face_detail(mut self, input: crate::types::FaceDetail) -> Self {
        self.face_detail = ::std::option::Option::Some(input);
        self
    }
    /// <p>Structure containing attributes of the face that the algorithm detected.</p>
    /// <p>A <code>FaceDetail</code> object contains either the default facial attributes or all facial attributes. The default attributes are <code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>.</p>
    /// <p> <code>GetFaceDetection</code> is the only Amazon Rekognition Video stored video operation that can return a <code>FaceDetail</code> object with all attributes. To specify which attributes to return, use the <code>FaceAttributes</code> input parameter for <code>StartFaceDetection</code>. The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations don't have a <code>FaceAttributes</code> input parameter:</p>
    /// <ul>
    /// <li> <p>GetCelebrityRecognition</p> </li>
    /// <li> <p>GetPersonTracking</p> </li>
    /// <li> <p>GetFaceSearch</p> </li>
    /// </ul>
    /// <p>The Amazon Rekognition Image <code>DetectFaces</code> and <code>IndexFaces</code> operations can return all facial attributes. To specify which attributes to return, use the <code>Attributes</code> input parameter for <code>DetectFaces</code>. For <code>IndexFaces</code>, use the <code>DetectAttributes</code> input parameter.</p>
    pub fn set_face_detail(mut self, input: ::std::option::Option<crate::types::FaceDetail>) -> Self {
        self.face_detail = input;
        self
    }
    /// <p>Structure containing attributes of the face that the algorithm detected.</p>
    /// <p>A <code>FaceDetail</code> object contains either the default facial attributes or all facial attributes. The default attributes are <code>BoundingBox</code>, <code>Confidence</code>, <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>.</p>
    /// <p> <code>GetFaceDetection</code> is the only Amazon Rekognition Video stored video operation that can return a <code>FaceDetail</code> object with all attributes. To specify which attributes to return, use the <code>FaceAttributes</code> input parameter for <code>StartFaceDetection</code>. The following Amazon Rekognition Video operations return only the default attributes. The corresponding Start operations don't have a <code>FaceAttributes</code> input parameter:</p>
    /// <ul>
    /// <li> <p>GetCelebrityRecognition</p> </li>
    /// <li> <p>GetPersonTracking</p> </li>
    /// <li> <p>GetFaceSearch</p> </li>
    /// </ul>
    /// <p>The Amazon Rekognition Image <code>DetectFaces</code> and <code>IndexFaces</code> operations can return all facial attributes. To specify which attributes to return, use the <code>Attributes</code> input parameter for <code>DetectFaces</code>. For <code>IndexFaces</code>, use the <code>DetectAttributes</code> input parameter.</p>
    pub fn get_face_detail(&self) -> &::std::option::Option<crate::types::FaceDetail> {
        &self.face_detail
    }
    /// Consumes the builder and constructs a [`SearchedFaceDetails`](crate::types::SearchedFaceDetails).
    pub fn build(self) -> crate::types::SearchedFaceDetails {
        crate::types::SearchedFaceDetails {
            face_detail: self.face_detail,
        }
    }
}
