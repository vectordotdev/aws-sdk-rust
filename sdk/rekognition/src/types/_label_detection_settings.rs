// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the specified filters that should be applied to a list of returned GENERAL_LABELS.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LabelDetectionSettings {
    /// <p>Contains filters for the object labels returned by DetectLabels. Filters can be inclusive, exclusive, or a combination of both and can be applied to individual labels or entire label categories. To see a list of label categories, see <a href="https://docs.aws.amazon.com/rekognition/latest/dg/labels.html">Detecting Labels</a>.</p>
    pub general_labels: ::std::option::Option<crate::types::GeneralLabelsSettings>,
}
impl LabelDetectionSettings {
    /// <p>Contains filters for the object labels returned by DetectLabels. Filters can be inclusive, exclusive, or a combination of both and can be applied to individual labels or entire label categories. To see a list of label categories, see <a href="https://docs.aws.amazon.com/rekognition/latest/dg/labels.html">Detecting Labels</a>.</p>
    pub fn general_labels(&self) -> ::std::option::Option<&crate::types::GeneralLabelsSettings> {
        self.general_labels.as_ref()
    }
}
impl LabelDetectionSettings {
    /// Creates a new builder-style object to manufacture [`LabelDetectionSettings`](crate::types::LabelDetectionSettings).
    pub fn builder() -> crate::types::builders::LabelDetectionSettingsBuilder {
        crate::types::builders::LabelDetectionSettingsBuilder::default()
    }
}

/// A builder for [`LabelDetectionSettings`](crate::types::LabelDetectionSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LabelDetectionSettingsBuilder {
    pub(crate) general_labels: ::std::option::Option<crate::types::GeneralLabelsSettings>,
}
impl LabelDetectionSettingsBuilder {
    /// <p>Contains filters for the object labels returned by DetectLabels. Filters can be inclusive, exclusive, or a combination of both and can be applied to individual labels or entire label categories. To see a list of label categories, see <a href="https://docs.aws.amazon.com/rekognition/latest/dg/labels.html">Detecting Labels</a>.</p>
    pub fn general_labels(mut self, input: crate::types::GeneralLabelsSettings) -> Self {
        self.general_labels = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains filters for the object labels returned by DetectLabels. Filters can be inclusive, exclusive, or a combination of both and can be applied to individual labels or entire label categories. To see a list of label categories, see <a href="https://docs.aws.amazon.com/rekognition/latest/dg/labels.html">Detecting Labels</a>.</p>
    pub fn set_general_labels(mut self, input: ::std::option::Option<crate::types::GeneralLabelsSettings>) -> Self {
        self.general_labels = input;
        self
    }
    /// <p>Contains filters for the object labels returned by DetectLabels. Filters can be inclusive, exclusive, or a combination of both and can be applied to individual labels or entire label categories. To see a list of label categories, see <a href="https://docs.aws.amazon.com/rekognition/latest/dg/labels.html">Detecting Labels</a>.</p>
    pub fn get_general_labels(&self) -> &::std::option::Option<crate::types::GeneralLabelsSettings> {
        &self.general_labels
    }
    /// Consumes the builder and constructs a [`LabelDetectionSettings`](crate::types::LabelDetectionSettings).
    pub fn build(self) -> crate::types::LabelDetectionSettings {
        crate::types::LabelDetectionSettings {
            general_labels: self.general_labels,
        }
    }
}
