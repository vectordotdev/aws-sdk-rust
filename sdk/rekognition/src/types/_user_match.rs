// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides UserID metadata along with the confidence in the match of this UserID with the input face.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserMatch {
    /// <p> Describes the UserID metadata.</p>
    pub similarity: ::std::option::Option<f32>,
    /// <p> Confidence in the match of this UserID with the input face. </p>
    pub user: ::std::option::Option<crate::types::MatchedUser>,
}
impl UserMatch {
    /// <p> Describes the UserID metadata.</p>
    pub fn similarity(&self) -> ::std::option::Option<f32> {
        self.similarity
    }
    /// <p> Confidence in the match of this UserID with the input face. </p>
    pub fn user(&self) -> ::std::option::Option<&crate::types::MatchedUser> {
        self.user.as_ref()
    }
}
impl UserMatch {
    /// Creates a new builder-style object to manufacture [`UserMatch`](crate::types::UserMatch).
    pub fn builder() -> crate::types::builders::UserMatchBuilder {
        crate::types::builders::UserMatchBuilder::default()
    }
}

/// A builder for [`UserMatch`](crate::types::UserMatch).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserMatchBuilder {
    pub(crate) similarity: ::std::option::Option<f32>,
    pub(crate) user: ::std::option::Option<crate::types::MatchedUser>,
}
impl UserMatchBuilder {
    /// <p> Describes the UserID metadata.</p>
    pub fn similarity(mut self, input: f32) -> Self {
        self.similarity = ::std::option::Option::Some(input);
        self
    }
    /// <p> Describes the UserID metadata.</p>
    pub fn set_similarity(mut self, input: ::std::option::Option<f32>) -> Self {
        self.similarity = input;
        self
    }
    /// <p> Describes the UserID metadata.</p>
    pub fn get_similarity(&self) -> &::std::option::Option<f32> {
        &self.similarity
    }
    /// <p> Confidence in the match of this UserID with the input face. </p>
    pub fn user(mut self, input: crate::types::MatchedUser) -> Self {
        self.user = ::std::option::Option::Some(input);
        self
    }
    /// <p> Confidence in the match of this UserID with the input face. </p>
    pub fn set_user(mut self, input: ::std::option::Option<crate::types::MatchedUser>) -> Self {
        self.user = input;
        self
    }
    /// <p> Confidence in the match of this UserID with the input face. </p>
    pub fn get_user(&self) -> &::std::option::Option<crate::types::MatchedUser> {
        &self.user
    }
    /// Consumes the builder and constructs a [`UserMatch`](crate::types::UserMatch).
    pub fn build(self) -> crate::types::UserMatch {
        crate::types::UserMatch {
            similarity: self.similarity,
            user: self.user,
        }
    }
}
