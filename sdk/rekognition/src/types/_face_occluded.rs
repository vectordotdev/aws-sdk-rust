// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <code>FaceOccluded</code> should return "true" with a high confidence score if a detected face’s eyes, nose, and mouth are partially captured or if they are covered by masks, dark sunglasses, cell phones, hands, or other objects. <code>FaceOccluded</code> should return "false" with a high confidence score if common occurrences that do not impact face verification are detected, such as eye glasses, lightly tinted sunglasses, strands of hair, and others. </p>
/// <p>You can use <code>FaceOccluded</code> to determine if an obstruction on a face negatively impacts using the image for face matching.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FaceOccluded {
    /// <p>True if a detected face’s eyes, nose, and mouth are partially captured or if they are covered by masks, dark sunglasses, cell phones, hands, or other objects. False if common occurrences that do not impact face verification are detected, such as eye glasses, lightly tinted sunglasses, strands of hair, and others.</p>
    pub value: bool,
    /// <p>The confidence that the service has detected the presence of a face occlusion.</p>
    pub confidence: ::std::option::Option<f32>,
}
impl FaceOccluded {
    /// <p>True if a detected face’s eyes, nose, and mouth are partially captured or if they are covered by masks, dark sunglasses, cell phones, hands, or other objects. False if common occurrences that do not impact face verification are detected, such as eye glasses, lightly tinted sunglasses, strands of hair, and others.</p>
    pub fn value(&self) -> bool {
        self.value
    }
    /// <p>The confidence that the service has detected the presence of a face occlusion.</p>
    pub fn confidence(&self) -> ::std::option::Option<f32> {
        self.confidence
    }
}
impl FaceOccluded {
    /// Creates a new builder-style object to manufacture [`FaceOccluded`](crate::types::FaceOccluded).
    pub fn builder() -> crate::types::builders::FaceOccludedBuilder {
        crate::types::builders::FaceOccludedBuilder::default()
    }
}

/// A builder for [`FaceOccluded`](crate::types::FaceOccluded).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FaceOccludedBuilder {
    pub(crate) value: ::std::option::Option<bool>,
    pub(crate) confidence: ::std::option::Option<f32>,
}
impl FaceOccludedBuilder {
    /// <p>True if a detected face’s eyes, nose, and mouth are partially captured or if they are covered by masks, dark sunglasses, cell phones, hands, or other objects. False if common occurrences that do not impact face verification are detected, such as eye glasses, lightly tinted sunglasses, strands of hair, and others.</p>
    pub fn value(mut self, input: bool) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>True if a detected face’s eyes, nose, and mouth are partially captured or if they are covered by masks, dark sunglasses, cell phones, hands, or other objects. False if common occurrences that do not impact face verification are detected, such as eye glasses, lightly tinted sunglasses, strands of hair, and others.</p>
    pub fn set_value(mut self, input: ::std::option::Option<bool>) -> Self {
        self.value = input;
        self
    }
    /// <p>True if a detected face’s eyes, nose, and mouth are partially captured or if they are covered by masks, dark sunglasses, cell phones, hands, or other objects. False if common occurrences that do not impact face verification are detected, such as eye glasses, lightly tinted sunglasses, strands of hair, and others.</p>
    pub fn get_value(&self) -> &::std::option::Option<bool> {
        &self.value
    }
    /// <p>The confidence that the service has detected the presence of a face occlusion.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence that the service has detected the presence of a face occlusion.</p>
    pub fn set_confidence(mut self, input: ::std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The confidence that the service has detected the presence of a face occlusion.</p>
    pub fn get_confidence(&self) -> &::std::option::Option<f32> {
        &self.confidence
    }
    /// Consumes the builder and constructs a [`FaceOccluded`](crate::types::FaceOccluded).
    pub fn build(self) -> crate::types::FaceOccluded {
        crate::types::FaceOccluded {
            value: self.value.unwrap_or_default(),
            confidence: self.confidence,
        }
    }
}
