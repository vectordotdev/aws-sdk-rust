// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata of the user stored in a collection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct User {
    /// <p> A provided ID for the User. Unique within the collection.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p> Communicates if the UserID has been updated with latest set of faces to be associated with the UserID. </p>
    pub user_status: ::std::option::Option<crate::types::UserStatus>,
}
impl User {
    /// <p> A provided ID for the User. Unique within the collection.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p> Communicates if the UserID has been updated with latest set of faces to be associated with the UserID. </p>
    pub fn user_status(&self) -> ::std::option::Option<&crate::types::UserStatus> {
        self.user_status.as_ref()
    }
}
impl User {
    /// Creates a new builder-style object to manufacture [`User`](crate::types::User).
    pub fn builder() -> crate::types::builders::UserBuilder {
        crate::types::builders::UserBuilder::default()
    }
}

/// A builder for [`User`](crate::types::User).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserBuilder {
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_status: ::std::option::Option<crate::types::UserStatus>,
}
impl UserBuilder {
    /// <p> A provided ID for the User. Unique within the collection.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A provided ID for the User. Unique within the collection.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p> A provided ID for the User. Unique within the collection.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p> Communicates if the UserID has been updated with latest set of faces to be associated with the UserID. </p>
    pub fn user_status(mut self, input: crate::types::UserStatus) -> Self {
        self.user_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> Communicates if the UserID has been updated with latest set of faces to be associated with the UserID. </p>
    pub fn set_user_status(mut self, input: ::std::option::Option<crate::types::UserStatus>) -> Self {
        self.user_status = input;
        self
    }
    /// <p> Communicates if the UserID has been updated with latest set of faces to be associated with the UserID. </p>
    pub fn get_user_status(&self) -> &::std::option::Option<crate::types::UserStatus> {
        &self.user_status
    }
    /// Consumes the builder and constructs a [`User`](crate::types::User).
    pub fn build(self) -> crate::types::User {
        crate::types::User {
            user_id: self.user_id,
            user_status: self.user_status,
        }
    }
}
