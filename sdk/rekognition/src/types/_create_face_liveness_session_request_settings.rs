// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A session settings object. It contains settings for the operation to be performed. It accepts arguments for OutputConfig and AuditImagesLimit.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateFaceLivenessSessionRequestSettings {
    /// <p>Can specify the location of an Amazon S3 bucket, where reference and audit images will be stored. Note that the Amazon S3 bucket must be located in the caller's AWS account and in the same region as the Face Liveness end-point. Additionally, the Amazon S3 object keys are auto-generated by the Face Liveness system. Requires that the caller has the <code>s3:PutObject</code> permission on the Amazon S3 bucket.</p>
    pub output_config: ::std::option::Option<crate::types::LivenessOutputConfig>,
    /// <p>Number of audit images to be returned back. Takes an integer between 0-4. Any integer less than 0 will return 0, any integer above 4 will return 4 images in the response. By default, it is set to 0. The limit is best effort and is based on the actual duration of the selfie-video.</p>
    pub audit_images_limit: ::std::option::Option<i32>,
}
impl CreateFaceLivenessSessionRequestSettings {
    /// <p>Can specify the location of an Amazon S3 bucket, where reference and audit images will be stored. Note that the Amazon S3 bucket must be located in the caller's AWS account and in the same region as the Face Liveness end-point. Additionally, the Amazon S3 object keys are auto-generated by the Face Liveness system. Requires that the caller has the <code>s3:PutObject</code> permission on the Amazon S3 bucket.</p>
    pub fn output_config(&self) -> ::std::option::Option<&crate::types::LivenessOutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>Number of audit images to be returned back. Takes an integer between 0-4. Any integer less than 0 will return 0, any integer above 4 will return 4 images in the response. By default, it is set to 0. The limit is best effort and is based on the actual duration of the selfie-video.</p>
    pub fn audit_images_limit(&self) -> ::std::option::Option<i32> {
        self.audit_images_limit
    }
}
impl CreateFaceLivenessSessionRequestSettings {
    /// Creates a new builder-style object to manufacture [`CreateFaceLivenessSessionRequestSettings`](crate::types::CreateFaceLivenessSessionRequestSettings).
    pub fn builder() -> crate::types::builders::CreateFaceLivenessSessionRequestSettingsBuilder {
        crate::types::builders::CreateFaceLivenessSessionRequestSettingsBuilder::default()
    }
}

/// A builder for [`CreateFaceLivenessSessionRequestSettings`](crate::types::CreateFaceLivenessSessionRequestSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateFaceLivenessSessionRequestSettingsBuilder {
    pub(crate) output_config: ::std::option::Option<crate::types::LivenessOutputConfig>,
    pub(crate) audit_images_limit: ::std::option::Option<i32>,
}
impl CreateFaceLivenessSessionRequestSettingsBuilder {
    /// <p>Can specify the location of an Amazon S3 bucket, where reference and audit images will be stored. Note that the Amazon S3 bucket must be located in the caller's AWS account and in the same region as the Face Liveness end-point. Additionally, the Amazon S3 object keys are auto-generated by the Face Liveness system. Requires that the caller has the <code>s3:PutObject</code> permission on the Amazon S3 bucket.</p>
    pub fn output_config(mut self, input: crate::types::LivenessOutputConfig) -> Self {
        self.output_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Can specify the location of an Amazon S3 bucket, where reference and audit images will be stored. Note that the Amazon S3 bucket must be located in the caller's AWS account and in the same region as the Face Liveness end-point. Additionally, the Amazon S3 object keys are auto-generated by the Face Liveness system. Requires that the caller has the <code>s3:PutObject</code> permission on the Amazon S3 bucket.</p>
    pub fn set_output_config(mut self, input: ::std::option::Option<crate::types::LivenessOutputConfig>) -> Self {
        self.output_config = input;
        self
    }
    /// <p>Can specify the location of an Amazon S3 bucket, where reference and audit images will be stored. Note that the Amazon S3 bucket must be located in the caller's AWS account and in the same region as the Face Liveness end-point. Additionally, the Amazon S3 object keys are auto-generated by the Face Liveness system. Requires that the caller has the <code>s3:PutObject</code> permission on the Amazon S3 bucket.</p>
    pub fn get_output_config(&self) -> &::std::option::Option<crate::types::LivenessOutputConfig> {
        &self.output_config
    }
    /// <p>Number of audit images to be returned back. Takes an integer between 0-4. Any integer less than 0 will return 0, any integer above 4 will return 4 images in the response. By default, it is set to 0. The limit is best effort and is based on the actual duration of the selfie-video.</p>
    pub fn audit_images_limit(mut self, input: i32) -> Self {
        self.audit_images_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of audit images to be returned back. Takes an integer between 0-4. Any integer less than 0 will return 0, any integer above 4 will return 4 images in the response. By default, it is set to 0. The limit is best effort and is based on the actual duration of the selfie-video.</p>
    pub fn set_audit_images_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.audit_images_limit = input;
        self
    }
    /// <p>Number of audit images to be returned back. Takes an integer between 0-4. Any integer less than 0 will return 0, any integer above 4 will return 4 images in the response. By default, it is set to 0. The limit is best effort and is based on the actual duration of the selfie-video.</p>
    pub fn get_audit_images_limit(&self) -> &::std::option::Option<i32> {
        &self.audit_images_limit
    }
    /// Consumes the builder and constructs a [`CreateFaceLivenessSessionRequestSettings`](crate::types::CreateFaceLivenessSessionRequestSettings).
    pub fn build(self) -> crate::types::CreateFaceLivenessSessionRequestSettings {
        crate::types::CreateFaceLivenessSessionRequestSettings {
            output_config: self.output_config,
            audit_images_limit: self.audit_images_limit,
        }
    }
}
