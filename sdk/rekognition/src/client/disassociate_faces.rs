// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DisassociateFaces`](crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`collection_id(impl ::std::convert::Into<String>)`](crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder::collection_id) / [`set_collection_id(Option<String>)`](crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder::set_collection_id): <p>The ID of an existing collection containing the UserID.</p>
    ///   - [`user_id(impl ::std::convert::Into<String>)`](crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder::user_id) / [`set_user_id(Option<String>)`](crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder::set_user_id): <p>ID for the existing UserID.</p>
    ///   - [`client_request_token(impl ::std::convert::Into<String>)`](crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder::set_client_request_token): <p>Idempotent token used to identify the request to <code>DisassociateFaces</code>. If you use the same token with multiple <code>DisassociateFaces</code> requests, the same response is returned. Use ClientRequestToken to prevent the same request from being processed more than once.</p>
    ///   - [`face_ids(Vec<String>)`](crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder::face_ids) / [`set_face_ids(Option<Vec<String>>)`](crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder::set_face_ids): <p>An array of face IDs to disassociate from the UserID. </p>
    /// - On success, responds with [`DisassociateFacesOutput`](crate::operation::disassociate_faces::DisassociateFacesOutput) with field(s):
    ///   - [`disassociated_faces(Option<Vec<DisassociatedFace>>)`](crate::operation::disassociate_faces::DisassociateFacesOutput::disassociated_faces): <p>An array of DissociatedFace objects containing FaceIds that are successfully disassociated with the UserID is returned. Returned if the DisassociatedFaces action is successful.</p>
    ///   - [`unsuccessful_face_disassociations(Option<Vec<UnsuccessfulFaceDisassociation>>)`](crate::operation::disassociate_faces::DisassociateFacesOutput::unsuccessful_face_disassociations): <p>An array of UnsuccessfulDisassociation objects containing FaceIds that are not successfully associated, along with the reasons for the failure to associate. Returned if the DisassociateFaces action is successful.</p>
    ///   - [`user_status(Option<UserStatus>)`](crate::operation::disassociate_faces::DisassociateFacesOutput::user_status): <p>The status of an update made to a User. Reflects if the User has been updated for every requested change.</p>
    /// - On failure, responds with [`SdkError<DisassociateFacesError>`](crate::operation::disassociate_faces::DisassociateFacesError)
    pub fn disassociate_faces(&self) -> crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder {
        crate::operation::disassociate_faces::builders::DisassociateFacesFluentBuilder::new(self.handle.clone())
    }
}
