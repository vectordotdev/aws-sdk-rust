// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_request_inspection_acfp(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RequestInspectionAcfp,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.payload_type {
        object.key("PayloadType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.username_field {
        #[allow(unused_mut)]
        let mut object_3 = object.key("UsernameField").start_object();
        crate::protocol_serde::shape_username_field::ser_username_field(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.password_field {
        #[allow(unused_mut)]
        let mut object_5 = object.key("PasswordField").start_object();
        crate::protocol_serde::shape_password_field::ser_password_field(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.email_field {
        #[allow(unused_mut)]
        let mut object_7 = object.key("EmailField").start_object();
        crate::protocol_serde::shape_email_field::ser_email_field(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.phone_number_fields {
        let mut array_9 = object.key("PhoneNumberFields").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_phone_number_field::ser_phone_number_field(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.address_fields {
        let mut array_13 = object.key("AddressFields").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_address_field::ser_address_field(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}

pub(crate) fn de_request_inspection_acfp<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::RequestInspectionAcfp>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RequestInspectionAcfpBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "PayloadType" => {
                            builder = builder.set_payload_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PayloadType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "UsernameField" => {
                            builder = builder.set_username_field(crate::protocol_serde::shape_username_field::de_username_field(tokens)?);
                        }
                        "PasswordField" => {
                            builder = builder.set_password_field(crate::protocol_serde::shape_password_field::de_password_field(tokens)?);
                        }
                        "EmailField" => {
                            builder = builder.set_email_field(crate::protocol_serde::shape_email_field::de_email_field(tokens)?);
                        }
                        "PhoneNumberFields" => {
                            builder =
                                builder.set_phone_number_fields(crate::protocol_serde::shape_phone_number_fields::de_phone_number_fields(tokens)?);
                        }
                        "AddressFields" => {
                            builder = builder.set_address_fields(crate::protocol_serde::shape_address_fields::de_address_fields(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
