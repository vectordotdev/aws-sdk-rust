// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details for your use of the account creation fraud prevention managed rule group, <code>AWSManagedRulesACFPRuleSet</code>. This configuration is used in <code>ManagedRuleGroupConfig</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsManagedRulesAcfpRuleSet {
    /// <p>The path of the account creation endpoint for your application. This is the page on your website that accepts the completed registration form for a new user. This page must accept <code>POST</code> requests.</p>
    /// <p>For example, for the URL <code>https://example.com/web/signup</code>, you would provide the path <code>/web/signup</code>.</p>
    pub creation_path: ::std::option::Option<::std::string::String>,
    /// <p>The path of the account registration endpoint for your application. This is the page on your website that presents the registration form to new users. </p> <note>
    /// <p>This page must accept <code>GET</code> text/html requests.</p>
    /// </note>
    /// <p>For example, for the URL <code>https://example.com/web/register</code>, you would provide the path <code>/web/register</code>.</p>
    pub registration_page_path: ::std::option::Option<::std::string::String>,
    /// <p>The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts. </p>
    pub request_inspection: ::std::option::Option<crate::types::RequestInspectionAcfp>,
    /// <p>The criteria for inspecting responses to account creation requests, used by the ACFP rule group to track account creation success rates. </p> <note>
    /// <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p>
    /// </note>
    /// <p>The ACFP rule group evaluates the responses that your protected resources send back to client account creation attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many successful account creation attempts in a short amount of time. </p>
    pub response_inspection: ::std::option::Option<crate::types::ResponseInspection>,
    /// <p>Allow the use of regular expressions in the registration page path and the account creation path. </p>
    pub enable_regex_in_path: bool,
}
impl AwsManagedRulesAcfpRuleSet {
    /// <p>The path of the account creation endpoint for your application. This is the page on your website that accepts the completed registration form for a new user. This page must accept <code>POST</code> requests.</p>
    /// <p>For example, for the URL <code>https://example.com/web/signup</code>, you would provide the path <code>/web/signup</code>.</p>
    pub fn creation_path(&self) -> ::std::option::Option<&str> {
        self.creation_path.as_deref()
    }
    /// <p>The path of the account registration endpoint for your application. This is the page on your website that presents the registration form to new users. </p> <note>
    /// <p>This page must accept <code>GET</code> text/html requests.</p>
    /// </note>
    /// <p>For example, for the URL <code>https://example.com/web/register</code>, you would provide the path <code>/web/register</code>.</p>
    pub fn registration_page_path(&self) -> ::std::option::Option<&str> {
        self.registration_page_path.as_deref()
    }
    /// <p>The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts. </p>
    pub fn request_inspection(&self) -> ::std::option::Option<&crate::types::RequestInspectionAcfp> {
        self.request_inspection.as_ref()
    }
    /// <p>The criteria for inspecting responses to account creation requests, used by the ACFP rule group to track account creation success rates. </p> <note>
    /// <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p>
    /// </note>
    /// <p>The ACFP rule group evaluates the responses that your protected resources send back to client account creation attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many successful account creation attempts in a short amount of time. </p>
    pub fn response_inspection(&self) -> ::std::option::Option<&crate::types::ResponseInspection> {
        self.response_inspection.as_ref()
    }
    /// <p>Allow the use of regular expressions in the registration page path and the account creation path. </p>
    pub fn enable_regex_in_path(&self) -> bool {
        self.enable_regex_in_path
    }
}
impl AwsManagedRulesAcfpRuleSet {
    /// Creates a new builder-style object to manufacture [`AwsManagedRulesAcfpRuleSet`](crate::types::AwsManagedRulesAcfpRuleSet).
    pub fn builder() -> crate::types::builders::AwsManagedRulesAcfpRuleSetBuilder {
        crate::types::builders::AwsManagedRulesAcfpRuleSetBuilder::default()
    }
}

/// A builder for [`AwsManagedRulesAcfpRuleSet`](crate::types::AwsManagedRulesAcfpRuleSet).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsManagedRulesAcfpRuleSetBuilder {
    pub(crate) creation_path: ::std::option::Option<::std::string::String>,
    pub(crate) registration_page_path: ::std::option::Option<::std::string::String>,
    pub(crate) request_inspection: ::std::option::Option<crate::types::RequestInspectionAcfp>,
    pub(crate) response_inspection: ::std::option::Option<crate::types::ResponseInspection>,
    pub(crate) enable_regex_in_path: ::std::option::Option<bool>,
}
impl AwsManagedRulesAcfpRuleSetBuilder {
    /// <p>The path of the account creation endpoint for your application. This is the page on your website that accepts the completed registration form for a new user. This page must accept <code>POST</code> requests.</p>
    /// <p>For example, for the URL <code>https://example.com/web/signup</code>, you would provide the path <code>/web/signup</code>.</p>
    pub fn creation_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path of the account creation endpoint for your application. This is the page on your website that accepts the completed registration form for a new user. This page must accept <code>POST</code> requests.</p>
    /// <p>For example, for the URL <code>https://example.com/web/signup</code>, you would provide the path <code>/web/signup</code>.</p>
    pub fn set_creation_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_path = input;
        self
    }
    /// <p>The path of the account creation endpoint for your application. This is the page on your website that accepts the completed registration form for a new user. This page must accept <code>POST</code> requests.</p>
    /// <p>For example, for the URL <code>https://example.com/web/signup</code>, you would provide the path <code>/web/signup</code>.</p>
    pub fn get_creation_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_path
    }
    /// <p>The path of the account registration endpoint for your application. This is the page on your website that presents the registration form to new users. </p> <note>
    /// <p>This page must accept <code>GET</code> text/html requests.</p>
    /// </note>
    /// <p>For example, for the URL <code>https://example.com/web/register</code>, you would provide the path <code>/web/register</code>.</p>
    pub fn registration_page_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registration_page_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path of the account registration endpoint for your application. This is the page on your website that presents the registration form to new users. </p> <note>
    /// <p>This page must accept <code>GET</code> text/html requests.</p>
    /// </note>
    /// <p>For example, for the URL <code>https://example.com/web/register</code>, you would provide the path <code>/web/register</code>.</p>
    pub fn set_registration_page_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registration_page_path = input;
        self
    }
    /// <p>The path of the account registration endpoint for your application. This is the page on your website that presents the registration form to new users. </p> <note>
    /// <p>This page must accept <code>GET</code> text/html requests.</p>
    /// </note>
    /// <p>For example, for the URL <code>https://example.com/web/register</code>, you would provide the path <code>/web/register</code>.</p>
    pub fn get_registration_page_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.registration_page_path
    }
    /// <p>The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts. </p>
    pub fn request_inspection(mut self, input: crate::types::RequestInspectionAcfp) -> Self {
        self.request_inspection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts. </p>
    pub fn set_request_inspection(mut self, input: ::std::option::Option<crate::types::RequestInspectionAcfp>) -> Self {
        self.request_inspection = input;
        self
    }
    /// <p>The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts. </p>
    pub fn get_request_inspection(&self) -> &::std::option::Option<crate::types::RequestInspectionAcfp> {
        &self.request_inspection
    }
    /// <p>The criteria for inspecting responses to account creation requests, used by the ACFP rule group to track account creation success rates. </p> <note>
    /// <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p>
    /// </note>
    /// <p>The ACFP rule group evaluates the responses that your protected resources send back to client account creation attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many successful account creation attempts in a short amount of time. </p>
    pub fn response_inspection(mut self, input: crate::types::ResponseInspection) -> Self {
        self.response_inspection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The criteria for inspecting responses to account creation requests, used by the ACFP rule group to track account creation success rates. </p> <note>
    /// <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p>
    /// </note>
    /// <p>The ACFP rule group evaluates the responses that your protected resources send back to client account creation attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many successful account creation attempts in a short amount of time. </p>
    pub fn set_response_inspection(mut self, input: ::std::option::Option<crate::types::ResponseInspection>) -> Self {
        self.response_inspection = input;
        self
    }
    /// <p>The criteria for inspecting responses to account creation requests, used by the ACFP rule group to track account creation success rates. </p> <note>
    /// <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p>
    /// </note>
    /// <p>The ACFP rule group evaluates the responses that your protected resources send back to client account creation attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many successful account creation attempts in a short amount of time. </p>
    pub fn get_response_inspection(&self) -> &::std::option::Option<crate::types::ResponseInspection> {
        &self.response_inspection
    }
    /// <p>Allow the use of regular expressions in the registration page path and the account creation path. </p>
    pub fn enable_regex_in_path(mut self, input: bool) -> Self {
        self.enable_regex_in_path = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allow the use of regular expressions in the registration page path and the account creation path. </p>
    pub fn set_enable_regex_in_path(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_regex_in_path = input;
        self
    }
    /// <p>Allow the use of regular expressions in the registration page path and the account creation path. </p>
    pub fn get_enable_regex_in_path(&self) -> &::std::option::Option<bool> {
        &self.enable_regex_in_path
    }
    /// Consumes the builder and constructs a [`AwsManagedRulesAcfpRuleSet`](crate::types::AwsManagedRulesAcfpRuleSet).
    pub fn build(self) -> crate::types::AwsManagedRulesAcfpRuleSet {
        crate::types::AwsManagedRulesAcfpRuleSet {
            creation_path: self.creation_path,
            registration_page_path: self.registration_page_path,
            request_inspection: self.request_inspection,
            response_inspection: self.response_inspection,
            enable_regex_in_path: self.enable_regex_in_path.unwrap_or_default(),
        }
    }
}
