// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the IP address in the web request as an aggregate key for a rate-based rule. Each distinct IP address contributes to the aggregation instance. </p>
/// <p>This setting is used only in the <code>RateBasedStatementCustomKey</code> specification of a rate-based rule statement. To use this in the custom key settings, you must specify at least one other key to use, along with the IP address. To aggregate on only the IP address, in your rate-based statement's <code>AggregateKeyType</code>, specify <code>IP</code>.</p>
/// <p>JSON specification: <code>"RateLimitIP": {}</code> </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RateLimitIp {}
impl RateLimitIp {
    /// Creates a new builder-style object to manufacture [`RateLimitIp`](crate::types::RateLimitIp).
    pub fn builder() -> crate::types::builders::RateLimitIpBuilder {
        crate::types::builders::RateLimitIpBuilder::default()
    }
}

/// A builder for [`RateLimitIp`](crate::types::RateLimitIp).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RateLimitIpBuilder {}
impl RateLimitIpBuilder {
    /// Consumes the builder and constructs a [`RateLimitIp`](crate::types::RateLimitIp).
    pub fn build(self) -> crate::types::RateLimitIp {
        crate::types::RateLimitIp {}
    }
}
