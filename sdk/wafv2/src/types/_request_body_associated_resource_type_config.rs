// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Customizes the maximum size of the request body that your protected CloudFront distributions forward to WAF for inspection. The default size is 16 KB (16,384 kilobytes). </p> <note>
/// <p>You are charged additional fees when your protected resources forward body sizes that are larger than the default. For more information, see <a href="http://aws.amazon.com/waf/pricing/">WAF Pricing</a>.</p>
/// </note>
/// <p>This is used in the <code>AssociationConfig</code> of the web ACL. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestBodyAssociatedResourceTypeConfig {
    /// <p>Specifies the maximum size of the web request body component that an associated CloudFront distribution should send to WAF for inspection. This applies to statements in the web ACL that inspect the body or JSON body. </p>
    /// <p>Default: <code>16 KB (16,384 kilobytes)</code> </p>
    pub default_size_inspection_limit: ::std::option::Option<crate::types::SizeInspectionLimit>,
}
impl RequestBodyAssociatedResourceTypeConfig {
    /// <p>Specifies the maximum size of the web request body component that an associated CloudFront distribution should send to WAF for inspection. This applies to statements in the web ACL that inspect the body or JSON body. </p>
    /// <p>Default: <code>16 KB (16,384 kilobytes)</code> </p>
    pub fn default_size_inspection_limit(&self) -> ::std::option::Option<&crate::types::SizeInspectionLimit> {
        self.default_size_inspection_limit.as_ref()
    }
}
impl RequestBodyAssociatedResourceTypeConfig {
    /// Creates a new builder-style object to manufacture [`RequestBodyAssociatedResourceTypeConfig`](crate::types::RequestBodyAssociatedResourceTypeConfig).
    pub fn builder() -> crate::types::builders::RequestBodyAssociatedResourceTypeConfigBuilder {
        crate::types::builders::RequestBodyAssociatedResourceTypeConfigBuilder::default()
    }
}

/// A builder for [`RequestBodyAssociatedResourceTypeConfig`](crate::types::RequestBodyAssociatedResourceTypeConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RequestBodyAssociatedResourceTypeConfigBuilder {
    pub(crate) default_size_inspection_limit: ::std::option::Option<crate::types::SizeInspectionLimit>,
}
impl RequestBodyAssociatedResourceTypeConfigBuilder {
    /// <p>Specifies the maximum size of the web request body component that an associated CloudFront distribution should send to WAF for inspection. This applies to statements in the web ACL that inspect the body or JSON body. </p>
    /// <p>Default: <code>16 KB (16,384 kilobytes)</code> </p>
    pub fn default_size_inspection_limit(mut self, input: crate::types::SizeInspectionLimit) -> Self {
        self.default_size_inspection_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum size of the web request body component that an associated CloudFront distribution should send to WAF for inspection. This applies to statements in the web ACL that inspect the body or JSON body. </p>
    /// <p>Default: <code>16 KB (16,384 kilobytes)</code> </p>
    pub fn set_default_size_inspection_limit(mut self, input: ::std::option::Option<crate::types::SizeInspectionLimit>) -> Self {
        self.default_size_inspection_limit = input;
        self
    }
    /// <p>Specifies the maximum size of the web request body component that an associated CloudFront distribution should send to WAF for inspection. This applies to statements in the web ACL that inspect the body or JSON body. </p>
    /// <p>Default: <code>16 KB (16,384 kilobytes)</code> </p>
    pub fn get_default_size_inspection_limit(&self) -> &::std::option::Option<crate::types::SizeInspectionLimit> {
        &self.default_size_inspection_limit
    }
    /// Consumes the builder and constructs a [`RequestBodyAssociatedResourceTypeConfig`](crate::types::RequestBodyAssociatedResourceTypeConfig).
    pub fn build(self) -> crate::types::RequestBodyAssociatedResourceTypeConfig {
        crate::types::RequestBodyAssociatedResourceTypeConfig {
            default_size_inspection_limit: self.default_size_inspection_limit,
        }
    }
}
