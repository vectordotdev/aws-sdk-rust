// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_get_prepared_statement::_batch_get_prepared_statement_output::BatchGetPreparedStatementOutputBuilder;

pub use crate::operation::batch_get_prepared_statement::_batch_get_prepared_statement_input::BatchGetPreparedStatementInputBuilder;

impl BatchGetPreparedStatementInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.batch_get_prepared_statement();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `BatchGetPreparedStatement`.
///
/// <p>Returns the details of a single prepared statement or a list of up to 256 prepared statements for the array of prepared statement names that you provide. Requires you to have access to the workgroup to which the prepared statements belong. If a prepared statement cannot be retrieved for the name specified, the statement is listed in <code>UnprocessedPreparedStatementNames</code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct BatchGetPreparedStatementFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_get_prepared_statement::builders::BatchGetPreparedStatementInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl BatchGetPreparedStatementFluentBuilder {
    /// Creates a new `BatchGetPreparedStatement`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the BatchGetPreparedStatement as a reference.
    pub fn as_input(&self) -> &crate::operation::batch_get_prepared_statement::builders::BatchGetPreparedStatementInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::batch_get_prepared_statement::BatchGetPreparedStatement::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::batch_get_prepared_statement::BatchGetPreparedStatement::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementOutput,
            crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::batch_get_prepared_statement::BatchGetPreparedStatementError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Appends an item to `PreparedStatementNames`.
    ///
    /// To override the contents of this collection use [`set_prepared_statement_names`](Self::set_prepared_statement_names).
    ///
    /// <p>A list of prepared statement names to return.</p>
    pub fn prepared_statement_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.prepared_statement_names(input.into());
        self
    }
    /// <p>A list of prepared statement names to return.</p>
    pub fn set_prepared_statement_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_prepared_statement_names(input);
        self
    }
    /// <p>A list of prepared statement names to return.</p>
    pub fn get_prepared_statement_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_prepared_statement_names()
    }
    /// <p>The name of the workgroup to which the prepared statements belong.</p>
    pub fn work_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.work_group(input.into());
        self
    }
    /// <p>The name of the workgroup to which the prepared statements belong.</p>
    pub fn set_work_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_work_group(input);
        self
    }
    /// <p>The name of the workgroup to which the prepared statements belong.</p>
    pub fn get_work_group(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_work_group()
    }
}
