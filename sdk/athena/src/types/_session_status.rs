// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the status of a session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SessionStatus {
    /// <p>The date and time that the session started.</p>
    pub start_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The most recent date and time that the session was modified.</p>
    pub last_modified_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that the session ended.</p>
    pub end_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time starting at which the session became idle. Can be empty if the session is not currently idle.</p>
    pub idle_since_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The state of the session. A description of each state follows.</p>
    /// <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p>
    /// <p> <code>CREATED</code> - The session has been started.</p>
    /// <p> <code>IDLE</code> - The session is able to accept a calculation.</p>
    /// <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p>
    /// <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p>
    /// <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p>
    /// <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p>
    /// <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
    pub state: ::std::option::Option<crate::types::SessionState>,
    /// <p>The reason for the session state change (for example, canceled because the session was terminated).</p>
    pub state_change_reason: ::std::option::Option<::std::string::String>,
}
impl SessionStatus {
    /// <p>The date and time that the session started.</p>
    pub fn start_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_date_time.as_ref()
    }
    /// <p>The most recent date and time that the session was modified.</p>
    pub fn last_modified_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_date_time.as_ref()
    }
    /// <p>The date and time that the session ended.</p>
    pub fn end_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_date_time.as_ref()
    }
    /// <p>The date and time starting at which the session became idle. Can be empty if the session is not currently idle.</p>
    pub fn idle_since_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.idle_since_date_time.as_ref()
    }
    /// <p>The state of the session. A description of each state follows.</p>
    /// <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p>
    /// <p> <code>CREATED</code> - The session has been started.</p>
    /// <p> <code>IDLE</code> - The session is able to accept a calculation.</p>
    /// <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p>
    /// <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p>
    /// <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p>
    /// <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p>
    /// <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::SessionState> {
        self.state.as_ref()
    }
    /// <p>The reason for the session state change (for example, canceled because the session was terminated).</p>
    pub fn state_change_reason(&self) -> ::std::option::Option<&str> {
        self.state_change_reason.as_deref()
    }
}
impl SessionStatus {
    /// Creates a new builder-style object to manufacture [`SessionStatus`](crate::types::SessionStatus).
    pub fn builder() -> crate::types::builders::SessionStatusBuilder {
        crate::types::builders::SessionStatusBuilder::default()
    }
}

/// A builder for [`SessionStatus`](crate::types::SessionStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SessionStatusBuilder {
    pub(crate) start_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) idle_since_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state: ::std::option::Option<crate::types::SessionState>,
    pub(crate) state_change_reason: ::std::option::Option<::std::string::String>,
}
impl SessionStatusBuilder {
    /// <p>The date and time that the session started.</p>
    pub fn start_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the session started.</p>
    pub fn set_start_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_date_time = input;
        self
    }
    /// <p>The date and time that the session started.</p>
    pub fn get_start_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_date_time
    }
    /// <p>The most recent date and time that the session was modified.</p>
    pub fn last_modified_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent date and time that the session was modified.</p>
    pub fn set_last_modified_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date_time = input;
        self
    }
    /// <p>The most recent date and time that the session was modified.</p>
    pub fn get_last_modified_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date_time
    }
    /// <p>The date and time that the session ended.</p>
    pub fn end_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the session ended.</p>
    pub fn set_end_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_date_time = input;
        self
    }
    /// <p>The date and time that the session ended.</p>
    pub fn get_end_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_date_time
    }
    /// <p>The date and time starting at which the session became idle. Can be empty if the session is not currently idle.</p>
    pub fn idle_since_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.idle_since_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time starting at which the session became idle. Can be empty if the session is not currently idle.</p>
    pub fn set_idle_since_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.idle_since_date_time = input;
        self
    }
    /// <p>The date and time starting at which the session became idle. Can be empty if the session is not currently idle.</p>
    pub fn get_idle_since_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.idle_since_date_time
    }
    /// <p>The state of the session. A description of each state follows.</p>
    /// <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p>
    /// <p> <code>CREATED</code> - The session has been started.</p>
    /// <p> <code>IDLE</code> - The session is able to accept a calculation.</p>
    /// <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p>
    /// <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p>
    /// <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p>
    /// <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p>
    /// <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
    pub fn state(mut self, input: crate::types::SessionState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the session. A description of each state follows.</p>
    /// <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p>
    /// <p> <code>CREATED</code> - The session has been started.</p>
    /// <p> <code>IDLE</code> - The session is able to accept a calculation.</p>
    /// <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p>
    /// <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p>
    /// <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p>
    /// <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p>
    /// <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::SessionState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the session. A description of each state follows.</p>
    /// <p> <code>CREATING</code> - The session is being started, including acquiring resources.</p>
    /// <p> <code>CREATED</code> - The session has been started.</p>
    /// <p> <code>IDLE</code> - The session is able to accept a calculation.</p>
    /// <p> <code>BUSY</code> - The session is processing another task and is unable to accept a calculation.</p>
    /// <p> <code>TERMINATING</code> - The session is in the process of shutting down.</p>
    /// <p> <code>TERMINATED</code> - The session and its resources are no longer running.</p>
    /// <p> <code>DEGRADED</code> - The session has no healthy coordinators.</p>
    /// <p> <code>FAILED</code> - Due to a failure, the session and its resources are no longer running.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::SessionState> {
        &self.state
    }
    /// <p>The reason for the session state change (for example, canceled because the session was terminated).</p>
    pub fn state_change_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_change_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the session state change (for example, canceled because the session was terminated).</p>
    pub fn set_state_change_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_change_reason = input;
        self
    }
    /// <p>The reason for the session state change (for example, canceled because the session was terminated).</p>
    pub fn get_state_change_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_change_reason
    }
    /// Consumes the builder and constructs a [`SessionStatus`](crate::types::SessionStatus).
    pub fn build(self) -> crate::types::SessionStatus {
        crate::types::SessionStatus {
            start_date_time: self.start_date_time,
            last_modified_date_time: self.last_modified_date_time,
            end_date_time: self.end_date_time,
            idle_since_date_time: self.idle_since_date_time,
            state: self.state,
            state_change_reason: self.state_change_reason,
        }
    }
}
