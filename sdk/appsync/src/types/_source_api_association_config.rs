// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes properties used to specify configurations related to a source API.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceApiAssociationConfig {
    /// <p>The property that indicates which merging option is enabled in the source API association.</p>
    /// <p>Valid merge types are <code>MANUAL_MERGE</code> (default) and <code>AUTO_MERGE</code>. Manual merges are the default behavior and require the user to trigger any changes from the source APIs to the merged API manually. Auto merges subscribe the merged API to the changes performed on the source APIs so that any change in the source APIs are also made to the merged API. Auto merges use <code>MergedApiExecutionRoleArn</code> to perform merge operations.</p>
    pub merge_type: ::std::option::Option<crate::types::MergeType>,
}
impl SourceApiAssociationConfig {
    /// <p>The property that indicates which merging option is enabled in the source API association.</p>
    /// <p>Valid merge types are <code>MANUAL_MERGE</code> (default) and <code>AUTO_MERGE</code>. Manual merges are the default behavior and require the user to trigger any changes from the source APIs to the merged API manually. Auto merges subscribe the merged API to the changes performed on the source APIs so that any change in the source APIs are also made to the merged API. Auto merges use <code>MergedApiExecutionRoleArn</code> to perform merge operations.</p>
    pub fn merge_type(&self) -> ::std::option::Option<&crate::types::MergeType> {
        self.merge_type.as_ref()
    }
}
impl SourceApiAssociationConfig {
    /// Creates a new builder-style object to manufacture [`SourceApiAssociationConfig`](crate::types::SourceApiAssociationConfig).
    pub fn builder() -> crate::types::builders::SourceApiAssociationConfigBuilder {
        crate::types::builders::SourceApiAssociationConfigBuilder::default()
    }
}

/// A builder for [`SourceApiAssociationConfig`](crate::types::SourceApiAssociationConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SourceApiAssociationConfigBuilder {
    pub(crate) merge_type: ::std::option::Option<crate::types::MergeType>,
}
impl SourceApiAssociationConfigBuilder {
    /// <p>The property that indicates which merging option is enabled in the source API association.</p>
    /// <p>Valid merge types are <code>MANUAL_MERGE</code> (default) and <code>AUTO_MERGE</code>. Manual merges are the default behavior and require the user to trigger any changes from the source APIs to the merged API manually. Auto merges subscribe the merged API to the changes performed on the source APIs so that any change in the source APIs are also made to the merged API. Auto merges use <code>MergedApiExecutionRoleArn</code> to perform merge operations.</p>
    pub fn merge_type(mut self, input: crate::types::MergeType) -> Self {
        self.merge_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The property that indicates which merging option is enabled in the source API association.</p>
    /// <p>Valid merge types are <code>MANUAL_MERGE</code> (default) and <code>AUTO_MERGE</code>. Manual merges are the default behavior and require the user to trigger any changes from the source APIs to the merged API manually. Auto merges subscribe the merged API to the changes performed on the source APIs so that any change in the source APIs are also made to the merged API. Auto merges use <code>MergedApiExecutionRoleArn</code> to perform merge operations.</p>
    pub fn set_merge_type(mut self, input: ::std::option::Option<crate::types::MergeType>) -> Self {
        self.merge_type = input;
        self
    }
    /// <p>The property that indicates which merging option is enabled in the source API association.</p>
    /// <p>Valid merge types are <code>MANUAL_MERGE</code> (default) and <code>AUTO_MERGE</code>. Manual merges are the default behavior and require the user to trigger any changes from the source APIs to the merged API manually. Auto merges subscribe the merged API to the changes performed on the source APIs so that any change in the source APIs are also made to the merged API. Auto merges use <code>MergedApiExecutionRoleArn</code> to perform merge operations.</p>
    pub fn get_merge_type(&self) -> &::std::option::Option<crate::types::MergeType> {
        &self.merge_type
    }
    /// Consumes the builder and constructs a [`SourceApiAssociationConfig`](crate::types::SourceApiAssociationConfig).
    pub fn build(self) -> crate::types::SourceApiAssociationConfig {
        crate::types::SourceApiAssociationConfig { merge_type: self.merge_type }
    }
}
