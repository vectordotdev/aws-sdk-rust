// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the ARNs and IDs of associations, Merged APIs, and source APIs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceApiAssociationSummary {
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the source API association.</p>
    pub association_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the AppSync source API.</p>
    pub source_api_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the AppSync Source API.</p>
    pub source_api_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the AppSync Merged API.</p>
    pub merged_api_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the AppSync Merged API.</p>
    pub merged_api_arn: ::std::option::Option<::std::string::String>,
    /// <p>The description field.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl SourceApiAssociationSummary {
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the source API association.</p>
    pub fn association_arn(&self) -> ::std::option::Option<&str> {
        self.association_arn.as_deref()
    }
    /// <p>The ID of the AppSync source API.</p>
    pub fn source_api_id(&self) -> ::std::option::Option<&str> {
        self.source_api_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Source API.</p>
    pub fn source_api_arn(&self) -> ::std::option::Option<&str> {
        self.source_api_arn.as_deref()
    }
    /// <p>The ID of the AppSync Merged API.</p>
    pub fn merged_api_id(&self) -> ::std::option::Option<&str> {
        self.merged_api_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Merged API.</p>
    pub fn merged_api_arn(&self) -> ::std::option::Option<&str> {
        self.merged_api_arn.as_deref()
    }
    /// <p>The description field.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl SourceApiAssociationSummary {
    /// Creates a new builder-style object to manufacture [`SourceApiAssociationSummary`](crate::types::SourceApiAssociationSummary).
    pub fn builder() -> crate::types::builders::SourceApiAssociationSummaryBuilder {
        crate::types::builders::SourceApiAssociationSummaryBuilder::default()
    }
}

/// A builder for [`SourceApiAssociationSummary`](crate::types::SourceApiAssociationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SourceApiAssociationSummaryBuilder {
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_api_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_api_arn: ::std::option::Option<::std::string::String>,
    pub(crate) merged_api_id: ::std::option::Option<::std::string::String>,
    pub(crate) merged_api_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl SourceApiAssociationSummaryBuilder {
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// <p>The Amazon Resource Name (ARN) of the source API association.</p>
    pub fn association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source API association.</p>
    pub fn set_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source API association.</p>
    pub fn get_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_arn
    }
    /// <p>The ID of the AppSync source API.</p>
    pub fn source_api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the AppSync source API.</p>
    pub fn set_source_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_api_id = input;
        self
    }
    /// <p>The ID of the AppSync source API.</p>
    pub fn get_source_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_api_id
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Source API.</p>
    pub fn source_api_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_api_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Source API.</p>
    pub fn set_source_api_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_api_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Source API.</p>
    pub fn get_source_api_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_api_arn
    }
    /// <p>The ID of the AppSync Merged API.</p>
    pub fn merged_api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.merged_api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the AppSync Merged API.</p>
    pub fn set_merged_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.merged_api_id = input;
        self
    }
    /// <p>The ID of the AppSync Merged API.</p>
    pub fn get_merged_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.merged_api_id
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Merged API.</p>
    pub fn merged_api_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.merged_api_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Merged API.</p>
    pub fn set_merged_api_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.merged_api_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Merged API.</p>
    pub fn get_merged_api_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.merged_api_arn
    }
    /// <p>The description field.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description field.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description field.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`SourceApiAssociationSummary`](crate::types::SourceApiAssociationSummary).
    pub fn build(self) -> crate::types::SourceApiAssociationSummary {
        crate::types::SourceApiAssociationSummary {
            association_id: self.association_id,
            association_arn: self.association_arn,
            source_api_id: self.source_api_id,
            source_api_arn: self.source_api_arn,
            merged_api_id: self.merged_api_id,
            merged_api_arn: self.merged_api_arn,
            description: self.description,
        }
    }
}
