// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a source API. A source API is a GraphQL API that is linked to a merged API. There can be multiple source APIs attached to each merged API. When linked to a merged API, the source API's schema, data sources, and resolvers will be combined with other linked source API data to form a new, singular API. </p>
/// <p>Source APIs can originate from your account or from other accounts via Amazon Web Services Resource Access Manager. For more information about sharing resources from other accounts, see <a href="https://docs.aws.amazon.com/ram/latest/userguide/what-is.html">What is Amazon Web Services Resource Access Manager?</a> in the <i>Amazon Web Services Resource Access Manager</i> guide.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceApiAssociation {
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the source API association.</p>
    pub association_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the AppSync source API.</p>
    pub source_api_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the AppSync source API.</p>
    pub source_api_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the AppSync Merged API.</p>
    pub merged_api_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the AppSync Merged API.</p>
    pub merged_api_id: ::std::option::Option<::std::string::String>,
    /// <p>The description field.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub source_api_association_config: ::std::option::Option<crate::types::SourceApiAssociationConfig>,
    /// <p>The state of the source API association.</p>
    pub source_api_association_status: ::std::option::Option<crate::types::SourceApiAssociationStatus>,
    /// <p>The detailed message related to the current state of the source API association.</p>
    pub source_api_association_status_detail: ::std::option::Option<::std::string::String>,
    /// <p>The datetime value of the last successful merge of the source API association. The result will be in UTC format and your local time zone.</p>
    pub last_successful_merge_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SourceApiAssociation {
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the source API association.</p>
    pub fn association_arn(&self) -> ::std::option::Option<&str> {
        self.association_arn.as_deref()
    }
    /// <p>The ID of the AppSync source API.</p>
    pub fn source_api_id(&self) -> ::std::option::Option<&str> {
        self.source_api_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync source API.</p>
    pub fn source_api_arn(&self) -> ::std::option::Option<&str> {
        self.source_api_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Merged API.</p>
    pub fn merged_api_arn(&self) -> ::std::option::Option<&str> {
        self.merged_api_arn.as_deref()
    }
    /// <p>The ID of the AppSync Merged API.</p>
    pub fn merged_api_id(&self) -> ::std::option::Option<&str> {
        self.merged_api_id.as_deref()
    }
    /// <p>The description field.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn source_api_association_config(&self) -> ::std::option::Option<&crate::types::SourceApiAssociationConfig> {
        self.source_api_association_config.as_ref()
    }
    /// <p>The state of the source API association.</p>
    pub fn source_api_association_status(&self) -> ::std::option::Option<&crate::types::SourceApiAssociationStatus> {
        self.source_api_association_status.as_ref()
    }
    /// <p>The detailed message related to the current state of the source API association.</p>
    pub fn source_api_association_status_detail(&self) -> ::std::option::Option<&str> {
        self.source_api_association_status_detail.as_deref()
    }
    /// <p>The datetime value of the last successful merge of the source API association. The result will be in UTC format and your local time zone.</p>
    pub fn last_successful_merge_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_successful_merge_date.as_ref()
    }
}
impl SourceApiAssociation {
    /// Creates a new builder-style object to manufacture [`SourceApiAssociation`](crate::types::SourceApiAssociation).
    pub fn builder() -> crate::types::builders::SourceApiAssociationBuilder {
        crate::types::builders::SourceApiAssociationBuilder::default()
    }
}

/// A builder for [`SourceApiAssociation`](crate::types::SourceApiAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SourceApiAssociationBuilder {
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) association_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_api_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_api_arn: ::std::option::Option<::std::string::String>,
    pub(crate) merged_api_arn: ::std::option::Option<::std::string::String>,
    pub(crate) merged_api_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) source_api_association_config: ::std::option::Option<crate::types::SourceApiAssociationConfig>,
    pub(crate) source_api_association_status: ::std::option::Option<crate::types::SourceApiAssociationStatus>,
    pub(crate) source_api_association_status_detail: ::std::option::Option<::std::string::String>,
    pub(crate) last_successful_merge_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SourceApiAssociationBuilder {
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The ID generated by the AppSync service for the source API association.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// <p>The Amazon Resource Name (ARN) of the source API association.</p>
    pub fn association_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source API association.</p>
    pub fn set_association_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source API association.</p>
    pub fn get_association_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_arn
    }
    /// <p>The ID of the AppSync source API.</p>
    pub fn source_api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the AppSync source API.</p>
    pub fn set_source_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_api_id = input;
        self
    }
    /// <p>The ID of the AppSync source API.</p>
    pub fn get_source_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_api_id
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync source API.</p>
    pub fn source_api_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_api_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync source API.</p>
    pub fn set_source_api_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_api_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync source API.</p>
    pub fn get_source_api_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_api_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Merged API.</p>
    pub fn merged_api_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.merged_api_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Merged API.</p>
    pub fn set_merged_api_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.merged_api_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the AppSync Merged API.</p>
    pub fn get_merged_api_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.merged_api_arn
    }
    /// <p>The ID of the AppSync Merged API.</p>
    pub fn merged_api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.merged_api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the AppSync Merged API.</p>
    pub fn set_merged_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.merged_api_id = input;
        self
    }
    /// <p>The ID of the AppSync Merged API.</p>
    pub fn get_merged_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.merged_api_id
    }
    /// <p>The description field.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description field.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description field.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn source_api_association_config(mut self, input: crate::types::SourceApiAssociationConfig) -> Self {
        self.source_api_association_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn set_source_api_association_config(mut self, input: ::std::option::Option<crate::types::SourceApiAssociationConfig>) -> Self {
        self.source_api_association_config = input;
        self
    }
    /// <p>The <code>SourceApiAssociationConfig</code> object data.</p>
    pub fn get_source_api_association_config(&self) -> &::std::option::Option<crate::types::SourceApiAssociationConfig> {
        &self.source_api_association_config
    }
    /// <p>The state of the source API association.</p>
    pub fn source_api_association_status(mut self, input: crate::types::SourceApiAssociationStatus) -> Self {
        self.source_api_association_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the source API association.</p>
    pub fn set_source_api_association_status(mut self, input: ::std::option::Option<crate::types::SourceApiAssociationStatus>) -> Self {
        self.source_api_association_status = input;
        self
    }
    /// <p>The state of the source API association.</p>
    pub fn get_source_api_association_status(&self) -> &::std::option::Option<crate::types::SourceApiAssociationStatus> {
        &self.source_api_association_status
    }
    /// <p>The detailed message related to the current state of the source API association.</p>
    pub fn source_api_association_status_detail(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_api_association_status_detail = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The detailed message related to the current state of the source API association.</p>
    pub fn set_source_api_association_status_detail(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_api_association_status_detail = input;
        self
    }
    /// <p>The detailed message related to the current state of the source API association.</p>
    pub fn get_source_api_association_status_detail(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_api_association_status_detail
    }
    /// <p>The datetime value of the last successful merge of the source API association. The result will be in UTC format and your local time zone.</p>
    pub fn last_successful_merge_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_successful_merge_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The datetime value of the last successful merge of the source API association. The result will be in UTC format and your local time zone.</p>
    pub fn set_last_successful_merge_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_successful_merge_date = input;
        self
    }
    /// <p>The datetime value of the last successful merge of the source API association. The result will be in UTC format and your local time zone.</p>
    pub fn get_last_successful_merge_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_successful_merge_date
    }
    /// Consumes the builder and constructs a [`SourceApiAssociation`](crate::types::SourceApiAssociation).
    pub fn build(self) -> crate::types::SourceApiAssociation {
        crate::types::SourceApiAssociation {
            association_id: self.association_id,
            association_arn: self.association_arn,
            source_api_id: self.source_api_id,
            source_api_arn: self.source_api_arn,
            merged_api_arn: self.merged_api_arn,
            merged_api_id: self.merged_api_id,
            description: self.description,
            source_api_association_config: self.source_api_association_config,
            source_api_association_status: self.source_api_association_status,
            source_api_association_status_detail: self.source_api_association_status_detail,
            last_successful_merge_date: self.last_successful_merge_date,
        }
    }
}
