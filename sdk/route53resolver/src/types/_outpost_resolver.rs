// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains settings for an existing Resolver on an Outpost.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutpostResolver {
    /// <p>The ARN (Amazon Resource Name) for the Resolver on an Outpost.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the Outpost Resolver was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub creation_time: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the Outpost Resolver was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub modification_time: ::std::option::Option<::std::string::String>,
    /// <p>A unique string that identifies the request that created the Resolver endpoint. The <code>CreatorRequestId</code> allows failed requests to be retried without the risk of running the operation twice.</p>
    pub creator_request_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Resolver on Outpost.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Amazon EC2 instance count for the Resolver on the Outpost.</p>
    pub instance_count: ::std::option::Option<i32>,
    /// <p> The Amazon EC2 instance type. </p>
    pub preferred_instance_type: ::std::option::Option<::std::string::String>,
    /// <p>Name of the Resolver.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Status of the Resolver.</p>
    pub status: ::std::option::Option<crate::types::OutpostResolverStatus>,
    /// <p>A detailed description of the Resolver.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The ARN (Amazon Resource Name) for the Outpost.</p>
    pub outpost_arn: ::std::option::Option<::std::string::String>,
}
impl OutpostResolver {
    /// <p>The ARN (Amazon Resource Name) for the Resolver on an Outpost.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time that the Outpost Resolver was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn creation_time(&self) -> ::std::option::Option<&str> {
        self.creation_time.as_deref()
    }
    /// <p>The date and time that the Outpost Resolver was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn modification_time(&self) -> ::std::option::Option<&str> {
        self.modification_time.as_deref()
    }
    /// <p>A unique string that identifies the request that created the Resolver endpoint. The <code>CreatorRequestId</code> allows failed requests to be retried without the risk of running the operation twice.</p>
    pub fn creator_request_id(&self) -> ::std::option::Option<&str> {
        self.creator_request_id.as_deref()
    }
    /// <p>The ID of the Resolver on Outpost.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Amazon EC2 instance count for the Resolver on the Outpost.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
    /// <p> The Amazon EC2 instance type. </p>
    pub fn preferred_instance_type(&self) -> ::std::option::Option<&str> {
        self.preferred_instance_type.as_deref()
    }
    /// <p>Name of the Resolver.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Status of the Resolver.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::OutpostResolverStatus> {
        self.status.as_ref()
    }
    /// <p>A detailed description of the Resolver.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The ARN (Amazon Resource Name) for the Outpost.</p>
    pub fn outpost_arn(&self) -> ::std::option::Option<&str> {
        self.outpost_arn.as_deref()
    }
}
impl OutpostResolver {
    /// Creates a new builder-style object to manufacture [`OutpostResolver`](crate::types::OutpostResolver).
    pub fn builder() -> crate::types::builders::OutpostResolverBuilder {
        crate::types::builders::OutpostResolverBuilder::default()
    }
}

/// A builder for [`OutpostResolver`](crate::types::OutpostResolver).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OutpostResolverBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::std::string::String>,
    pub(crate) modification_time: ::std::option::Option<::std::string::String>,
    pub(crate) creator_request_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_count: ::std::option::Option<i32>,
    pub(crate) preferred_instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::OutpostResolverStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) outpost_arn: ::std::option::Option<::std::string::String>,
}
impl OutpostResolverBuilder {
    /// <p>The ARN (Amazon Resource Name) for the Resolver on an Outpost.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the Resolver on an Outpost.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the Resolver on an Outpost.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The date and time that the Outpost Resolver was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn creation_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time that the Outpost Resolver was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that the Outpost Resolver was created, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_time
    }
    /// <p>The date and time that the Outpost Resolver was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn modification_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.modification_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time that the Outpost Resolver was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn set_modification_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.modification_time = input;
        self
    }
    /// <p>The date and time that the Outpost Resolver was modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn get_modification_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.modification_time
    }
    /// <p>A unique string that identifies the request that created the Resolver endpoint. The <code>CreatorRequestId</code> allows failed requests to be retried without the risk of running the operation twice.</p>
    pub fn creator_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator_request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique string that identifies the request that created the Resolver endpoint. The <code>CreatorRequestId</code> allows failed requests to be retried without the risk of running the operation twice.</p>
    pub fn set_creator_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator_request_id = input;
        self
    }
    /// <p>A unique string that identifies the request that created the Resolver endpoint. The <code>CreatorRequestId</code> allows failed requests to be retried without the risk of running the operation twice.</p>
    pub fn get_creator_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator_request_id
    }
    /// <p>The ID of the Resolver on Outpost.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Resolver on Outpost.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the Resolver on Outpost.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Amazon EC2 instance count for the Resolver on the Outpost.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>Amazon EC2 instance count for the Resolver on the Outpost.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>Amazon EC2 instance count for the Resolver on the Outpost.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// <p> The Amazon EC2 instance type. </p>
    pub fn preferred_instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon EC2 instance type. </p>
    pub fn set_preferred_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_instance_type = input;
        self
    }
    /// <p> The Amazon EC2 instance type. </p>
    pub fn get_preferred_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_instance_type
    }
    /// <p>Name of the Resolver.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the Resolver.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the Resolver.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Status of the Resolver.</p>
    pub fn status(mut self, input: crate::types::OutpostResolverStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the Resolver.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OutpostResolverStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the Resolver.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OutpostResolverStatus> {
        &self.status
    }
    /// <p>A detailed description of the Resolver.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed description of the Resolver.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A detailed description of the Resolver.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The ARN (Amazon Resource Name) for the Outpost.</p>
    pub fn outpost_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outpost_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the Outpost.</p>
    pub fn set_outpost_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outpost_arn = input;
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the Outpost.</p>
    pub fn get_outpost_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.outpost_arn
    }
    /// Consumes the builder and constructs a [`OutpostResolver`](crate::types::OutpostResolver).
    pub fn build(self) -> crate::types::OutpostResolver {
        crate::types::OutpostResolver {
            arn: self.arn,
            creation_time: self.creation_time,
            modification_time: self.modification_time,
            creator_request_id: self.creator_request_id,
            id: self.id,
            instance_count: self.instance_count,
            preferred_instance_type: self.preferred_instance_type,
            name: self.name,
            status: self.status,
            status_message: self.status_message,
            outpost_arn: self.outpost_arn,
        }
    }
}
