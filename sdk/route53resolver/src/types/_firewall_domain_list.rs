// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>High-level information about a list of firewall domains for use in a <code>FirewallRule</code>. This is returned by <code>GetFirewallDomainList</code>.</p>
/// <p>To retrieve the domains that are defined for this domain list, call <code>ListFirewallDomains</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FirewallDomainList {
    /// <p>The ID of the domain list. </p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the firewall domain list.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the domain list. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The number of domain names that are specified in the domain list.</p>
    pub domain_count: ::std::option::Option<i32>,
    /// <p>The status of the domain list. </p>
    pub status: ::std::option::Option<crate::types::FirewallDomainListStatus>,
    /// <p>Additional information about the status of the list, if available.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The owner of the list, used only for lists that are not managed by you. For example, the managed domain list <code>AWSManagedDomainsMalwareDomainList</code> has the managed owner name <code>Route 53 Resolver DNS Firewall</code>.</p>
    pub managed_owner_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. </p>
    pub creator_request_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the domain list was created, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub creation_time: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the domain list was last modified, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub modification_time: ::std::option::Option<::std::string::String>,
}
impl FirewallDomainList {
    /// <p>The ID of the domain list. </p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall domain list.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the domain list. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The number of domain names that are specified in the domain list.</p>
    pub fn domain_count(&self) -> ::std::option::Option<i32> {
        self.domain_count
    }
    /// <p>The status of the domain list. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FirewallDomainListStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the status of the list, if available.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The owner of the list, used only for lists that are not managed by you. For example, the managed domain list <code>AWSManagedDomainsMalwareDomainList</code> has the managed owner name <code>Route 53 Resolver DNS Firewall</code>.</p>
    pub fn managed_owner_name(&self) -> ::std::option::Option<&str> {
        self.managed_owner_name.as_deref()
    }
    /// <p>A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. </p>
    pub fn creator_request_id(&self) -> ::std::option::Option<&str> {
        self.creator_request_id.as_deref()
    }
    /// <p>The date and time that the domain list was created, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn creation_time(&self) -> ::std::option::Option<&str> {
        self.creation_time.as_deref()
    }
    /// <p>The date and time that the domain list was last modified, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn modification_time(&self) -> ::std::option::Option<&str> {
        self.modification_time.as_deref()
    }
}
impl FirewallDomainList {
    /// Creates a new builder-style object to manufacture [`FirewallDomainList`](crate::types::FirewallDomainList).
    pub fn builder() -> crate::types::builders::FirewallDomainListBuilder {
        crate::types::builders::FirewallDomainListBuilder::default()
    }
}

/// A builder for [`FirewallDomainList`](crate::types::FirewallDomainList).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FirewallDomainListBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_count: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::FirewallDomainListStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) managed_owner_name: ::std::option::Option<::std::string::String>,
    pub(crate) creator_request_id: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::std::string::String>,
    pub(crate) modification_time: ::std::option::Option<::std::string::String>,
}
impl FirewallDomainListBuilder {
    /// <p>The ID of the domain list. </p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain list. </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the domain list. </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall domain list.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall domain list.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the firewall domain list.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the domain list. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain list. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the domain list. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The number of domain names that are specified in the domain list.</p>
    pub fn domain_count(mut self, input: i32) -> Self {
        self.domain_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of domain names that are specified in the domain list.</p>
    pub fn set_domain_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.domain_count = input;
        self
    }
    /// <p>The number of domain names that are specified in the domain list.</p>
    pub fn get_domain_count(&self) -> &::std::option::Option<i32> {
        &self.domain_count
    }
    /// <p>The status of the domain list. </p>
    pub fn status(mut self, input: crate::types::FirewallDomainListStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the domain list. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FirewallDomainListStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the domain list. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FirewallDomainListStatus> {
        &self.status
    }
    /// <p>Additional information about the status of the list, if available.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the status of the list, if available.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Additional information about the status of the list, if available.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The owner of the list, used only for lists that are not managed by you. For example, the managed domain list <code>AWSManagedDomainsMalwareDomainList</code> has the managed owner name <code>Route 53 Resolver DNS Firewall</code>.</p>
    pub fn managed_owner_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.managed_owner_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of the list, used only for lists that are not managed by you. For example, the managed domain list <code>AWSManagedDomainsMalwareDomainList</code> has the managed owner name <code>Route 53 Resolver DNS Firewall</code>.</p>
    pub fn set_managed_owner_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.managed_owner_name = input;
        self
    }
    /// <p>The owner of the list, used only for lists that are not managed by you. For example, the managed domain list <code>AWSManagedDomainsMalwareDomainList</code> has the managed owner name <code>Route 53 Resolver DNS Firewall</code>.</p>
    pub fn get_managed_owner_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.managed_owner_name
    }
    /// <p>A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. </p>
    pub fn creator_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator_request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. </p>
    pub fn set_creator_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator_request_id = input;
        self
    }
    /// <p>A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. </p>
    pub fn get_creator_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator_request_id
    }
    /// <p>The date and time that the domain list was created, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn creation_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time that the domain list was created, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that the domain list was created, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_time
    }
    /// <p>The date and time that the domain list was last modified, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn modification_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.modification_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time that the domain list was last modified, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn set_modification_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.modification_time = input;
        self
    }
    /// <p>The date and time that the domain list was last modified, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn get_modification_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.modification_time
    }
    /// Consumes the builder and constructs a [`FirewallDomainList`](crate::types::FirewallDomainList).
    pub fn build(self) -> crate::types::FirewallDomainList {
        crate::types::FirewallDomainList {
            id: self.id,
            arn: self.arn,
            name: self.name,
            domain_count: self.domain_count,
            status: self.status,
            status_message: self.status_message,
            managed_owner_name: self.managed_owner_name,
            creator_request_id: self.creator_request_id,
            creation_time: self.creation_time,
            modification_time: self.modification_time,
        }
    }
}
