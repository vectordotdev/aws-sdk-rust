// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_resolver_query_log_config_policy::_put_resolver_query_log_config_policy_output::PutResolverQueryLogConfigPolicyOutputBuilder;

pub use crate::operation::put_resolver_query_log_config_policy::_put_resolver_query_log_config_policy_input::PutResolverQueryLogConfigPolicyInputBuilder;

impl PutResolverQueryLogConfigPolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_resolver_query_log_config_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutResolverQueryLogConfigPolicy`.
///
/// <p>Specifies an Amazon Web Services account that you want to share a query logging configuration with, the query logging configuration that you want to share, and the operations that you want the account to be able to perform on the configuration.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutResolverQueryLogConfigPolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_resolver_query_log_config_policy::builders::PutResolverQueryLogConfigPolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl PutResolverQueryLogConfigPolicyFluentBuilder {
    /// Creates a new `PutResolverQueryLogConfigPolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutResolverQueryLogConfigPolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::put_resolver_query_log_config_policy::builders::PutResolverQueryLogConfigPolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyOutput,
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the account that you want to share rules with.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the account that you want to share rules with.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the account that you want to share rules with.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_arn()
    }
    /// <p>An Identity and Access Management policy statement that lists the query logging configurations that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Actions</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:AssociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigs</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in <code>Arn</code>. </p>
    pub fn resolver_query_log_config_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resolver_query_log_config_policy(input.into());
        self
    }
    /// <p>An Identity and Access Management policy statement that lists the query logging configurations that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Actions</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:AssociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigs</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in <code>Arn</code>. </p>
    pub fn set_resolver_query_log_config_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resolver_query_log_config_policy(input);
        self
    }
    /// <p>An Identity and Access Management policy statement that lists the query logging configurations that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Actions</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:AssociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigs</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in <code>Arn</code>. </p>
    pub fn get_resolver_query_log_config_policy(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resolver_query_log_config_policy()
    }
}
