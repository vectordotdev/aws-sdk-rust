// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details about the developer that published the skill.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeveloperInfo {
    /// <p>The name of the developer.</p>
    pub developer_name: ::std::option::Option<::std::string::String>,
    /// <p>The URL of the privacy policy.</p>
    pub privacy_policy: ::std::option::Option<::std::string::String>,
    /// <p>The email of the developer.</p>
    pub email: ::std::option::Option<::std::string::String>,
    /// <p>The website of the developer.</p>
    pub url: ::std::option::Option<::std::string::String>,
}
impl DeveloperInfo {
    /// <p>The name of the developer.</p>
    pub fn developer_name(&self) -> ::std::option::Option<&str> {
        self.developer_name.as_deref()
    }
    /// <p>The URL of the privacy policy.</p>
    pub fn privacy_policy(&self) -> ::std::option::Option<&str> {
        self.privacy_policy.as_deref()
    }
    /// <p>The email of the developer.</p>
    pub fn email(&self) -> ::std::option::Option<&str> {
        self.email.as_deref()
    }
    /// <p>The website of the developer.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl DeveloperInfo {
    /// Creates a new builder-style object to manufacture [`DeveloperInfo`](crate::types::DeveloperInfo).
    pub fn builder() -> crate::types::builders::DeveloperInfoBuilder {
        crate::types::builders::DeveloperInfoBuilder::default()
    }
}

/// A builder for [`DeveloperInfo`](crate::types::DeveloperInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeveloperInfoBuilder {
    pub(crate) developer_name: ::std::option::Option<::std::string::String>,
    pub(crate) privacy_policy: ::std::option::Option<::std::string::String>,
    pub(crate) email: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::string::String>,
}
impl DeveloperInfoBuilder {
    /// <p>The name of the developer.</p>
    pub fn developer_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.developer_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the developer.</p>
    pub fn set_developer_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.developer_name = input;
        self
    }
    /// <p>The name of the developer.</p>
    pub fn get_developer_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.developer_name
    }
    /// <p>The URL of the privacy policy.</p>
    pub fn privacy_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.privacy_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the privacy policy.</p>
    pub fn set_privacy_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.privacy_policy = input;
        self
    }
    /// <p>The URL of the privacy policy.</p>
    pub fn get_privacy_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.privacy_policy
    }
    /// <p>The email of the developer.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email of the developer.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The email of the developer.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// <p>The website of the developer.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The website of the developer.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The website of the developer.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// Consumes the builder and constructs a [`DeveloperInfo`](crate::types::DeveloperInfo).
    pub fn build(self) -> crate::types::DeveloperInfo {
        crate::types::DeveloperInfo {
            developer_name: self.developer_name,
            privacy_policy: self.privacy_policy,
            email: self.email,
            url: self.url,
        }
    }
}
