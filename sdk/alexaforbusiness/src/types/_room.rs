// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A room with attributes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Room {
    /// <p>The ARN of a room.</p>
    pub room_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of a room.</p>
    pub room_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of a room.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The provider calendar ARN of a room.</p>
    pub provider_calendar_id: ::std::option::Option<::std::string::String>,
    /// <p>The profile ARN of a room.</p>
    pub profile_arn: ::std::option::Option<::std::string::String>,
}
impl Room {
    /// <p>The ARN of a room.</p>
    pub fn room_arn(&self) -> ::std::option::Option<&str> {
        self.room_arn.as_deref()
    }
    /// <p>The name of a room.</p>
    pub fn room_name(&self) -> ::std::option::Option<&str> {
        self.room_name.as_deref()
    }
    /// <p>The description of a room.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The provider calendar ARN of a room.</p>
    pub fn provider_calendar_id(&self) -> ::std::option::Option<&str> {
        self.provider_calendar_id.as_deref()
    }
    /// <p>The profile ARN of a room.</p>
    pub fn profile_arn(&self) -> ::std::option::Option<&str> {
        self.profile_arn.as_deref()
    }
}
impl Room {
    /// Creates a new builder-style object to manufacture [`Room`](crate::types::Room).
    pub fn builder() -> crate::types::builders::RoomBuilder {
        crate::types::builders::RoomBuilder::default()
    }
}

/// A builder for [`Room`](crate::types::Room).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RoomBuilder {
    pub(crate) room_arn: ::std::option::Option<::std::string::String>,
    pub(crate) room_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) provider_calendar_id: ::std::option::Option<::std::string::String>,
    pub(crate) profile_arn: ::std::option::Option<::std::string::String>,
}
impl RoomBuilder {
    /// <p>The ARN of a room.</p>
    pub fn room_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.room_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of a room.</p>
    pub fn set_room_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.room_arn = input;
        self
    }
    /// <p>The ARN of a room.</p>
    pub fn get_room_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.room_arn
    }
    /// <p>The name of a room.</p>
    pub fn room_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.room_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a room.</p>
    pub fn set_room_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.room_name = input;
        self
    }
    /// <p>The name of a room.</p>
    pub fn get_room_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.room_name
    }
    /// <p>The description of a room.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of a room.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of a room.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The provider calendar ARN of a room.</p>
    pub fn provider_calendar_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_calendar_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The provider calendar ARN of a room.</p>
    pub fn set_provider_calendar_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_calendar_id = input;
        self
    }
    /// <p>The provider calendar ARN of a room.</p>
    pub fn get_provider_calendar_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_calendar_id
    }
    /// <p>The profile ARN of a room.</p>
    pub fn profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The profile ARN of a room.</p>
    pub fn set_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_arn = input;
        self
    }
    /// <p>The profile ARN of a room.</p>
    pub fn get_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_arn
    }
    /// Consumes the builder and constructs a [`Room`](crate::types::Room).
    pub fn build(self) -> crate::types::Room {
        crate::types::Room {
            room_arn: self.room_arn,
            room_name: self.room_name,
            description: self.description,
            provider_calendar_id: self.provider_calendar_id,
            profile_arn: self.profile_arn,
        }
    }
}
