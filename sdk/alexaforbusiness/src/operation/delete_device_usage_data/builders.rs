// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_device_usage_data::_delete_device_usage_data_output::DeleteDeviceUsageDataOutputBuilder;

pub use crate::operation::delete_device_usage_data::_delete_device_usage_data_input::DeleteDeviceUsageDataInputBuilder;

impl DeleteDeviceUsageDataInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_device_usage_data::DeleteDeviceUsageDataOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_device_usage_data();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteDeviceUsageData`.
///
/// <p>When this action is called for a specified shared device, it allows authorized users to delete the device's entire previous history of voice input data and associated response data. This action can be called once every 24 hours for a specific shared device.</p>
#[deprecated(note = "Alexa For Business is no longer supported")]
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteDeviceUsageDataFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_device_usage_data::builders::DeleteDeviceUsageDataInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl DeleteDeviceUsageDataFluentBuilder {
    /// Creates a new `DeleteDeviceUsageData`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteDeviceUsageData as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_device_usage_data::builders::DeleteDeviceUsageDataInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_device_usage_data::DeleteDeviceUsageDataOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_device_usage_data::DeleteDeviceUsageData::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_device_usage_data::DeleteDeviceUsageData::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataOutput,
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn device_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.device_arn(input.into());
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn set_device_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_device_arn(input);
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn get_device_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_device_arn()
    }
    /// <p>The type of usage data to delete.</p>
    pub fn device_usage_type(mut self, input: crate::types::DeviceUsageType) -> Self {
        self.inner = self.inner.device_usage_type(input);
        self
    }
    /// <p>The type of usage data to delete.</p>
    pub fn set_device_usage_type(mut self, input: ::std::option::Option<crate::types::DeviceUsageType>) -> Self {
        self.inner = self.inner.set_device_usage_type(input);
        self
    }
    /// <p>The type of usage data to delete.</p>
    pub fn get_device_usage_type(&self) -> &::std::option::Option<crate::types::DeviceUsageType> {
        self.inner.get_device_usage_type()
    }
}
