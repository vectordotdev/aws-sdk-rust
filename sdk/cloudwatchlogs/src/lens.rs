// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_destinations_output_next_token(
    input: &crate::operation::describe_destinations::DescribeDestinationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_log_groups_output_next_token(
    input: &crate::operation::describe_log_groups::DescribeLogGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_log_streams_output_next_token(
    input: &crate::operation::describe_log_streams::DescribeLogStreamsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_metric_filters_output_next_token(
    input: &crate::operation::describe_metric_filters::DescribeMetricFiltersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_subscription_filters_output_next_token(
    input: &crate::operation::describe_subscription_filters::DescribeSubscriptionFiltersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_filter_log_events_output_next_token(
    input: &crate::operation::filter_log_events::FilterLogEventsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_log_events_output_next_forward_token(
    input: &crate::operation::get_log_events::GetLogEventsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_forward_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_destinations_output_destinations(
    input: crate::operation::describe_destinations::DescribeDestinationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Destination>> {
    let input = match input.destinations {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_log_groups_output_log_groups(
    input: crate::operation::describe_log_groups::DescribeLogGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LogGroup>> {
    let input = match input.log_groups {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_log_streams_output_log_streams(
    input: crate::operation::describe_log_streams::DescribeLogStreamsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LogStream>> {
    let input = match input.log_streams {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_metric_filters_output_metric_filters(
    input: crate::operation::describe_metric_filters::DescribeMetricFiltersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MetricFilter>> {
    let input = match input.metric_filters {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_subscription_filters_output_subscription_filters(
    input: crate::operation::describe_subscription_filters::DescribeSubscriptionFiltersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionFilter>> {
    let input = match input.subscription_filters {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_log_events_output_events(
    input: crate::operation::get_log_events::GetLogEventsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::OutputLogEvent>> {
    let input = match input.events {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
