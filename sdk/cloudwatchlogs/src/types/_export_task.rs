// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an export task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportTask {
    /// <p>The ID of the export task.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the export task.</p>
    pub task_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the log group from which logs data was exported.</p>
    pub log_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The start time, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp before this time are not exported.</p>
    pub from: ::std::option::Option<i64>,
    /// <p>The end time, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp later than this time are not exported.</p>
    pub to: ::std::option::Option<i64>,
    /// <p>The name of the S3 bucket to which the log data was exported.</p>
    pub destination: ::std::option::Option<::std::string::String>,
    /// <p>The prefix that was used as the start of Amazon S3 key for every object exported.</p>
    pub destination_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The status of the export task.</p>
    pub status: ::std::option::Option<crate::types::ExportTaskStatus>,
    /// <p>Execution information about the export task.</p>
    pub execution_info: ::std::option::Option<crate::types::ExportTaskExecutionInfo>,
}
impl ExportTask {
    /// <p>The ID of the export task.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The name of the export task.</p>
    pub fn task_name(&self) -> ::std::option::Option<&str> {
        self.task_name.as_deref()
    }
    /// <p>The name of the log group from which logs data was exported.</p>
    pub fn log_group_name(&self) -> ::std::option::Option<&str> {
        self.log_group_name.as_deref()
    }
    /// <p>The start time, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp before this time are not exported.</p>
    pub fn from(&self) -> ::std::option::Option<i64> {
        self.from
    }
    /// <p>The end time, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp later than this time are not exported.</p>
    pub fn to(&self) -> ::std::option::Option<i64> {
        self.to
    }
    /// <p>The name of the S3 bucket to which the log data was exported.</p>
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// <p>The prefix that was used as the start of Amazon S3 key for every object exported.</p>
    pub fn destination_prefix(&self) -> ::std::option::Option<&str> {
        self.destination_prefix.as_deref()
    }
    /// <p>The status of the export task.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ExportTaskStatus> {
        self.status.as_ref()
    }
    /// <p>Execution information about the export task.</p>
    pub fn execution_info(&self) -> ::std::option::Option<&crate::types::ExportTaskExecutionInfo> {
        self.execution_info.as_ref()
    }
}
impl ExportTask {
    /// Creates a new builder-style object to manufacture [`ExportTask`](crate::types::ExportTask).
    pub fn builder() -> crate::types::builders::ExportTaskBuilder {
        crate::types::builders::ExportTaskBuilder::default()
    }
}

/// A builder for [`ExportTask`](crate::types::ExportTask).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportTaskBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) task_name: ::std::option::Option<::std::string::String>,
    pub(crate) log_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) from: ::std::option::Option<i64>,
    pub(crate) to: ::std::option::Option<i64>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
    pub(crate) destination_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ExportTaskStatus>,
    pub(crate) execution_info: ::std::option::Option<crate::types::ExportTaskExecutionInfo>,
}
impl ExportTaskBuilder {
    /// <p>The ID of the export task.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the export task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The ID of the export task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The name of the export task.</p>
    pub fn task_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the export task.</p>
    pub fn set_task_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_name = input;
        self
    }
    /// <p>The name of the export task.</p>
    pub fn get_task_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_name
    }
    /// <p>The name of the log group from which logs data was exported.</p>
    pub fn log_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the log group from which logs data was exported.</p>
    pub fn set_log_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_name = input;
        self
    }
    /// <p>The name of the log group from which logs data was exported.</p>
    pub fn get_log_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_name
    }
    /// <p>The start time, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp before this time are not exported.</p>
    pub fn from(mut self, input: i64) -> Self {
        self.from = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp before this time are not exported.</p>
    pub fn set_from(mut self, input: ::std::option::Option<i64>) -> Self {
        self.from = input;
        self
    }
    /// <p>The start time, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp before this time are not exported.</p>
    pub fn get_from(&self) -> &::std::option::Option<i64> {
        &self.from
    }
    /// <p>The end time, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp later than this time are not exported.</p>
    pub fn to(mut self, input: i64) -> Self {
        self.to = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp later than this time are not exported.</p>
    pub fn set_to(mut self, input: ::std::option::Option<i64>) -> Self {
        self.to = input;
        self
    }
    /// <p>The end time, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>. Events with a timestamp later than this time are not exported.</p>
    pub fn get_to(&self) -> &::std::option::Option<i64> {
        &self.to
    }
    /// <p>The name of the S3 bucket to which the log data was exported.</p>
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket to which the log data was exported.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The name of the S3 bucket to which the log data was exported.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// <p>The prefix that was used as the start of Amazon S3 key for every object exported.</p>
    pub fn destination_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prefix that was used as the start of Amazon S3 key for every object exported.</p>
    pub fn set_destination_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_prefix = input;
        self
    }
    /// <p>The prefix that was used as the start of Amazon S3 key for every object exported.</p>
    pub fn get_destination_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_prefix
    }
    /// <p>The status of the export task.</p>
    pub fn status(mut self, input: crate::types::ExportTaskStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the export task.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ExportTaskStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the export task.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ExportTaskStatus> {
        &self.status
    }
    /// <p>Execution information about the export task.</p>
    pub fn execution_info(mut self, input: crate::types::ExportTaskExecutionInfo) -> Self {
        self.execution_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Execution information about the export task.</p>
    pub fn set_execution_info(mut self, input: ::std::option::Option<crate::types::ExportTaskExecutionInfo>) -> Self {
        self.execution_info = input;
        self
    }
    /// <p>Execution information about the export task.</p>
    pub fn get_execution_info(&self) -> &::std::option::Option<crate::types::ExportTaskExecutionInfo> {
        &self.execution_info
    }
    /// Consumes the builder and constructs a [`ExportTask`](crate::types::ExportTask).
    pub fn build(self) -> crate::types::ExportTask {
        crate::types::ExportTask {
            task_id: self.task_id,
            task_name: self.task_name,
            log_group_name: self.log_group_name,
            from: self.from,
            to: self.to,
            destination: self.destination,
            destination_prefix: self.destination_prefix,
            status: self.status,
            execution_info: self.execution_info,
        }
    }
}
