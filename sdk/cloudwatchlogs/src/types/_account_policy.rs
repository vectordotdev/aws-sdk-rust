// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains information about one CloudWatch Logs account policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountPolicy {
    /// <p>The name of the account policy.</p>
    pub policy_name: ::std::option::Option<::std::string::String>,
    /// <p>The policy document for this account policy.</p>
    /// <p>The JSON specified in <code>policyDocument</code> can be up to 30,720 characters.</p>
    pub policy_document: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that this policy was most recently updated.</p>
    pub last_updated_time: ::std::option::Option<i64>,
    /// <p>The type of policy for this account policy.</p>
    pub policy_type: ::std::option::Option<crate::types::PolicyType>,
    /// <p>The scope of the account policy.</p>
    pub scope: ::std::option::Option<crate::types::Scope>,
    /// <p>The Amazon Web Services account ID that the policy applies to.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
}
impl AccountPolicy {
    /// <p>The name of the account policy.</p>
    pub fn policy_name(&self) -> ::std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>The policy document for this account policy.</p>
    /// <p>The JSON specified in <code>policyDocument</code> can be up to 30,720 characters.</p>
    pub fn policy_document(&self) -> ::std::option::Option<&str> {
        self.policy_document.as_deref()
    }
    /// <p>The date and time that this policy was most recently updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<i64> {
        self.last_updated_time
    }
    /// <p>The type of policy for this account policy.</p>
    pub fn policy_type(&self) -> ::std::option::Option<&crate::types::PolicyType> {
        self.policy_type.as_ref()
    }
    /// <p>The scope of the account policy.</p>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::Scope> {
        self.scope.as_ref()
    }
    /// <p>The Amazon Web Services account ID that the policy applies to.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
}
impl AccountPolicy {
    /// Creates a new builder-style object to manufacture [`AccountPolicy`](crate::types::AccountPolicy).
    pub fn builder() -> crate::types::builders::AccountPolicyBuilder {
        crate::types::builders::AccountPolicyBuilder::default()
    }
}

/// A builder for [`AccountPolicy`](crate::types::AccountPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccountPolicyBuilder {
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) policy_document: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_time: ::std::option::Option<i64>,
    pub(crate) policy_type: ::std::option::Option<crate::types::PolicyType>,
    pub(crate) scope: ::std::option::Option<crate::types::Scope>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
}
impl AccountPolicyBuilder {
    /// <p>The name of the account policy.</p>
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the account policy.</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The name of the account policy.</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// <p>The policy document for this account policy.</p>
    /// <p>The JSON specified in <code>policyDocument</code> can be up to 30,720 characters.</p>
    pub fn policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The policy document for this account policy.</p>
    /// <p>The JSON specified in <code>policyDocument</code> can be up to 30,720 characters.</p>
    pub fn set_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_document = input;
        self
    }
    /// <p>The policy document for this account policy.</p>
    /// <p>The JSON specified in <code>policyDocument</code> can be up to 30,720 characters.</p>
    pub fn get_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_document
    }
    /// <p>The date and time that this policy was most recently updated.</p>
    pub fn last_updated_time(mut self, input: i64) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that this policy was most recently updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The date and time that this policy was most recently updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<i64> {
        &self.last_updated_time
    }
    /// <p>The type of policy for this account policy.</p>
    pub fn policy_type(mut self, input: crate::types::PolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of policy for this account policy.</p>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::PolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>The type of policy for this account policy.</p>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::PolicyType> {
        &self.policy_type
    }
    /// <p>The scope of the account policy.</p>
    pub fn scope(mut self, input: crate::types::Scope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scope of the account policy.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::Scope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The scope of the account policy.</p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::Scope> {
        &self.scope
    }
    /// <p>The Amazon Web Services account ID that the policy applies to.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that the policy applies to.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that the policy applies to.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Consumes the builder and constructs a [`AccountPolicy`](crate::types::AccountPolicy).
    pub fn build(self) -> crate::types::AccountPolicy {
        crate::types::AccountPolicy {
            policy_name: self.policy_name,
            policy_document: self.policy_document,
            last_updated_time: self.last_updated_time,
            policy_type: self.policy_type,
            scope: self.scope,
            account_id: self.account_id,
        }
    }
}
