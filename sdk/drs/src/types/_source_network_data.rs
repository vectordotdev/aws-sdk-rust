// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties of Source Network related to a job event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceNetworkData {
    /// <p>Source Network ID.</p>
    pub source_network_id: ::std::option::Option<::std::string::String>,
    /// <p>VPC ID protected by the Source Network.</p>
    pub source_vpc: ::std::option::Option<::std::string::String>,
    /// <p>ID of the recovered VPC following Source Network recovery.</p>
    pub target_vpc: ::std::option::Option<::std::string::String>,
    /// <p>CloudFormation stack name that was deployed for recovering the Source Network.</p>
    pub stack_name: ::std::option::Option<::std::string::String>,
}
impl SourceNetworkData {
    /// <p>Source Network ID.</p>
    pub fn source_network_id(&self) -> ::std::option::Option<&str> {
        self.source_network_id.as_deref()
    }
    /// <p>VPC ID protected by the Source Network.</p>
    pub fn source_vpc(&self) -> ::std::option::Option<&str> {
        self.source_vpc.as_deref()
    }
    /// <p>ID of the recovered VPC following Source Network recovery.</p>
    pub fn target_vpc(&self) -> ::std::option::Option<&str> {
        self.target_vpc.as_deref()
    }
    /// <p>CloudFormation stack name that was deployed for recovering the Source Network.</p>
    pub fn stack_name(&self) -> ::std::option::Option<&str> {
        self.stack_name.as_deref()
    }
}
impl SourceNetworkData {
    /// Creates a new builder-style object to manufacture [`SourceNetworkData`](crate::types::SourceNetworkData).
    pub fn builder() -> crate::types::builders::SourceNetworkDataBuilder {
        crate::types::builders::SourceNetworkDataBuilder::default()
    }
}

/// A builder for [`SourceNetworkData`](crate::types::SourceNetworkData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SourceNetworkDataBuilder {
    pub(crate) source_network_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_vpc: ::std::option::Option<::std::string::String>,
    pub(crate) target_vpc: ::std::option::Option<::std::string::String>,
    pub(crate) stack_name: ::std::option::Option<::std::string::String>,
}
impl SourceNetworkDataBuilder {
    /// <p>Source Network ID.</p>
    pub fn source_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source Network ID.</p>
    pub fn set_source_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_network_id = input;
        self
    }
    /// <p>Source Network ID.</p>
    pub fn get_source_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_network_id
    }
    /// <p>VPC ID protected by the Source Network.</p>
    pub fn source_vpc(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_vpc = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>VPC ID protected by the Source Network.</p>
    pub fn set_source_vpc(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_vpc = input;
        self
    }
    /// <p>VPC ID protected by the Source Network.</p>
    pub fn get_source_vpc(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_vpc
    }
    /// <p>ID of the recovered VPC following Source Network recovery.</p>
    pub fn target_vpc(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_vpc = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the recovered VPC following Source Network recovery.</p>
    pub fn set_target_vpc(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_vpc = input;
        self
    }
    /// <p>ID of the recovered VPC following Source Network recovery.</p>
    pub fn get_target_vpc(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_vpc
    }
    /// <p>CloudFormation stack name that was deployed for recovering the Source Network.</p>
    pub fn stack_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>CloudFormation stack name that was deployed for recovering the Source Network.</p>
    pub fn set_stack_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_name = input;
        self
    }
    /// <p>CloudFormation stack name that was deployed for recovering the Source Network.</p>
    pub fn get_stack_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_name
    }
    /// Consumes the builder and constructs a [`SourceNetworkData`](crate::types::SourceNetworkData).
    pub fn build(self) -> crate::types::SourceNetworkData {
        crate::types::SourceNetworkData {
            source_network_id: self.source_network_id,
            source_vpc: self.source_vpc,
            target_vpc: self.target_vpc,
            stack_name: self.stack_name,
        }
    }
}
