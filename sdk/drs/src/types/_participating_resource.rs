// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a resource participating in an asynchronous Job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParticipatingResource {
    /// <p>The ID of a participating resource.</p>
    pub participating_resource_id: ::std::option::Option<crate::types::ParticipatingResourceId>,
    /// <p>The launch status of a participating resource.</p>
    pub launch_status: ::std::option::Option<crate::types::LaunchStatus>,
}
impl ParticipatingResource {
    /// <p>The ID of a participating resource.</p>
    pub fn participating_resource_id(&self) -> ::std::option::Option<&crate::types::ParticipatingResourceId> {
        self.participating_resource_id.as_ref()
    }
    /// <p>The launch status of a participating resource.</p>
    pub fn launch_status(&self) -> ::std::option::Option<&crate::types::LaunchStatus> {
        self.launch_status.as_ref()
    }
}
impl ParticipatingResource {
    /// Creates a new builder-style object to manufacture [`ParticipatingResource`](crate::types::ParticipatingResource).
    pub fn builder() -> crate::types::builders::ParticipatingResourceBuilder {
        crate::types::builders::ParticipatingResourceBuilder::default()
    }
}

/// A builder for [`ParticipatingResource`](crate::types::ParticipatingResource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParticipatingResourceBuilder {
    pub(crate) participating_resource_id: ::std::option::Option<crate::types::ParticipatingResourceId>,
    pub(crate) launch_status: ::std::option::Option<crate::types::LaunchStatus>,
}
impl ParticipatingResourceBuilder {
    /// <p>The ID of a participating resource.</p>
    pub fn participating_resource_id(mut self, input: crate::types::ParticipatingResourceId) -> Self {
        self.participating_resource_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of a participating resource.</p>
    pub fn set_participating_resource_id(mut self, input: ::std::option::Option<crate::types::ParticipatingResourceId>) -> Self {
        self.participating_resource_id = input;
        self
    }
    /// <p>The ID of a participating resource.</p>
    pub fn get_participating_resource_id(&self) -> &::std::option::Option<crate::types::ParticipatingResourceId> {
        &self.participating_resource_id
    }
    /// <p>The launch status of a participating resource.</p>
    pub fn launch_status(mut self, input: crate::types::LaunchStatus) -> Self {
        self.launch_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The launch status of a participating resource.</p>
    pub fn set_launch_status(mut self, input: ::std::option::Option<crate::types::LaunchStatus>) -> Self {
        self.launch_status = input;
        self
    }
    /// <p>The launch status of a participating resource.</p>
    pub fn get_launch_status(&self) -> &::std::option::Option<crate::types::LaunchStatus> {
        &self.launch_status
    }
    /// Consumes the builder and constructs a [`ParticipatingResource`](crate::types::ParticipatingResource).
    pub fn build(self) -> crate::types::ParticipatingResource {
        crate::types::ParticipatingResource {
            participating_resource_id: self.participating_resource_id,
            launch_status: self.launch_status,
        }
    }
}
