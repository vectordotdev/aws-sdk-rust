// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information for a set of featured results. Featured results are placed above all other results for certain queries. If there's an exact match of a query, then one or more specific documents are featured in the search results.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FeaturedResultsSetSummary {
    /// <p>The identifier of the set of featured results.</p>
    pub featured_results_set_id: ::std::option::Option<::std::string::String>,
    /// <p>The name for the set of featured results.</p>
    pub featured_results_set_name: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the set of featured results. When the value is <code>ACTIVE</code>, featured results are ready for use. You can still configure your settings before setting the status to <code>ACTIVE</code>. You can set the status to <code>ACTIVE</code> or <code>INACTIVE</code> using the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateFeaturedResultsSet.html">UpdateFeaturedResultsSet</a> API. The queries you specify for featured results must be unique per featured results set for each index, whether the status is <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub status: ::std::option::Option<crate::types::FeaturedResultsSetStatus>,
    /// <p>The Unix timestamp when the set of featured results was last updated.</p>
    pub last_updated_timestamp: ::std::option::Option<i64>,
    /// <p>The Unix timestamp when the set of featured results was created.</p>
    pub creation_timestamp: ::std::option::Option<i64>,
}
impl FeaturedResultsSetSummary {
    /// <p>The identifier of the set of featured results.</p>
    pub fn featured_results_set_id(&self) -> ::std::option::Option<&str> {
        self.featured_results_set_id.as_deref()
    }
    /// <p>The name for the set of featured results.</p>
    pub fn featured_results_set_name(&self) -> ::std::option::Option<&str> {
        self.featured_results_set_name.as_deref()
    }
    /// <p>The current status of the set of featured results. When the value is <code>ACTIVE</code>, featured results are ready for use. You can still configure your settings before setting the status to <code>ACTIVE</code>. You can set the status to <code>ACTIVE</code> or <code>INACTIVE</code> using the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateFeaturedResultsSet.html">UpdateFeaturedResultsSet</a> API. The queries you specify for featured results must be unique per featured results set for each index, whether the status is <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FeaturedResultsSetStatus> {
        self.status.as_ref()
    }
    /// <p>The Unix timestamp when the set of featured results was last updated.</p>
    pub fn last_updated_timestamp(&self) -> ::std::option::Option<i64> {
        self.last_updated_timestamp
    }
    /// <p>The Unix timestamp when the set of featured results was created.</p>
    pub fn creation_timestamp(&self) -> ::std::option::Option<i64> {
        self.creation_timestamp
    }
}
impl FeaturedResultsSetSummary {
    /// Creates a new builder-style object to manufacture [`FeaturedResultsSetSummary`](crate::types::FeaturedResultsSetSummary).
    pub fn builder() -> crate::types::builders::FeaturedResultsSetSummaryBuilder {
        crate::types::builders::FeaturedResultsSetSummaryBuilder::default()
    }
}

/// A builder for [`FeaturedResultsSetSummary`](crate::types::FeaturedResultsSetSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FeaturedResultsSetSummaryBuilder {
    pub(crate) featured_results_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) featured_results_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::FeaturedResultsSetStatus>,
    pub(crate) last_updated_timestamp: ::std::option::Option<i64>,
    pub(crate) creation_timestamp: ::std::option::Option<i64>,
}
impl FeaturedResultsSetSummaryBuilder {
    /// <p>The identifier of the set of featured results.</p>
    pub fn featured_results_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.featured_results_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the set of featured results.</p>
    pub fn set_featured_results_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.featured_results_set_id = input;
        self
    }
    /// <p>The identifier of the set of featured results.</p>
    pub fn get_featured_results_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.featured_results_set_id
    }
    /// <p>The name for the set of featured results.</p>
    pub fn featured_results_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.featured_results_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the set of featured results.</p>
    pub fn set_featured_results_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.featured_results_set_name = input;
        self
    }
    /// <p>The name for the set of featured results.</p>
    pub fn get_featured_results_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.featured_results_set_name
    }
    /// <p>The current status of the set of featured results. When the value is <code>ACTIVE</code>, featured results are ready for use. You can still configure your settings before setting the status to <code>ACTIVE</code>. You can set the status to <code>ACTIVE</code> or <code>INACTIVE</code> using the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateFeaturedResultsSet.html">UpdateFeaturedResultsSet</a> API. The queries you specify for featured results must be unique per featured results set for each index, whether the status is <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn status(mut self, input: crate::types::FeaturedResultsSetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the set of featured results. When the value is <code>ACTIVE</code>, featured results are ready for use. You can still configure your settings before setting the status to <code>ACTIVE</code>. You can set the status to <code>ACTIVE</code> or <code>INACTIVE</code> using the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateFeaturedResultsSet.html">UpdateFeaturedResultsSet</a> API. The queries you specify for featured results must be unique per featured results set for each index, whether the status is <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FeaturedResultsSetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the set of featured results. When the value is <code>ACTIVE</code>, featured results are ready for use. You can still configure your settings before setting the status to <code>ACTIVE</code>. You can set the status to <code>ACTIVE</code> or <code>INACTIVE</code> using the <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateFeaturedResultsSet.html">UpdateFeaturedResultsSet</a> API. The queries you specify for featured results must be unique per featured results set for each index, whether the status is <code>ACTIVE</code> or <code>INACTIVE</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FeaturedResultsSetStatus> {
        &self.status
    }
    /// <p>The Unix timestamp when the set of featured results was last updated.</p>
    pub fn last_updated_timestamp(mut self, input: i64) -> Self {
        self.last_updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the set of featured results was last updated.</p>
    pub fn set_last_updated_timestamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_updated_timestamp = input;
        self
    }
    /// <p>The Unix timestamp when the set of featured results was last updated.</p>
    pub fn get_last_updated_timestamp(&self) -> &::std::option::Option<i64> {
        &self.last_updated_timestamp
    }
    /// <p>The Unix timestamp when the set of featured results was created.</p>
    pub fn creation_timestamp(mut self, input: i64) -> Self {
        self.creation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the set of featured results was created.</p>
    pub fn set_creation_timestamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// <p>The Unix timestamp when the set of featured results was created.</p>
    pub fn get_creation_timestamp(&self) -> &::std::option::Option<i64> {
        &self.creation_timestamp
    }
    /// Consumes the builder and constructs a [`FeaturedResultsSetSummary`](crate::types::FeaturedResultsSetSummary).
    pub fn build(self) -> crate::types::FeaturedResultsSetSummary {
        crate::types::FeaturedResultsSetSummary {
            featured_results_set_id: self.featured_results_set_id,
            featured_results_set_name: self.featured_results_set_name,
            status: self.status,
            last_updated_timestamp: self.last_updated_timestamp,
            creation_timestamp: self.creation_timestamp,
        }
    }
}
