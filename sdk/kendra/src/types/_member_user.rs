// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The users that belong to a group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MemberUser {
    /// <p>The identifier of the user you want to map to a group.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
}
impl MemberUser {
    /// <p>The identifier of the user you want to map to a group.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
}
impl MemberUser {
    /// Creates a new builder-style object to manufacture [`MemberUser`](crate::types::MemberUser).
    pub fn builder() -> crate::types::builders::MemberUserBuilder {
        crate::types::builders::MemberUserBuilder::default()
    }
}

/// A builder for [`MemberUser`](crate::types::MemberUser).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MemberUserBuilder {
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
}
impl MemberUserBuilder {
    /// <p>The identifier of the user you want to map to a group.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user you want to map to a group.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The identifier of the user you want to map to a group.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Consumes the builder and constructs a [`MemberUser`](crate::types::MemberUser).
    pub fn build(self) -> crate::types::MemberUser {
        crate::types::MemberUser { user_id: self.user_id }
    }
}
