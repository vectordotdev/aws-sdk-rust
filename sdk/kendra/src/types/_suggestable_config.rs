// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the configuration information for a document field/attribute that you want to base query suggestions on.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SuggestableConfig {
    /// <p>The name of the document field/attribute.</p>
    pub attribute_name: ::std::option::Option<::std::string::String>,
    /// <p> <code>TRUE</code> means the document field/attribute is suggestible, so the contents within the field can be used for query suggestions.</p>
    pub suggestable: ::std::option::Option<bool>,
}
impl SuggestableConfig {
    /// <p>The name of the document field/attribute.</p>
    pub fn attribute_name(&self) -> ::std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
    /// <p> <code>TRUE</code> means the document field/attribute is suggestible, so the contents within the field can be used for query suggestions.</p>
    pub fn suggestable(&self) -> ::std::option::Option<bool> {
        self.suggestable
    }
}
impl SuggestableConfig {
    /// Creates a new builder-style object to manufacture [`SuggestableConfig`](crate::types::SuggestableConfig).
    pub fn builder() -> crate::types::builders::SuggestableConfigBuilder {
        crate::types::builders::SuggestableConfigBuilder::default()
    }
}

/// A builder for [`SuggestableConfig`](crate::types::SuggestableConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SuggestableConfigBuilder {
    pub(crate) attribute_name: ::std::option::Option<::std::string::String>,
    pub(crate) suggestable: ::std::option::Option<bool>,
}
impl SuggestableConfigBuilder {
    /// <p>The name of the document field/attribute.</p>
    pub fn attribute_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the document field/attribute.</p>
    pub fn set_attribute_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The name of the document field/attribute.</p>
    pub fn get_attribute_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_name
    }
    /// <p> <code>TRUE</code> means the document field/attribute is suggestible, so the contents within the field can be used for query suggestions.</p>
    pub fn suggestable(mut self, input: bool) -> Self {
        self.suggestable = ::std::option::Option::Some(input);
        self
    }
    /// <p> <code>TRUE</code> means the document field/attribute is suggestible, so the contents within the field can be used for query suggestions.</p>
    pub fn set_suggestable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.suggestable = input;
        self
    }
    /// <p> <code>TRUE</code> means the document field/attribute is suggestible, so the contents within the field can be used for query suggestions.</p>
    pub fn get_suggestable(&self) -> &::std::option::Option<bool> {
        &self.suggestable
    }
    /// Consumes the builder and constructs a [`SuggestableConfig`](crate::types::SuggestableConfig).
    pub fn build(self) -> crate::types::SuggestableConfig {
        crate::types::SuggestableConfig {
            attribute_name: self.attribute_name,
            suggestable: self.suggestable,
        }
    }
}
