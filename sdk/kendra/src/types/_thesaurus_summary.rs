// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An array of summary information for a thesaurus or multiple thesauri.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ThesaurusSummary {
    /// <p>The identifier of the thesaurus.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the thesaurus.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the thesaurus.</p>
    pub status: ::std::option::Option<crate::types::ThesaurusStatus>,
    /// <p>The Unix timestamp when the thesaurus was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Unix timestamp when the thesaurus was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ThesaurusSummary {
    /// <p>The identifier of the thesaurus.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the thesaurus.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of the thesaurus.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ThesaurusStatus> {
        self.status.as_ref()
    }
    /// <p>The Unix timestamp when the thesaurus was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Unix timestamp when the thesaurus was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ThesaurusSummary {
    /// Creates a new builder-style object to manufacture [`ThesaurusSummary`](crate::types::ThesaurusSummary).
    pub fn builder() -> crate::types::builders::ThesaurusSummaryBuilder {
        crate::types::builders::ThesaurusSummaryBuilder::default()
    }
}

/// A builder for [`ThesaurusSummary`](crate::types::ThesaurusSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ThesaurusSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ThesaurusStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ThesaurusSummaryBuilder {
    /// <p>The identifier of the thesaurus.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the thesaurus.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the thesaurus.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the thesaurus.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the thesaurus.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the thesaurus.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the thesaurus.</p>
    pub fn status(mut self, input: crate::types::ThesaurusStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the thesaurus.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ThesaurusStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the thesaurus.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ThesaurusStatus> {
        &self.status
    }
    /// <p>The Unix timestamp when the thesaurus was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the thesaurus was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix timestamp when the thesaurus was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The Unix timestamp when the thesaurus was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the thesaurus was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The Unix timestamp when the thesaurus was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`ThesaurusSummary`](crate::types::ThesaurusSummary).
    pub fn build(self) -> crate::types::ThesaurusSummary {
        crate::types::ThesaurusSummary {
            id: self.id,
            name: self.name,
            status: self.status,
            created_at: self.created_at,
            updated_at: self.updated_at,
        }
    }
}
