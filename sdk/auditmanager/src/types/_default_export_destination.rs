// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The default s3 bucket where Audit Manager saves the files that you export from evidence finder.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefaultExportDestination {
    /// <p>The destination type, such as Amazon S3.</p>
    pub destination_type: ::std::option::Option<crate::types::ExportDestinationType>,
    /// <p>The destination bucket where Audit Manager stores exported files.</p>
    pub destination: ::std::option::Option<::std::string::String>,
}
impl DefaultExportDestination {
    /// <p>The destination type, such as Amazon S3.</p>
    pub fn destination_type(&self) -> ::std::option::Option<&crate::types::ExportDestinationType> {
        self.destination_type.as_ref()
    }
    /// <p>The destination bucket where Audit Manager stores exported files.</p>
    pub fn destination(&self) -> ::std::option::Option<&str> {
        self.destination.as_deref()
    }
}
impl DefaultExportDestination {
    /// Creates a new builder-style object to manufacture [`DefaultExportDestination`](crate::types::DefaultExportDestination).
    pub fn builder() -> crate::types::builders::DefaultExportDestinationBuilder {
        crate::types::builders::DefaultExportDestinationBuilder::default()
    }
}

/// A builder for [`DefaultExportDestination`](crate::types::DefaultExportDestination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DefaultExportDestinationBuilder {
    pub(crate) destination_type: ::std::option::Option<crate::types::ExportDestinationType>,
    pub(crate) destination: ::std::option::Option<::std::string::String>,
}
impl DefaultExportDestinationBuilder {
    /// <p>The destination type, such as Amazon S3.</p>
    pub fn destination_type(mut self, input: crate::types::ExportDestinationType) -> Self {
        self.destination_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination type, such as Amazon S3.</p>
    pub fn set_destination_type(mut self, input: ::std::option::Option<crate::types::ExportDestinationType>) -> Self {
        self.destination_type = input;
        self
    }
    /// <p>The destination type, such as Amazon S3.</p>
    pub fn get_destination_type(&self) -> &::std::option::Option<crate::types::ExportDestinationType> {
        &self.destination_type
    }
    /// <p>The destination bucket where Audit Manager stores exported files.</p>
    pub fn destination(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination bucket where Audit Manager stores exported files.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// <p>The destination bucket where Audit Manager stores exported files.</p>
    pub fn get_destination(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination
    }
    /// Consumes the builder and constructs a [`DefaultExportDestination`](crate::types::DefaultExportDestination).
    pub fn build(self) -> crate::types::DefaultExportDestination {
        crate::types::DefaultExportDestination {
            destination_type: self.destination_type,
            destination: self.destination,
        }
    }
}
