// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The folder where Audit Manager stores evidence for an assessment. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssessmentEvidenceFolder {
    /// <p> The name of the evidence folder. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The date when the first evidence was added to the evidence folder. </p>
    pub date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The identifier for the assessment. </p>
    pub assessment_id: ::std::option::Option<::std::string::String>,
    /// <p> The identifier for the control set. </p>
    pub control_set_id: ::std::option::Option<::std::string::String>,
    /// <p> The unique identifier for the control. </p>
    pub control_id: ::std::option::Option<::std::string::String>,
    /// <p> The identifier for the folder that the evidence is stored in. </p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon Web Service that the evidence was collected from. </p>
    pub data_source: ::std::option::Option<::std::string::String>,
    /// <p> The name of the user who created the evidence folder. </p>
    pub author: ::std::option::Option<::std::string::String>,
    /// <p> The total amount of evidence in the evidence folder. </p>
    pub total_evidence: i32,
    /// <p> The total count of evidence that's included in the assessment report. </p>
    pub assessment_report_selection_count: i32,
    /// <p> The name of the control. </p>
    pub control_name: ::std::option::Option<::std::string::String>,
    /// <p> The amount of evidence that's included in the evidence folder. </p>
    pub evidence_resources_included_count: i32,
    /// <p> The number of evidence that falls under the configuration data category. This evidence is collected from configuration snapshots of other Amazon Web Services such as Amazon EC2, Amazon S3, or IAM. </p>
    pub evidence_by_type_configuration_data_count: i32,
    /// <p> The number of evidence that falls under the manual category. This evidence is imported manually. </p>
    pub evidence_by_type_manual_count: i32,
    /// <p> The number of evidence that falls under the compliance check category. This evidence is collected from Config or Security Hub. </p>
    pub evidence_by_type_compliance_check_count: i32,
    /// <p> The total number of issues that were reported directly from Security Hub, Config, or both. </p>
    pub evidence_by_type_compliance_check_issues_count: i32,
    /// <p> The number of evidence that falls under the user activity category. This evidence is collected from CloudTrail logs. </p>
    pub evidence_by_type_user_activity_count: i32,
    /// <p> The total number of Amazon Web Services resources that were assessed to generate the evidence. </p>
    pub evidence_aws_service_source_count: i32,
}
impl AssessmentEvidenceFolder {
    /// <p> The name of the evidence folder. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The date when the first evidence was added to the evidence folder. </p>
    pub fn date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date.as_ref()
    }
    /// <p> The identifier for the assessment. </p>
    pub fn assessment_id(&self) -> ::std::option::Option<&str> {
        self.assessment_id.as_deref()
    }
    /// <p> The identifier for the control set. </p>
    pub fn control_set_id(&self) -> ::std::option::Option<&str> {
        self.control_set_id.as_deref()
    }
    /// <p> The unique identifier for the control. </p>
    pub fn control_id(&self) -> ::std::option::Option<&str> {
        self.control_id.as_deref()
    }
    /// <p> The identifier for the folder that the evidence is stored in. </p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p> The Amazon Web Service that the evidence was collected from. </p>
    pub fn data_source(&self) -> ::std::option::Option<&str> {
        self.data_source.as_deref()
    }
    /// <p> The name of the user who created the evidence folder. </p>
    pub fn author(&self) -> ::std::option::Option<&str> {
        self.author.as_deref()
    }
    /// <p> The total amount of evidence in the evidence folder. </p>
    pub fn total_evidence(&self) -> i32 {
        self.total_evidence
    }
    /// <p> The total count of evidence that's included in the assessment report. </p>
    pub fn assessment_report_selection_count(&self) -> i32 {
        self.assessment_report_selection_count
    }
    /// <p> The name of the control. </p>
    pub fn control_name(&self) -> ::std::option::Option<&str> {
        self.control_name.as_deref()
    }
    /// <p> The amount of evidence that's included in the evidence folder. </p>
    pub fn evidence_resources_included_count(&self) -> i32 {
        self.evidence_resources_included_count
    }
    /// <p> The number of evidence that falls under the configuration data category. This evidence is collected from configuration snapshots of other Amazon Web Services such as Amazon EC2, Amazon S3, or IAM. </p>
    pub fn evidence_by_type_configuration_data_count(&self) -> i32 {
        self.evidence_by_type_configuration_data_count
    }
    /// <p> The number of evidence that falls under the manual category. This evidence is imported manually. </p>
    pub fn evidence_by_type_manual_count(&self) -> i32 {
        self.evidence_by_type_manual_count
    }
    /// <p> The number of evidence that falls under the compliance check category. This evidence is collected from Config or Security Hub. </p>
    pub fn evidence_by_type_compliance_check_count(&self) -> i32 {
        self.evidence_by_type_compliance_check_count
    }
    /// <p> The total number of issues that were reported directly from Security Hub, Config, or both. </p>
    pub fn evidence_by_type_compliance_check_issues_count(&self) -> i32 {
        self.evidence_by_type_compliance_check_issues_count
    }
    /// <p> The number of evidence that falls under the user activity category. This evidence is collected from CloudTrail logs. </p>
    pub fn evidence_by_type_user_activity_count(&self) -> i32 {
        self.evidence_by_type_user_activity_count
    }
    /// <p> The total number of Amazon Web Services resources that were assessed to generate the evidence. </p>
    pub fn evidence_aws_service_source_count(&self) -> i32 {
        self.evidence_aws_service_source_count
    }
}
impl AssessmentEvidenceFolder {
    /// Creates a new builder-style object to manufacture [`AssessmentEvidenceFolder`](crate::types::AssessmentEvidenceFolder).
    pub fn builder() -> crate::types::builders::AssessmentEvidenceFolderBuilder {
        crate::types::builders::AssessmentEvidenceFolderBuilder::default()
    }
}

/// A builder for [`AssessmentEvidenceFolder`](crate::types::AssessmentEvidenceFolder).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssessmentEvidenceFolderBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) assessment_id: ::std::option::Option<::std::string::String>,
    pub(crate) control_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) control_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source: ::std::option::Option<::std::string::String>,
    pub(crate) author: ::std::option::Option<::std::string::String>,
    pub(crate) total_evidence: ::std::option::Option<i32>,
    pub(crate) assessment_report_selection_count: ::std::option::Option<i32>,
    pub(crate) control_name: ::std::option::Option<::std::string::String>,
    pub(crate) evidence_resources_included_count: ::std::option::Option<i32>,
    pub(crate) evidence_by_type_configuration_data_count: ::std::option::Option<i32>,
    pub(crate) evidence_by_type_manual_count: ::std::option::Option<i32>,
    pub(crate) evidence_by_type_compliance_check_count: ::std::option::Option<i32>,
    pub(crate) evidence_by_type_compliance_check_issues_count: ::std::option::Option<i32>,
    pub(crate) evidence_by_type_user_activity_count: ::std::option::Option<i32>,
    pub(crate) evidence_aws_service_source_count: ::std::option::Option<i32>,
}
impl AssessmentEvidenceFolderBuilder {
    /// <p> The name of the evidence folder. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the evidence folder. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of the evidence folder. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The date when the first evidence was added to the evidence folder. </p>
    pub fn date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date = ::std::option::Option::Some(input);
        self
    }
    /// <p> The date when the first evidence was added to the evidence folder. </p>
    pub fn set_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date = input;
        self
    }
    /// <p> The date when the first evidence was added to the evidence folder. </p>
    pub fn get_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date
    }
    /// <p> The identifier for the assessment. </p>
    pub fn assessment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assessment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The identifier for the assessment. </p>
    pub fn set_assessment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assessment_id = input;
        self
    }
    /// <p> The identifier for the assessment. </p>
    pub fn get_assessment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assessment_id
    }
    /// <p> The identifier for the control set. </p>
    pub fn control_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.control_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The identifier for the control set. </p>
    pub fn set_control_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.control_set_id = input;
        self
    }
    /// <p> The identifier for the control set. </p>
    pub fn get_control_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.control_set_id
    }
    /// <p> The unique identifier for the control. </p>
    pub fn control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.control_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique identifier for the control. </p>
    pub fn set_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.control_id = input;
        self
    }
    /// <p> The unique identifier for the control. </p>
    pub fn get_control_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.control_id
    }
    /// <p> The identifier for the folder that the evidence is stored in. </p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The identifier for the folder that the evidence is stored in. </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p> The identifier for the folder that the evidence is stored in. </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p> The Amazon Web Service that the evidence was collected from. </p>
    pub fn data_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Web Service that the evidence was collected from. </p>
    pub fn set_data_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source = input;
        self
    }
    /// <p> The Amazon Web Service that the evidence was collected from. </p>
    pub fn get_data_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source
    }
    /// <p> The name of the user who created the evidence folder. </p>
    pub fn author(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.author = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the user who created the evidence folder. </p>
    pub fn set_author(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.author = input;
        self
    }
    /// <p> The name of the user who created the evidence folder. </p>
    pub fn get_author(&self) -> &::std::option::Option<::std::string::String> {
        &self.author
    }
    /// <p> The total amount of evidence in the evidence folder. </p>
    pub fn total_evidence(mut self, input: i32) -> Self {
        self.total_evidence = ::std::option::Option::Some(input);
        self
    }
    /// <p> The total amount of evidence in the evidence folder. </p>
    pub fn set_total_evidence(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_evidence = input;
        self
    }
    /// <p> The total amount of evidence in the evidence folder. </p>
    pub fn get_total_evidence(&self) -> &::std::option::Option<i32> {
        &self.total_evidence
    }
    /// <p> The total count of evidence that's included in the assessment report. </p>
    pub fn assessment_report_selection_count(mut self, input: i32) -> Self {
        self.assessment_report_selection_count = ::std::option::Option::Some(input);
        self
    }
    /// <p> The total count of evidence that's included in the assessment report. </p>
    pub fn set_assessment_report_selection_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.assessment_report_selection_count = input;
        self
    }
    /// <p> The total count of evidence that's included in the assessment report. </p>
    pub fn get_assessment_report_selection_count(&self) -> &::std::option::Option<i32> {
        &self.assessment_report_selection_count
    }
    /// <p> The name of the control. </p>
    pub fn control_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.control_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the control. </p>
    pub fn set_control_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.control_name = input;
        self
    }
    /// <p> The name of the control. </p>
    pub fn get_control_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.control_name
    }
    /// <p> The amount of evidence that's included in the evidence folder. </p>
    pub fn evidence_resources_included_count(mut self, input: i32) -> Self {
        self.evidence_resources_included_count = ::std::option::Option::Some(input);
        self
    }
    /// <p> The amount of evidence that's included in the evidence folder. </p>
    pub fn set_evidence_resources_included_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evidence_resources_included_count = input;
        self
    }
    /// <p> The amount of evidence that's included in the evidence folder. </p>
    pub fn get_evidence_resources_included_count(&self) -> &::std::option::Option<i32> {
        &self.evidence_resources_included_count
    }
    /// <p> The number of evidence that falls under the configuration data category. This evidence is collected from configuration snapshots of other Amazon Web Services such as Amazon EC2, Amazon S3, or IAM. </p>
    pub fn evidence_by_type_configuration_data_count(mut self, input: i32) -> Self {
        self.evidence_by_type_configuration_data_count = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of evidence that falls under the configuration data category. This evidence is collected from configuration snapshots of other Amazon Web Services such as Amazon EC2, Amazon S3, or IAM. </p>
    pub fn set_evidence_by_type_configuration_data_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evidence_by_type_configuration_data_count = input;
        self
    }
    /// <p> The number of evidence that falls under the configuration data category. This evidence is collected from configuration snapshots of other Amazon Web Services such as Amazon EC2, Amazon S3, or IAM. </p>
    pub fn get_evidence_by_type_configuration_data_count(&self) -> &::std::option::Option<i32> {
        &self.evidence_by_type_configuration_data_count
    }
    /// <p> The number of evidence that falls under the manual category. This evidence is imported manually. </p>
    pub fn evidence_by_type_manual_count(mut self, input: i32) -> Self {
        self.evidence_by_type_manual_count = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of evidence that falls under the manual category. This evidence is imported manually. </p>
    pub fn set_evidence_by_type_manual_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evidence_by_type_manual_count = input;
        self
    }
    /// <p> The number of evidence that falls under the manual category. This evidence is imported manually. </p>
    pub fn get_evidence_by_type_manual_count(&self) -> &::std::option::Option<i32> {
        &self.evidence_by_type_manual_count
    }
    /// <p> The number of evidence that falls under the compliance check category. This evidence is collected from Config or Security Hub. </p>
    pub fn evidence_by_type_compliance_check_count(mut self, input: i32) -> Self {
        self.evidence_by_type_compliance_check_count = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of evidence that falls under the compliance check category. This evidence is collected from Config or Security Hub. </p>
    pub fn set_evidence_by_type_compliance_check_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evidence_by_type_compliance_check_count = input;
        self
    }
    /// <p> The number of evidence that falls under the compliance check category. This evidence is collected from Config or Security Hub. </p>
    pub fn get_evidence_by_type_compliance_check_count(&self) -> &::std::option::Option<i32> {
        &self.evidence_by_type_compliance_check_count
    }
    /// <p> The total number of issues that were reported directly from Security Hub, Config, or both. </p>
    pub fn evidence_by_type_compliance_check_issues_count(mut self, input: i32) -> Self {
        self.evidence_by_type_compliance_check_issues_count = ::std::option::Option::Some(input);
        self
    }
    /// <p> The total number of issues that were reported directly from Security Hub, Config, or both. </p>
    pub fn set_evidence_by_type_compliance_check_issues_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evidence_by_type_compliance_check_issues_count = input;
        self
    }
    /// <p> The total number of issues that were reported directly from Security Hub, Config, or both. </p>
    pub fn get_evidence_by_type_compliance_check_issues_count(&self) -> &::std::option::Option<i32> {
        &self.evidence_by_type_compliance_check_issues_count
    }
    /// <p> The number of evidence that falls under the user activity category. This evidence is collected from CloudTrail logs. </p>
    pub fn evidence_by_type_user_activity_count(mut self, input: i32) -> Self {
        self.evidence_by_type_user_activity_count = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of evidence that falls under the user activity category. This evidence is collected from CloudTrail logs. </p>
    pub fn set_evidence_by_type_user_activity_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evidence_by_type_user_activity_count = input;
        self
    }
    /// <p> The number of evidence that falls under the user activity category. This evidence is collected from CloudTrail logs. </p>
    pub fn get_evidence_by_type_user_activity_count(&self) -> &::std::option::Option<i32> {
        &self.evidence_by_type_user_activity_count
    }
    /// <p> The total number of Amazon Web Services resources that were assessed to generate the evidence. </p>
    pub fn evidence_aws_service_source_count(mut self, input: i32) -> Self {
        self.evidence_aws_service_source_count = ::std::option::Option::Some(input);
        self
    }
    /// <p> The total number of Amazon Web Services resources that were assessed to generate the evidence. </p>
    pub fn set_evidence_aws_service_source_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.evidence_aws_service_source_count = input;
        self
    }
    /// <p> The total number of Amazon Web Services resources that were assessed to generate the evidence. </p>
    pub fn get_evidence_aws_service_source_count(&self) -> &::std::option::Option<i32> {
        &self.evidence_aws_service_source_count
    }
    /// Consumes the builder and constructs a [`AssessmentEvidenceFolder`](crate::types::AssessmentEvidenceFolder).
    pub fn build(self) -> crate::types::AssessmentEvidenceFolder {
        crate::types::AssessmentEvidenceFolder {
            name: self.name,
            date: self.date,
            assessment_id: self.assessment_id,
            control_set_id: self.control_set_id,
            control_id: self.control_id,
            id: self.id,
            data_source: self.data_source,
            author: self.author,
            total_evidence: self.total_evidence.unwrap_or_default(),
            assessment_report_selection_count: self.assessment_report_selection_count.unwrap_or_default(),
            control_name: self.control_name,
            evidence_resources_included_count: self.evidence_resources_included_count.unwrap_or_default(),
            evidence_by_type_configuration_data_count: self.evidence_by_type_configuration_data_count.unwrap_or_default(),
            evidence_by_type_manual_count: self.evidence_by_type_manual_count.unwrap_or_default(),
            evidence_by_type_compliance_check_count: self.evidence_by_type_compliance_check_count.unwrap_or_default(),
            evidence_by_type_compliance_check_issues_count: self.evidence_by_type_compliance_check_issues_count.unwrap_or_default(),
            evidence_by_type_user_activity_count: self.evidence_by_type_user_activity_count.unwrap_or_default(),
            evidence_aws_service_source_count: self.evidence_aws_service_source_count.unwrap_or_default(),
        }
    }
}
