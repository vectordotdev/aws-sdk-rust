// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Evidence that's manually added to a control in Audit Manager. <code>manualEvidence</code> can be one of the following: <code>evidenceFileName</code>, <code>s3ResourcePath</code>, or <code>textResponse</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManualEvidence {
    /// <p>The S3 URL of the object that's imported as manual evidence. </p>
    pub s3_resource_path: ::std::option::Option<::std::string::String>,
    /// <p>The plain text response that's entered and saved as manual evidence.</p>
    pub text_response: ::std::option::Option<::std::string::String>,
    /// <p>The name of the file that's uploaded as manual evidence. This name is populated using the <code>evidenceFileName</code> value from the <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetEvidenceFileUploadUrl.html"> <code>GetEvidenceFileUploadUrl</code> </a> API response.</p>
    pub evidence_file_name: ::std::option::Option<::std::string::String>,
}
impl ManualEvidence {
    /// <p>The S3 URL of the object that's imported as manual evidence. </p>
    pub fn s3_resource_path(&self) -> ::std::option::Option<&str> {
        self.s3_resource_path.as_deref()
    }
    /// <p>The plain text response that's entered and saved as manual evidence.</p>
    pub fn text_response(&self) -> ::std::option::Option<&str> {
        self.text_response.as_deref()
    }
    /// <p>The name of the file that's uploaded as manual evidence. This name is populated using the <code>evidenceFileName</code> value from the <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetEvidenceFileUploadUrl.html"> <code>GetEvidenceFileUploadUrl</code> </a> API response.</p>
    pub fn evidence_file_name(&self) -> ::std::option::Option<&str> {
        self.evidence_file_name.as_deref()
    }
}
impl ManualEvidence {
    /// Creates a new builder-style object to manufacture [`ManualEvidence`](crate::types::ManualEvidence).
    pub fn builder() -> crate::types::builders::ManualEvidenceBuilder {
        crate::types::builders::ManualEvidenceBuilder::default()
    }
}

/// A builder for [`ManualEvidence`](crate::types::ManualEvidence).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ManualEvidenceBuilder {
    pub(crate) s3_resource_path: ::std::option::Option<::std::string::String>,
    pub(crate) text_response: ::std::option::Option<::std::string::String>,
    pub(crate) evidence_file_name: ::std::option::Option<::std::string::String>,
}
impl ManualEvidenceBuilder {
    /// <p>The S3 URL of the object that's imported as manual evidence. </p>
    pub fn s3_resource_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_resource_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 URL of the object that's imported as manual evidence. </p>
    pub fn set_s3_resource_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_resource_path = input;
        self
    }
    /// <p>The S3 URL of the object that's imported as manual evidence. </p>
    pub fn get_s3_resource_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_resource_path
    }
    /// <p>The plain text response that's entered and saved as manual evidence.</p>
    pub fn text_response(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text_response = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The plain text response that's entered and saved as manual evidence.</p>
    pub fn set_text_response(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text_response = input;
        self
    }
    /// <p>The plain text response that's entered and saved as manual evidence.</p>
    pub fn get_text_response(&self) -> &::std::option::Option<::std::string::String> {
        &self.text_response
    }
    /// <p>The name of the file that's uploaded as manual evidence. This name is populated using the <code>evidenceFileName</code> value from the <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetEvidenceFileUploadUrl.html"> <code>GetEvidenceFileUploadUrl</code> </a> API response.</p>
    pub fn evidence_file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.evidence_file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the file that's uploaded as manual evidence. This name is populated using the <code>evidenceFileName</code> value from the <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetEvidenceFileUploadUrl.html"> <code>GetEvidenceFileUploadUrl</code> </a> API response.</p>
    pub fn set_evidence_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.evidence_file_name = input;
        self
    }
    /// <p>The name of the file that's uploaded as manual evidence. This name is populated using the <code>evidenceFileName</code> value from the <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetEvidenceFileUploadUrl.html"> <code>GetEvidenceFileUploadUrl</code> </a> API response.</p>
    pub fn get_evidence_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.evidence_file_name
    }
    /// Consumes the builder and constructs a [`ManualEvidence`](crate::types::ManualEvidence).
    pub fn build(self) -> crate::types::ManualEvidence {
        crate::types::ManualEvidence {
            s3_resource_path: self.s3_resource_path,
            text_response: self.text_response,
            evidence_file_name: self.evidence_file_name,
        }
    }
}
