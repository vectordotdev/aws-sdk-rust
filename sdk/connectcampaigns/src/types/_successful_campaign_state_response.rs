// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Successful response of campaign state
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SuccessfulCampaignStateResponse {
    /// Identifier representing a Campaign
    pub campaign_id: ::std::option::Option<::std::string::String>,
    /// State of a campaign
    pub state: ::std::option::Option<crate::types::CampaignState>,
}
impl SuccessfulCampaignStateResponse {
    /// Identifier representing a Campaign
    pub fn campaign_id(&self) -> ::std::option::Option<&str> {
        self.campaign_id.as_deref()
    }
    /// State of a campaign
    pub fn state(&self) -> ::std::option::Option<&crate::types::CampaignState> {
        self.state.as_ref()
    }
}
impl SuccessfulCampaignStateResponse {
    /// Creates a new builder-style object to manufacture [`SuccessfulCampaignStateResponse`](crate::types::SuccessfulCampaignStateResponse).
    pub fn builder() -> crate::types::builders::SuccessfulCampaignStateResponseBuilder {
        crate::types::builders::SuccessfulCampaignStateResponseBuilder::default()
    }
}

/// A builder for [`SuccessfulCampaignStateResponse`](crate::types::SuccessfulCampaignStateResponse).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SuccessfulCampaignStateResponseBuilder {
    pub(crate) campaign_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::CampaignState>,
}
impl SuccessfulCampaignStateResponseBuilder {
    /// Identifier representing a Campaign
    pub fn campaign_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.campaign_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Identifier representing a Campaign
    pub fn set_campaign_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.campaign_id = input;
        self
    }
    /// Identifier representing a Campaign
    pub fn get_campaign_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.campaign_id
    }
    /// State of a campaign
    pub fn state(mut self, input: crate::types::CampaignState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// State of a campaign
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::CampaignState>) -> Self {
        self.state = input;
        self
    }
    /// State of a campaign
    pub fn get_state(&self) -> &::std::option::Option<crate::types::CampaignState> {
        &self.state
    }
    /// Consumes the builder and constructs a [`SuccessfulCampaignStateResponse`](crate::types::SuccessfulCampaignStateResponse).
    pub fn build(self) -> crate::types::SuccessfulCampaignStateResponse {
        crate::types::SuccessfulCampaignStateResponse {
            campaign_id: self.campaign_id,
            state: self.state,
        }
    }
}
