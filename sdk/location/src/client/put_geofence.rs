// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutGeofence`](crate::operation::put_geofence::builders::PutGeofenceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`collection_name(impl ::std::convert::Into<String>)`](crate::operation::put_geofence::builders::PutGeofenceFluentBuilder::collection_name) / [`set_collection_name(Option<String>)`](crate::operation::put_geofence::builders::PutGeofenceFluentBuilder::set_collection_name): <p>The geofence collection to store the geofence in.</p>
    ///   - [`geofence_id(impl ::std::convert::Into<String>)`](crate::operation::put_geofence::builders::PutGeofenceFluentBuilder::geofence_id) / [`set_geofence_id(Option<String>)`](crate::operation::put_geofence::builders::PutGeofenceFluentBuilder::set_geofence_id): <p>An identifier for the geofence. For example, <code>ExampleGeofence-1</code>.</p>
    ///   - [`geometry(GeofenceGeometry)`](crate::operation::put_geofence::builders::PutGeofenceFluentBuilder::geometry) / [`set_geometry(Option<GeofenceGeometry>)`](crate::operation::put_geofence::builders::PutGeofenceFluentBuilder::set_geometry): <p>Contains the details to specify the position of the geofence. Can be either a polygon or a circle. Including both will return a validation error.</p> <note>   <p>Each <a href="https://docs.aws.amazon.com/location-geofences/latest/APIReference/API_GeofenceGeometry.html"> geofence polygon</a> can have a maximum of 1,000 vertices.</p>  </note>
    ///   - [`geofence_properties(HashMap<String, String>)`](crate::operation::put_geofence::builders::PutGeofenceFluentBuilder::geofence_properties) / [`set_geofence_properties(Option<HashMap<String, String>>)`](crate::operation::put_geofence::builders::PutGeofenceFluentBuilder::set_geofence_properties): <p>Associates one of more properties with the geofence. A property is a key-value pair stored with the geofence and added to any geofence event triggered with that geofence.</p>  <p>Format: <code>"key" : "value"</code> </p>
    /// - On success, responds with [`PutGeofenceOutput`](crate::operation::put_geofence::PutGeofenceOutput) with field(s):
    ///   - [`geofence_id(Option<String>)`](crate::operation::put_geofence::PutGeofenceOutput::geofence_id): <p>The geofence identifier entered in the request.</p>
    ///   - [`create_time(Option<DateTime>)`](crate::operation::put_geofence::PutGeofenceOutput::create_time): <p>The timestamp for when the geofence was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> </p>
    ///   - [`update_time(Option<DateTime>)`](crate::operation::put_geofence::PutGeofenceOutput::update_time): <p>The timestamp for when the geofence was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> </p>
    /// - On failure, responds with [`SdkError<PutGeofenceError>`](crate::operation::put_geofence::PutGeofenceError)
    pub fn put_geofence(&self) -> crate::operation::put_geofence::builders::PutGeofenceFluentBuilder {
        crate::operation::put_geofence::builders::PutGeofenceFluentBuilder::new(self.handle.clone())
    }
}
