// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for filtering API keys.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApiKeyFilter {
    /// <p>Filter on <code>Active</code> or <code>Expired</code> API keys.</p>
    pub key_status: ::std::option::Option<crate::types::Status>,
}
impl ApiKeyFilter {
    /// <p>Filter on <code>Active</code> or <code>Expired</code> API keys.</p>
    pub fn key_status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.key_status.as_ref()
    }
}
impl ApiKeyFilter {
    /// Creates a new builder-style object to manufacture [`ApiKeyFilter`](crate::types::ApiKeyFilter).
    pub fn builder() -> crate::types::builders::ApiKeyFilterBuilder {
        crate::types::builders::ApiKeyFilterBuilder::default()
    }
}

/// A builder for [`ApiKeyFilter`](crate::types::ApiKeyFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApiKeyFilterBuilder {
    pub(crate) key_status: ::std::option::Option<crate::types::Status>,
}
impl ApiKeyFilterBuilder {
    /// <p>Filter on <code>Active</code> or <code>Expired</code> API keys.</p>
    pub fn key_status(mut self, input: crate::types::Status) -> Self {
        self.key_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter on <code>Active</code> or <code>Expired</code> API keys.</p>
    pub fn set_key_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.key_status = input;
        self
    }
    /// <p>Filter on <code>Active</code> or <code>Expired</code> API keys.</p>
    pub fn get_key_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.key_status
    }
    /// Consumes the builder and constructs a [`ApiKeyFilter`](crate::types::ApiKeyFilter).
    pub fn build(self) -> crate::types::ApiKeyFilter {
        crate::types::ApiKeyFilter { key_status: self.key_status }
    }
}
