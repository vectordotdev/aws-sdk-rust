// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the political view for the style.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MapConfigurationUpdate {
    /// <p>Specifies the political view for the style. Set to an empty string to not use a political view, or, for styles that support specific political views, you can choose a view, such as <code>IND</code> for the Indian view.</p> <note>
    /// <p>Not all map resources or styles support political view styles. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/map-concepts.html#political-views">Political views</a> for more information.</p>
    /// </note>
    pub political_view: ::std::option::Option<::std::string::String>,
}
impl MapConfigurationUpdate {
    /// <p>Specifies the political view for the style. Set to an empty string to not use a political view, or, for styles that support specific political views, you can choose a view, such as <code>IND</code> for the Indian view.</p> <note>
    /// <p>Not all map resources or styles support political view styles. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/map-concepts.html#political-views">Political views</a> for more information.</p>
    /// </note>
    pub fn political_view(&self) -> ::std::option::Option<&str> {
        self.political_view.as_deref()
    }
}
impl MapConfigurationUpdate {
    /// Creates a new builder-style object to manufacture [`MapConfigurationUpdate`](crate::types::MapConfigurationUpdate).
    pub fn builder() -> crate::types::builders::MapConfigurationUpdateBuilder {
        crate::types::builders::MapConfigurationUpdateBuilder::default()
    }
}

/// A builder for [`MapConfigurationUpdate`](crate::types::MapConfigurationUpdate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MapConfigurationUpdateBuilder {
    pub(crate) political_view: ::std::option::Option<::std::string::String>,
}
impl MapConfigurationUpdateBuilder {
    /// <p>Specifies the political view for the style. Set to an empty string to not use a political view, or, for styles that support specific political views, you can choose a view, such as <code>IND</code> for the Indian view.</p> <note>
    /// <p>Not all map resources or styles support political view styles. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/map-concepts.html#political-views">Political views</a> for more information.</p>
    /// </note>
    pub fn political_view(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.political_view = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the political view for the style. Set to an empty string to not use a political view, or, for styles that support specific political views, you can choose a view, such as <code>IND</code> for the Indian view.</p> <note>
    /// <p>Not all map resources or styles support political view styles. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/map-concepts.html#political-views">Political views</a> for more information.</p>
    /// </note>
    pub fn set_political_view(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.political_view = input;
        self
    }
    /// <p>Specifies the political view for the style. Set to an empty string to not use a political view, or, for styles that support specific political views, you can choose a view, such as <code>IND</code> for the Indian view.</p> <note>
    /// <p>Not all map resources or styles support political view styles. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/map-concepts.html#political-views">Political views</a> for more information.</p>
    /// </note>
    pub fn get_political_view(&self) -> &::std::option::Option<::std::string::String> {
        &self.political_view
    }
    /// Consumes the builder and constructs a [`MapConfigurationUpdate`](crate::types::MapConfigurationUpdate).
    pub fn build(self) -> crate::types::MapConfigurationUpdate {
        crate::types::MapConfigurationUpdate {
            political_view: self.political_view,
        }
    }
}
