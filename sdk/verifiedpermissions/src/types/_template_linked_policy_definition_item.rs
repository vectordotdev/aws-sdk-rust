// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a policy created by instantiating a policy template. </p>
/// <p>This </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TemplateLinkedPolicyDefinitionItem {
    /// <p>The unique identifier of the policy template used to create this policy.</p>
    pub policy_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The principal associated with this template-linked policy. Verified Permissions substitutes this principal for the <code>?principal</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub principal: ::std::option::Option<crate::types::EntityIdentifier>,
    /// <p>The resource associated with this template-linked policy. Verified Permissions substitutes this resource for the <code>?resource</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub resource: ::std::option::Option<crate::types::EntityIdentifier>,
}
impl TemplateLinkedPolicyDefinitionItem {
    /// <p>The unique identifier of the policy template used to create this policy.</p>
    pub fn policy_template_id(&self) -> ::std::option::Option<&str> {
        self.policy_template_id.as_deref()
    }
    /// <p>The principal associated with this template-linked policy. Verified Permissions substitutes this principal for the <code>?principal</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn principal(&self) -> ::std::option::Option<&crate::types::EntityIdentifier> {
        self.principal.as_ref()
    }
    /// <p>The resource associated with this template-linked policy. Verified Permissions substitutes this resource for the <code>?resource</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::EntityIdentifier> {
        self.resource.as_ref()
    }
}
impl TemplateLinkedPolicyDefinitionItem {
    /// Creates a new builder-style object to manufacture [`TemplateLinkedPolicyDefinitionItem`](crate::types::TemplateLinkedPolicyDefinitionItem).
    pub fn builder() -> crate::types::builders::TemplateLinkedPolicyDefinitionItemBuilder {
        crate::types::builders::TemplateLinkedPolicyDefinitionItemBuilder::default()
    }
}

/// A builder for [`TemplateLinkedPolicyDefinitionItem`](crate::types::TemplateLinkedPolicyDefinitionItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TemplateLinkedPolicyDefinitionItemBuilder {
    pub(crate) policy_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal: ::std::option::Option<crate::types::EntityIdentifier>,
    pub(crate) resource: ::std::option::Option<crate::types::EntityIdentifier>,
}
impl TemplateLinkedPolicyDefinitionItemBuilder {
    /// <p>The unique identifier of the policy template used to create this policy.</p>
    pub fn policy_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the policy template used to create this policy.</p>
    pub fn set_policy_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_template_id = input;
        self
    }
    /// <p>The unique identifier of the policy template used to create this policy.</p>
    pub fn get_policy_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_template_id
    }
    /// <p>The principal associated with this template-linked policy. Verified Permissions substitutes this principal for the <code>?principal</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn principal(mut self, input: crate::types::EntityIdentifier) -> Self {
        self.principal = ::std::option::Option::Some(input);
        self
    }
    /// <p>The principal associated with this template-linked policy. Verified Permissions substitutes this principal for the <code>?principal</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<crate::types::EntityIdentifier>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The principal associated with this template-linked policy. Verified Permissions substitutes this principal for the <code>?principal</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn get_principal(&self) -> &::std::option::Option<crate::types::EntityIdentifier> {
        &self.principal
    }
    /// <p>The resource associated with this template-linked policy. Verified Permissions substitutes this resource for the <code>?resource</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn resource(mut self, input: crate::types::EntityIdentifier) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource associated with this template-linked policy. Verified Permissions substitutes this resource for the <code>?resource</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::EntityIdentifier>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The resource associated with this template-linked policy. Verified Permissions substitutes this resource for the <code>?resource</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::EntityIdentifier> {
        &self.resource
    }
    /// Consumes the builder and constructs a [`TemplateLinkedPolicyDefinitionItem`](crate::types::TemplateLinkedPolicyDefinitionItem).
    pub fn build(self) -> crate::types::TemplateLinkedPolicyDefinitionItem {
        crate::types::TemplateLinkedPolicyDefinitionItem {
            policy_template_id: self.policy_template_id,
            principal: self.principal,
            resource: self.resource,
        }
    }
}
