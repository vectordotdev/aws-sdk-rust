// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a filter to refine policies returned in a query.</p>
/// <p>This data type is used as a response parameter for the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html">ListPolicies</a> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PolicyFilter {
    /// <p>Filters the output to only policies that reference the specified principal.</p>
    pub principal: ::std::option::Option<crate::types::EntityReference>,
    /// <p>Filters the output to only policies that reference the specified resource.</p>
    pub resource: ::std::option::Option<crate::types::EntityReference>,
    /// <p>Filters the output to only policies of the specified type.</p>
    pub policy_type: ::std::option::Option<crate::types::PolicyType>,
    /// <p>Filters the output to only template-linked policies that were instantiated from the specified policy template.</p>
    pub policy_template_id: ::std::option::Option<::std::string::String>,
}
impl PolicyFilter {
    /// <p>Filters the output to only policies that reference the specified principal.</p>
    pub fn principal(&self) -> ::std::option::Option<&crate::types::EntityReference> {
        self.principal.as_ref()
    }
    /// <p>Filters the output to only policies that reference the specified resource.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::EntityReference> {
        self.resource.as_ref()
    }
    /// <p>Filters the output to only policies of the specified type.</p>
    pub fn policy_type(&self) -> ::std::option::Option<&crate::types::PolicyType> {
        self.policy_type.as_ref()
    }
    /// <p>Filters the output to only template-linked policies that were instantiated from the specified policy template.</p>
    pub fn policy_template_id(&self) -> ::std::option::Option<&str> {
        self.policy_template_id.as_deref()
    }
}
impl PolicyFilter {
    /// Creates a new builder-style object to manufacture [`PolicyFilter`](crate::types::PolicyFilter).
    pub fn builder() -> crate::types::builders::PolicyFilterBuilder {
        crate::types::builders::PolicyFilterBuilder::default()
    }
}

/// A builder for [`PolicyFilter`](crate::types::PolicyFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PolicyFilterBuilder {
    pub(crate) principal: ::std::option::Option<crate::types::EntityReference>,
    pub(crate) resource: ::std::option::Option<crate::types::EntityReference>,
    pub(crate) policy_type: ::std::option::Option<crate::types::PolicyType>,
    pub(crate) policy_template_id: ::std::option::Option<::std::string::String>,
}
impl PolicyFilterBuilder {
    /// <p>Filters the output to only policies that reference the specified principal.</p>
    pub fn principal(mut self, input: crate::types::EntityReference) -> Self {
        self.principal = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters the output to only policies that reference the specified principal.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<crate::types::EntityReference>) -> Self {
        self.principal = input;
        self
    }
    /// <p>Filters the output to only policies that reference the specified principal.</p>
    pub fn get_principal(&self) -> &::std::option::Option<crate::types::EntityReference> {
        &self.principal
    }
    /// <p>Filters the output to only policies that reference the specified resource.</p>
    pub fn resource(mut self, input: crate::types::EntityReference) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters the output to only policies that reference the specified resource.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::EntityReference>) -> Self {
        self.resource = input;
        self
    }
    /// <p>Filters the output to only policies that reference the specified resource.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::EntityReference> {
        &self.resource
    }
    /// <p>Filters the output to only policies of the specified type.</p>
    pub fn policy_type(mut self, input: crate::types::PolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters the output to only policies of the specified type.</p>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::PolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>Filters the output to only policies of the specified type.</p>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::PolicyType> {
        &self.policy_type
    }
    /// <p>Filters the output to only template-linked policies that were instantiated from the specified policy template.</p>
    pub fn policy_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filters the output to only template-linked policies that were instantiated from the specified policy template.</p>
    pub fn set_policy_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_template_id = input;
        self
    }
    /// <p>Filters the output to only template-linked policies that were instantiated from the specified policy template.</p>
    pub fn get_policy_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_template_id
    }
    /// Consumes the builder and constructs a [`PolicyFilter`](crate::types::PolicyFilter).
    pub fn build(self) -> crate::types::PolicyFilter {
        crate::types::PolicyFilter {
            principal: self.principal,
            resource: self.resource,
            policy_type: self.policy_type,
            policy_template_id: self.policy_template_id,
        }
    }
}
