// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the identifier of an entity, including its ID and type.</p>
/// <p>This data type is used as a request parameter for <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_IsAuthorized.html">IsAuthorized</a> operation, and as a response parameter for the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicy.html">CreatePolicy</a>, <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_GetPolicy.html">GetPolicy</a>, and <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicy.html">UpdatePolicy</a> operations.</p>
/// <p>Example: <code>{"entityId":"<i>string</i>","entityType":"<i>string</i>"}</code> </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EntityIdentifier {
    /// <p>The type of an entity.</p>
    /// <p>Example: <code>"entityType":"<i>typeName</i>"</code> </p>
    pub entity_type: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of an entity.</p>
    /// <p> <code>"entityId":"<i>identifier</i>"</code> </p>
    pub entity_id: ::std::option::Option<::std::string::String>,
}
impl EntityIdentifier {
    /// <p>The type of an entity.</p>
    /// <p>Example: <code>"entityType":"<i>typeName</i>"</code> </p>
    pub fn entity_type(&self) -> ::std::option::Option<&str> {
        self.entity_type.as_deref()
    }
    /// <p>The identifier of an entity.</p>
    /// <p> <code>"entityId":"<i>identifier</i>"</code> </p>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
}
impl EntityIdentifier {
    /// Creates a new builder-style object to manufacture [`EntityIdentifier`](crate::types::EntityIdentifier).
    pub fn builder() -> crate::types::builders::EntityIdentifierBuilder {
        crate::types::builders::EntityIdentifierBuilder::default()
    }
}

/// A builder for [`EntityIdentifier`](crate::types::EntityIdentifier).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EntityIdentifierBuilder {
    pub(crate) entity_type: ::std::option::Option<::std::string::String>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
}
impl EntityIdentifierBuilder {
    /// <p>The type of an entity.</p>
    /// <p>Example: <code>"entityType":"<i>typeName</i>"</code> </p>
    pub fn entity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of an entity.</p>
    /// <p>Example: <code>"entityType":"<i>typeName</i>"</code> </p>
    pub fn set_entity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_type = input;
        self
    }
    /// <p>The type of an entity.</p>
    /// <p>Example: <code>"entityType":"<i>typeName</i>"</code> </p>
    pub fn get_entity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_type
    }
    /// <p>The identifier of an entity.</p>
    /// <p> <code>"entityId":"<i>identifier</i>"</code> </p>
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of an entity.</p>
    /// <p> <code>"entityId":"<i>identifier</i>"</code> </p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The identifier of an entity.</p>
    /// <p> <code>"entityId":"<i>identifier</i>"</code> </p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// Consumes the builder and constructs a [`EntityIdentifier`](crate::types::EntityIdentifier).
    pub fn build(self) -> crate::types::EntityIdentifier {
        crate::types::EntityIdentifier {
            entity_type: self.entity_type,
            entity_id: self.entity_id,
        }
    }
}
