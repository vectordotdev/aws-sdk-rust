// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a principal or resource that can be referenced in a Cedar policy.</p>
/// <p>This data type is used as part of the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_PolicyFilter.html">PolicyFilter</a> structure that is used as a request parameter for the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html">ListPolicies</a> operation..</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum EntityReference {
    /// <p>The identifier of the entity. It can consist of either an EntityType and EntityId, a principal, or a resource.</p>
    Identifier(crate::types::EntityIdentifier),
    /// <p>Used to indicate that a principal or resource is not specified. This can be used to search for policies that are not associated with a specific principal or resource.</p>
    Unspecified(bool),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl EntityReference {
    /// Tries to convert the enum instance into [`Identifier`](crate::types::EntityReference::Identifier), extracting the inner [`EntityIdentifier`](crate::types::EntityIdentifier).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_identifier(&self) -> ::std::result::Result<&crate::types::EntityIdentifier, &Self> {
        if let EntityReference::Identifier(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Identifier`](crate::types::EntityReference::Identifier).
    pub fn is_identifier(&self) -> bool {
        self.as_identifier().is_ok()
    }
    /// Tries to convert the enum instance into [`Unspecified`](crate::types::EntityReference::Unspecified), extracting the inner [`bool`](bool).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_unspecified(&self) -> ::std::result::Result<&bool, &Self> {
        if let EntityReference::Unspecified(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Unspecified`](crate::types::EntityReference::Unspecified).
    pub fn is_unspecified(&self) -> bool {
        self.as_unspecified().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
