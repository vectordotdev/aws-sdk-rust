// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_identity_source;

pub(crate) mod shape_create_policy;

pub(crate) mod shape_create_policy_store;

pub(crate) mod shape_create_policy_template;

pub(crate) mod shape_delete_identity_source;

pub(crate) mod shape_delete_policy;

pub(crate) mod shape_delete_policy_store;

pub(crate) mod shape_delete_policy_template;

pub(crate) mod shape_get_identity_source;

pub(crate) mod shape_get_policy;

pub(crate) mod shape_get_policy_store;

pub(crate) mod shape_get_policy_template;

pub(crate) mod shape_get_schema;

pub(crate) mod shape_is_authorized;

pub(crate) mod shape_is_authorized_with_token;

pub(crate) mod shape_list_identity_sources;

pub(crate) mod shape_list_policies;

pub(crate) mod shape_list_policy_stores;

pub(crate) mod shape_list_policy_templates;

pub(crate) mod shape_put_schema;

pub(crate) mod shape_update_identity_source;

pub(crate) mod shape_update_policy;

pub(crate) mod shape_update_policy_store;

pub(crate) mod shape_update_policy_template;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_identity_source_input;

pub(crate) mod shape_create_policy_input;

pub(crate) mod shape_create_policy_store_input;

pub(crate) mod shape_create_policy_template_input;

pub(crate) mod shape_delete_identity_source_input;

pub(crate) mod shape_delete_policy_input;

pub(crate) mod shape_delete_policy_store_input;

pub(crate) mod shape_delete_policy_template_input;

pub(crate) mod shape_get_identity_source_input;

pub(crate) mod shape_get_policy_input;

pub(crate) mod shape_get_policy_store_input;

pub(crate) mod shape_get_policy_template_input;

pub(crate) mod shape_get_schema_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_is_authorized_input;

pub(crate) mod shape_is_authorized_with_token_input;

pub(crate) mod shape_list_identity_sources_input;

pub(crate) mod shape_list_policies_input;

pub(crate) mod shape_list_policy_stores_input;

pub(crate) mod shape_list_policy_templates_input;

pub(crate) mod shape_put_schema_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_update_identity_source_input;

pub(crate) mod shape_update_policy_input;

pub(crate) mod shape_update_policy_store_input;

pub(crate) mod shape_update_policy_template_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_action_identifier;

pub(crate) mod shape_configuration;

pub(crate) mod shape_context_definition;

pub(crate) mod shape_determining_policy_list;

pub(crate) mod shape_entities_definition;

pub(crate) mod shape_entity_identifier;

pub(crate) mod shape_evaluation_error_list;

pub(crate) mod shape_identity_source_details;

pub(crate) mod shape_identity_source_filter;

pub(crate) mod shape_identity_sources;

pub(crate) mod shape_namespace_list;

pub(crate) mod shape_policy_definition;

pub(crate) mod shape_policy_definition_detail;

pub(crate) mod shape_policy_filter;

pub(crate) mod shape_policy_list;

pub(crate) mod shape_policy_store_list;

pub(crate) mod shape_policy_templates_list;

pub(crate) mod shape_resource_conflict_list;

pub(crate) mod shape_schema_definition;

pub(crate) mod shape_update_configuration;

pub(crate) mod shape_update_policy_definition;

pub(crate) mod shape_validation_exception_field_list;

pub(crate) mod shape_validation_settings;

pub(crate) mod shape_attribute_value;

pub(crate) mod shape_client_ids;

pub(crate) mod shape_cognito_user_pool_configuration;

pub(crate) mod shape_determining_policy_item;

pub(crate) mod shape_entity_item;

pub(crate) mod shape_entity_reference;

pub(crate) mod shape_evaluation_error_item;

pub(crate) mod shape_identity_source_item;

pub(crate) mod shape_policy_item;

pub(crate) mod shape_policy_store_item;

pub(crate) mod shape_policy_template_item;

pub(crate) mod shape_resource_conflict;

pub(crate) mod shape_static_policy_definition;

pub(crate) mod shape_static_policy_definition_detail;

pub(crate) mod shape_template_linked_policy_definition;

pub(crate) mod shape_template_linked_policy_definition_detail;

pub(crate) mod shape_update_cognito_user_pool_configuration;

pub(crate) mod shape_update_static_policy_definition;

pub(crate) mod shape_validation_exception_field;

pub(crate) mod shape_identity_source_item_details;

pub(crate) mod shape_policy_definition_item;

pub(crate) mod shape_static_policy_definition_item;

pub(crate) mod shape_template_linked_policy_definition_item;
