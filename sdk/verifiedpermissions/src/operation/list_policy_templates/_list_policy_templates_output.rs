// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListPolicyTemplatesOutput {
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The list of the policy templates in the specified policy store.</p>
    pub policy_templates: ::std::option::Option<::std::vec::Vec<crate::types::PolicyTemplateItem>>,
    _request_id: Option<String>,
}
impl ListPolicyTemplatesOutput {
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The list of the policy templates in the specified policy store.</p>
    pub fn policy_templates(&self) -> ::std::option::Option<&[crate::types::PolicyTemplateItem]> {
        self.policy_templates.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListPolicyTemplatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPolicyTemplatesOutput {
    /// Creates a new builder-style object to manufacture [`ListPolicyTemplatesOutput`](crate::operation::list_policy_templates::ListPolicyTemplatesOutput).
    pub fn builder() -> crate::operation::list_policy_templates::builders::ListPolicyTemplatesOutputBuilder {
        crate::operation::list_policy_templates::builders::ListPolicyTemplatesOutputBuilder::default()
    }
}

/// A builder for [`ListPolicyTemplatesOutput`](crate::operation::list_policy_templates::ListPolicyTemplatesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListPolicyTemplatesOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) policy_templates: ::std::option::Option<::std::vec::Vec<crate::types::PolicyTemplateItem>>,
    _request_id: Option<String>,
}
impl ListPolicyTemplatesOutputBuilder {
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `policy_templates`.
    ///
    /// To override the contents of this collection use [`set_policy_templates`](Self::set_policy_templates).
    ///
    /// <p>The list of the policy templates in the specified policy store.</p>
    pub fn policy_templates(mut self, input: crate::types::PolicyTemplateItem) -> Self {
        let mut v = self.policy_templates.unwrap_or_default();
        v.push(input);
        self.policy_templates = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of the policy templates in the specified policy store.</p>
    pub fn set_policy_templates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PolicyTemplateItem>>) -> Self {
        self.policy_templates = input;
        self
    }
    /// <p>The list of the policy templates in the specified policy store.</p>
    pub fn get_policy_templates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PolicyTemplateItem>> {
        &self.policy_templates
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListPolicyTemplatesOutput`](crate::operation::list_policy_templates::ListPolicyTemplatesOutput).
    pub fn build(self) -> crate::operation::list_policy_templates::ListPolicyTemplatesOutput {
        crate::operation::list_policy_templates::ListPolicyTemplatesOutput {
            next_token: self.next_token,
            policy_templates: self.policy_templates,
            _request_id: self._request_id,
        }
    }
}
