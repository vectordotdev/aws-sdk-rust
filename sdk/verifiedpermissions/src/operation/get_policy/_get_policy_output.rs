// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPolicyOutput {
    /// <p>The ID of the policy store that contains the policy that you want information about.</p>
    pub policy_store_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID of the policy that you want information about.</p>
    pub policy_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the policy.</p>
    pub policy_type: ::std::option::Option<crate::types::PolicyType>,
    /// <p>The principal specified in the policy's scope. This element isn't included in the response when <code>Principal</code> isn't present in the policy content.</p>
    pub principal: ::std::option::Option<crate::types::EntityIdentifier>,
    /// <p>The resource specified in the policy's scope. This element isn't included in the response when <code>Resource</code> isn't present in the policy content.</p>
    pub resource: ::std::option::Option<crate::types::EntityIdentifier>,
    /// <p>The definition of the requested policy.</p>
    pub definition: ::std::option::Option<crate::types::PolicyDefinitionDetail>,
    /// <p>The date and time that the policy was originally created.</p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that the policy was last updated.</p>
    pub last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPolicyOutput {
    /// <p>The ID of the policy store that contains the policy that you want information about.</p>
    pub fn policy_store_id(&self) -> ::std::option::Option<&str> {
        self.policy_store_id.as_deref()
    }
    /// <p>The unique ID of the policy that you want information about.</p>
    pub fn policy_id(&self) -> ::std::option::Option<&str> {
        self.policy_id.as_deref()
    }
    /// <p>The type of the policy.</p>
    pub fn policy_type(&self) -> ::std::option::Option<&crate::types::PolicyType> {
        self.policy_type.as_ref()
    }
    /// <p>The principal specified in the policy's scope. This element isn't included in the response when <code>Principal</code> isn't present in the policy content.</p>
    pub fn principal(&self) -> ::std::option::Option<&crate::types::EntityIdentifier> {
        self.principal.as_ref()
    }
    /// <p>The resource specified in the policy's scope. This element isn't included in the response when <code>Resource</code> isn't present in the policy content.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::EntityIdentifier> {
        self.resource.as_ref()
    }
    /// <p>The definition of the requested policy.</p>
    pub fn definition(&self) -> ::std::option::Option<&crate::types::PolicyDefinitionDetail> {
        self.definition.as_ref()
    }
    /// <p>The date and time that the policy was originally created.</p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The date and time that the policy was last updated.</p>
    pub fn last_updated_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetPolicyOutput`](crate::operation::get_policy::GetPolicyOutput).
    pub fn builder() -> crate::operation::get_policy::builders::GetPolicyOutputBuilder {
        crate::operation::get_policy::builders::GetPolicyOutputBuilder::default()
    }
}

/// A builder for [`GetPolicyOutput`](crate::operation::get_policy::GetPolicyOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetPolicyOutputBuilder {
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_type: ::std::option::Option<crate::types::PolicyType>,
    pub(crate) principal: ::std::option::Option<crate::types::EntityIdentifier>,
    pub(crate) resource: ::std::option::Option<crate::types::EntityIdentifier>,
    pub(crate) definition: ::std::option::Option<crate::types::PolicyDefinitionDetail>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPolicyOutputBuilder {
    /// <p>The ID of the policy store that contains the policy that you want information about.</p>
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the policy store that contains the policy that you want information about.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>The ID of the policy store that contains the policy that you want information about.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>The unique ID of the policy that you want information about.</p>
    pub fn policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the policy that you want information about.</p>
    pub fn set_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_id = input;
        self
    }
    /// <p>The unique ID of the policy that you want information about.</p>
    pub fn get_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_id
    }
    /// <p>The type of the policy.</p>
    pub fn policy_type(mut self, input: crate::types::PolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the policy.</p>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::PolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>The type of the policy.</p>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::PolicyType> {
        &self.policy_type
    }
    /// <p>The principal specified in the policy's scope. This element isn't included in the response when <code>Principal</code> isn't present in the policy content.</p>
    pub fn principal(mut self, input: crate::types::EntityIdentifier) -> Self {
        self.principal = ::std::option::Option::Some(input);
        self
    }
    /// <p>The principal specified in the policy's scope. This element isn't included in the response when <code>Principal</code> isn't present in the policy content.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<crate::types::EntityIdentifier>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The principal specified in the policy's scope. This element isn't included in the response when <code>Principal</code> isn't present in the policy content.</p>
    pub fn get_principal(&self) -> &::std::option::Option<crate::types::EntityIdentifier> {
        &self.principal
    }
    /// <p>The resource specified in the policy's scope. This element isn't included in the response when <code>Resource</code> isn't present in the policy content.</p>
    pub fn resource(mut self, input: crate::types::EntityIdentifier) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource specified in the policy's scope. This element isn't included in the response when <code>Resource</code> isn't present in the policy content.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::EntityIdentifier>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The resource specified in the policy's scope. This element isn't included in the response when <code>Resource</code> isn't present in the policy content.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::EntityIdentifier> {
        &self.resource
    }
    /// <p>The definition of the requested policy.</p>
    pub fn definition(mut self, input: crate::types::PolicyDefinitionDetail) -> Self {
        self.definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of the requested policy.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::PolicyDefinitionDetail>) -> Self {
        self.definition = input;
        self
    }
    /// <p>The definition of the requested policy.</p>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::PolicyDefinitionDetail> {
        &self.definition
    }
    /// <p>The date and time that the policy was originally created.</p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the policy was originally created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date and time that the policy was originally created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>The date and time that the policy was last updated.</p>
    pub fn last_updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the policy was last updated.</p>
    pub fn set_last_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p>The date and time that the policy was last updated.</p>
    pub fn get_last_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPolicyOutput`](crate::operation::get_policy::GetPolicyOutput).
    pub fn build(self) -> crate::operation::get_policy::GetPolicyOutput {
        crate::operation::get_policy::GetPolicyOutput {
            policy_store_id: self.policy_store_id,
            policy_id: self.policy_id,
            policy_type: self.policy_type,
            principal: self.principal,
            resource: self.resource,
            definition: self.definition,
            created_date: self.created_date,
            last_updated_date: self.last_updated_date,
            _request_id: self._request_id,
        }
    }
}
