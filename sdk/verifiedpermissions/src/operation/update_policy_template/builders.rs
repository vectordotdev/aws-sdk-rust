// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_policy_template::_update_policy_template_output::UpdatePolicyTemplateOutputBuilder;

pub use crate::operation::update_policy_template::_update_policy_template_input::UpdatePolicyTemplateInputBuilder;

impl UpdatePolicyTemplateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_policy_template::UpdatePolicyTemplateOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::update_policy_template::UpdatePolicyTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_policy_template();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdatePolicyTemplate`.
///
/// <p>Updates the specified policy template. You can update only the description and the some elements of the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyTemplate.html#amazonverifiedpermissions-UpdatePolicyTemplate-request-policyBody">policyBody</a>. </p> <important>
/// <p>Changes you make to the policy template content are immediately reflected in authorization decisions that involve all template-linked policies instantiated from this template.</p>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdatePolicyTemplateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_policy_template::builders::UpdatePolicyTemplateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl UpdatePolicyTemplateFluentBuilder {
    /// Creates a new `UpdatePolicyTemplate`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdatePolicyTemplate as a reference.
    pub fn as_input(&self) -> &crate::operation::update_policy_template::builders::UpdatePolicyTemplateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_policy_template::UpdatePolicyTemplateOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::update_policy_template::UpdatePolicyTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_policy_template::UpdatePolicyTemplate::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_policy_template::UpdatePolicyTemplate::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::update_policy_template::UpdatePolicyTemplateOutput,
            crate::operation::update_policy_template::UpdatePolicyTemplateError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::update_policy_template::UpdatePolicyTemplateError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the ID of the policy store that contains the policy template that you want to update.</p>
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.policy_store_id(input.into());
        self
    }
    /// <p>Specifies the ID of the policy store that contains the policy template that you want to update.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_policy_store_id(input);
        self
    }
    /// <p>Specifies the ID of the policy store that contains the policy template that you want to update.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_policy_store_id()
    }
    /// <p>Specifies the ID of the policy template that you want to update.</p>
    pub fn policy_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.policy_template_id(input.into());
        self
    }
    /// <p>Specifies the ID of the policy template that you want to update.</p>
    pub fn set_policy_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_policy_template_id(input);
        self
    }
    /// <p>Specifies the ID of the policy template that you want to update.</p>
    pub fn get_policy_template_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_policy_template_id()
    }
    /// <p>Specifies a new description to apply to the policy template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>Specifies a new description to apply to the policy template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Specifies a new description to apply to the policy template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>Specifies new statement content written in Cedar policy language to replace the current body of the policy template.</p>
    /// <p>You can change only the following elements of the policy body:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy template.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy template.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy template.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy template.</p> </li>
    /// </ul>
    pub fn statement(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.statement(input.into());
        self
    }
    /// <p>Specifies new statement content written in Cedar policy language to replace the current body of the policy template.</p>
    /// <p>You can change only the following elements of the policy body:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy template.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy template.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy template.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy template.</p> </li>
    /// </ul>
    pub fn set_statement(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_statement(input);
        self
    }
    /// <p>Specifies new statement content written in Cedar policy language to replace the current body of the policy template.</p>
    /// <p>You can change only the following elements of the policy body:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy template.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy template.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy template.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy template.</p> </li>
    /// </ul>
    pub fn get_statement(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_statement()
    }
}
