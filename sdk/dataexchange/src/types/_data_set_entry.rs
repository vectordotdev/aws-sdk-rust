// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A data set is an AWS resource with one or more revisions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSetEntry {
    /// <p>The ARN for the data set.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of asset that is added to a data set.</p>
    pub asset_type: ::std::option::Option<crate::types::AssetType>,
    /// <p>The date and time that the data set was created, in ISO 8601 format.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The description for the data set.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the data set.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the data set.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).</p>
    pub origin: ::std::option::Option<crate::types::Origin>,
    /// <p>If the origin of this data set is ENTITLED, includes the details for the product on AWS Marketplace.</p>
    pub origin_details: ::std::option::Option<crate::types::OriginDetails>,
    /// <p>The data set ID of the owned data set corresponding to the entitled data set being viewed. This parameter is returned when a data set owner is viewing the entitled copy of its owned data set.</p>
    pub source_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the data set was last updated, in ISO 8601 format.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataSetEntry {
    /// <p>The ARN for the data set.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The type of asset that is added to a data set.</p>
    pub fn asset_type(&self) -> ::std::option::Option<&crate::types::AssetType> {
        self.asset_type.as_ref()
    }
    /// <p>The date and time that the data set was created, in ISO 8601 format.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The description for the data set.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The unique identifier for the data set.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the data set.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).</p>
    pub fn origin(&self) -> ::std::option::Option<&crate::types::Origin> {
        self.origin.as_ref()
    }
    /// <p>If the origin of this data set is ENTITLED, includes the details for the product on AWS Marketplace.</p>
    pub fn origin_details(&self) -> ::std::option::Option<&crate::types::OriginDetails> {
        self.origin_details.as_ref()
    }
    /// <p>The data set ID of the owned data set corresponding to the entitled data set being viewed. This parameter is returned when a data set owner is viewing the entitled copy of its owned data set.</p>
    pub fn source_id(&self) -> ::std::option::Option<&str> {
        self.source_id.as_deref()
    }
    /// <p>The date and time that the data set was last updated, in ISO 8601 format.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl DataSetEntry {
    /// Creates a new builder-style object to manufacture [`DataSetEntry`](crate::types::DataSetEntry).
    pub fn builder() -> crate::types::builders::DataSetEntryBuilder {
        crate::types::builders::DataSetEntryBuilder::default()
    }
}

/// A builder for [`DataSetEntry`](crate::types::DataSetEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataSetEntryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) asset_type: ::std::option::Option<crate::types::AssetType>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) origin: ::std::option::Option<crate::types::Origin>,
    pub(crate) origin_details: ::std::option::Option<crate::types::OriginDetails>,
    pub(crate) source_id: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DataSetEntryBuilder {
    /// <p>The ARN for the data set.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the data set.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN for the data set.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The type of asset that is added to a data set.</p>
    pub fn asset_type(mut self, input: crate::types::AssetType) -> Self {
        self.asset_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of asset that is added to a data set.</p>
    pub fn set_asset_type(mut self, input: ::std::option::Option<crate::types::AssetType>) -> Self {
        self.asset_type = input;
        self
    }
    /// <p>The type of asset that is added to a data set.</p>
    pub fn get_asset_type(&self) -> &::std::option::Option<crate::types::AssetType> {
        &self.asset_type
    }
    /// <p>The date and time that the data set was created, in ISO 8601 format.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the data set was created, in ISO 8601 format.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time that the data set was created, in ISO 8601 format.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The description for the data set.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the data set.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for the data set.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The unique identifier for the data set.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the data set.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier for the data set.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the data set.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data set.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data set.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).</p>
    pub fn origin(mut self, input: crate::types::Origin) -> Self {
        self.origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).</p>
    pub fn set_origin(mut self, input: ::std::option::Option<crate::types::Origin>) -> Self {
        self.origin = input;
        self
    }
    /// <p>A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).</p>
    pub fn get_origin(&self) -> &::std::option::Option<crate::types::Origin> {
        &self.origin
    }
    /// <p>If the origin of this data set is ENTITLED, includes the details for the product on AWS Marketplace.</p>
    pub fn origin_details(mut self, input: crate::types::OriginDetails) -> Self {
        self.origin_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the origin of this data set is ENTITLED, includes the details for the product on AWS Marketplace.</p>
    pub fn set_origin_details(mut self, input: ::std::option::Option<crate::types::OriginDetails>) -> Self {
        self.origin_details = input;
        self
    }
    /// <p>If the origin of this data set is ENTITLED, includes the details for the product on AWS Marketplace.</p>
    pub fn get_origin_details(&self) -> &::std::option::Option<crate::types::OriginDetails> {
        &self.origin_details
    }
    /// <p>The data set ID of the owned data set corresponding to the entitled data set being viewed. This parameter is returned when a data set owner is viewing the entitled copy of its owned data set.</p>
    pub fn source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data set ID of the owned data set corresponding to the entitled data set being viewed. This parameter is returned when a data set owner is viewing the entitled copy of its owned data set.</p>
    pub fn set_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_id = input;
        self
    }
    /// <p>The data set ID of the owned data set corresponding to the entitled data set being viewed. This parameter is returned when a data set owner is viewing the entitled copy of its owned data set.</p>
    pub fn get_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_id
    }
    /// <p>The date and time that the data set was last updated, in ISO 8601 format.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the data set was last updated, in ISO 8601 format.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time that the data set was last updated, in ISO 8601 format.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`DataSetEntry`](crate::types::DataSetEntry).
    pub fn build(self) -> crate::types::DataSetEntry {
        crate::types::DataSetEntry {
            arn: self.arn,
            asset_type: self.asset_type,
            created_at: self.created_at,
            description: self.description,
            id: self.id,
            name: self.name,
            origin: self.origin,
            origin_details: self.origin_details,
            source_id: self.source_id,
            updated_at: self.updated_at,
        }
    }
}
