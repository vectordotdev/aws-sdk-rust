// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information that describes the configuration of the recommended target engine on Amazon RDS.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsConfiguration {
    /// <p>Describes the recommended target Amazon RDS engine edition.</p>
    pub engine_edition: ::std::option::Option<::std::string::String>,
    /// <p>Describes the recommended target Amazon RDS instance type.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>Describes the number of virtual CPUs (vCPU) on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub instance_vcpu: ::std::option::Option<f64>,
    /// <p>Describes the memory on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub instance_memory: ::std::option::Option<f64>,
    /// <p>Describes the storage type of the recommended Amazon RDS DB instance that meets your requirements.</p>
    /// <p>Amazon RDS provides three storage types: General Purpose SSD (also known as gp2 and gp3), Provisioned IOPS SSD (also known as io1), and magnetic (also known as standard).</p>
    pub storage_type: ::std::option::Option<::std::string::String>,
    /// <p>Describes the storage size of the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub storage_size: ::std::option::Option<i32>,
    /// <p>Describes the number of I/O operations completed each second (IOPS) on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub storage_iops: ::std::option::Option<i32>,
    /// <p>Describes the deployment option for the recommended Amazon RDS DB instance. The deployment options include Multi-AZ and Single-AZ deployments. Valid values include <code>"MULTI_AZ"</code> and <code>"SINGLE_AZ"</code>.</p>
    pub deployment_option: ::std::option::Option<::std::string::String>,
    /// <p>Describes the recommended target Amazon RDS engine version.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
}
impl RdsConfiguration {
    /// <p>Describes the recommended target Amazon RDS engine edition.</p>
    pub fn engine_edition(&self) -> ::std::option::Option<&str> {
        self.engine_edition.as_deref()
    }
    /// <p>Describes the recommended target Amazon RDS instance type.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>Describes the number of virtual CPUs (vCPU) on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn instance_vcpu(&self) -> ::std::option::Option<f64> {
        self.instance_vcpu
    }
    /// <p>Describes the memory on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn instance_memory(&self) -> ::std::option::Option<f64> {
        self.instance_memory
    }
    /// <p>Describes the storage type of the recommended Amazon RDS DB instance that meets your requirements.</p>
    /// <p>Amazon RDS provides three storage types: General Purpose SSD (also known as gp2 and gp3), Provisioned IOPS SSD (also known as io1), and magnetic (also known as standard).</p>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>Describes the storage size of the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn storage_size(&self) -> ::std::option::Option<i32> {
        self.storage_size
    }
    /// <p>Describes the number of I/O operations completed each second (IOPS) on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn storage_iops(&self) -> ::std::option::Option<i32> {
        self.storage_iops
    }
    /// <p>Describes the deployment option for the recommended Amazon RDS DB instance. The deployment options include Multi-AZ and Single-AZ deployments. Valid values include <code>"MULTI_AZ"</code> and <code>"SINGLE_AZ"</code>.</p>
    pub fn deployment_option(&self) -> ::std::option::Option<&str> {
        self.deployment_option.as_deref()
    }
    /// <p>Describes the recommended target Amazon RDS engine version.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
}
impl RdsConfiguration {
    /// Creates a new builder-style object to manufacture [`RdsConfiguration`](crate::types::RdsConfiguration).
    pub fn builder() -> crate::types::builders::RdsConfigurationBuilder {
        crate::types::builders::RdsConfigurationBuilder::default()
    }
}

/// A builder for [`RdsConfiguration`](crate::types::RdsConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RdsConfigurationBuilder {
    pub(crate) engine_edition: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) instance_vcpu: ::std::option::Option<f64>,
    pub(crate) instance_memory: ::std::option::Option<f64>,
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
    pub(crate) storage_size: ::std::option::Option<i32>,
    pub(crate) storage_iops: ::std::option::Option<i32>,
    pub(crate) deployment_option: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
}
impl RdsConfigurationBuilder {
    /// <p>Describes the recommended target Amazon RDS engine edition.</p>
    pub fn engine_edition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_edition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the recommended target Amazon RDS engine edition.</p>
    pub fn set_engine_edition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_edition = input;
        self
    }
    /// <p>Describes the recommended target Amazon RDS engine edition.</p>
    pub fn get_engine_edition(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_edition
    }
    /// <p>Describes the recommended target Amazon RDS instance type.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the recommended target Amazon RDS instance type.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>Describes the recommended target Amazon RDS instance type.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>Describes the number of virtual CPUs (vCPU) on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn instance_vcpu(mut self, input: f64) -> Self {
        self.instance_vcpu = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the number of virtual CPUs (vCPU) on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn set_instance_vcpu(mut self, input: ::std::option::Option<f64>) -> Self {
        self.instance_vcpu = input;
        self
    }
    /// <p>Describes the number of virtual CPUs (vCPU) on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn get_instance_vcpu(&self) -> &::std::option::Option<f64> {
        &self.instance_vcpu
    }
    /// <p>Describes the memory on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn instance_memory(mut self, input: f64) -> Self {
        self.instance_memory = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the memory on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn set_instance_memory(mut self, input: ::std::option::Option<f64>) -> Self {
        self.instance_memory = input;
        self
    }
    /// <p>Describes the memory on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn get_instance_memory(&self) -> &::std::option::Option<f64> {
        &self.instance_memory
    }
    /// <p>Describes the storage type of the recommended Amazon RDS DB instance that meets your requirements.</p>
    /// <p>Amazon RDS provides three storage types: General Purpose SSD (also known as gp2 and gp3), Provisioned IOPS SSD (also known as io1), and magnetic (also known as standard).</p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the storage type of the recommended Amazon RDS DB instance that meets your requirements.</p>
    /// <p>Amazon RDS provides three storage types: General Purpose SSD (also known as gp2 and gp3), Provisioned IOPS SSD (also known as io1), and magnetic (also known as standard).</p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>Describes the storage type of the recommended Amazon RDS DB instance that meets your requirements.</p>
    /// <p>Amazon RDS provides three storage types: General Purpose SSD (also known as gp2 and gp3), Provisioned IOPS SSD (also known as io1), and magnetic (also known as standard).</p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// <p>Describes the storage size of the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn storage_size(mut self, input: i32) -> Self {
        self.storage_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the storage size of the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn set_storage_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.storage_size = input;
        self
    }
    /// <p>Describes the storage size of the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn get_storage_size(&self) -> &::std::option::Option<i32> {
        &self.storage_size
    }
    /// <p>Describes the number of I/O operations completed each second (IOPS) on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn storage_iops(mut self, input: i32) -> Self {
        self.storage_iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the number of I/O operations completed each second (IOPS) on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn set_storage_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.storage_iops = input;
        self
    }
    /// <p>Describes the number of I/O operations completed each second (IOPS) on the recommended Amazon RDS DB instance that meets your requirements.</p>
    pub fn get_storage_iops(&self) -> &::std::option::Option<i32> {
        &self.storage_iops
    }
    /// <p>Describes the deployment option for the recommended Amazon RDS DB instance. The deployment options include Multi-AZ and Single-AZ deployments. Valid values include <code>"MULTI_AZ"</code> and <code>"SINGLE_AZ"</code>.</p>
    pub fn deployment_option(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_option = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the deployment option for the recommended Amazon RDS DB instance. The deployment options include Multi-AZ and Single-AZ deployments. Valid values include <code>"MULTI_AZ"</code> and <code>"SINGLE_AZ"</code>.</p>
    pub fn set_deployment_option(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_option = input;
        self
    }
    /// <p>Describes the deployment option for the recommended Amazon RDS DB instance. The deployment options include Multi-AZ and Single-AZ deployments. Valid values include <code>"MULTI_AZ"</code> and <code>"SINGLE_AZ"</code>.</p>
    pub fn get_deployment_option(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_option
    }
    /// <p>Describes the recommended target Amazon RDS engine version.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the recommended target Amazon RDS engine version.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>Describes the recommended target Amazon RDS engine version.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// Consumes the builder and constructs a [`RdsConfiguration`](crate::types::RdsConfiguration).
    pub fn build(self) -> crate::types::RdsConfiguration {
        crate::types::RdsConfiguration {
            engine_edition: self.engine_edition,
            instance_type: self.instance_type,
            instance_vcpu: self.instance_vcpu,
            instance_memory: self.instance_memory,
            storage_type: self.storage_type,
            storage_size: self.storage_size,
            storage_iops: self.storage_iops,
            deployment_option: self.deployment_option,
            engine_version: self.engine_version,
        }
    }
}
