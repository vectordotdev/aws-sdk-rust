// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about provisioning resources for an DMS serverless replication.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProvisionData {
    /// <p>The current provisioning state </p>
    pub provision_state: ::std::option::Option<::std::string::String>,
    /// <p>The number of capacity units the replication is using.</p>
    pub provisioned_capacity_units: i32,
    /// <p>The timestamp when DMS provisioned replication resources.</p>
    pub date_provisioned: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Whether the new provisioning is available to the replication.</p>
    pub is_new_provisioning_available: bool,
    /// <p>The timestamp when provisioning became available.</p>
    pub date_new_provisioning_data_available: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A message describing the reason that DMS provisioned new resources for the serverless replication.</p>
    pub reason_for_new_provisioning_data: ::std::option::Option<::std::string::String>,
}
impl ProvisionData {
    /// <p>The current provisioning state </p>
    pub fn provision_state(&self) -> ::std::option::Option<&str> {
        self.provision_state.as_deref()
    }
    /// <p>The number of capacity units the replication is using.</p>
    pub fn provisioned_capacity_units(&self) -> i32 {
        self.provisioned_capacity_units
    }
    /// <p>The timestamp when DMS provisioned replication resources.</p>
    pub fn date_provisioned(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_provisioned.as_ref()
    }
    /// <p>Whether the new provisioning is available to the replication.</p>
    pub fn is_new_provisioning_available(&self) -> bool {
        self.is_new_provisioning_available
    }
    /// <p>The timestamp when provisioning became available.</p>
    pub fn date_new_provisioning_data_available(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_new_provisioning_data_available.as_ref()
    }
    /// <p>A message describing the reason that DMS provisioned new resources for the serverless replication.</p>
    pub fn reason_for_new_provisioning_data(&self) -> ::std::option::Option<&str> {
        self.reason_for_new_provisioning_data.as_deref()
    }
}
impl ProvisionData {
    /// Creates a new builder-style object to manufacture [`ProvisionData`](crate::types::ProvisionData).
    pub fn builder() -> crate::types::builders::ProvisionDataBuilder {
        crate::types::builders::ProvisionDataBuilder::default()
    }
}

/// A builder for [`ProvisionData`](crate::types::ProvisionData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProvisionDataBuilder {
    pub(crate) provision_state: ::std::option::Option<::std::string::String>,
    pub(crate) provisioned_capacity_units: ::std::option::Option<i32>,
    pub(crate) date_provisioned: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) is_new_provisioning_available: ::std::option::Option<bool>,
    pub(crate) date_new_provisioning_data_available: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) reason_for_new_provisioning_data: ::std::option::Option<::std::string::String>,
}
impl ProvisionDataBuilder {
    /// <p>The current provisioning state </p>
    pub fn provision_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provision_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current provisioning state </p>
    pub fn set_provision_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provision_state = input;
        self
    }
    /// <p>The current provisioning state </p>
    pub fn get_provision_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.provision_state
    }
    /// <p>The number of capacity units the replication is using.</p>
    pub fn provisioned_capacity_units(mut self, input: i32) -> Self {
        self.provisioned_capacity_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of capacity units the replication is using.</p>
    pub fn set_provisioned_capacity_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.provisioned_capacity_units = input;
        self
    }
    /// <p>The number of capacity units the replication is using.</p>
    pub fn get_provisioned_capacity_units(&self) -> &::std::option::Option<i32> {
        &self.provisioned_capacity_units
    }
    /// <p>The timestamp when DMS provisioned replication resources.</p>
    pub fn date_provisioned(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_provisioned = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when DMS provisioned replication resources.</p>
    pub fn set_date_provisioned(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_provisioned = input;
        self
    }
    /// <p>The timestamp when DMS provisioned replication resources.</p>
    pub fn get_date_provisioned(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_provisioned
    }
    /// <p>Whether the new provisioning is available to the replication.</p>
    pub fn is_new_provisioning_available(mut self, input: bool) -> Self {
        self.is_new_provisioning_available = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the new provisioning is available to the replication.</p>
    pub fn set_is_new_provisioning_available(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_new_provisioning_available = input;
        self
    }
    /// <p>Whether the new provisioning is available to the replication.</p>
    pub fn get_is_new_provisioning_available(&self) -> &::std::option::Option<bool> {
        &self.is_new_provisioning_available
    }
    /// <p>The timestamp when provisioning became available.</p>
    pub fn date_new_provisioning_data_available(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_new_provisioning_data_available = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when provisioning became available.</p>
    pub fn set_date_new_provisioning_data_available(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_new_provisioning_data_available = input;
        self
    }
    /// <p>The timestamp when provisioning became available.</p>
    pub fn get_date_new_provisioning_data_available(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_new_provisioning_data_available
    }
    /// <p>A message describing the reason that DMS provisioned new resources for the serverless replication.</p>
    pub fn reason_for_new_provisioning_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason_for_new_provisioning_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message describing the reason that DMS provisioned new resources for the serverless replication.</p>
    pub fn set_reason_for_new_provisioning_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason_for_new_provisioning_data = input;
        self
    }
    /// <p>A message describing the reason that DMS provisioned new resources for the serverless replication.</p>
    pub fn get_reason_for_new_provisioning_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason_for_new_provisioning_data
    }
    /// Consumes the builder and constructs a [`ProvisionData`](crate::types::ProvisionData).
    pub fn build(self) -> crate::types::ProvisionData {
        crate::types::ProvisionData {
            provision_state: self.provision_state,
            provisioned_capacity_units: self.provisioned_capacity_units.unwrap_or_default(),
            date_provisioned: self.date_provisioned,
            is_new_provisioning_available: self.is_new_provisioning_available.unwrap_or_default(),
            date_new_provisioning_data_available: self.date_new_provisioning_data_available,
            reason_for_new_provisioning_data: self.reason_for_new_provisioning_data,
        }
    }
}
