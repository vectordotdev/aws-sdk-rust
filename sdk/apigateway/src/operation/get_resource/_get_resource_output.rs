// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an API resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetResourceOutput {
    /// <p>The resource's identifier.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The parent resource's identifier.</p>
    pub parent_id: ::std::option::Option<::std::string::String>,
    /// <p>The last path segment for this resource.</p>
    pub path_part: ::std::option::Option<::std::string::String>,
    /// <p>The full path for this resource.</p>
    pub path: ::std::option::Option<::std::string::String>,
    /// <p>Gets an API resource's method of a given HTTP verb.</p>
    pub resource_methods: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Method>>,
    _request_id: Option<String>,
}
impl GetResourceOutput {
    /// <p>The resource's identifier.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The parent resource's identifier.</p>
    pub fn parent_id(&self) -> ::std::option::Option<&str> {
        self.parent_id.as_deref()
    }
    /// <p>The last path segment for this resource.</p>
    pub fn path_part(&self) -> ::std::option::Option<&str> {
        self.path_part.as_deref()
    }
    /// <p>The full path for this resource.</p>
    pub fn path(&self) -> ::std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>Gets an API resource's method of a given HTTP verb.</p>
    pub fn resource_methods(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Method>> {
        self.resource_methods.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetResourceOutput {
    /// Creates a new builder-style object to manufacture [`GetResourceOutput`](crate::operation::get_resource::GetResourceOutput).
    pub fn builder() -> crate::operation::get_resource::builders::GetResourceOutputBuilder {
        crate::operation::get_resource::builders::GetResourceOutputBuilder::default()
    }
}

/// A builder for [`GetResourceOutput`](crate::operation::get_resource::GetResourceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetResourceOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) parent_id: ::std::option::Option<::std::string::String>,
    pub(crate) path_part: ::std::option::Option<::std::string::String>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) resource_methods: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Method>>,
    _request_id: Option<String>,
}
impl GetResourceOutputBuilder {
    /// <p>The resource's identifier.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource's identifier.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The resource's identifier.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The parent resource's identifier.</p>
    pub fn parent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parent resource's identifier.</p>
    pub fn set_parent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_id = input;
        self
    }
    /// <p>The parent resource's identifier.</p>
    pub fn get_parent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_id
    }
    /// <p>The last path segment for this resource.</p>
    pub fn path_part(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path_part = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last path segment for this resource.</p>
    pub fn set_path_part(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path_part = input;
        self
    }
    /// <p>The last path segment for this resource.</p>
    pub fn get_path_part(&self) -> &::std::option::Option<::std::string::String> {
        &self.path_part
    }
    /// <p>The full path for this resource.</p>
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full path for this resource.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The full path for this resource.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// Adds a key-value pair to `resource_methods`.
    ///
    /// To override the contents of this collection use [`set_resource_methods`](Self::set_resource_methods).
    ///
    /// <p>Gets an API resource's method of a given HTTP verb.</p>
    pub fn resource_methods(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Method) -> Self {
        let mut hash_map = self.resource_methods.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.resource_methods = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Gets an API resource's method of a given HTTP verb.</p>
    pub fn set_resource_methods(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Method>>,
    ) -> Self {
        self.resource_methods = input;
        self
    }
    /// <p>Gets an API resource's method of a given HTTP verb.</p>
    pub fn get_resource_methods(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Method>> {
        &self.resource_methods
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetResourceOutput`](crate::operation::get_resource::GetResourceOutput).
    pub fn build(self) -> crate::operation::get_resource::GetResourceOutput {
        crate::operation::get_resource::GetResourceOutput {
            id: self.id,
            parent_id: self.parent_id,
            path_part: self.path_part,
            path: self.path,
            resource_methods: self.resource_methods,
            _request_id: self._request_id,
        }
    }
}
