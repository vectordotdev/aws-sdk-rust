// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSolFunctionPackageContentOutput {
    /// <p>Indicates the media type of the resource.</p>
    pub content_type: ::std::option::Option<crate::types::PackageContentType>,
    /// <p>Contents of the function package.</p>
    pub package_content: ::std::option::Option<::aws_smithy_types::Blob>,
    _request_id: Option<String>,
}
impl GetSolFunctionPackageContentOutput {
    /// <p>Indicates the media type of the resource.</p>
    pub fn content_type(&self) -> ::std::option::Option<&crate::types::PackageContentType> {
        self.content_type.as_ref()
    }
    /// <p>Contents of the function package.</p>
    pub fn package_content(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.package_content.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetSolFunctionPackageContentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSolFunctionPackageContentOutput {
    /// Creates a new builder-style object to manufacture [`GetSolFunctionPackageContentOutput`](crate::operation::get_sol_function_package_content::GetSolFunctionPackageContentOutput).
    pub fn builder() -> crate::operation::get_sol_function_package_content::builders::GetSolFunctionPackageContentOutputBuilder {
        crate::operation::get_sol_function_package_content::builders::GetSolFunctionPackageContentOutputBuilder::default()
    }
}

/// A builder for [`GetSolFunctionPackageContentOutput`](crate::operation::get_sol_function_package_content::GetSolFunctionPackageContentOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSolFunctionPackageContentOutputBuilder {
    pub(crate) content_type: ::std::option::Option<crate::types::PackageContentType>,
    pub(crate) package_content: ::std::option::Option<::aws_smithy_types::Blob>,
    _request_id: Option<String>,
}
impl GetSolFunctionPackageContentOutputBuilder {
    /// <p>Indicates the media type of the resource.</p>
    pub fn content_type(mut self, input: crate::types::PackageContentType) -> Self {
        self.content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the media type of the resource.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<crate::types::PackageContentType>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>Indicates the media type of the resource.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<crate::types::PackageContentType> {
        &self.content_type
    }
    /// <p>Contents of the function package.</p>
    pub fn package_content(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.package_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contents of the function package.</p>
    pub fn set_package_content(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.package_content = input;
        self
    }
    /// <p>Contents of the function package.</p>
    pub fn get_package_content(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.package_content
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSolFunctionPackageContentOutput`](crate::operation::get_sol_function_package_content::GetSolFunctionPackageContentOutput).
    pub fn build(self) -> crate::operation::get_sol_function_package_content::GetSolFunctionPackageContentOutput {
        crate::operation::get_sol_function_package_content::GetSolFunctionPackageContentOutput {
            content_type: self.content_type,
            package_content: self.package_content,
            _request_id: self._request_id,
        }
    }
}
