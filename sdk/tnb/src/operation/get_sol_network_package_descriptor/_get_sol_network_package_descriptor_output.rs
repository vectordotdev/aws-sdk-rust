// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSolNetworkPackageDescriptorOutput {
    /// <p>Indicates the media type of the resource.</p>
    pub content_type: ::std::option::Option<crate::types::DescriptorContentType>,
    /// <p>Contents of the network service descriptor in the network package.</p>
    pub nsd: ::std::option::Option<::aws_smithy_types::Blob>,
    _request_id: Option<String>,
}
impl GetSolNetworkPackageDescriptorOutput {
    /// <p>Indicates the media type of the resource.</p>
    pub fn content_type(&self) -> ::std::option::Option<&crate::types::DescriptorContentType> {
        self.content_type.as_ref()
    }
    /// <p>Contents of the network service descriptor in the network package.</p>
    pub fn nsd(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.nsd.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetSolNetworkPackageDescriptorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSolNetworkPackageDescriptorOutput {
    /// Creates a new builder-style object to manufacture [`GetSolNetworkPackageDescriptorOutput`](crate::operation::get_sol_network_package_descriptor::GetSolNetworkPackageDescriptorOutput).
    pub fn builder() -> crate::operation::get_sol_network_package_descriptor::builders::GetSolNetworkPackageDescriptorOutputBuilder {
        crate::operation::get_sol_network_package_descriptor::builders::GetSolNetworkPackageDescriptorOutputBuilder::default()
    }
}

/// A builder for [`GetSolNetworkPackageDescriptorOutput`](crate::operation::get_sol_network_package_descriptor::GetSolNetworkPackageDescriptorOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSolNetworkPackageDescriptorOutputBuilder {
    pub(crate) content_type: ::std::option::Option<crate::types::DescriptorContentType>,
    pub(crate) nsd: ::std::option::Option<::aws_smithy_types::Blob>,
    _request_id: Option<String>,
}
impl GetSolNetworkPackageDescriptorOutputBuilder {
    /// <p>Indicates the media type of the resource.</p>
    pub fn content_type(mut self, input: crate::types::DescriptorContentType) -> Self {
        self.content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the media type of the resource.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<crate::types::DescriptorContentType>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>Indicates the media type of the resource.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<crate::types::DescriptorContentType> {
        &self.content_type
    }
    /// <p>Contents of the network service descriptor in the network package.</p>
    pub fn nsd(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.nsd = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contents of the network service descriptor in the network package.</p>
    pub fn set_nsd(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.nsd = input;
        self
    }
    /// <p>Contents of the network service descriptor in the network package.</p>
    pub fn get_nsd(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.nsd
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSolNetworkPackageDescriptorOutput`](crate::operation::get_sol_network_package_descriptor::GetSolNetworkPackageDescriptorOutput).
    pub fn build(self) -> crate::operation::get_sol_network_package_descriptor::GetSolNetworkPackageDescriptorOutput {
        crate::operation::get_sol_network_package_descriptor::GetSolNetworkPackageDescriptorOutput {
            content_type: self.content_type,
            nsd: self.nsd,
            _request_id: self._request_id,
        }
    }
}
