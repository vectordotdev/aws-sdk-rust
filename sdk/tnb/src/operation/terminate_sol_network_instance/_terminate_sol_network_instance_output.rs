// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TerminateSolNetworkInstanceOutput {
    /// <p>The identifier of the network operation.</p>
    pub ns_lcm_op_occ_id: ::std::option::Option<::std::string::String>,
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl TerminateSolNetworkInstanceOutput {
    /// <p>The identifier of the network operation.</p>
    pub fn ns_lcm_op_occ_id(&self) -> ::std::option::Option<&str> {
        self.ns_lcm_op_occ_id.as_deref()
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for TerminateSolNetworkInstanceOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TerminateSolNetworkInstanceOutput");
        formatter.field("ns_lcm_op_occ_id", &self.ns_lcm_op_occ_id);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for TerminateSolNetworkInstanceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TerminateSolNetworkInstanceOutput {
    /// Creates a new builder-style object to manufacture [`TerminateSolNetworkInstanceOutput`](crate::operation::terminate_sol_network_instance::TerminateSolNetworkInstanceOutput).
    pub fn builder() -> crate::operation::terminate_sol_network_instance::builders::TerminateSolNetworkInstanceOutputBuilder {
        crate::operation::terminate_sol_network_instance::builders::TerminateSolNetworkInstanceOutputBuilder::default()
    }
}

/// A builder for [`TerminateSolNetworkInstanceOutput`](crate::operation::terminate_sol_network_instance::TerminateSolNetworkInstanceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TerminateSolNetworkInstanceOutputBuilder {
    pub(crate) ns_lcm_op_occ_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl TerminateSolNetworkInstanceOutputBuilder {
    /// <p>The identifier of the network operation.</p>
    pub fn ns_lcm_op_occ_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_lcm_op_occ_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the network operation.</p>
    pub fn set_ns_lcm_op_occ_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_lcm_op_occ_id = input;
        self
    }
    /// <p>The identifier of the network operation.</p>
    pub fn get_ns_lcm_op_occ_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_lcm_op_occ_id
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. When you use this API, the tags are transferred to the network operation that is created. Use tags to search and filter your resources or track your Amazon Web Services costs.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`TerminateSolNetworkInstanceOutput`](crate::operation::terminate_sol_network_instance::TerminateSolNetworkInstanceOutput).
    pub fn build(self) -> crate::operation::terminate_sol_network_instance::TerminateSolNetworkInstanceOutput {
        crate::operation::terminate_sol_network_instance::TerminateSolNetworkInstanceOutput {
            ns_lcm_op_occ_id: self.ns_lcm_op_occ_id,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for TerminateSolNetworkInstanceOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TerminateSolNetworkInstanceOutputBuilder");
        formatter.field("ns_lcm_op_occ_id", &self.ns_lcm_op_occ_id);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
