// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutSolFunctionPackageContentOutput {
    /// <p>Function package ID.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Function package descriptor ID.</p>
    pub vnfd_id: ::std::option::Option<::std::string::String>,
    /// <p>Function product name.</p>
    pub vnf_product_name: ::std::option::Option<::std::string::String>,
    /// <p>Function provider.</p>
    pub vnf_provider: ::std::option::Option<::std::string::String>,
    /// <p>Function package descriptor version.</p>
    pub vnfd_version: ::std::option::Option<::std::string::String>,
    /// <p>Function package metadata.</p>
    pub metadata: ::std::option::Option<crate::types::PutSolFunctionPackageContentMetadata>,
    _request_id: Option<String>,
}
impl PutSolFunctionPackageContentOutput {
    /// <p>Function package ID.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Function package descriptor ID.</p>
    pub fn vnfd_id(&self) -> ::std::option::Option<&str> {
        self.vnfd_id.as_deref()
    }
    /// <p>Function product name.</p>
    pub fn vnf_product_name(&self) -> ::std::option::Option<&str> {
        self.vnf_product_name.as_deref()
    }
    /// <p>Function provider.</p>
    pub fn vnf_provider(&self) -> ::std::option::Option<&str> {
        self.vnf_provider.as_deref()
    }
    /// <p>Function package descriptor version.</p>
    pub fn vnfd_version(&self) -> ::std::option::Option<&str> {
        self.vnfd_version.as_deref()
    }
    /// <p>Function package metadata.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::PutSolFunctionPackageContentMetadata> {
        self.metadata.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for PutSolFunctionPackageContentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutSolFunctionPackageContentOutput {
    /// Creates a new builder-style object to manufacture [`PutSolFunctionPackageContentOutput`](crate::operation::put_sol_function_package_content::PutSolFunctionPackageContentOutput).
    pub fn builder() -> crate::operation::put_sol_function_package_content::builders::PutSolFunctionPackageContentOutputBuilder {
        crate::operation::put_sol_function_package_content::builders::PutSolFunctionPackageContentOutputBuilder::default()
    }
}

/// A builder for [`PutSolFunctionPackageContentOutput`](crate::operation::put_sol_function_package_content::PutSolFunctionPackageContentOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutSolFunctionPackageContentOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) vnfd_id: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_product_name: ::std::option::Option<::std::string::String>,
    pub(crate) vnf_provider: ::std::option::Option<::std::string::String>,
    pub(crate) vnfd_version: ::std::option::Option<::std::string::String>,
    pub(crate) metadata: ::std::option::Option<crate::types::PutSolFunctionPackageContentMetadata>,
    _request_id: Option<String>,
}
impl PutSolFunctionPackageContentOutputBuilder {
    /// <p>Function package ID.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function package ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Function package ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Function package descriptor ID.</p>
    pub fn vnfd_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnfd_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function package descriptor ID.</p>
    pub fn set_vnfd_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnfd_id = input;
        self
    }
    /// <p>Function package descriptor ID.</p>
    pub fn get_vnfd_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnfd_id
    }
    /// <p>Function product name.</p>
    pub fn vnf_product_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnf_product_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function product name.</p>
    pub fn set_vnf_product_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnf_product_name = input;
        self
    }
    /// <p>Function product name.</p>
    pub fn get_vnf_product_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnf_product_name
    }
    /// <p>Function provider.</p>
    pub fn vnf_provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnf_provider = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function provider.</p>
    pub fn set_vnf_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnf_provider = input;
        self
    }
    /// <p>Function provider.</p>
    pub fn get_vnf_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnf_provider
    }
    /// <p>Function package descriptor version.</p>
    pub fn vnfd_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vnfd_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Function package descriptor version.</p>
    pub fn set_vnfd_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vnfd_version = input;
        self
    }
    /// <p>Function package descriptor version.</p>
    pub fn get_vnfd_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.vnfd_version
    }
    /// <p>Function package metadata.</p>
    pub fn metadata(mut self, input: crate::types::PutSolFunctionPackageContentMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Function package metadata.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::PutSolFunctionPackageContentMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Function package metadata.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::PutSolFunctionPackageContentMetadata> {
        &self.metadata
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutSolFunctionPackageContentOutput`](crate::operation::put_sol_function_package_content::PutSolFunctionPackageContentOutput).
    pub fn build(self) -> crate::operation::put_sol_function_package_content::PutSolFunctionPackageContentOutput {
        crate::operation::put_sol_function_package_content::PutSolFunctionPackageContentOutput {
            id: self.id,
            vnfd_id: self.vnfd_id,
            vnf_product_name: self.vnf_product_name,
            vnf_provider: self.vnf_provider,
            vnfd_version: self.vnfd_version,
            metadata: self.metadata,
            _request_id: self._request_id,
        }
    }
}
