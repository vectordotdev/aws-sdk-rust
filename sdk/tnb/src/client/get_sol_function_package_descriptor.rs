// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetSolFunctionPackageDescriptor`](crate::operation::get_sol_function_package_descriptor::builders::GetSolFunctionPackageDescriptorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vnf_pkg_id(impl ::std::convert::Into<String>)`](crate::operation::get_sol_function_package_descriptor::builders::GetSolFunctionPackageDescriptorFluentBuilder::vnf_pkg_id) / [`set_vnf_pkg_id(Option<String>)`](crate::operation::get_sol_function_package_descriptor::builders::GetSolFunctionPackageDescriptorFluentBuilder::set_vnf_pkg_id): <p>ID of the function package.</p>
    ///   - [`accept(DescriptorContentType)`](crate::operation::get_sol_function_package_descriptor::builders::GetSolFunctionPackageDescriptorFluentBuilder::accept) / [`set_accept(Option<DescriptorContentType>)`](crate::operation::get_sol_function_package_descriptor::builders::GetSolFunctionPackageDescriptorFluentBuilder::set_accept): <p>Indicates which content types, expressed as MIME types, the client is able to understand.</p>
    /// - On success, responds with [`GetSolFunctionPackageDescriptorOutput`](crate::operation::get_sol_function_package_descriptor::GetSolFunctionPackageDescriptorOutput) with field(s):
    ///   - [`content_type(Option<DescriptorContentType>)`](crate::operation::get_sol_function_package_descriptor::GetSolFunctionPackageDescriptorOutput::content_type): <p>Indicates the media type of the resource.</p>
    ///   - [`vnfd(Option<Blob>)`](crate::operation::get_sol_function_package_descriptor::GetSolFunctionPackageDescriptorOutput::vnfd): <p>Contents of the function package descriptor.</p>
    /// - On failure, responds with [`SdkError<GetSolFunctionPackageDescriptorError>`](crate::operation::get_sol_function_package_descriptor::GetSolFunctionPackageDescriptorError)
    pub fn get_sol_function_package_descriptor(
        &self,
    ) -> crate::operation::get_sol_function_package_descriptor::builders::GetSolFunctionPackageDescriptorFluentBuilder {
        crate::operation::get_sol_function_package_descriptor::builders::GetSolFunctionPackageDescriptorFluentBuilder::new(self.handle.clone())
    }
}
