// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides error information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ErrorInfo {
    /// <p>Error cause.</p>
    pub cause: ::std::option::Option<::std::string::String>,
    /// <p>Error details.</p>
    pub details: ::std::option::Option<::std::string::String>,
}
impl ErrorInfo {
    /// <p>Error cause.</p>
    pub fn cause(&self) -> ::std::option::Option<&str> {
        self.cause.as_deref()
    }
    /// <p>Error details.</p>
    pub fn details(&self) -> ::std::option::Option<&str> {
        self.details.as_deref()
    }
}
impl ErrorInfo {
    /// Creates a new builder-style object to manufacture [`ErrorInfo`](crate::types::ErrorInfo).
    pub fn builder() -> crate::types::builders::ErrorInfoBuilder {
        crate::types::builders::ErrorInfoBuilder::default()
    }
}

/// A builder for [`ErrorInfo`](crate::types::ErrorInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ErrorInfoBuilder {
    pub(crate) cause: ::std::option::Option<::std::string::String>,
    pub(crate) details: ::std::option::Option<::std::string::String>,
}
impl ErrorInfoBuilder {
    /// <p>Error cause.</p>
    pub fn cause(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cause = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error cause.</p>
    pub fn set_cause(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cause = input;
        self
    }
    /// <p>Error cause.</p>
    pub fn get_cause(&self) -> &::std::option::Option<::std::string::String> {
        &self.cause
    }
    /// <p>Error details.</p>
    pub fn details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error details.</p>
    pub fn set_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.details = input;
        self
    }
    /// <p>Error details.</p>
    pub fn get_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.details
    }
    /// Consumes the builder and constructs a [`ErrorInfo`](crate::types::ErrorInfo).
    pub fn build(self) -> crate::types::ErrorInfo {
        crate::types::ErrorInfo {
            cause: self.cause,
            details: self.details,
        }
    }
}
