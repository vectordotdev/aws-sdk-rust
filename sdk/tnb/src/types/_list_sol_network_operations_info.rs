// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information parameters for a network operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSolNetworkOperationsInfo {
    /// <p>ID of this network operation.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Network operation ARN.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of the network operation.</p>
    pub operation_state: ::std::option::Option<crate::types::NsLcmOperationState>,
    /// <p>ID of the network instance related to this operation.</p>
    pub ns_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>Type of lifecycle management network operation.</p>
    pub lcm_operation_type: ::std::option::Option<crate::types::LcmOperationType>,
    /// <p>Error related to this specific network operation.</p>
    pub error: ::std::option::Option<crate::types::ProblemDetails>,
    /// <p>Metadata related to this network operation.</p>
    pub metadata: ::std::option::Option<crate::types::ListSolNetworkOperationsMetadata>,
}
impl ListSolNetworkOperationsInfo {
    /// <p>ID of this network operation.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Network operation ARN.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The state of the network operation.</p>
    pub fn operation_state(&self) -> ::std::option::Option<&crate::types::NsLcmOperationState> {
        self.operation_state.as_ref()
    }
    /// <p>ID of the network instance related to this operation.</p>
    pub fn ns_instance_id(&self) -> ::std::option::Option<&str> {
        self.ns_instance_id.as_deref()
    }
    /// <p>Type of lifecycle management network operation.</p>
    pub fn lcm_operation_type(&self) -> ::std::option::Option<&crate::types::LcmOperationType> {
        self.lcm_operation_type.as_ref()
    }
    /// <p>Error related to this specific network operation.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ProblemDetails> {
        self.error.as_ref()
    }
    /// <p>Metadata related to this network operation.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::ListSolNetworkOperationsMetadata> {
        self.metadata.as_ref()
    }
}
impl ListSolNetworkOperationsInfo {
    /// Creates a new builder-style object to manufacture [`ListSolNetworkOperationsInfo`](crate::types::ListSolNetworkOperationsInfo).
    pub fn builder() -> crate::types::builders::ListSolNetworkOperationsInfoBuilder {
        crate::types::builders::ListSolNetworkOperationsInfoBuilder::default()
    }
}

/// A builder for [`ListSolNetworkOperationsInfo`](crate::types::ListSolNetworkOperationsInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSolNetworkOperationsInfoBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) operation_state: ::std::option::Option<crate::types::NsLcmOperationState>,
    pub(crate) ns_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) lcm_operation_type: ::std::option::Option<crate::types::LcmOperationType>,
    pub(crate) error: ::std::option::Option<crate::types::ProblemDetails>,
    pub(crate) metadata: ::std::option::Option<crate::types::ListSolNetworkOperationsMetadata>,
}
impl ListSolNetworkOperationsInfoBuilder {
    /// <p>ID of this network operation.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of this network operation.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>ID of this network operation.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Network operation ARN.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Network operation ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Network operation ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The state of the network operation.</p>
    pub fn operation_state(mut self, input: crate::types::NsLcmOperationState) -> Self {
        self.operation_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the network operation.</p>
    pub fn set_operation_state(mut self, input: ::std::option::Option<crate::types::NsLcmOperationState>) -> Self {
        self.operation_state = input;
        self
    }
    /// <p>The state of the network operation.</p>
    pub fn get_operation_state(&self) -> &::std::option::Option<crate::types::NsLcmOperationState> {
        &self.operation_state
    }
    /// <p>ID of the network instance related to this operation.</p>
    pub fn ns_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ns_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ID of the network instance related to this operation.</p>
    pub fn set_ns_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ns_instance_id = input;
        self
    }
    /// <p>ID of the network instance related to this operation.</p>
    pub fn get_ns_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ns_instance_id
    }
    /// <p>Type of lifecycle management network operation.</p>
    pub fn lcm_operation_type(mut self, input: crate::types::LcmOperationType) -> Self {
        self.lcm_operation_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type of lifecycle management network operation.</p>
    pub fn set_lcm_operation_type(mut self, input: ::std::option::Option<crate::types::LcmOperationType>) -> Self {
        self.lcm_operation_type = input;
        self
    }
    /// <p>Type of lifecycle management network operation.</p>
    pub fn get_lcm_operation_type(&self) -> &::std::option::Option<crate::types::LcmOperationType> {
        &self.lcm_operation_type
    }
    /// <p>Error related to this specific network operation.</p>
    pub fn error(mut self, input: crate::types::ProblemDetails) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Error related to this specific network operation.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ProblemDetails>) -> Self {
        self.error = input;
        self
    }
    /// <p>Error related to this specific network operation.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ProblemDetails> {
        &self.error
    }
    /// <p>Metadata related to this network operation.</p>
    pub fn metadata(mut self, input: crate::types::ListSolNetworkOperationsMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metadata related to this network operation.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::ListSolNetworkOperationsMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Metadata related to this network operation.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::ListSolNetworkOperationsMetadata> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`ListSolNetworkOperationsInfo`](crate::types::ListSolNetworkOperationsInfo).
    pub fn build(self) -> crate::types::ListSolNetworkOperationsInfo {
        crate::types::ListSolNetworkOperationsInfo {
            id: self.id,
            arn: self.arn,
            operation_state: self.operation_state,
            ns_instance_id: self.ns_instance_id,
            lcm_operation_type: self.lcm_operation_type,
            error: self.error,
            metadata: self.metadata,
        }
    }
}
