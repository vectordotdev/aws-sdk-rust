// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Update metadata in a network package.</p>
/// <p>A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutSolNetworkPackageContentMetadata {
    /// <p>Metadata for network package artifacts.</p>
    /// <p>Artifacts are the contents of the package descriptor file and the state of the package.</p>
    pub nsd: ::std::option::Option<crate::types::NetworkArtifactMeta>,
}
impl PutSolNetworkPackageContentMetadata {
    /// <p>Metadata for network package artifacts.</p>
    /// <p>Artifacts are the contents of the package descriptor file and the state of the package.</p>
    pub fn nsd(&self) -> ::std::option::Option<&crate::types::NetworkArtifactMeta> {
        self.nsd.as_ref()
    }
}
impl PutSolNetworkPackageContentMetadata {
    /// Creates a new builder-style object to manufacture [`PutSolNetworkPackageContentMetadata`](crate::types::PutSolNetworkPackageContentMetadata).
    pub fn builder() -> crate::types::builders::PutSolNetworkPackageContentMetadataBuilder {
        crate::types::builders::PutSolNetworkPackageContentMetadataBuilder::default()
    }
}

/// A builder for [`PutSolNetworkPackageContentMetadata`](crate::types::PutSolNetworkPackageContentMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutSolNetworkPackageContentMetadataBuilder {
    pub(crate) nsd: ::std::option::Option<crate::types::NetworkArtifactMeta>,
}
impl PutSolNetworkPackageContentMetadataBuilder {
    /// <p>Metadata for network package artifacts.</p>
    /// <p>Artifacts are the contents of the package descriptor file and the state of the package.</p>
    pub fn nsd(mut self, input: crate::types::NetworkArtifactMeta) -> Self {
        self.nsd = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metadata for network package artifacts.</p>
    /// <p>Artifacts are the contents of the package descriptor file and the state of the package.</p>
    pub fn set_nsd(mut self, input: ::std::option::Option<crate::types::NetworkArtifactMeta>) -> Self {
        self.nsd = input;
        self
    }
    /// <p>Metadata for network package artifacts.</p>
    /// <p>Artifacts are the contents of the package descriptor file and the state of the package.</p>
    pub fn get_nsd(&self) -> &::std::option::Option<crate::types::NetworkArtifactMeta> {
        &self.nsd
    }
    /// Consumes the builder and constructs a [`PutSolNetworkPackageContentMetadata`](crate::types::PutSolNetworkPackageContentMetadata).
    pub fn build(self) -> crate::types::PutSolNetworkPackageContentMetadata {
        crate::types::PutSolNetworkPackageContentMetadata { nsd: self.nsd }
    }
}
