// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Output data type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Output {
    /// <p>The key associated with the output.</p>
    pub output_key: ::std::option::Option<::std::string::String>,
    /// <p>The value associated with the output.</p>
    pub output_value: ::std::option::Option<::std::string::String>,
    /// <p>User defined description associated with the output.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the export associated with the output.</p>
    pub export_name: ::std::option::Option<::std::string::String>,
}
impl Output {
    /// <p>The key associated with the output.</p>
    pub fn output_key(&self) -> ::std::option::Option<&str> {
        self.output_key.as_deref()
    }
    /// <p>The value associated with the output.</p>
    pub fn output_value(&self) -> ::std::option::Option<&str> {
        self.output_value.as_deref()
    }
    /// <p>User defined description associated with the output.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the export associated with the output.</p>
    pub fn export_name(&self) -> ::std::option::Option<&str> {
        self.export_name.as_deref()
    }
}
impl Output {
    /// Creates a new builder-style object to manufacture [`Output`](crate::types::Output).
    pub fn builder() -> crate::types::builders::OutputBuilder {
        crate::types::builders::OutputBuilder::default()
    }
}

/// A builder for [`Output`](crate::types::Output).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OutputBuilder {
    pub(crate) output_key: ::std::option::Option<::std::string::String>,
    pub(crate) output_value: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) export_name: ::std::option::Option<::std::string::String>,
}
impl OutputBuilder {
    /// <p>The key associated with the output.</p>
    pub fn output_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key associated with the output.</p>
    pub fn set_output_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_key = input;
        self
    }
    /// <p>The key associated with the output.</p>
    pub fn get_output_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_key
    }
    /// <p>The value associated with the output.</p>
    pub fn output_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value associated with the output.</p>
    pub fn set_output_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_value = input;
        self
    }
    /// <p>The value associated with the output.</p>
    pub fn get_output_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_value
    }
    /// <p>User defined description associated with the output.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>User defined description associated with the output.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>User defined description associated with the output.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the export associated with the output.</p>
    pub fn export_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.export_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the export associated with the output.</p>
    pub fn set_export_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.export_name = input;
        self
    }
    /// <p>The name of the export associated with the output.</p>
    pub fn get_export_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.export_name
    }
    /// Consumes the builder and constructs a [`Output`](crate::types::Output).
    pub fn build(self) -> crate::types::Output {
        crate::types::Output {
            output_key: self.output_key,
            output_value: self.output_value,
            description: self.description,
            export_name: self.export_name,
        }
    }
}
