// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AppSummary {
    /// <p>The unique ID of the application.</p>
    pub app_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the application.</p>
    pub imported_app_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the application.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the application.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Status of the application.</p>
    pub status: ::std::option::Option<crate::types::AppStatus>,
    /// <p>A message related to the status of the application</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>Status of the replication configuration.</p>
    pub replication_configuration_status: ::std::option::Option<crate::types::AppReplicationConfigurationStatus>,
    /// <p>The replication status of the application.</p>
    pub replication_status: ::std::option::Option<crate::types::AppReplicationStatus>,
    /// <p>A message related to the replication status of the application.</p>
    pub replication_status_message: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of the application's most recent successful replication.</p>
    pub latest_replication_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Status of the launch configuration.</p>
    pub launch_configuration_status: ::std::option::Option<crate::types::AppLaunchConfigurationStatus>,
    /// <p>The launch status of the application.</p>
    pub launch_status: ::std::option::Option<crate::types::AppLaunchStatus>,
    /// <p>A message related to the launch status of the application.</p>
    pub launch_status_message: ::std::option::Option<::std::string::String>,
    /// <p>Details about the latest launch of the application.</p>
    pub launch_details: ::std::option::Option<crate::types::LaunchDetails>,
    /// <p>The creation time of the application.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last modified time of the application.</p>
    pub last_modified: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the service role in the customer's account used by Server Migration Service.</p>
    pub role_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of server groups present in the application.</p>
    pub total_server_groups: ::std::option::Option<i32>,
    /// <p>The number of servers present in the application.</p>
    pub total_servers: ::std::option::Option<i32>,
}
impl AppSummary {
    /// <p>The unique ID of the application.</p>
    pub fn app_id(&self) -> ::std::option::Option<&str> {
        self.app_id.as_deref()
    }
    /// <p>The ID of the application.</p>
    pub fn imported_app_id(&self) -> ::std::option::Option<&str> {
        self.imported_app_id.as_deref()
    }
    /// <p>The name of the application.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the application.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Status of the application.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AppStatus> {
        self.status.as_ref()
    }
    /// <p>A message related to the status of the application</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>Status of the replication configuration.</p>
    pub fn replication_configuration_status(&self) -> ::std::option::Option<&crate::types::AppReplicationConfigurationStatus> {
        self.replication_configuration_status.as_ref()
    }
    /// <p>The replication status of the application.</p>
    pub fn replication_status(&self) -> ::std::option::Option<&crate::types::AppReplicationStatus> {
        self.replication_status.as_ref()
    }
    /// <p>A message related to the replication status of the application.</p>
    pub fn replication_status_message(&self) -> ::std::option::Option<&str> {
        self.replication_status_message.as_deref()
    }
    /// <p>The timestamp of the application's most recent successful replication.</p>
    pub fn latest_replication_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.latest_replication_time.as_ref()
    }
    /// <p>Status of the launch configuration.</p>
    pub fn launch_configuration_status(&self) -> ::std::option::Option<&crate::types::AppLaunchConfigurationStatus> {
        self.launch_configuration_status.as_ref()
    }
    /// <p>The launch status of the application.</p>
    pub fn launch_status(&self) -> ::std::option::Option<&crate::types::AppLaunchStatus> {
        self.launch_status.as_ref()
    }
    /// <p>A message related to the launch status of the application.</p>
    pub fn launch_status_message(&self) -> ::std::option::Option<&str> {
        self.launch_status_message.as_deref()
    }
    /// <p>Details about the latest launch of the application.</p>
    pub fn launch_details(&self) -> ::std::option::Option<&crate::types::LaunchDetails> {
        self.launch_details.as_ref()
    }
    /// <p>The creation time of the application.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last modified time of the application.</p>
    pub fn last_modified(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified.as_ref()
    }
    /// <p>The name of the service role in the customer's account used by Server Migration Service.</p>
    pub fn role_name(&self) -> ::std::option::Option<&str> {
        self.role_name.as_deref()
    }
    /// <p>The number of server groups present in the application.</p>
    pub fn total_server_groups(&self) -> ::std::option::Option<i32> {
        self.total_server_groups
    }
    /// <p>The number of servers present in the application.</p>
    pub fn total_servers(&self) -> ::std::option::Option<i32> {
        self.total_servers
    }
}
impl AppSummary {
    /// Creates a new builder-style object to manufacture [`AppSummary`](crate::types::AppSummary).
    pub fn builder() -> crate::types::builders::AppSummaryBuilder {
        crate::types::builders::AppSummaryBuilder::default()
    }
}

/// A builder for [`AppSummary`](crate::types::AppSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AppSummaryBuilder {
    pub(crate) app_id: ::std::option::Option<::std::string::String>,
    pub(crate) imported_app_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AppStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) replication_configuration_status: ::std::option::Option<crate::types::AppReplicationConfigurationStatus>,
    pub(crate) replication_status: ::std::option::Option<crate::types::AppReplicationStatus>,
    pub(crate) replication_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) latest_replication_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) launch_configuration_status: ::std::option::Option<crate::types::AppLaunchConfigurationStatus>,
    pub(crate) launch_status: ::std::option::Option<crate::types::AppLaunchStatus>,
    pub(crate) launch_status_message: ::std::option::Option<::std::string::String>,
    pub(crate) launch_details: ::std::option::Option<crate::types::LaunchDetails>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) role_name: ::std::option::Option<::std::string::String>,
    pub(crate) total_server_groups: ::std::option::Option<i32>,
    pub(crate) total_servers: ::std::option::Option<i32>,
}
impl AppSummaryBuilder {
    /// <p>The unique ID of the application.</p>
    pub fn app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the application.</p>
    pub fn set_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_id = input;
        self
    }
    /// <p>The unique ID of the application.</p>
    pub fn get_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_id
    }
    /// <p>The ID of the application.</p>
    pub fn imported_app_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.imported_app_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_imported_app_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.imported_app_id = input;
        self
    }
    /// <p>The ID of the application.</p>
    pub fn get_imported_app_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.imported_app_id
    }
    /// <p>The name of the application.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the application.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the application.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the application.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the application.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Status of the application.</p>
    pub fn status(mut self, input: crate::types::AppStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the application.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AppStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the application.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AppStatus> {
        &self.status
    }
    /// <p>A message related to the status of the application</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message related to the status of the application</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A message related to the status of the application</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>Status of the replication configuration.</p>
    pub fn replication_configuration_status(mut self, input: crate::types::AppReplicationConfigurationStatus) -> Self {
        self.replication_configuration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the replication configuration.</p>
    pub fn set_replication_configuration_status(mut self, input: ::std::option::Option<crate::types::AppReplicationConfigurationStatus>) -> Self {
        self.replication_configuration_status = input;
        self
    }
    /// <p>Status of the replication configuration.</p>
    pub fn get_replication_configuration_status(&self) -> &::std::option::Option<crate::types::AppReplicationConfigurationStatus> {
        &self.replication_configuration_status
    }
    /// <p>The replication status of the application.</p>
    pub fn replication_status(mut self, input: crate::types::AppReplicationStatus) -> Self {
        self.replication_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The replication status of the application.</p>
    pub fn set_replication_status(mut self, input: ::std::option::Option<crate::types::AppReplicationStatus>) -> Self {
        self.replication_status = input;
        self
    }
    /// <p>The replication status of the application.</p>
    pub fn get_replication_status(&self) -> &::std::option::Option<crate::types::AppReplicationStatus> {
        &self.replication_status
    }
    /// <p>A message related to the replication status of the application.</p>
    pub fn replication_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message related to the replication status of the application.</p>
    pub fn set_replication_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_status_message = input;
        self
    }
    /// <p>A message related to the replication status of the application.</p>
    pub fn get_replication_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_status_message
    }
    /// <p>The timestamp of the application's most recent successful replication.</p>
    pub fn latest_replication_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.latest_replication_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the application's most recent successful replication.</p>
    pub fn set_latest_replication_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.latest_replication_time = input;
        self
    }
    /// <p>The timestamp of the application's most recent successful replication.</p>
    pub fn get_latest_replication_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.latest_replication_time
    }
    /// <p>Status of the launch configuration.</p>
    pub fn launch_configuration_status(mut self, input: crate::types::AppLaunchConfigurationStatus) -> Self {
        self.launch_configuration_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the launch configuration.</p>
    pub fn set_launch_configuration_status(mut self, input: ::std::option::Option<crate::types::AppLaunchConfigurationStatus>) -> Self {
        self.launch_configuration_status = input;
        self
    }
    /// <p>Status of the launch configuration.</p>
    pub fn get_launch_configuration_status(&self) -> &::std::option::Option<crate::types::AppLaunchConfigurationStatus> {
        &self.launch_configuration_status
    }
    /// <p>The launch status of the application.</p>
    pub fn launch_status(mut self, input: crate::types::AppLaunchStatus) -> Self {
        self.launch_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The launch status of the application.</p>
    pub fn set_launch_status(mut self, input: ::std::option::Option<crate::types::AppLaunchStatus>) -> Self {
        self.launch_status = input;
        self
    }
    /// <p>The launch status of the application.</p>
    pub fn get_launch_status(&self) -> &::std::option::Option<crate::types::AppLaunchStatus> {
        &self.launch_status
    }
    /// <p>A message related to the launch status of the application.</p>
    pub fn launch_status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launch_status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message related to the launch status of the application.</p>
    pub fn set_launch_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launch_status_message = input;
        self
    }
    /// <p>A message related to the launch status of the application.</p>
    pub fn get_launch_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.launch_status_message
    }
    /// <p>Details about the latest launch of the application.</p>
    pub fn launch_details(mut self, input: crate::types::LaunchDetails) -> Self {
        self.launch_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the latest launch of the application.</p>
    pub fn set_launch_details(mut self, input: ::std::option::Option<crate::types::LaunchDetails>) -> Self {
        self.launch_details = input;
        self
    }
    /// <p>Details about the latest launch of the application.</p>
    pub fn get_launch_details(&self) -> &::std::option::Option<crate::types::LaunchDetails> {
        &self.launch_details
    }
    /// <p>The creation time of the application.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the application.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the application.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last modified time of the application.</p>
    pub fn last_modified(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last modified time of the application.</p>
    pub fn set_last_modified(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified = input;
        self
    }
    /// <p>The last modified time of the application.</p>
    pub fn get_last_modified(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified
    }
    /// <p>The name of the service role in the customer's account used by Server Migration Service.</p>
    pub fn role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service role in the customer's account used by Server Migration Service.</p>
    pub fn set_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_name = input;
        self
    }
    /// <p>The name of the service role in the customer's account used by Server Migration Service.</p>
    pub fn get_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_name
    }
    /// <p>The number of server groups present in the application.</p>
    pub fn total_server_groups(mut self, input: i32) -> Self {
        self.total_server_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of server groups present in the application.</p>
    pub fn set_total_server_groups(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_server_groups = input;
        self
    }
    /// <p>The number of server groups present in the application.</p>
    pub fn get_total_server_groups(&self) -> &::std::option::Option<i32> {
        &self.total_server_groups
    }
    /// <p>The number of servers present in the application.</p>
    pub fn total_servers(mut self, input: i32) -> Self {
        self.total_servers = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of servers present in the application.</p>
    pub fn set_total_servers(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_servers = input;
        self
    }
    /// <p>The number of servers present in the application.</p>
    pub fn get_total_servers(&self) -> &::std::option::Option<i32> {
        &self.total_servers
    }
    /// Consumes the builder and constructs a [`AppSummary`](crate::types::AppSummary).
    pub fn build(self) -> crate::types::AppSummary {
        crate::types::AppSummary {
            app_id: self.app_id,
            imported_app_id: self.imported_app_id,
            name: self.name,
            description: self.description,
            status: self.status,
            status_message: self.status_message,
            replication_configuration_status: self.replication_configuration_status,
            replication_status: self.replication_status,
            replication_status_message: self.replication_status_message,
            latest_replication_time: self.latest_replication_time,
            launch_configuration_status: self.launch_configuration_status,
            launch_status: self.launch_status,
            launch_status_message: self.launch_status_message,
            launch_details: self.launch_details,
            creation_time: self.creation_time,
            last_modified: self.last_modified,
            role_name: self.role_name,
            total_server_groups: self.total_server_groups,
            total_servers: self.total_servers,
        }
    }
}
