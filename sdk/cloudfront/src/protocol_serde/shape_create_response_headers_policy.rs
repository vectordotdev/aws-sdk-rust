// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_response_headers_policy_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyOutput,
    crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDenied" => crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::AccessDenied({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedBuilder::default();
                output = crate::protocol_serde::shape_access_denied::de_access_denied_xml_err(_response_body, output)
                    .map_err(crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InconsistentQuantities" => crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::InconsistentQuantities({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InconsistentQuantitiesBuilder::default();
                output = crate::protocol_serde::shape_inconsistent_quantities::de_inconsistent_quantities_xml_err(_response_body, output)
                    .map_err(crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidArgument" => crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::InvalidArgument({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidArgumentBuilder::default();
                output = crate::protocol_serde::shape_invalid_argument::de_invalid_argument_xml_err(_response_body, output)
                    .map_err(crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResponseHeadersPolicyAlreadyExists" => {
            crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::ResponseHeadersPolicyAlreadyExists({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ResponseHeadersPolicyAlreadyExistsBuilder::default();
                    output = crate::protocol_serde::shape_response_headers_policy_already_exists::de_response_headers_policy_already_exists_xml_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TooLongCSPInResponseHeadersPolicy" => {
            crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::TooLongCspInResponseHeadersPolicy({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooLongCspInResponseHeadersPolicyBuilder::default();
                    output =
                        crate::protocol_serde::shape_too_long_csp_in_response_headers_policy::de_too_long_csp_in_response_headers_policy_xml_err(
                            _response_body,
                            output,
                        )
                        .map_err(crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TooManyCustomHeadersInResponseHeadersPolicy" => {
            crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::TooManyCustomHeadersInResponseHeadersPolicy({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyCustomHeadersInResponseHeadersPolicyBuilder::default();
                    output = crate::protocol_serde::shape_too_many_custom_headers_in_response_headers_policy::de_too_many_custom_headers_in_response_headers_policy_xml_err(_response_body, output).map_err(crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TooManyRemoveHeadersInResponseHeadersPolicy" => {
            crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::TooManyRemoveHeadersInResponseHeadersPolicy({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyRemoveHeadersInResponseHeadersPolicyBuilder::default();
                    output = crate::protocol_serde::shape_too_many_remove_headers_in_response_headers_policy::de_too_many_remove_headers_in_response_headers_policy_xml_err(_response_body, output).map_err(crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TooManyResponseHeadersPolicies" => {
            crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::TooManyResponseHeadersPolicies({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyResponseHeadersPoliciesBuilder::default();
                    output = crate::protocol_serde::shape_too_many_response_headers_policies::de_too_many_response_headers_policies_xml_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_response_headers_policy_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyOutput,
    crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_response_headers_policy::builders::CreateResponseHeadersPolicyOutputBuilder::default();
        output = output.set_e_tag(
            crate::protocol_serde::shape_create_response_headers_policy_output::de_e_tag_header(_response_headers).map_err(|_| {
                crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled(
                    "Failed to parse ETag from header `ETag",
                )
            })?,
        );
        output = output.set_location(
            crate::protocol_serde::shape_create_response_headers_policy_output::de_location_header(_response_headers).map_err(|_| {
                crate::operation::create_response_headers_policy::CreateResponseHeadersPolicyError::unhandled(
                    "Failed to parse Location from header `Location",
                )
            })?,
        );
        output = output.set_response_headers_policy(
            crate::protocol_serde::shape_create_response_headers_policy_output::de_response_headers_policy_payload(_response_body)?,
        );
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}
