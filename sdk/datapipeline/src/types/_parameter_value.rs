// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A value or list of parameter values. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParameterValue {
    /// <p>The ID of the parameter value.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The field value, expressed as a String.</p>
    pub string_value: ::std::option::Option<::std::string::String>,
}
impl ParameterValue {
    /// <p>The ID of the parameter value.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The field value, expressed as a String.</p>
    pub fn string_value(&self) -> ::std::option::Option<&str> {
        self.string_value.as_deref()
    }
}
impl ParameterValue {
    /// Creates a new builder-style object to manufacture [`ParameterValue`](crate::types::ParameterValue).
    pub fn builder() -> crate::types::builders::ParameterValueBuilder {
        crate::types::builders::ParameterValueBuilder::default()
    }
}

/// A builder for [`ParameterValue`](crate::types::ParameterValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParameterValueBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) string_value: ::std::option::Option<::std::string::String>,
}
impl ParameterValueBuilder {
    /// <p>The ID of the parameter value.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the parameter value.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the parameter value.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The field value, expressed as a String.</p>
    pub fn string_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.string_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The field value, expressed as a String.</p>
    pub fn set_string_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.string_value = input;
        self
    }
    /// <p>The field value, expressed as a String.</p>
    pub fn get_string_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.string_value
    }
    /// Consumes the builder and constructs a [`ParameterValue`](crate::types::ParameterValue).
    pub fn build(self) -> crate::types::ParameterValue {
        crate::types::ParameterValue {
            id: self.id,
            string_value: self.string_value,
        }
    }
}
