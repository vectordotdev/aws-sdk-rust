// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter based on size (in bytes).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LongRangeType {
    /// <p>The size start range (in bytes).</p>
    pub start_value: ::std::option::Option<i64>,
    /// <p>The size end range (in bytes).</p>
    pub end_value: ::std::option::Option<i64>,
}
impl LongRangeType {
    /// <p>The size start range (in bytes).</p>
    pub fn start_value(&self) -> ::std::option::Option<i64> {
        self.start_value
    }
    /// <p>The size end range (in bytes).</p>
    pub fn end_value(&self) -> ::std::option::Option<i64> {
        self.end_value
    }
}
impl LongRangeType {
    /// Creates a new builder-style object to manufacture [`LongRangeType`](crate::types::LongRangeType).
    pub fn builder() -> crate::types::builders::LongRangeTypeBuilder {
        crate::types::builders::LongRangeTypeBuilder::default()
    }
}

/// A builder for [`LongRangeType`](crate::types::LongRangeType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LongRangeTypeBuilder {
    pub(crate) start_value: ::std::option::Option<i64>,
    pub(crate) end_value: ::std::option::Option<i64>,
}
impl LongRangeTypeBuilder {
    /// <p>The size start range (in bytes).</p>
    pub fn start_value(mut self, input: i64) -> Self {
        self.start_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size start range (in bytes).</p>
    pub fn set_start_value(mut self, input: ::std::option::Option<i64>) -> Self {
        self.start_value = input;
        self
    }
    /// <p>The size start range (in bytes).</p>
    pub fn get_start_value(&self) -> &::std::option::Option<i64> {
        &self.start_value
    }
    /// <p>The size end range (in bytes).</p>
    pub fn end_value(mut self, input: i64) -> Self {
        self.end_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size end range (in bytes).</p>
    pub fn set_end_value(mut self, input: ::std::option::Option<i64>) -> Self {
        self.end_value = input;
        self
    }
    /// <p>The size end range (in bytes).</p>
    pub fn get_end_value(&self) -> &::std::option::Option<i64> {
        &self.end_value
    }
    /// Consumes the builder and constructs a [`LongRangeType`](crate::types::LongRangeType).
    pub fn build(self) -> crate::types::LongRangeType {
        crate::types::LongRangeType {
            start_value: self.start_value,
            end_value: self.end_value,
        }
    }
}
