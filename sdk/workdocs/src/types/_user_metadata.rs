// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the metadata of the user.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UserMetadata {
    /// <p>The ID of the user.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the user.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>The given name of the user before a rename operation.</p>
    pub given_name: ::std::option::Option<::std::string::String>,
    /// <p>The surname of the user.</p>
    pub surname: ::std::option::Option<::std::string::String>,
    /// <p>The email address of the user.</p>
    pub email_address: ::std::option::Option<::std::string::String>,
}
impl UserMetadata {
    /// <p>The ID of the user.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the user.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The given name of the user before a rename operation.</p>
    pub fn given_name(&self) -> ::std::option::Option<&str> {
        self.given_name.as_deref()
    }
    /// <p>The surname of the user.</p>
    pub fn surname(&self) -> ::std::option::Option<&str> {
        self.surname.as_deref()
    }
    /// <p>The email address of the user.</p>
    pub fn email_address(&self) -> ::std::option::Option<&str> {
        self.email_address.as_deref()
    }
}
impl ::std::fmt::Debug for UserMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserMetadata");
        formatter.field("id", &self.id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("given_name", &"*** Sensitive Data Redacted ***");
        formatter.field("surname", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UserMetadata {
    /// Creates a new builder-style object to manufacture [`UserMetadata`](crate::types::UserMetadata).
    pub fn builder() -> crate::types::builders::UserMetadataBuilder {
        crate::types::builders::UserMetadataBuilder::default()
    }
}

/// A builder for [`UserMetadata`](crate::types::UserMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UserMetadataBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) given_name: ::std::option::Option<::std::string::String>,
    pub(crate) surname: ::std::option::Option<::std::string::String>,
    pub(crate) email_address: ::std::option::Option<::std::string::String>,
}
impl UserMetadataBuilder {
    /// <p>The ID of the user.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the user.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the user.</p>
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The name of the user.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>The given name of the user before a rename operation.</p>
    pub fn given_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.given_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The given name of the user before a rename operation.</p>
    pub fn set_given_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.given_name = input;
        self
    }
    /// <p>The given name of the user before a rename operation.</p>
    pub fn get_given_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.given_name
    }
    /// <p>The surname of the user.</p>
    pub fn surname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.surname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The surname of the user.</p>
    pub fn set_surname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.surname = input;
        self
    }
    /// <p>The surname of the user.</p>
    pub fn get_surname(&self) -> &::std::option::Option<::std::string::String> {
        &self.surname
    }
    /// <p>The email address of the user.</p>
    pub fn email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address of the user.</p>
    pub fn set_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The email address of the user.</p>
    pub fn get_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address
    }
    /// Consumes the builder and constructs a [`UserMetadata`](crate::types::UserMetadata).
    pub fn build(self) -> crate::types::UserMetadata {
        crate::types::UserMetadata {
            id: self.id,
            username: self.username,
            given_name: self.given_name,
            surname: self.surname,
            email_address: self.email_address,
        }
    }
}
impl ::std::fmt::Debug for UserMetadataBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserMetadataBuilder");
        formatter.field("id", &self.id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("given_name", &"*** Sensitive Data Redacted ***");
        formatter.field("surname", &"*** Sensitive Data Redacted ***");
        formatter.field("email_address", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
