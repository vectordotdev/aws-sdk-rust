// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List of Documents, Folders, Comments, and Document Versions matching the query.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ResponseItem {
    /// <p>The type of item being returned.</p>
    pub resource_type: ::std::option::Option<crate::types::ResponseItemType>,
    /// <p>The webUrl of the item being returned.</p>
    pub web_url: ::std::option::Option<::std::string::String>,
    /// <p>The document that matches the query.</p>
    pub document_metadata: ::std::option::Option<crate::types::DocumentMetadata>,
    /// <p>The folder that matches the query.</p>
    pub folder_metadata: ::std::option::Option<crate::types::FolderMetadata>,
    /// <p>The comment that matches the query.</p>
    pub comment_metadata: ::std::option::Option<crate::types::CommentMetadata>,
    /// <p>The document version that matches the metadata.</p>
    pub document_version_metadata: ::std::option::Option<crate::types::DocumentVersionMetadata>,
}
impl ResponseItem {
    /// <p>The type of item being returned.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResponseItemType> {
        self.resource_type.as_ref()
    }
    /// <p>The webUrl of the item being returned.</p>
    pub fn web_url(&self) -> ::std::option::Option<&str> {
        self.web_url.as_deref()
    }
    /// <p>The document that matches the query.</p>
    pub fn document_metadata(&self) -> ::std::option::Option<&crate::types::DocumentMetadata> {
        self.document_metadata.as_ref()
    }
    /// <p>The folder that matches the query.</p>
    pub fn folder_metadata(&self) -> ::std::option::Option<&crate::types::FolderMetadata> {
        self.folder_metadata.as_ref()
    }
    /// <p>The comment that matches the query.</p>
    pub fn comment_metadata(&self) -> ::std::option::Option<&crate::types::CommentMetadata> {
        self.comment_metadata.as_ref()
    }
    /// <p>The document version that matches the metadata.</p>
    pub fn document_version_metadata(&self) -> ::std::option::Option<&crate::types::DocumentVersionMetadata> {
        self.document_version_metadata.as_ref()
    }
}
impl ::std::fmt::Debug for ResponseItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ResponseItem");
        formatter.field("resource_type", &self.resource_type);
        formatter.field("web_url", &"*** Sensitive Data Redacted ***");
        formatter.field("document_metadata", &self.document_metadata);
        formatter.field("folder_metadata", &self.folder_metadata);
        formatter.field("comment_metadata", &self.comment_metadata);
        formatter.field("document_version_metadata", &self.document_version_metadata);
        formatter.finish()
    }
}
impl ResponseItem {
    /// Creates a new builder-style object to manufacture [`ResponseItem`](crate::types::ResponseItem).
    pub fn builder() -> crate::types::builders::ResponseItemBuilder {
        crate::types::builders::ResponseItemBuilder::default()
    }
}

/// A builder for [`ResponseItem`](crate::types::ResponseItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ResponseItemBuilder {
    pub(crate) resource_type: ::std::option::Option<crate::types::ResponseItemType>,
    pub(crate) web_url: ::std::option::Option<::std::string::String>,
    pub(crate) document_metadata: ::std::option::Option<crate::types::DocumentMetadata>,
    pub(crate) folder_metadata: ::std::option::Option<crate::types::FolderMetadata>,
    pub(crate) comment_metadata: ::std::option::Option<crate::types::CommentMetadata>,
    pub(crate) document_version_metadata: ::std::option::Option<crate::types::DocumentVersionMetadata>,
}
impl ResponseItemBuilder {
    /// <p>The type of item being returned.</p>
    pub fn resource_type(mut self, input: crate::types::ResponseItemType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of item being returned.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResponseItemType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of item being returned.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResponseItemType> {
        &self.resource_type
    }
    /// <p>The webUrl of the item being returned.</p>
    pub fn web_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The webUrl of the item being returned.</p>
    pub fn set_web_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_url = input;
        self
    }
    /// <p>The webUrl of the item being returned.</p>
    pub fn get_web_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_url
    }
    /// <p>The document that matches the query.</p>
    pub fn document_metadata(mut self, input: crate::types::DocumentMetadata) -> Self {
        self.document_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The document that matches the query.</p>
    pub fn set_document_metadata(mut self, input: ::std::option::Option<crate::types::DocumentMetadata>) -> Self {
        self.document_metadata = input;
        self
    }
    /// <p>The document that matches the query.</p>
    pub fn get_document_metadata(&self) -> &::std::option::Option<crate::types::DocumentMetadata> {
        &self.document_metadata
    }
    /// <p>The folder that matches the query.</p>
    pub fn folder_metadata(mut self, input: crate::types::FolderMetadata) -> Self {
        self.folder_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The folder that matches the query.</p>
    pub fn set_folder_metadata(mut self, input: ::std::option::Option<crate::types::FolderMetadata>) -> Self {
        self.folder_metadata = input;
        self
    }
    /// <p>The folder that matches the query.</p>
    pub fn get_folder_metadata(&self) -> &::std::option::Option<crate::types::FolderMetadata> {
        &self.folder_metadata
    }
    /// <p>The comment that matches the query.</p>
    pub fn comment_metadata(mut self, input: crate::types::CommentMetadata) -> Self {
        self.comment_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The comment that matches the query.</p>
    pub fn set_comment_metadata(mut self, input: ::std::option::Option<crate::types::CommentMetadata>) -> Self {
        self.comment_metadata = input;
        self
    }
    /// <p>The comment that matches the query.</p>
    pub fn get_comment_metadata(&self) -> &::std::option::Option<crate::types::CommentMetadata> {
        &self.comment_metadata
    }
    /// <p>The document version that matches the metadata.</p>
    pub fn document_version_metadata(mut self, input: crate::types::DocumentVersionMetadata) -> Self {
        self.document_version_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The document version that matches the metadata.</p>
    pub fn set_document_version_metadata(mut self, input: ::std::option::Option<crate::types::DocumentVersionMetadata>) -> Self {
        self.document_version_metadata = input;
        self
    }
    /// <p>The document version that matches the metadata.</p>
    pub fn get_document_version_metadata(&self) -> &::std::option::Option<crate::types::DocumentVersionMetadata> {
        &self.document_version_metadata
    }
    /// Consumes the builder and constructs a [`ResponseItem`](crate::types::ResponseItem).
    pub fn build(self) -> crate::types::ResponseItem {
        crate::types::ResponseItem {
            resource_type: self.resource_type,
            web_url: self.web_url,
            document_metadata: self.document_metadata,
            folder_metadata: self.folder_metadata,
            comment_metadata: self.comment_metadata,
            document_version_metadata: self.document_version_metadata,
        }
    }
}
impl ::std::fmt::Debug for ResponseItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ResponseItemBuilder");
        formatter.field("resource_type", &self.resource_type);
        formatter.field("web_url", &"*** Sensitive Data Redacted ***");
        formatter.field("document_metadata", &self.document_metadata);
        formatter.field("folder_metadata", &self.folder_metadata);
        formatter.field("comment_metadata", &self.comment_metadata);
        formatter.field("document_version_metadata", &self.document_version_metadata);
        formatter.finish()
    }
}
