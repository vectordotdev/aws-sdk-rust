// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a version of a document.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DocumentVersionMetadata {
    /// <p>The ID of the version.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the version.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The content type of the document.</p>
    pub content_type: ::std::option::Option<::std::string::String>,
    /// <p>The size of the document, in bytes.</p>
    pub size: ::std::option::Option<i64>,
    /// <p>The signature of the document.</p>
    pub signature: ::std::option::Option<::std::string::String>,
    /// <p>The status of the document.</p>
    pub status: ::std::option::Option<crate::types::DocumentStatusType>,
    /// <p>The timestamp when the document was first uploaded.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the document was last uploaded.</p>
    pub modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub content_created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the content of the document was modified.</p>
    pub content_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ID of the creator.</p>
    pub creator_id: ::std::option::Option<::std::string::String>,
    /// <p>The thumbnail of the document.</p>
    pub thumbnail: ::std::option::Option<::std::collections::HashMap<crate::types::DocumentThumbnailType, ::std::string::String>>,
    /// <p>The source of the document.</p>
    pub source: ::std::option::Option<::std::collections::HashMap<crate::types::DocumentSourceType, ::std::string::String>>,
}
impl DocumentVersionMetadata {
    /// <p>The ID of the version.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the version.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The content type of the document.</p>
    pub fn content_type(&self) -> ::std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>The size of the document, in bytes.</p>
    pub fn size(&self) -> ::std::option::Option<i64> {
        self.size
    }
    /// <p>The signature of the document.</p>
    pub fn signature(&self) -> ::std::option::Option<&str> {
        self.signature.as_deref()
    }
    /// <p>The status of the document.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DocumentStatusType> {
        self.status.as_ref()
    }
    /// <p>The timestamp when the document was first uploaded.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The timestamp when the document was last uploaded.</p>
    pub fn modified_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.modified_timestamp.as_ref()
    }
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub fn content_created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.content_created_timestamp.as_ref()
    }
    /// <p>The timestamp when the content of the document was modified.</p>
    pub fn content_modified_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.content_modified_timestamp.as_ref()
    }
    /// <p>The ID of the creator.</p>
    pub fn creator_id(&self) -> ::std::option::Option<&str> {
        self.creator_id.as_deref()
    }
    /// <p>The thumbnail of the document.</p>
    pub fn thumbnail(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::DocumentThumbnailType, ::std::string::String>> {
        self.thumbnail.as_ref()
    }
    /// <p>The source of the document.</p>
    pub fn source(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::DocumentSourceType, ::std::string::String>> {
        self.source.as_ref()
    }
}
impl ::std::fmt::Debug for DocumentVersionMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DocumentVersionMetadata");
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("content_type", &self.content_type);
        formatter.field("size", &self.size);
        formatter.field("signature", &self.signature);
        formatter.field("status", &self.status);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("modified_timestamp", &self.modified_timestamp);
        formatter.field("content_created_timestamp", &self.content_created_timestamp);
        formatter.field("content_modified_timestamp", &self.content_modified_timestamp);
        formatter.field("creator_id", &self.creator_id);
        formatter.field("thumbnail", &self.thumbnail);
        formatter.field("source", &self.source);
        formatter.finish()
    }
}
impl DocumentVersionMetadata {
    /// Creates a new builder-style object to manufacture [`DocumentVersionMetadata`](crate::types::DocumentVersionMetadata).
    pub fn builder() -> crate::types::builders::DocumentVersionMetadataBuilder {
        crate::types::builders::DocumentVersionMetadataBuilder::default()
    }
}

/// A builder for [`DocumentVersionMetadata`](crate::types::DocumentVersionMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DocumentVersionMetadataBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) size: ::std::option::Option<i64>,
    pub(crate) signature: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DocumentStatusType>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) content_created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) content_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creator_id: ::std::option::Option<::std::string::String>,
    pub(crate) thumbnail: ::std::option::Option<::std::collections::HashMap<crate::types::DocumentThumbnailType, ::std::string::String>>,
    pub(crate) source: ::std::option::Option<::std::collections::HashMap<crate::types::DocumentSourceType, ::std::string::String>>,
}
impl DocumentVersionMetadataBuilder {
    /// <p>The ID of the version.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the version.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the version.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the version.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the version.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the version.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The content type of the document.</p>
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content type of the document.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The content type of the document.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>The size of the document, in bytes.</p>
    pub fn size(mut self, input: i64) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the document, in bytes.</p>
    pub fn set_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// <p>The size of the document, in bytes.</p>
    pub fn get_size(&self) -> &::std::option::Option<i64> {
        &self.size
    }
    /// <p>The signature of the document.</p>
    pub fn signature(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.signature = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The signature of the document.</p>
    pub fn set_signature(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.signature = input;
        self
    }
    /// <p>The signature of the document.</p>
    pub fn get_signature(&self) -> &::std::option::Option<::std::string::String> {
        &self.signature
    }
    /// <p>The status of the document.</p>
    pub fn status(mut self, input: crate::types::DocumentStatusType) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the document.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DocumentStatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the document.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DocumentStatusType> {
        &self.status
    }
    /// <p>The timestamp when the document was first uploaded.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the document was first uploaded.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp when the document was first uploaded.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The timestamp when the document was last uploaded.</p>
    pub fn modified_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the document was last uploaded.</p>
    pub fn set_modified_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_timestamp = input;
        self
    }
    /// <p>The timestamp when the document was last uploaded.</p>
    pub fn get_modified_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_timestamp
    }
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub fn content_created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.content_created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub fn set_content_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.content_created_timestamp = input;
        self
    }
    /// <p>The timestamp when the content of the document was originally created.</p>
    pub fn get_content_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.content_created_timestamp
    }
    /// <p>The timestamp when the content of the document was modified.</p>
    pub fn content_modified_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.content_modified_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the content of the document was modified.</p>
    pub fn set_content_modified_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.content_modified_timestamp = input;
        self
    }
    /// <p>The timestamp when the content of the document was modified.</p>
    pub fn get_content_modified_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.content_modified_timestamp
    }
    /// <p>The ID of the creator.</p>
    pub fn creator_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the creator.</p>
    pub fn set_creator_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator_id = input;
        self
    }
    /// <p>The ID of the creator.</p>
    pub fn get_creator_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator_id
    }
    /// Adds a key-value pair to `thumbnail`.
    ///
    /// To override the contents of this collection use [`set_thumbnail`](Self::set_thumbnail).
    ///
    /// <p>The thumbnail of the document.</p>
    pub fn thumbnail(mut self, k: crate::types::DocumentThumbnailType, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.thumbnail.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.thumbnail = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The thumbnail of the document.</p>
    pub fn set_thumbnail(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::DocumentThumbnailType, ::std::string::String>>,
    ) -> Self {
        self.thumbnail = input;
        self
    }
    /// <p>The thumbnail of the document.</p>
    pub fn get_thumbnail(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::DocumentThumbnailType, ::std::string::String>> {
        &self.thumbnail
    }
    /// Adds a key-value pair to `source`.
    ///
    /// To override the contents of this collection use [`set_source`](Self::set_source).
    ///
    /// <p>The source of the document.</p>
    pub fn source(mut self, k: crate::types::DocumentSourceType, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.source.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.source = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The source of the document.</p>
    pub fn set_source(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::DocumentSourceType, ::std::string::String>>,
    ) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the document.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::DocumentSourceType, ::std::string::String>> {
        &self.source
    }
    /// Consumes the builder and constructs a [`DocumentVersionMetadata`](crate::types::DocumentVersionMetadata).
    pub fn build(self) -> crate::types::DocumentVersionMetadata {
        crate::types::DocumentVersionMetadata {
            id: self.id,
            name: self.name,
            content_type: self.content_type,
            size: self.size,
            signature: self.signature,
            status: self.status,
            created_timestamp: self.created_timestamp,
            modified_timestamp: self.modified_timestamp,
            content_created_timestamp: self.content_created_timestamp,
            content_modified_timestamp: self.content_modified_timestamp,
            creator_id: self.creator_id,
            thumbnail: self.thumbnail,
            source: self.source,
        }
    }
}
impl ::std::fmt::Debug for DocumentVersionMetadataBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DocumentVersionMetadataBuilder");
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("content_type", &self.content_type);
        formatter.field("size", &self.size);
        formatter.field("signature", &self.signature);
        formatter.field("status", &self.status);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("modified_timestamp", &self.modified_timestamp);
        formatter.field("content_created_timestamp", &self.content_created_timestamp);
        formatter.field("content_modified_timestamp", &self.content_modified_timestamp);
        formatter.field("creator_id", &self.creator_id);
        formatter.field("thumbnail", &self.thumbnail);
        formatter.field("source", &self.source);
        formatter.finish()
    }
}
