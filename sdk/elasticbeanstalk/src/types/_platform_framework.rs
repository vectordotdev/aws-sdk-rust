// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A framework supported by the platform.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PlatformFramework {
    /// <p>The name of the framework.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the framework.</p>
    pub version: ::std::option::Option<::std::string::String>,
}
impl PlatformFramework {
    /// <p>The name of the framework.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the framework.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl PlatformFramework {
    /// Creates a new builder-style object to manufacture [`PlatformFramework`](crate::types::PlatformFramework).
    pub fn builder() -> crate::types::builders::PlatformFrameworkBuilder {
        crate::types::builders::PlatformFrameworkBuilder::default()
    }
}

/// A builder for [`PlatformFramework`](crate::types::PlatformFramework).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PlatformFrameworkBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
}
impl PlatformFrameworkBuilder {
    /// <p>The name of the framework.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the framework.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the framework.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The version of the framework.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the framework.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the framework.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// Consumes the builder and constructs a [`PlatformFramework`](crate::types::PlatformFramework).
    pub fn build(self) -> crate::types::PlatformFramework {
        crate::types::PlatformFramework {
            name: self.name,
            version: self.version,
        }
    }
}
