// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the suggested code fix to remediate a finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SuggestedFix {
    /// <p>A description of the suggested code fix and why it is being suggested. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The suggested code to add to your file. </p>
    pub code: ::std::option::Option<::std::string::String>,
}
impl SuggestedFix {
    /// <p>A description of the suggested code fix and why it is being suggested. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The suggested code to add to your file. </p>
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }
}
impl SuggestedFix {
    /// Creates a new builder-style object to manufacture [`SuggestedFix`](crate::types::SuggestedFix).
    pub fn builder() -> crate::types::builders::SuggestedFixBuilder {
        crate::types::builders::SuggestedFixBuilder::default()
    }
}

/// A builder for [`SuggestedFix`](crate::types::SuggestedFix).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SuggestedFixBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
}
impl SuggestedFixBuilder {
    /// <p>A description of the suggested code fix and why it is being suggested. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the suggested code fix and why it is being suggested. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the suggested code fix and why it is being suggested. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The suggested code to add to your file. </p>
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The suggested code to add to your file. </p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The suggested code to add to your file. </p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// Consumes the builder and constructs a [`SuggestedFix`](crate::types::SuggestedFix).
    pub fn build(self) -> crate::types::SuggestedFix {
        crate::types::SuggestedFix {
            description: self.description,
            code: self.code,
        }
    }
}
