// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a finding category with open findings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CategoryWithFindingNum {
    /// <p>The name of the finding category. A finding category is determined by the detector that detected the finding.</p>
    pub category_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of open findings in the category.</p>
    pub finding_number: ::std::option::Option<i32>,
}
impl CategoryWithFindingNum {
    /// <p>The name of the finding category. A finding category is determined by the detector that detected the finding.</p>
    pub fn category_name(&self) -> ::std::option::Option<&str> {
        self.category_name.as_deref()
    }
    /// <p>The number of open findings in the category.</p>
    pub fn finding_number(&self) -> ::std::option::Option<i32> {
        self.finding_number
    }
}
impl CategoryWithFindingNum {
    /// Creates a new builder-style object to manufacture [`CategoryWithFindingNum`](crate::types::CategoryWithFindingNum).
    pub fn builder() -> crate::types::builders::CategoryWithFindingNumBuilder {
        crate::types::builders::CategoryWithFindingNumBuilder::default()
    }
}

/// A builder for [`CategoryWithFindingNum`](crate::types::CategoryWithFindingNum).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CategoryWithFindingNumBuilder {
    pub(crate) category_name: ::std::option::Option<::std::string::String>,
    pub(crate) finding_number: ::std::option::Option<i32>,
}
impl CategoryWithFindingNumBuilder {
    /// <p>The name of the finding category. A finding category is determined by the detector that detected the finding.</p>
    pub fn category_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.category_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the finding category. A finding category is determined by the detector that detected the finding.</p>
    pub fn set_category_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.category_name = input;
        self
    }
    /// <p>The name of the finding category. A finding category is determined by the detector that detected the finding.</p>
    pub fn get_category_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.category_name
    }
    /// <p>The number of open findings in the category.</p>
    pub fn finding_number(mut self, input: i32) -> Self {
        self.finding_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of open findings in the category.</p>
    pub fn set_finding_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.finding_number = input;
        self
    }
    /// <p>The number of open findings in the category.</p>
    pub fn get_finding_number(&self) -> &::std::option::Option<i32> {
        &self.finding_number
    }
    /// Consumes the builder and constructs a [`CategoryWithFindingNum`](crate::types::CategoryWithFindingNum).
    pub fn build(self) -> crate::types::CategoryWithFindingNum {
        crate::types::CategoryWithFindingNum {
            category_name: self.category_name,
            finding_number: self.finding_number,
        }
    }
}
