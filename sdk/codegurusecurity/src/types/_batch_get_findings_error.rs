// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the error that caused a finding to fail to be retrieved.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetFindingsError {
    /// <p>The name of the scan that generated the finding.</p>
    pub scan_name: ::std::option::Option<::std::string::String>,
    /// <p>The finding ID of the finding that was not fetched.</p>
    pub finding_id: ::std::option::Option<::std::string::String>,
    /// <p>A code associated with the type of error.</p>
    pub error_code: ::std::option::Option<crate::types::ErrorCode>,
    /// <p>Describes the error.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl BatchGetFindingsError {
    /// <p>The name of the scan that generated the finding.</p>
    pub fn scan_name(&self) -> ::std::option::Option<&str> {
        self.scan_name.as_deref()
    }
    /// <p>The finding ID of the finding that was not fetched.</p>
    pub fn finding_id(&self) -> ::std::option::Option<&str> {
        self.finding_id.as_deref()
    }
    /// <p>A code associated with the type of error.</p>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::ErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>Describes the error.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl BatchGetFindingsError {
    /// Creates a new builder-style object to manufacture [`BatchGetFindingsError`](crate::types::BatchGetFindingsError).
    pub fn builder() -> crate::types::builders::BatchGetFindingsErrorBuilder {
        crate::types::builders::BatchGetFindingsErrorBuilder::default()
    }
}

/// A builder for [`BatchGetFindingsError`](crate::types::BatchGetFindingsError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetFindingsErrorBuilder {
    pub(crate) scan_name: ::std::option::Option<::std::string::String>,
    pub(crate) finding_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<crate::types::ErrorCode>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl BatchGetFindingsErrorBuilder {
    /// <p>The name of the scan that generated the finding.</p>
    pub fn scan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the scan that generated the finding.</p>
    pub fn set_scan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_name = input;
        self
    }
    /// <p>The name of the scan that generated the finding.</p>
    pub fn get_scan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_name
    }
    /// <p>The finding ID of the finding that was not fetched.</p>
    pub fn finding_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.finding_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The finding ID of the finding that was not fetched.</p>
    pub fn set_finding_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.finding_id = input;
        self
    }
    /// <p>The finding ID of the finding that was not fetched.</p>
    pub fn get_finding_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.finding_id
    }
    /// <p>A code associated with the type of error.</p>
    pub fn error_code(mut self, input: crate::types::ErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>A code associated with the type of error.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::ErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>A code associated with the type of error.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::ErrorCode> {
        &self.error_code
    }
    /// <p>Describes the error.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the error.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Describes the error.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`BatchGetFindingsError`](crate::types::BatchGetFindingsError).
    pub fn build(self) -> crate::types::BatchGetFindingsError {
        crate::types::BatchGetFindingsError {
            scan_name: self.scan_name,
            finding_id: self.finding_id,
            error_code: self.error_code,
            message: self.message,
        }
    }
}
