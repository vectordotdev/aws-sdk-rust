// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The line of code where a finding was detected.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeLine {
    /// <p>The code line number.</p>
    pub number: ::std::option::Option<i32>,
    /// <p>The code that contains a vulnerability.</p>
    pub content: ::std::option::Option<::std::string::String>,
}
impl CodeLine {
    /// <p>The code line number.</p>
    pub fn number(&self) -> ::std::option::Option<i32> {
        self.number
    }
    /// <p>The code that contains a vulnerability.</p>
    pub fn content(&self) -> ::std::option::Option<&str> {
        self.content.as_deref()
    }
}
impl CodeLine {
    /// Creates a new builder-style object to manufacture [`CodeLine`](crate::types::CodeLine).
    pub fn builder() -> crate::types::builders::CodeLineBuilder {
        crate::types::builders::CodeLineBuilder::default()
    }
}

/// A builder for [`CodeLine`](crate::types::CodeLine).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeLineBuilder {
    pub(crate) number: ::std::option::Option<i32>,
    pub(crate) content: ::std::option::Option<::std::string::String>,
}
impl CodeLineBuilder {
    /// <p>The code line number.</p>
    pub fn number(mut self, input: i32) -> Self {
        self.number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The code line number.</p>
    pub fn set_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number = input;
        self
    }
    /// <p>The code line number.</p>
    pub fn get_number(&self) -> &::std::option::Option<i32> {
        &self.number
    }
    /// <p>The code that contains a vulnerability.</p>
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code that contains a vulnerability.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The code that contains a vulnerability.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// Consumes the builder and constructs a [`CodeLine`](crate::types::CodeLine).
    pub fn build(self) -> crate::types::CodeLine {
        crate::types::CodeLine {
            number: self.number,
            content: self.content,
        }
    }
}
