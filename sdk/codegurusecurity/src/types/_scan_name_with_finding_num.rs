// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a scan with open findings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScanNameWithFindingNum {
    /// <p>The name of the scan.</p>
    pub scan_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of open findings generated by a scan.</p>
    pub finding_number: ::std::option::Option<i32>,
}
impl ScanNameWithFindingNum {
    /// <p>The name of the scan.</p>
    pub fn scan_name(&self) -> ::std::option::Option<&str> {
        self.scan_name.as_deref()
    }
    /// <p>The number of open findings generated by a scan.</p>
    pub fn finding_number(&self) -> ::std::option::Option<i32> {
        self.finding_number
    }
}
impl ScanNameWithFindingNum {
    /// Creates a new builder-style object to manufacture [`ScanNameWithFindingNum`](crate::types::ScanNameWithFindingNum).
    pub fn builder() -> crate::types::builders::ScanNameWithFindingNumBuilder {
        crate::types::builders::ScanNameWithFindingNumBuilder::default()
    }
}

/// A builder for [`ScanNameWithFindingNum`](crate::types::ScanNameWithFindingNum).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScanNameWithFindingNumBuilder {
    pub(crate) scan_name: ::std::option::Option<::std::string::String>,
    pub(crate) finding_number: ::std::option::Option<i32>,
}
impl ScanNameWithFindingNumBuilder {
    /// <p>The name of the scan.</p>
    pub fn scan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the scan.</p>
    pub fn set_scan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_name = input;
        self
    }
    /// <p>The name of the scan.</p>
    pub fn get_scan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_name
    }
    /// <p>The number of open findings generated by a scan.</p>
    pub fn finding_number(mut self, input: i32) -> Self {
        self.finding_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of open findings generated by a scan.</p>
    pub fn set_finding_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.finding_number = input;
        self
    }
    /// <p>The number of open findings generated by a scan.</p>
    pub fn get_finding_number(&self) -> &::std::option::Option<i32> {
        &self.finding_number
    }
    /// Consumes the builder and constructs a [`ScanNameWithFindingNum`](crate::types::ScanNameWithFindingNum).
    pub fn build(self) -> crate::types::ScanNameWithFindingNum {
        crate::types::ScanNameWithFindingNum {
            scan_name: self.scan_name,
            finding_number: self.finding_number,
        }
    }
}
