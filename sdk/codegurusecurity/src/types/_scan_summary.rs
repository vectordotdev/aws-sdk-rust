// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a scan. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScanSummary {
    /// <p>The state of the scan. A scan can be <code>In Progress</code>, <code>Complete</code>, or <code>Failed</code>. </p>
    pub scan_state: ::std::option::Option<crate::types::ScanState>,
    /// <p> The time when the scan was created. </p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time the scan was last updated. A scan is updated when it is re-run.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the scan. </p>
    pub scan_name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the scan run. </p>
    pub run_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN for the scan name.</p>
    pub scan_name_arn: ::std::option::Option<::std::string::String>,
}
impl ScanSummary {
    /// <p>The state of the scan. A scan can be <code>In Progress</code>, <code>Complete</code>, or <code>Failed</code>. </p>
    pub fn scan_state(&self) -> ::std::option::Option<&crate::types::ScanState> {
        self.scan_state.as_ref()
    }
    /// <p> The time when the scan was created. </p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time the scan was last updated. A scan is updated when it is re-run.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The name of the scan. </p>
    pub fn scan_name(&self) -> ::std::option::Option<&str> {
        self.scan_name.as_deref()
    }
    /// <p>The identifier for the scan run. </p>
    pub fn run_id(&self) -> ::std::option::Option<&str> {
        self.run_id.as_deref()
    }
    /// <p>The ARN for the scan name.</p>
    pub fn scan_name_arn(&self) -> ::std::option::Option<&str> {
        self.scan_name_arn.as_deref()
    }
}
impl ScanSummary {
    /// Creates a new builder-style object to manufacture [`ScanSummary`](crate::types::ScanSummary).
    pub fn builder() -> crate::types::builders::ScanSummaryBuilder {
        crate::types::builders::ScanSummaryBuilder::default()
    }
}

/// A builder for [`ScanSummary`](crate::types::ScanSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScanSummaryBuilder {
    pub(crate) scan_state: ::std::option::Option<crate::types::ScanState>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) scan_name: ::std::option::Option<::std::string::String>,
    pub(crate) run_id: ::std::option::Option<::std::string::String>,
    pub(crate) scan_name_arn: ::std::option::Option<::std::string::String>,
}
impl ScanSummaryBuilder {
    /// <p>The state of the scan. A scan can be <code>In Progress</code>, <code>Complete</code>, or <code>Failed</code>. </p>
    pub fn scan_state(mut self, input: crate::types::ScanState) -> Self {
        self.scan_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the scan. A scan can be <code>In Progress</code>, <code>Complete</code>, or <code>Failed</code>. </p>
    pub fn set_scan_state(mut self, input: ::std::option::Option<crate::types::ScanState>) -> Self {
        self.scan_state = input;
        self
    }
    /// <p>The state of the scan. A scan can be <code>In Progress</code>, <code>Complete</code>, or <code>Failed</code>. </p>
    pub fn get_scan_state(&self) -> &::std::option::Option<crate::types::ScanState> {
        &self.scan_state
    }
    /// <p> The time when the scan was created. </p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p> The time when the scan was created. </p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p> The time when the scan was created. </p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time the scan was last updated. A scan is updated when it is re-run.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the scan was last updated. A scan is updated when it is re-run.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The time the scan was last updated. A scan is updated when it is re-run.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The name of the scan. </p>
    pub fn scan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the scan. </p>
    pub fn set_scan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_name = input;
        self
    }
    /// <p>The name of the scan. </p>
    pub fn get_scan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_name
    }
    /// <p>The identifier for the scan run. </p>
    pub fn run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the scan run. </p>
    pub fn set_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.run_id = input;
        self
    }
    /// <p>The identifier for the scan run. </p>
    pub fn get_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.run_id
    }
    /// <p>The ARN for the scan name.</p>
    pub fn scan_name_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_name_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the scan name.</p>
    pub fn set_scan_name_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_name_arn = input;
        self
    }
    /// <p>The ARN for the scan name.</p>
    pub fn get_scan_name_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_name_arn
    }
    /// Consumes the builder and constructs a [`ScanSummary`](crate::types::ScanSummary).
    pub fn build(self) -> crate::types::ScanSummary {
        crate::types::ScanSummary {
            scan_state: self.scan_state,
            created_at: self.created_at,
            updated_at: self.updated_at,
            scan_name: self.scan_name,
            run_id: self.run_id,
            scan_name_arn: self.scan_name_arn,
        }
    }
}
