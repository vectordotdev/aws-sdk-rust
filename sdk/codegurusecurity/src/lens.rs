// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_findings_output_next_token(
    input: &crate::operation::get_findings::GetFindingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_findings_metrics_output_next_token(
    input: &crate::operation::list_findings_metrics::ListFindingsMetricsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_scans_output_next_token(
    input: &crate::operation::list_scans::ListScansOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_findings_output_findings(
    input: crate::operation::get_findings::GetFindingsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Finding>> {
    let input = match input.findings {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_findings_metrics_output_findings_metrics(
    input: crate::operation::list_findings_metrics::ListFindingsMetricsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AccountFindingsMetric>> {
    let input = match input.findings_metrics {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_scans_output_summaries(
    input: crate::operation::list_scans::ListScansOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ScanSummary>> {
    let input = match input.summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
