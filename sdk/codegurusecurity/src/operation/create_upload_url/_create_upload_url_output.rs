// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateUploadUrlOutput {
    /// <p>A pre-signed S3 URL. You can upload the code file you want to scan and add the required <code>requestHeaders</code> using any HTTP client.</p>
    pub s3_url: ::std::option::Option<::std::string::String>,
    /// <p>A set of key-value pairs that contain the required headers when uploading your resource.</p>
    pub request_headers: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The identifier for the uploaded code resource. </p>
    pub code_artifact_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateUploadUrlOutput {
    /// <p>A pre-signed S3 URL. You can upload the code file you want to scan and add the required <code>requestHeaders</code> using any HTTP client.</p>
    pub fn s3_url(&self) -> ::std::option::Option<&str> {
        self.s3_url.as_deref()
    }
    /// <p>A set of key-value pairs that contain the required headers when uploading your resource.</p>
    pub fn request_headers(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.request_headers.as_ref()
    }
    /// <p>The identifier for the uploaded code resource. </p>
    pub fn code_artifact_id(&self) -> ::std::option::Option<&str> {
        self.code_artifact_id.as_deref()
    }
}
impl ::std::fmt::Debug for CreateUploadUrlOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateUploadUrlOutput");
        formatter.field("s3_url", &"*** Sensitive Data Redacted ***");
        formatter.field("request_headers", &"*** Sensitive Data Redacted ***");
        formatter.field("code_artifact_id", &self.code_artifact_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for CreateUploadUrlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateUploadUrlOutput {
    /// Creates a new builder-style object to manufacture [`CreateUploadUrlOutput`](crate::operation::create_upload_url::CreateUploadUrlOutput).
    pub fn builder() -> crate::operation::create_upload_url::builders::CreateUploadUrlOutputBuilder {
        crate::operation::create_upload_url::builders::CreateUploadUrlOutputBuilder::default()
    }
}

/// A builder for [`CreateUploadUrlOutput`](crate::operation::create_upload_url::CreateUploadUrlOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateUploadUrlOutputBuilder {
    pub(crate) s3_url: ::std::option::Option<::std::string::String>,
    pub(crate) request_headers: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) code_artifact_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateUploadUrlOutputBuilder {
    /// <p>A pre-signed S3 URL. You can upload the code file you want to scan and add the required <code>requestHeaders</code> using any HTTP client.</p>
    pub fn s3_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pre-signed S3 URL. You can upload the code file you want to scan and add the required <code>requestHeaders</code> using any HTTP client.</p>
    pub fn set_s3_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_url = input;
        self
    }
    /// <p>A pre-signed S3 URL. You can upload the code file you want to scan and add the required <code>requestHeaders</code> using any HTTP client.</p>
    pub fn get_s3_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_url
    }
    /// Adds a key-value pair to `request_headers`.
    ///
    /// To override the contents of this collection use [`set_request_headers`](Self::set_request_headers).
    ///
    /// <p>A set of key-value pairs that contain the required headers when uploading your resource.</p>
    pub fn request_headers(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.request_headers.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.request_headers = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A set of key-value pairs that contain the required headers when uploading your resource.</p>
    pub fn set_request_headers(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.request_headers = input;
        self
    }
    /// <p>A set of key-value pairs that contain the required headers when uploading your resource.</p>
    pub fn get_request_headers(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.request_headers
    }
    /// <p>The identifier for the uploaded code resource. </p>
    pub fn code_artifact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code_artifact_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the uploaded code resource. </p>
    pub fn set_code_artifact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code_artifact_id = input;
        self
    }
    /// <p>The identifier for the uploaded code resource. </p>
    pub fn get_code_artifact_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.code_artifact_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateUploadUrlOutput`](crate::operation::create_upload_url::CreateUploadUrlOutput).
    pub fn build(self) -> crate::operation::create_upload_url::CreateUploadUrlOutput {
        crate::operation::create_upload_url::CreateUploadUrlOutput {
            s3_url: self.s3_url,
            request_headers: self.request_headers,
            code_artifact_id: self.code_artifact_id,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for CreateUploadUrlOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateUploadUrlOutputBuilder");
        formatter.field("s3_url", &"*** Sensitive Data Redacted ***");
        formatter.field("request_headers", &"*** Sensitive Data Redacted ***");
        formatter.field("code_artifact_id", &self.code_artifact_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
