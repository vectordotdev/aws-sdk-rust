// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of the predictor properties that are used in the <code>ListPredictors</code> operation. To get the complete set of properties, call the <code>DescribePredictor</code> operation, and provide the listed <code>PredictorArn</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PredictorSummary {
    /// <p>The ARN of the predictor.</p>
    pub predictor_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the predictor.</p>
    pub predictor_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the dataset group that contains the data used to train the predictor.</p>
    pub dataset_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>Whether AutoPredictor was used to create the predictor.</p>
    pub is_auto_predictor: ::std::option::Option<bool>,
    /// <p>A summary of the reference predictor used if the predictor was retrained or upgraded.</p>
    pub reference_predictor_summary: ::std::option::Option<crate::types::ReferencePredictorSummary>,
    /// <p>The status of the predictor. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the predictor must be <code>ACTIVE</code> before you can use the predictor to create a forecast.</p>
    /// </note>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>If an error occurred, an informational message about the error.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>When the model training task was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub last_modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PredictorSummary {
    /// <p>The ARN of the predictor.</p>
    pub fn predictor_arn(&self) -> ::std::option::Option<&str> {
        self.predictor_arn.as_deref()
    }
    /// <p>The name of the predictor.</p>
    pub fn predictor_name(&self) -> ::std::option::Option<&str> {
        self.predictor_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset group that contains the data used to train the predictor.</p>
    pub fn dataset_group_arn(&self) -> ::std::option::Option<&str> {
        self.dataset_group_arn.as_deref()
    }
    /// <p>Whether AutoPredictor was used to create the predictor.</p>
    pub fn is_auto_predictor(&self) -> ::std::option::Option<bool> {
        self.is_auto_predictor
    }
    /// <p>A summary of the reference predictor used if the predictor was retrained or upgraded.</p>
    pub fn reference_predictor_summary(&self) -> ::std::option::Option<&crate::types::ReferencePredictorSummary> {
        self.reference_predictor_summary.as_ref()
    }
    /// <p>The status of the predictor. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the predictor must be <code>ACTIVE</code> before you can use the predictor to create a forecast.</p>
    /// </note>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>When the model training task was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
}
impl PredictorSummary {
    /// Creates a new builder-style object to manufacture [`PredictorSummary`](crate::types::PredictorSummary).
    pub fn builder() -> crate::types::builders::PredictorSummaryBuilder {
        crate::types::builders::PredictorSummaryBuilder::default()
    }
}

/// A builder for [`PredictorSummary`](crate::types::PredictorSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PredictorSummaryBuilder {
    pub(crate) predictor_arn: ::std::option::Option<::std::string::String>,
    pub(crate) predictor_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) is_auto_predictor: ::std::option::Option<bool>,
    pub(crate) reference_predictor_summary: ::std::option::Option<crate::types::ReferencePredictorSummary>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PredictorSummaryBuilder {
    /// <p>The ARN of the predictor.</p>
    pub fn predictor_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.predictor_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the predictor.</p>
    pub fn set_predictor_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.predictor_arn = input;
        self
    }
    /// <p>The ARN of the predictor.</p>
    pub fn get_predictor_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.predictor_arn
    }
    /// <p>The name of the predictor.</p>
    pub fn predictor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.predictor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the predictor.</p>
    pub fn set_predictor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.predictor_name = input;
        self
    }
    /// <p>The name of the predictor.</p>
    pub fn get_predictor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.predictor_name
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset group that contains the data used to train the predictor.</p>
    pub fn dataset_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset group that contains the data used to train the predictor.</p>
    pub fn set_dataset_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset group that contains the data used to train the predictor.</p>
    pub fn get_dataset_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_group_arn
    }
    /// <p>Whether AutoPredictor was used to create the predictor.</p>
    pub fn is_auto_predictor(mut self, input: bool) -> Self {
        self.is_auto_predictor = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether AutoPredictor was used to create the predictor.</p>
    pub fn set_is_auto_predictor(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_auto_predictor = input;
        self
    }
    /// <p>Whether AutoPredictor was used to create the predictor.</p>
    pub fn get_is_auto_predictor(&self) -> &::std::option::Option<bool> {
        &self.is_auto_predictor
    }
    /// <p>A summary of the reference predictor used if the predictor was retrained or upgraded.</p>
    pub fn reference_predictor_summary(mut self, input: crate::types::ReferencePredictorSummary) -> Self {
        self.reference_predictor_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>A summary of the reference predictor used if the predictor was retrained or upgraded.</p>
    pub fn set_reference_predictor_summary(mut self, input: ::std::option::Option<crate::types::ReferencePredictorSummary>) -> Self {
        self.reference_predictor_summary = input;
        self
    }
    /// <p>A summary of the reference predictor used if the predictor was retrained or upgraded.</p>
    pub fn get_reference_predictor_summary(&self) -> &::std::option::Option<crate::types::ReferencePredictorSummary> {
        &self.reference_predictor_summary
    }
    /// <p>The status of the predictor. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the predictor must be <code>ACTIVE</code> before you can use the predictor to create a forecast.</p>
    /// </note>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the predictor. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the predictor must be <code>ACTIVE</code> before you can use the predictor to create a forecast.</p>
    /// </note>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the predictor. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the predictor must be <code>ACTIVE</code> before you can use the predictor to create a forecast.</p>
    /// </note>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>When the model training task was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the model training task was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the model training task was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn set_last_modification_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn get_last_modification_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modification_time
    }
    /// Consumes the builder and constructs a [`PredictorSummary`](crate::types::PredictorSummary).
    pub fn build(self) -> crate::types::PredictorSummary {
        crate::types::PredictorSummary {
            predictor_arn: self.predictor_arn,
            predictor_name: self.predictor_name,
            dataset_group_arn: self.dataset_group_arn,
            is_auto_predictor: self.is_auto_predictor,
            reference_predictor_summary: self.reference_predictor_summary,
            status: self.status,
            message: self.message,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
        }
    }
}
