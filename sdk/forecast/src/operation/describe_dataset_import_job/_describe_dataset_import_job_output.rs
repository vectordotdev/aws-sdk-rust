// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDatasetImportJobOutput {
    /// <p>The name of the dataset import job.</p>
    pub dataset_import_job_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the dataset import job.</p>
    pub dataset_import_job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the dataset that the training data was imported to.</p>
    pub dataset_arn: ::std::option::Option<::std::string::String>,
    /// <p>The format of timestamps in the dataset. The format that you specify depends on the <code>DataFrequency</code> specified when the dataset was created. The following formats are supported</p>
    /// <ul>
    /// <li> <p>"yyyy-MM-dd"</p> <p>For the following data frequencies: Y, M, W, and D</p> </li>
    /// <li> <p>"yyyy-MM-dd HH:mm:ss"</p> <p>For the following data frequencies: H, 30min, 15min, and 1min; and optionally, for: Y, M, W, and D</p> </li>
    /// </ul>
    pub timestamp_format: ::std::option::Option<::std::string::String>,
    /// <p>The single time zone applied to every item in the dataset</p>
    pub time_zone: ::std::option::Option<::std::string::String>,
    /// <p>Whether <code>TimeZone</code> is automatically derived from the geolocation attribute.</p>
    pub use_geolocation_for_time_zone: bool,
    /// <p>The format of the geolocation attribute. Valid Values:<code>"LAT_LONG"</code> and <code>"CC_POSTALCODE"</code>.</p>
    pub geolocation_format: ::std::option::Option<::std::string::String>,
    /// <p>The location of the training data to import and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data.</p>
    /// <p>If encryption is used, <code>DataSource</code> includes an Key Management Service (KMS) key.</p>
    pub data_source: ::std::option::Option<crate::types::DataSource>,
    /// <p>The estimated time remaining in minutes for the dataset import job to complete.</p>
    pub estimated_time_remaining_in_minutes: ::std::option::Option<i64>,
    /// <p>Statistical information about each field in the input data.</p>
    pub field_statistics: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Statistics>>,
    /// <p>The size of the dataset in gigabytes (GB) after the import job has finished.</p>
    pub data_size: ::std::option::Option<f64>,
    /// <p>The status of the dataset import job. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// </ul>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>If an error occurred, an informational message about the error.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>When the dataset import job was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub last_modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The format of the imported data, CSV or PARQUET.</p>
    pub format: ::std::option::Option<::std::string::String>,
    /// <p>The import mode of the dataset import job, FULL or INCREMENTAL.</p>
    pub import_mode: ::std::option::Option<crate::types::ImportMode>,
    _request_id: Option<String>,
}
impl DescribeDatasetImportJobOutput {
    /// <p>The name of the dataset import job.</p>
    pub fn dataset_import_job_name(&self) -> ::std::option::Option<&str> {
        self.dataset_import_job_name.as_deref()
    }
    /// <p>The ARN of the dataset import job.</p>
    pub fn dataset_import_job_arn(&self) -> ::std::option::Option<&str> {
        self.dataset_import_job_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset that the training data was imported to.</p>
    pub fn dataset_arn(&self) -> ::std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p>The format of timestamps in the dataset. The format that you specify depends on the <code>DataFrequency</code> specified when the dataset was created. The following formats are supported</p>
    /// <ul>
    /// <li> <p>"yyyy-MM-dd"</p> <p>For the following data frequencies: Y, M, W, and D</p> </li>
    /// <li> <p>"yyyy-MM-dd HH:mm:ss"</p> <p>For the following data frequencies: H, 30min, 15min, and 1min; and optionally, for: Y, M, W, and D</p> </li>
    /// </ul>
    pub fn timestamp_format(&self) -> ::std::option::Option<&str> {
        self.timestamp_format.as_deref()
    }
    /// <p>The single time zone applied to every item in the dataset</p>
    pub fn time_zone(&self) -> ::std::option::Option<&str> {
        self.time_zone.as_deref()
    }
    /// <p>Whether <code>TimeZone</code> is automatically derived from the geolocation attribute.</p>
    pub fn use_geolocation_for_time_zone(&self) -> bool {
        self.use_geolocation_for_time_zone
    }
    /// <p>The format of the geolocation attribute. Valid Values:<code>"LAT_LONG"</code> and <code>"CC_POSTALCODE"</code>.</p>
    pub fn geolocation_format(&self) -> ::std::option::Option<&str> {
        self.geolocation_format.as_deref()
    }
    /// <p>The location of the training data to import and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data.</p>
    /// <p>If encryption is used, <code>DataSource</code> includes an Key Management Service (KMS) key.</p>
    pub fn data_source(&self) -> ::std::option::Option<&crate::types::DataSource> {
        self.data_source.as_ref()
    }
    /// <p>The estimated time remaining in minutes for the dataset import job to complete.</p>
    pub fn estimated_time_remaining_in_minutes(&self) -> ::std::option::Option<i64> {
        self.estimated_time_remaining_in_minutes
    }
    /// <p>Statistical information about each field in the input data.</p>
    pub fn field_statistics(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::Statistics>> {
        self.field_statistics.as_ref()
    }
    /// <p>The size of the dataset in gigabytes (GB) after the import job has finished.</p>
    pub fn data_size(&self) -> ::std::option::Option<f64> {
        self.data_size
    }
    /// <p>The status of the dataset import job. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>When the dataset import job was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
    /// <p>The format of the imported data, CSV or PARQUET.</p>
    pub fn format(&self) -> ::std::option::Option<&str> {
        self.format.as_deref()
    }
    /// <p>The import mode of the dataset import job, FULL or INCREMENTAL.</p>
    pub fn import_mode(&self) -> ::std::option::Option<&crate::types::ImportMode> {
        self.import_mode.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeDatasetImportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDatasetImportJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDatasetImportJobOutput`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput).
    pub fn builder() -> crate::operation::describe_dataset_import_job::builders::DescribeDatasetImportJobOutputBuilder {
        crate::operation::describe_dataset_import_job::builders::DescribeDatasetImportJobOutputBuilder::default()
    }
}

/// A builder for [`DescribeDatasetImportJobOutput`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeDatasetImportJobOutputBuilder {
    pub(crate) dataset_import_job_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_import_job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_arn: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp_format: ::std::option::Option<::std::string::String>,
    pub(crate) time_zone: ::std::option::Option<::std::string::String>,
    pub(crate) use_geolocation_for_time_zone: ::std::option::Option<bool>,
    pub(crate) geolocation_format: ::std::option::Option<::std::string::String>,
    pub(crate) data_source: ::std::option::Option<crate::types::DataSource>,
    pub(crate) estimated_time_remaining_in_minutes: ::std::option::Option<i64>,
    pub(crate) field_statistics: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Statistics>>,
    pub(crate) data_size: ::std::option::Option<f64>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) format: ::std::option::Option<::std::string::String>,
    pub(crate) import_mode: ::std::option::Option<crate::types::ImportMode>,
    _request_id: Option<String>,
}
impl DescribeDatasetImportJobOutputBuilder {
    /// <p>The name of the dataset import job.</p>
    pub fn dataset_import_job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_import_job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataset import job.</p>
    pub fn set_dataset_import_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_import_job_name = input;
        self
    }
    /// <p>The name of the dataset import job.</p>
    pub fn get_dataset_import_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_import_job_name
    }
    /// <p>The ARN of the dataset import job.</p>
    pub fn dataset_import_job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_import_job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the dataset import job.</p>
    pub fn set_dataset_import_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_import_job_arn = input;
        self
    }
    /// <p>The ARN of the dataset import job.</p>
    pub fn get_dataset_import_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_import_job_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset that the training data was imported to.</p>
    pub fn dataset_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset that the training data was imported to.</p>
    pub fn set_dataset_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset that the training data was imported to.</p>
    pub fn get_dataset_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_arn
    }
    /// <p>The format of timestamps in the dataset. The format that you specify depends on the <code>DataFrequency</code> specified when the dataset was created. The following formats are supported</p>
    /// <ul>
    /// <li> <p>"yyyy-MM-dd"</p> <p>For the following data frequencies: Y, M, W, and D</p> </li>
    /// <li> <p>"yyyy-MM-dd HH:mm:ss"</p> <p>For the following data frequencies: H, 30min, 15min, and 1min; and optionally, for: Y, M, W, and D</p> </li>
    /// </ul>
    pub fn timestamp_format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timestamp_format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The format of timestamps in the dataset. The format that you specify depends on the <code>DataFrequency</code> specified when the dataset was created. The following formats are supported</p>
    /// <ul>
    /// <li> <p>"yyyy-MM-dd"</p> <p>For the following data frequencies: Y, M, W, and D</p> </li>
    /// <li> <p>"yyyy-MM-dd HH:mm:ss"</p> <p>For the following data frequencies: H, 30min, 15min, and 1min; and optionally, for: Y, M, W, and D</p> </li>
    /// </ul>
    pub fn set_timestamp_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timestamp_format = input;
        self
    }
    /// <p>The format of timestamps in the dataset. The format that you specify depends on the <code>DataFrequency</code> specified when the dataset was created. The following formats are supported</p>
    /// <ul>
    /// <li> <p>"yyyy-MM-dd"</p> <p>For the following data frequencies: Y, M, W, and D</p> </li>
    /// <li> <p>"yyyy-MM-dd HH:mm:ss"</p> <p>For the following data frequencies: H, 30min, 15min, and 1min; and optionally, for: Y, M, W, and D</p> </li>
    /// </ul>
    pub fn get_timestamp_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.timestamp_format
    }
    /// <p>The single time zone applied to every item in the dataset</p>
    pub fn time_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The single time zone applied to every item in the dataset</p>
    pub fn set_time_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_zone = input;
        self
    }
    /// <p>The single time zone applied to every item in the dataset</p>
    pub fn get_time_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_zone
    }
    /// <p>Whether <code>TimeZone</code> is automatically derived from the geolocation attribute.</p>
    pub fn use_geolocation_for_time_zone(mut self, input: bool) -> Self {
        self.use_geolocation_for_time_zone = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether <code>TimeZone</code> is automatically derived from the geolocation attribute.</p>
    pub fn set_use_geolocation_for_time_zone(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_geolocation_for_time_zone = input;
        self
    }
    /// <p>Whether <code>TimeZone</code> is automatically derived from the geolocation attribute.</p>
    pub fn get_use_geolocation_for_time_zone(&self) -> &::std::option::Option<bool> {
        &self.use_geolocation_for_time_zone
    }
    /// <p>The format of the geolocation attribute. Valid Values:<code>"LAT_LONG"</code> and <code>"CC_POSTALCODE"</code>.</p>
    pub fn geolocation_format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.geolocation_format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The format of the geolocation attribute. Valid Values:<code>"LAT_LONG"</code> and <code>"CC_POSTALCODE"</code>.</p>
    pub fn set_geolocation_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.geolocation_format = input;
        self
    }
    /// <p>The format of the geolocation attribute. Valid Values:<code>"LAT_LONG"</code> and <code>"CC_POSTALCODE"</code>.</p>
    pub fn get_geolocation_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.geolocation_format
    }
    /// <p>The location of the training data to import and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data.</p>
    /// <p>If encryption is used, <code>DataSource</code> includes an Key Management Service (KMS) key.</p>
    pub fn data_source(mut self, input: crate::types::DataSource) -> Self {
        self.data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The location of the training data to import and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data.</p>
    /// <p>If encryption is used, <code>DataSource</code> includes an Key Management Service (KMS) key.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::DataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>The location of the training data to import and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data.</p>
    /// <p>If encryption is used, <code>DataSource</code> includes an Key Management Service (KMS) key.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::DataSource> {
        &self.data_source
    }
    /// <p>The estimated time remaining in minutes for the dataset import job to complete.</p>
    pub fn estimated_time_remaining_in_minutes(mut self, input: i64) -> Self {
        self.estimated_time_remaining_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated time remaining in minutes for the dataset import job to complete.</p>
    pub fn set_estimated_time_remaining_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.estimated_time_remaining_in_minutes = input;
        self
    }
    /// <p>The estimated time remaining in minutes for the dataset import job to complete.</p>
    pub fn get_estimated_time_remaining_in_minutes(&self) -> &::std::option::Option<i64> {
        &self.estimated_time_remaining_in_minutes
    }
    /// Adds a key-value pair to `field_statistics`.
    ///
    /// To override the contents of this collection use [`set_field_statistics`](Self::set_field_statistics).
    ///
    /// <p>Statistical information about each field in the input data.</p>
    pub fn field_statistics(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Statistics) -> Self {
        let mut hash_map = self.field_statistics.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.field_statistics = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Statistical information about each field in the input data.</p>
    pub fn set_field_statistics(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Statistics>>,
    ) -> Self {
        self.field_statistics = input;
        self
    }
    /// <p>Statistical information about each field in the input data.</p>
    pub fn get_field_statistics(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Statistics>> {
        &self.field_statistics
    }
    /// <p>The size of the dataset in gigabytes (GB) after the import job has finished.</p>
    pub fn data_size(mut self, input: f64) -> Self {
        self.data_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the dataset in gigabytes (GB) after the import job has finished.</p>
    pub fn set_data_size(mut self, input: ::std::option::Option<f64>) -> Self {
        self.data_size = input;
        self
    }
    /// <p>The size of the dataset in gigabytes (GB) after the import job has finished.</p>
    pub fn get_data_size(&self) -> &::std::option::Option<f64> {
        &self.data_size
    }
    /// <p>The status of the dataset import job. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the dataset import job. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the dataset import job. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>When the dataset import job was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the dataset import job was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the dataset import job was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn set_last_modification_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn get_last_modification_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modification_time
    }
    /// <p>The format of the imported data, CSV or PARQUET.</p>
    pub fn format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The format of the imported data, CSV or PARQUET.</p>
    pub fn set_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the imported data, CSV or PARQUET.</p>
    pub fn get_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.format
    }
    /// <p>The import mode of the dataset import job, FULL or INCREMENTAL.</p>
    pub fn import_mode(mut self, input: crate::types::ImportMode) -> Self {
        self.import_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The import mode of the dataset import job, FULL or INCREMENTAL.</p>
    pub fn set_import_mode(mut self, input: ::std::option::Option<crate::types::ImportMode>) -> Self {
        self.import_mode = input;
        self
    }
    /// <p>The import mode of the dataset import job, FULL or INCREMENTAL.</p>
    pub fn get_import_mode(&self) -> &::std::option::Option<crate::types::ImportMode> {
        &self.import_mode
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDatasetImportJobOutput`](crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput).
    pub fn build(self) -> crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput {
        crate::operation::describe_dataset_import_job::DescribeDatasetImportJobOutput {
            dataset_import_job_name: self.dataset_import_job_name,
            dataset_import_job_arn: self.dataset_import_job_arn,
            dataset_arn: self.dataset_arn,
            timestamp_format: self.timestamp_format,
            time_zone: self.time_zone,
            use_geolocation_for_time_zone: self.use_geolocation_for_time_zone.unwrap_or_default(),
            geolocation_format: self.geolocation_format,
            data_source: self.data_source,
            estimated_time_remaining_in_minutes: self.estimated_time_remaining_in_minutes,
            field_statistics: self.field_statistics,
            data_size: self.data_size,
            status: self.status,
            message: self.message,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
            format: self.format,
            import_mode: self.import_mode,
            _request_id: self._request_id,
        }
    }
}
