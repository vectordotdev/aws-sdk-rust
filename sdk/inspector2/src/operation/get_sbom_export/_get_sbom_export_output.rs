// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSbomExportOutput {
    /// <p>The report ID of the software bill of materials (SBOM) report.</p>
    pub report_id: ::std::option::Option<::std::string::String>,
    /// <p>The format of the software bill of materials (SBOM) report.</p>
    pub format: ::std::option::Option<crate::types::SbomReportFormat>,
    /// <p>The status of the software bill of materials (SBOM) report.</p>
    pub status: ::std::option::Option<crate::types::ExternalReportStatus>,
    /// <p>An error code.</p>
    pub error_code: ::std::option::Option<crate::types::ReportingErrorCode>,
    /// <p>An error message.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
    pub s3_destination: ::std::option::Option<crate::types::Destination>,
    /// <p>Contains details about the resource filter criteria used for the software bill of materials (SBOM) report.</p>
    pub filter_criteria: ::std::option::Option<crate::types::ResourceFilterCriteria>,
    _request_id: Option<String>,
}
impl GetSbomExportOutput {
    /// <p>The report ID of the software bill of materials (SBOM) report.</p>
    pub fn report_id(&self) -> ::std::option::Option<&str> {
        self.report_id.as_deref()
    }
    /// <p>The format of the software bill of materials (SBOM) report.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::SbomReportFormat> {
        self.format.as_ref()
    }
    /// <p>The status of the software bill of materials (SBOM) report.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ExternalReportStatus> {
        self.status.as_ref()
    }
    /// <p>An error code.</p>
    pub fn error_code(&self) -> ::std::option::Option<&crate::types::ReportingErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>An error message.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
    pub fn s3_destination(&self) -> ::std::option::Option<&crate::types::Destination> {
        self.s3_destination.as_ref()
    }
    /// <p>Contains details about the resource filter criteria used for the software bill of materials (SBOM) report.</p>
    pub fn filter_criteria(&self) -> ::std::option::Option<&crate::types::ResourceFilterCriteria> {
        self.filter_criteria.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetSbomExportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSbomExportOutput {
    /// Creates a new builder-style object to manufacture [`GetSbomExportOutput`](crate::operation::get_sbom_export::GetSbomExportOutput).
    pub fn builder() -> crate::operation::get_sbom_export::builders::GetSbomExportOutputBuilder {
        crate::operation::get_sbom_export::builders::GetSbomExportOutputBuilder::default()
    }
}

/// A builder for [`GetSbomExportOutput`](crate::operation::get_sbom_export::GetSbomExportOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSbomExportOutputBuilder {
    pub(crate) report_id: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::SbomReportFormat>,
    pub(crate) status: ::std::option::Option<crate::types::ExternalReportStatus>,
    pub(crate) error_code: ::std::option::Option<crate::types::ReportingErrorCode>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) s3_destination: ::std::option::Option<crate::types::Destination>,
    pub(crate) filter_criteria: ::std::option::Option<crate::types::ResourceFilterCriteria>,
    _request_id: Option<String>,
}
impl GetSbomExportOutputBuilder {
    /// <p>The report ID of the software bill of materials (SBOM) report.</p>
    pub fn report_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.report_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The report ID of the software bill of materials (SBOM) report.</p>
    pub fn set_report_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.report_id = input;
        self
    }
    /// <p>The report ID of the software bill of materials (SBOM) report.</p>
    pub fn get_report_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.report_id
    }
    /// <p>The format of the software bill of materials (SBOM) report.</p>
    pub fn format(mut self, input: crate::types::SbomReportFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the software bill of materials (SBOM) report.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::SbomReportFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the software bill of materials (SBOM) report.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::SbomReportFormat> {
        &self.format
    }
    /// <p>The status of the software bill of materials (SBOM) report.</p>
    pub fn status(mut self, input: crate::types::ExternalReportStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the software bill of materials (SBOM) report.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ExternalReportStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the software bill of materials (SBOM) report.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ExternalReportStatus> {
        &self.status
    }
    /// <p>An error code.</p>
    pub fn error_code(mut self, input: crate::types::ReportingErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>An error code.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::ReportingErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>An error code.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::ReportingErrorCode> {
        &self.error_code
    }
    /// <p>An error message.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error message.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>An error message.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
    pub fn s3_destination(mut self, input: crate::types::Destination) -> Self {
        self.s3_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
    pub fn set_s3_destination(mut self, input: ::std::option::Option<crate::types::Destination>) -> Self {
        self.s3_destination = input;
        self
    }
    /// <p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>
    pub fn get_s3_destination(&self) -> &::std::option::Option<crate::types::Destination> {
        &self.s3_destination
    }
    /// <p>Contains details about the resource filter criteria used for the software bill of materials (SBOM) report.</p>
    pub fn filter_criteria(mut self, input: crate::types::ResourceFilterCriteria) -> Self {
        self.filter_criteria = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the resource filter criteria used for the software bill of materials (SBOM) report.</p>
    pub fn set_filter_criteria(mut self, input: ::std::option::Option<crate::types::ResourceFilterCriteria>) -> Self {
        self.filter_criteria = input;
        self
    }
    /// <p>Contains details about the resource filter criteria used for the software bill of materials (SBOM) report.</p>
    pub fn get_filter_criteria(&self) -> &::std::option::Option<crate::types::ResourceFilterCriteria> {
        &self.filter_criteria
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSbomExportOutput`](crate::operation::get_sbom_export::GetSbomExportOutput).
    pub fn build(self) -> crate::operation::get_sbom_export::GetSbomExportOutput {
        crate::operation::get_sbom_export::GetSbomExportOutput {
            report_id: self.report_id,
            format: self.format,
            status: self.status,
            error_code: self.error_code,
            error_message: self.error_message,
            s3_destination: self.s3_destination,
            filter_criteria: self.filter_criteria,
            _request_id: self._request_id,
        }
    }
}
