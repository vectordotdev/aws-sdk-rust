// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A resource string filter for a software bill of materials report.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceStringFilter {
    /// <p>The filter's comparison.</p>
    pub comparison: ::std::option::Option<crate::types::ResourceStringComparison>,
    /// <p>The filter's value.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl ResourceStringFilter {
    /// <p>The filter's comparison.</p>
    pub fn comparison(&self) -> ::std::option::Option<&crate::types::ResourceStringComparison> {
        self.comparison.as_ref()
    }
    /// <p>The filter's value.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ResourceStringFilter {
    /// Creates a new builder-style object to manufacture [`ResourceStringFilter`](crate::types::ResourceStringFilter).
    pub fn builder() -> crate::types::builders::ResourceStringFilterBuilder {
        crate::types::builders::ResourceStringFilterBuilder::default()
    }
}

/// A builder for [`ResourceStringFilter`](crate::types::ResourceStringFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceStringFilterBuilder {
    pub(crate) comparison: ::std::option::Option<crate::types::ResourceStringComparison>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl ResourceStringFilterBuilder {
    /// <p>The filter's comparison.</p>
    pub fn comparison(mut self, input: crate::types::ResourceStringComparison) -> Self {
        self.comparison = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter's comparison.</p>
    pub fn set_comparison(mut self, input: ::std::option::Option<crate::types::ResourceStringComparison>) -> Self {
        self.comparison = input;
        self
    }
    /// <p>The filter's comparison.</p>
    pub fn get_comparison(&self) -> &::std::option::Option<crate::types::ResourceStringComparison> {
        &self.comparison
    }
    /// <p>The filter's value.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The filter's value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The filter's value.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`ResourceStringFilter`](crate::types::ResourceStringFilter).
    pub fn build(self) -> crate::types::ResourceStringFilter {
        crate::types::ResourceStringFilter {
            comparison: self.comparison,
            value: self.value,
        }
    }
}
