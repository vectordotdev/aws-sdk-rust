// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details of a coverage date filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoverageDateFilter {
    /// <p>A timestamp representing the start of the time period to filter results by.</p>
    pub start_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A timestamp representing the end of the time period to filter results by.</p>
    pub end_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CoverageDateFilter {
    /// <p>A timestamp representing the start of the time period to filter results by.</p>
    pub fn start_inclusive(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_inclusive.as_ref()
    }
    /// <p>A timestamp representing the end of the time period to filter results by.</p>
    pub fn end_inclusive(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_inclusive.as_ref()
    }
}
impl CoverageDateFilter {
    /// Creates a new builder-style object to manufacture [`CoverageDateFilter`](crate::types::CoverageDateFilter).
    pub fn builder() -> crate::types::builders::CoverageDateFilterBuilder {
        crate::types::builders::CoverageDateFilterBuilder::default()
    }
}

/// A builder for [`CoverageDateFilter`](crate::types::CoverageDateFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoverageDateFilterBuilder {
    pub(crate) start_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl CoverageDateFilterBuilder {
    /// <p>A timestamp representing the start of the time period to filter results by.</p>
    pub fn start_inclusive(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_inclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp representing the start of the time period to filter results by.</p>
    pub fn set_start_inclusive(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_inclusive = input;
        self
    }
    /// <p>A timestamp representing the start of the time period to filter results by.</p>
    pub fn get_start_inclusive(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_inclusive
    }
    /// <p>A timestamp representing the end of the time period to filter results by.</p>
    pub fn end_inclusive(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_inclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>A timestamp representing the end of the time period to filter results by.</p>
    pub fn set_end_inclusive(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_inclusive = input;
        self
    }
    /// <p>A timestamp representing the end of the time period to filter results by.</p>
    pub fn get_end_inclusive(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_inclusive
    }
    /// Consumes the builder and constructs a [`CoverageDateFilter`](crate::types::CoverageDateFilter).
    pub fn build(self) -> crate::types::CoverageDateFilter {
        crate::types::CoverageDateFilter {
            start_inclusive: self.start_inclusive,
            end_inclusive: self.end_inclusive,
        }
    }
}
