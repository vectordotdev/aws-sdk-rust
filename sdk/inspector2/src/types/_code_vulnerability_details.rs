// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information on the code vulnerability identified in your Lambda function.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeVulnerabilityDetails {
    /// <p>Contains information on where the code vulnerability is located in your code.</p>
    pub file_path: ::std::option::Option<crate::types::CodeFilePath>,
    /// <p>The detector tag associated with the vulnerability. Detector tags group related vulnerabilities by common themes or tactics. For a list of available tags by programming language, see <a href="https://docs.aws.amazon.com/codeguru/detector-library/java/tags/">Java tags</a>, or <a href="https://docs.aws.amazon.com/codeguru/detector-library/python/tags/">Python tags</a>. </p>
    pub detector_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A URL containing supporting documentation about the code vulnerability detected.</p>
    pub reference_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The identifier for a rule that was used to detect the code vulnerability.</p>
    pub rule_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Lambda layer that the code vulnerability was detected in.</p>
    pub source_lambda_layer_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID for the Amazon CodeGuru detector associated with the finding. For more information on detectors see <a href="https://docs.aws.amazon.com/codeguru/detector-library">Amazon CodeGuru Detector Library</a>.</p>
    pub detector_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the detector used to identify the code vulnerability. For more information on detectors see <a href="https://docs.aws.amazon.com/codeguru/detector-library">CodeGuru Detector Library</a>.</p>
    pub detector_name: ::std::option::Option<::std::string::String>,
    /// <p>The Common Weakness Enumeration (CWE) item associated with the detected vulnerability.</p>
    pub cwes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CodeVulnerabilityDetails {
    /// <p>Contains information on where the code vulnerability is located in your code.</p>
    pub fn file_path(&self) -> ::std::option::Option<&crate::types::CodeFilePath> {
        self.file_path.as_ref()
    }
    /// <p>The detector tag associated with the vulnerability. Detector tags group related vulnerabilities by common themes or tactics. For a list of available tags by programming language, see <a href="https://docs.aws.amazon.com/codeguru/detector-library/java/tags/">Java tags</a>, or <a href="https://docs.aws.amazon.com/codeguru/detector-library/python/tags/">Python tags</a>. </p>
    pub fn detector_tags(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.detector_tags.as_deref()
    }
    /// <p>A URL containing supporting documentation about the code vulnerability detected.</p>
    pub fn reference_urls(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.reference_urls.as_deref()
    }
    /// <p>The identifier for a rule that was used to detect the code vulnerability.</p>
    pub fn rule_id(&self) -> ::std::option::Option<&str> {
        self.rule_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda layer that the code vulnerability was detected in.</p>
    pub fn source_lambda_layer_arn(&self) -> ::std::option::Option<&str> {
        self.source_lambda_layer_arn.as_deref()
    }
    /// <p>The ID for the Amazon CodeGuru detector associated with the finding. For more information on detectors see <a href="https://docs.aws.amazon.com/codeguru/detector-library">Amazon CodeGuru Detector Library</a>.</p>
    pub fn detector_id(&self) -> ::std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>The name of the detector used to identify the code vulnerability. For more information on detectors see <a href="https://docs.aws.amazon.com/codeguru/detector-library">CodeGuru Detector Library</a>.</p>
    pub fn detector_name(&self) -> ::std::option::Option<&str> {
        self.detector_name.as_deref()
    }
    /// <p>The Common Weakness Enumeration (CWE) item associated with the detected vulnerability.</p>
    pub fn cwes(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.cwes.as_deref()
    }
}
impl CodeVulnerabilityDetails {
    /// Creates a new builder-style object to manufacture [`CodeVulnerabilityDetails`](crate::types::CodeVulnerabilityDetails).
    pub fn builder() -> crate::types::builders::CodeVulnerabilityDetailsBuilder {
        crate::types::builders::CodeVulnerabilityDetailsBuilder::default()
    }
}

/// A builder for [`CodeVulnerabilityDetails`](crate::types::CodeVulnerabilityDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeVulnerabilityDetailsBuilder {
    pub(crate) file_path: ::std::option::Option<crate::types::CodeFilePath>,
    pub(crate) detector_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) reference_urls: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) rule_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_lambda_layer_arn: ::std::option::Option<::std::string::String>,
    pub(crate) detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) detector_name: ::std::option::Option<::std::string::String>,
    pub(crate) cwes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CodeVulnerabilityDetailsBuilder {
    /// <p>Contains information on where the code vulnerability is located in your code.</p>
    pub fn file_path(mut self, input: crate::types::CodeFilePath) -> Self {
        self.file_path = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information on where the code vulnerability is located in your code.</p>
    pub fn set_file_path(mut self, input: ::std::option::Option<crate::types::CodeFilePath>) -> Self {
        self.file_path = input;
        self
    }
    /// <p>Contains information on where the code vulnerability is located in your code.</p>
    pub fn get_file_path(&self) -> &::std::option::Option<crate::types::CodeFilePath> {
        &self.file_path
    }
    /// Appends an item to `detector_tags`.
    ///
    /// To override the contents of this collection use [`set_detector_tags`](Self::set_detector_tags).
    ///
    /// <p>The detector tag associated with the vulnerability. Detector tags group related vulnerabilities by common themes or tactics. For a list of available tags by programming language, see <a href="https://docs.aws.amazon.com/codeguru/detector-library/java/tags/">Java tags</a>, or <a href="https://docs.aws.amazon.com/codeguru/detector-library/python/tags/">Python tags</a>. </p>
    pub fn detector_tags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.detector_tags.unwrap_or_default();
        v.push(input.into());
        self.detector_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The detector tag associated with the vulnerability. Detector tags group related vulnerabilities by common themes or tactics. For a list of available tags by programming language, see <a href="https://docs.aws.amazon.com/codeguru/detector-library/java/tags/">Java tags</a>, or <a href="https://docs.aws.amazon.com/codeguru/detector-library/python/tags/">Python tags</a>. </p>
    pub fn set_detector_tags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.detector_tags = input;
        self
    }
    /// <p>The detector tag associated with the vulnerability. Detector tags group related vulnerabilities by common themes or tactics. For a list of available tags by programming language, see <a href="https://docs.aws.amazon.com/codeguru/detector-library/java/tags/">Java tags</a>, or <a href="https://docs.aws.amazon.com/codeguru/detector-library/python/tags/">Python tags</a>. </p>
    pub fn get_detector_tags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.detector_tags
    }
    /// Appends an item to `reference_urls`.
    ///
    /// To override the contents of this collection use [`set_reference_urls`](Self::set_reference_urls).
    ///
    /// <p>A URL containing supporting documentation about the code vulnerability detected.</p>
    pub fn reference_urls(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.reference_urls.unwrap_or_default();
        v.push(input.into());
        self.reference_urls = ::std::option::Option::Some(v);
        self
    }
    /// <p>A URL containing supporting documentation about the code vulnerability detected.</p>
    pub fn set_reference_urls(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.reference_urls = input;
        self
    }
    /// <p>A URL containing supporting documentation about the code vulnerability detected.</p>
    pub fn get_reference_urls(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.reference_urls
    }
    /// <p>The identifier for a rule that was used to detect the code vulnerability.</p>
    pub fn rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for a rule that was used to detect the code vulnerability.</p>
    pub fn set_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The identifier for a rule that was used to detect the code vulnerability.</p>
    pub fn get_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda layer that the code vulnerability was detected in.</p>
    pub fn source_lambda_layer_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_lambda_layer_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda layer that the code vulnerability was detected in.</p>
    pub fn set_source_lambda_layer_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_lambda_layer_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda layer that the code vulnerability was detected in.</p>
    pub fn get_source_lambda_layer_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_lambda_layer_arn
    }
    /// <p>The ID for the Amazon CodeGuru detector associated with the finding. For more information on detectors see <a href="https://docs.aws.amazon.com/codeguru/detector-library">Amazon CodeGuru Detector Library</a>.</p>
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the Amazon CodeGuru detector associated with the finding. For more information on detectors see <a href="https://docs.aws.amazon.com/codeguru/detector-library">Amazon CodeGuru Detector Library</a>.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The ID for the Amazon CodeGuru detector associated with the finding. For more information on detectors see <a href="https://docs.aws.amazon.com/codeguru/detector-library">Amazon CodeGuru Detector Library</a>.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_id
    }
    /// <p>The name of the detector used to identify the code vulnerability. For more information on detectors see <a href="https://docs.aws.amazon.com/codeguru/detector-library">CodeGuru Detector Library</a>.</p>
    pub fn detector_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the detector used to identify the code vulnerability. For more information on detectors see <a href="https://docs.aws.amazon.com/codeguru/detector-library">CodeGuru Detector Library</a>.</p>
    pub fn set_detector_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_name = input;
        self
    }
    /// <p>The name of the detector used to identify the code vulnerability. For more information on detectors see <a href="https://docs.aws.amazon.com/codeguru/detector-library">CodeGuru Detector Library</a>.</p>
    pub fn get_detector_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_name
    }
    /// Appends an item to `cwes`.
    ///
    /// To override the contents of this collection use [`set_cwes`](Self::set_cwes).
    ///
    /// <p>The Common Weakness Enumeration (CWE) item associated with the detected vulnerability.</p>
    pub fn cwes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cwes.unwrap_or_default();
        v.push(input.into());
        self.cwes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Common Weakness Enumeration (CWE) item associated with the detected vulnerability.</p>
    pub fn set_cwes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cwes = input;
        self
    }
    /// <p>The Common Weakness Enumeration (CWE) item associated with the detected vulnerability.</p>
    pub fn get_cwes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cwes
    }
    /// Consumes the builder and constructs a [`CodeVulnerabilityDetails`](crate::types::CodeVulnerabilityDetails).
    pub fn build(self) -> crate::types::CodeVulnerabilityDetails {
        crate::types::CodeVulnerabilityDetails {
            file_path: self.file_path,
            detector_tags: self.detector_tags,
            reference_urls: self.reference_urls,
            rule_id: self.rule_id,
            source_lambda_layer_arn: self.source_lambda_layer_arn,
            detector_id: self.detector_id,
            detector_name: self.detector_name,
            cwes: self.cwes,
        }
    }
}
