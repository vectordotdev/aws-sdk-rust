// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Cybersecurity and Infrastructure Security Agency (CISA) details for a specific vulnerability.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CisaData {
    /// <p>The date and time CISA added this vulnerability to their catalogue.</p>
    pub date_added: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time CISA expects a fix to have been provided vulnerability.</p>
    pub date_due: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The remediation action recommended by CISA for this vulnerability.</p>
    pub action: ::std::option::Option<::std::string::String>,
}
impl CisaData {
    /// <p>The date and time CISA added this vulnerability to their catalogue.</p>
    pub fn date_added(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_added.as_ref()
    }
    /// <p>The date and time CISA expects a fix to have been provided vulnerability.</p>
    pub fn date_due(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.date_due.as_ref()
    }
    /// <p>The remediation action recommended by CISA for this vulnerability.</p>
    pub fn action(&self) -> ::std::option::Option<&str> {
        self.action.as_deref()
    }
}
impl CisaData {
    /// Creates a new builder-style object to manufacture [`CisaData`](crate::types::CisaData).
    pub fn builder() -> crate::types::builders::CisaDataBuilder {
        crate::types::builders::CisaDataBuilder::default()
    }
}

/// A builder for [`CisaData`](crate::types::CisaData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CisaDataBuilder {
    pub(crate) date_added: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) date_due: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) action: ::std::option::Option<::std::string::String>,
}
impl CisaDataBuilder {
    /// <p>The date and time CISA added this vulnerability to their catalogue.</p>
    pub fn date_added(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_added = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time CISA added this vulnerability to their catalogue.</p>
    pub fn set_date_added(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_added = input;
        self
    }
    /// <p>The date and time CISA added this vulnerability to their catalogue.</p>
    pub fn get_date_added(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_added
    }
    /// <p>The date and time CISA expects a fix to have been provided vulnerability.</p>
    pub fn date_due(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.date_due = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time CISA expects a fix to have been provided vulnerability.</p>
    pub fn set_date_due(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.date_due = input;
        self
    }
    /// <p>The date and time CISA expects a fix to have been provided vulnerability.</p>
    pub fn get_date_due(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.date_due
    }
    /// <p>The remediation action recommended by CISA for this vulnerability.</p>
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The remediation action recommended by CISA for this vulnerability.</p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action = input;
        self
    }
    /// <p>The remediation action recommended by CISA for this vulnerability.</p>
    pub fn get_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.action
    }
    /// Consumes the builder and constructs a [`CisaData`](crate::types::CisaData).
    pub fn build(self) -> crate::types::CisaData {
        crate::types::CisaData {
            date_added: self.date_added,
            date_due: self.date_due,
            action: self.action,
        }
    }
}
