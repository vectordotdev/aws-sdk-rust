// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Common Vulnerability Scoring System (CVSS) version 2 details for the vulnerability.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Cvss2 {
    /// <p>The CVSS v2 base score for the vulnerability.</p>
    pub base_score: f64,
    /// <p>The scoring vector associated with the CVSS v2 score.</p>
    pub scoring_vector: ::std::option::Option<::std::string::String>,
}
impl Cvss2 {
    /// <p>The CVSS v2 base score for the vulnerability.</p>
    pub fn base_score(&self) -> f64 {
        self.base_score
    }
    /// <p>The scoring vector associated with the CVSS v2 score.</p>
    pub fn scoring_vector(&self) -> ::std::option::Option<&str> {
        self.scoring_vector.as_deref()
    }
}
impl Cvss2 {
    /// Creates a new builder-style object to manufacture [`Cvss2`](crate::types::Cvss2).
    pub fn builder() -> crate::types::builders::Cvss2Builder {
        crate::types::builders::Cvss2Builder::default()
    }
}

/// A builder for [`Cvss2`](crate::types::Cvss2).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct Cvss2Builder {
    pub(crate) base_score: ::std::option::Option<f64>,
    pub(crate) scoring_vector: ::std::option::Option<::std::string::String>,
}
impl Cvss2Builder {
    /// <p>The CVSS v2 base score for the vulnerability.</p>
    pub fn base_score(mut self, input: f64) -> Self {
        self.base_score = ::std::option::Option::Some(input);
        self
    }
    /// <p>The CVSS v2 base score for the vulnerability.</p>
    pub fn set_base_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.base_score = input;
        self
    }
    /// <p>The CVSS v2 base score for the vulnerability.</p>
    pub fn get_base_score(&self) -> &::std::option::Option<f64> {
        &self.base_score
    }
    /// <p>The scoring vector associated with the CVSS v2 score.</p>
    pub fn scoring_vector(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scoring_vector = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scoring vector associated with the CVSS v2 score.</p>
    pub fn set_scoring_vector(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scoring_vector = input;
        self
    }
    /// <p>The scoring vector associated with the CVSS v2 score.</p>
    pub fn get_scoring_vector(&self) -> &::std::option::Option<::std::string::String> {
        &self.scoring_vector
    }
    /// Consumes the builder and constructs a [`Cvss2`](crate::types::Cvss2).
    pub fn build(self) -> crate::types::Cvss2 {
        crate::types::Cvss2 {
            base_score: self.base_score.unwrap_or_default(),
            scoring_vector: self.scoring_vector,
        }
    }
}
