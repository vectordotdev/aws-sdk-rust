// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disable_organization_admin_account::_disable_organization_admin_account_output::DisableOrganizationAdminAccountOutputBuilder;

pub use crate::operation::disable_organization_admin_account::_disable_organization_admin_account_input::DisableOrganizationAdminAccountInputBuilder;

impl DisableOrganizationAdminAccountInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::disable_organization_admin_account::DisableOrganizationAdminAccountOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::disable_organization_admin_account::DisableOrganizationAdminAccountError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.disable_organization_admin_account();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DisableOrganizationAdminAccount`.
///
/// <p>Removes the Detective administrator account in the current Region. Deletes the organization behavior graph.</p>
/// <p>Can only be called by the organization management account.</p>
/// <p>Removing the Detective administrator account does not affect the delegated administrator account for Detective in Organizations.</p>
/// <p>To remove the delegated administrator account in Organizations, use the Organizations API. Removing the delegated administrator account also removes the Detective administrator account in all Regions, except for Regions where the Detective administrator account is the organization management account.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DisableOrganizationAdminAccountFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::disable_organization_admin_account::builders::DisableOrganizationAdminAccountInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl DisableOrganizationAdminAccountFluentBuilder {
    /// Creates a new `DisableOrganizationAdminAccount`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DisableOrganizationAdminAccount as a reference.
    pub fn as_input(&self) -> &crate::operation::disable_organization_admin_account::builders::DisableOrganizationAdminAccountInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::disable_organization_admin_account::DisableOrganizationAdminAccountOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::disable_organization_admin_account::DisableOrganizationAdminAccountError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::disable_organization_admin_account::DisableOrganizationAdminAccount::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::disable_organization_admin_account::DisableOrganizationAdminAccount::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::disable_organization_admin_account::DisableOrganizationAdminAccountOutput,
            crate::operation::disable_organization_admin_account::DisableOrganizationAdminAccountError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::disable_organization_admin_account::DisableOrganizationAdminAccountError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
}
