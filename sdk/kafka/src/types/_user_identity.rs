// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Description of the requester that calls the API operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserIdentity {
    /// <p>The identity type of the requester that calls the API operation.</p>
    pub r#type: ::std::option::Option<crate::types::UserIdentityType>,
    /// <p>A unique identifier for the requester that calls the API operation.</p>
    pub principal_id: ::std::option::Option<::std::string::String>,
}
impl UserIdentity {
    /// <p>The identity type of the requester that calls the API operation.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::UserIdentityType> {
        self.r#type.as_ref()
    }
    /// <p>A unique identifier for the requester that calls the API operation.</p>
    pub fn principal_id(&self) -> ::std::option::Option<&str> {
        self.principal_id.as_deref()
    }
}
impl UserIdentity {
    /// Creates a new builder-style object to manufacture [`UserIdentity`](crate::types::UserIdentity).
    pub fn builder() -> crate::types::builders::UserIdentityBuilder {
        crate::types::builders::UserIdentityBuilder::default()
    }
}

/// A builder for [`UserIdentity`](crate::types::UserIdentity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserIdentityBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::UserIdentityType>,
    pub(crate) principal_id: ::std::option::Option<::std::string::String>,
}
impl UserIdentityBuilder {
    /// <p>The identity type of the requester that calls the API operation.</p>
    pub fn r#type(mut self, input: crate::types::UserIdentityType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The identity type of the requester that calls the API operation.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::UserIdentityType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The identity type of the requester that calls the API operation.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::UserIdentityType> {
        &self.r#type
    }
    /// <p>A unique identifier for the requester that calls the API operation.</p>
    pub fn principal_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the requester that calls the API operation.</p>
    pub fn set_principal_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>A unique identifier for the requester that calls the API operation.</p>
    pub fn get_principal_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_id
    }
    /// Consumes the builder and constructs a [`UserIdentity`](crate::types::UserIdentity).
    pub fn build(self) -> crate::types::UserIdentity {
        crate::types::UserIdentity {
            r#type: self.r#type,
            principal_id: self.principal_id,
        }
    }
}
