// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_bridges_output_next_token(
    input: &crate::operation::list_bridges::ListBridgesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_entitlements_output_next_token(
    input: &crate::operation::list_entitlements::ListEntitlementsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_flows_output_next_token(
    input: &crate::operation::list_flows::ListFlowsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_gateway_instances_output_next_token(
    input: &crate::operation::list_gateway_instances::ListGatewayInstancesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_gateways_output_next_token(
    input: &crate::operation::list_gateways::ListGatewaysOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_offerings_output_next_token(
    input: &crate::operation::list_offerings::ListOfferingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_reservations_output_next_token(
    input: &crate::operation::list_reservations::ListReservationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bridges_output_bridges(
    input: crate::operation::list_bridges::ListBridgesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedBridge>> {
    let input = match input.bridges {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_entitlements_output_entitlements(
    input: crate::operation::list_entitlements::ListEntitlementsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedEntitlement>> {
    let input = match input.entitlements {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_flows_output_flows(
    input: crate::operation::list_flows::ListFlowsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedFlow>> {
    let input = match input.flows {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_gateway_instances_output_instances(
    input: crate::operation::list_gateway_instances::ListGatewayInstancesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedGatewayInstance>> {
    let input = match input.instances {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_gateways_output_gateways(
    input: crate::operation::list_gateways::ListGatewaysOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListedGateway>> {
    let input = match input.gateways {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_offerings_output_offerings(
    input: crate::operation::list_offerings::ListOfferingsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Offering>> {
    let input = match input.offerings {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_reservations_output_reservations(
    input: crate::operation::list_reservations::ListReservationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Reservation>> {
    let input = match input.reservations {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
