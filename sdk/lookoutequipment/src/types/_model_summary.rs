// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the specified ML model, including dataset and model names and ARNs, as well as status. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModelSummary {
    /// <p>The name of the ML model. </p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the ML model. </p>
    pub model_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the dataset being used for the ML model. </p>
    pub dataset_name: ::std::option::Option<::std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the dataset used to create the model. </p>
    pub dataset_arn: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the status of the ML model. </p>
    pub status: ::std::option::Option<crate::types::ModelStatus>,
    /// <p>The time at which the specific model was created. </p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ModelSummary {
    /// <p>The name of the ML model. </p>
    pub fn model_name(&self) -> ::std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the ML model. </p>
    pub fn model_arn(&self) -> ::std::option::Option<&str> {
        self.model_arn.as_deref()
    }
    /// <p>The name of the dataset being used for the ML model. </p>
    pub fn dataset_name(&self) -> ::std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the dataset used to create the model. </p>
    pub fn dataset_arn(&self) -> ::std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p>Indicates the status of the ML model. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ModelStatus> {
        self.status.as_ref()
    }
    /// <p>The time at which the specific model was created. </p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl ModelSummary {
    /// Creates a new builder-style object to manufacture [`ModelSummary`](crate::types::ModelSummary).
    pub fn builder() -> crate::types::builders::ModelSummaryBuilder {
        crate::types::builders::ModelSummaryBuilder::default()
    }
}

/// A builder for [`ModelSummary`](crate::types::ModelSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ModelSummaryBuilder {
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ModelStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ModelSummaryBuilder {
    /// <p>The name of the ML model. </p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the ML model. </p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>The name of the ML model. </p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p> The Amazon Resource Name (ARN) of the ML model. </p>
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the ML model. </p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the ML model. </p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>The name of the dataset being used for the ML model. </p>
    pub fn dataset_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dataset being used for the ML model. </p>
    pub fn set_dataset_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p>The name of the dataset being used for the ML model. </p>
    pub fn get_dataset_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_name
    }
    /// <p> The Amazon Resource Name (ARN) of the dataset used to create the model. </p>
    pub fn dataset_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the dataset used to create the model. </p>
    pub fn set_dataset_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the dataset used to create the model. </p>
    pub fn get_dataset_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_arn
    }
    /// <p>Indicates the status of the ML model. </p>
    pub fn status(mut self, input: crate::types::ModelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the status of the ML model. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ModelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates the status of the ML model. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ModelStatus> {
        &self.status
    }
    /// <p>The time at which the specific model was created. </p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the specific model was created. </p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the specific model was created. </p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// Consumes the builder and constructs a [`ModelSummary`](crate::types::ModelSummary).
    pub fn build(self) -> crate::types::ModelSummary {
        crate::types::ModelSummary {
            model_name: self.model_name,
            model_arn: self.model_arn,
            dataset_name: self.dataset_name,
            dataset_arn: self.dataset_arn,
            status: self.status,
            created_at: self.created_at,
        }
    }
}
