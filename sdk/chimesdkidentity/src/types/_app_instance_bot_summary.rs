// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>High-level information about an AppInstanceBot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AppInstanceBotSummary {
    /// <p>The ARN of the AppInstanceBot.</p>
    pub app_instance_bot_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the AppInstanceBox.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The metadata of the AppInstanceBot.</p>
    pub metadata: ::std::option::Option<::std::string::String>,
}
impl AppInstanceBotSummary {
    /// <p>The ARN of the AppInstanceBot.</p>
    pub fn app_instance_bot_arn(&self) -> ::std::option::Option<&str> {
        self.app_instance_bot_arn.as_deref()
    }
    /// <p>The name of the AppInstanceBox.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The metadata of the AppInstanceBot.</p>
    pub fn metadata(&self) -> ::std::option::Option<&str> {
        self.metadata.as_deref()
    }
}
impl ::std::fmt::Debug for AppInstanceBotSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AppInstanceBotSummary");
        formatter.field("app_instance_bot_arn", &self.app_instance_bot_arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AppInstanceBotSummary {
    /// Creates a new builder-style object to manufacture [`AppInstanceBotSummary`](crate::types::AppInstanceBotSummary).
    pub fn builder() -> crate::types::builders::AppInstanceBotSummaryBuilder {
        crate::types::builders::AppInstanceBotSummaryBuilder::default()
    }
}

/// A builder for [`AppInstanceBotSummary`](crate::types::AppInstanceBotSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AppInstanceBotSummaryBuilder {
    pub(crate) app_instance_bot_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) metadata: ::std::option::Option<::std::string::String>,
}
impl AppInstanceBotSummaryBuilder {
    /// <p>The ARN of the AppInstanceBot.</p>
    pub fn app_instance_bot_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_instance_bot_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the AppInstanceBot.</p>
    pub fn set_app_instance_bot_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_instance_bot_arn = input;
        self
    }
    /// <p>The ARN of the AppInstanceBot.</p>
    pub fn get_app_instance_bot_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_instance_bot_arn
    }
    /// <p>The name of the AppInstanceBox.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the AppInstanceBox.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the AppInstanceBox.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The metadata of the AppInstanceBot.</p>
    pub fn metadata(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metadata of the AppInstanceBot.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata of the AppInstanceBot.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`AppInstanceBotSummary`](crate::types::AppInstanceBotSummary).
    pub fn build(self) -> crate::types::AppInstanceBotSummary {
        crate::types::AppInstanceBotSummary {
            app_instance_bot_arn: self.app_instance_bot_arn,
            name: self.name,
            metadata: self.metadata,
        }
    }
}
impl ::std::fmt::Debug for AppInstanceBotSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AppInstanceBotSummaryBuilder");
        formatter.field("app_instance_bot_arn", &self.app_instance_bot_arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
