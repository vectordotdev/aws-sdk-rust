// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutAppInstanceUserExpirationSettingsOutput {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub app_instance_user_arn: ::std::option::Option<::std::string::String>,
    /// <p>Settings that control the interval after which an <code>AppInstanceUser</code> is automatically deleted.</p>
    pub expiration_settings: ::std::option::Option<crate::types::ExpirationSettings>,
    _request_id: Option<String>,
}
impl PutAppInstanceUserExpirationSettingsOutput {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn app_instance_user_arn(&self) -> ::std::option::Option<&str> {
        self.app_instance_user_arn.as_deref()
    }
    /// <p>Settings that control the interval after which an <code>AppInstanceUser</code> is automatically deleted.</p>
    pub fn expiration_settings(&self) -> ::std::option::Option<&crate::types::ExpirationSettings> {
        self.expiration_settings.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for PutAppInstanceUserExpirationSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutAppInstanceUserExpirationSettingsOutput {
    /// Creates a new builder-style object to manufacture [`PutAppInstanceUserExpirationSettingsOutput`](crate::operation::put_app_instance_user_expiration_settings::PutAppInstanceUserExpirationSettingsOutput).
    pub fn builder() -> crate::operation::put_app_instance_user_expiration_settings::builders::PutAppInstanceUserExpirationSettingsOutputBuilder {
        crate::operation::put_app_instance_user_expiration_settings::builders::PutAppInstanceUserExpirationSettingsOutputBuilder::default()
    }
}

/// A builder for [`PutAppInstanceUserExpirationSettingsOutput`](crate::operation::put_app_instance_user_expiration_settings::PutAppInstanceUserExpirationSettingsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutAppInstanceUserExpirationSettingsOutputBuilder {
    pub(crate) app_instance_user_arn: ::std::option::Option<::std::string::String>,
    pub(crate) expiration_settings: ::std::option::Option<crate::types::ExpirationSettings>,
    _request_id: Option<String>,
}
impl PutAppInstanceUserExpirationSettingsOutputBuilder {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn app_instance_user_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_instance_user_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn set_app_instance_user_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_instance_user_arn = input;
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn get_app_instance_user_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_instance_user_arn
    }
    /// <p>Settings that control the interval after which an <code>AppInstanceUser</code> is automatically deleted.</p>
    pub fn expiration_settings(mut self, input: crate::types::ExpirationSettings) -> Self {
        self.expiration_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings that control the interval after which an <code>AppInstanceUser</code> is automatically deleted.</p>
    pub fn set_expiration_settings(mut self, input: ::std::option::Option<crate::types::ExpirationSettings>) -> Self {
        self.expiration_settings = input;
        self
    }
    /// <p>Settings that control the interval after which an <code>AppInstanceUser</code> is automatically deleted.</p>
    pub fn get_expiration_settings(&self) -> &::std::option::Option<crate::types::ExpirationSettings> {
        &self.expiration_settings
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutAppInstanceUserExpirationSettingsOutput`](crate::operation::put_app_instance_user_expiration_settings::PutAppInstanceUserExpirationSettingsOutput).
    pub fn build(self) -> crate::operation::put_app_instance_user_expiration_settings::PutAppInstanceUserExpirationSettingsOutput {
        crate::operation::put_app_instance_user_expiration_settings::PutAppInstanceUserExpirationSettingsOutput {
            app_instance_user_arn: self.app_instance_user_arn,
            expiration_settings: self.expiration_settings,
            _request_id: self._request_id,
        }
    }
}
