// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details describing a core network change.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoreNetworkChange {
    /// <p>The type of change.</p>
    pub r#type: ::std::option::Option<crate::types::ChangeType>,
    /// <p>The action to take for a core network.</p>
    pub action: ::std::option::Option<crate::types::ChangeAction>,
    /// <p>The resource identifier.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The previous values for a core network.</p>
    pub previous_values: ::std::option::Option<crate::types::CoreNetworkChangeValues>,
    /// <p>The new value for a core network</p>
    pub new_values: ::std::option::Option<crate::types::CoreNetworkChangeValues>,
    /// <p>Uniquely identifies the path for a change within the changeset. For example, the <code>IdentifierPath</code> for a core network segment change might be <code>"CORE_NETWORK_SEGMENT/us-east-1/devsegment"</code>.</p>
    pub identifier_path: ::std::option::Option<::std::string::String>,
}
impl CoreNetworkChange {
    /// <p>The type of change.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ChangeType> {
        self.r#type.as_ref()
    }
    /// <p>The action to take for a core network.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::ChangeAction> {
        self.action.as_ref()
    }
    /// <p>The resource identifier.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The previous values for a core network.</p>
    pub fn previous_values(&self) -> ::std::option::Option<&crate::types::CoreNetworkChangeValues> {
        self.previous_values.as_ref()
    }
    /// <p>The new value for a core network</p>
    pub fn new_values(&self) -> ::std::option::Option<&crate::types::CoreNetworkChangeValues> {
        self.new_values.as_ref()
    }
    /// <p>Uniquely identifies the path for a change within the changeset. For example, the <code>IdentifierPath</code> for a core network segment change might be <code>"CORE_NETWORK_SEGMENT/us-east-1/devsegment"</code>.</p>
    pub fn identifier_path(&self) -> ::std::option::Option<&str> {
        self.identifier_path.as_deref()
    }
}
impl CoreNetworkChange {
    /// Creates a new builder-style object to manufacture [`CoreNetworkChange`](crate::types::CoreNetworkChange).
    pub fn builder() -> crate::types::builders::CoreNetworkChangeBuilder {
        crate::types::builders::CoreNetworkChangeBuilder::default()
    }
}

/// A builder for [`CoreNetworkChange`](crate::types::CoreNetworkChange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoreNetworkChangeBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ChangeType>,
    pub(crate) action: ::std::option::Option<crate::types::ChangeAction>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) previous_values: ::std::option::Option<crate::types::CoreNetworkChangeValues>,
    pub(crate) new_values: ::std::option::Option<crate::types::CoreNetworkChangeValues>,
    pub(crate) identifier_path: ::std::option::Option<::std::string::String>,
}
impl CoreNetworkChangeBuilder {
    /// <p>The type of change.</p>
    pub fn r#type(mut self, input: crate::types::ChangeType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of change.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ChangeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of change.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ChangeType> {
        &self.r#type
    }
    /// <p>The action to take for a core network.</p>
    pub fn action(mut self, input: crate::types::ChangeAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to take for a core network.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::ChangeAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action to take for a core network.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::ChangeAction> {
        &self.action
    }
    /// <p>The resource identifier.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource identifier.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The resource identifier.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The previous values for a core network.</p>
    pub fn previous_values(mut self, input: crate::types::CoreNetworkChangeValues) -> Self {
        self.previous_values = ::std::option::Option::Some(input);
        self
    }
    /// <p>The previous values for a core network.</p>
    pub fn set_previous_values(mut self, input: ::std::option::Option<crate::types::CoreNetworkChangeValues>) -> Self {
        self.previous_values = input;
        self
    }
    /// <p>The previous values for a core network.</p>
    pub fn get_previous_values(&self) -> &::std::option::Option<crate::types::CoreNetworkChangeValues> {
        &self.previous_values
    }
    /// <p>The new value for a core network</p>
    pub fn new_values(mut self, input: crate::types::CoreNetworkChangeValues) -> Self {
        self.new_values = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new value for a core network</p>
    pub fn set_new_values(mut self, input: ::std::option::Option<crate::types::CoreNetworkChangeValues>) -> Self {
        self.new_values = input;
        self
    }
    /// <p>The new value for a core network</p>
    pub fn get_new_values(&self) -> &::std::option::Option<crate::types::CoreNetworkChangeValues> {
        &self.new_values
    }
    /// <p>Uniquely identifies the path for a change within the changeset. For example, the <code>IdentifierPath</code> for a core network segment change might be <code>"CORE_NETWORK_SEGMENT/us-east-1/devsegment"</code>.</p>
    pub fn identifier_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Uniquely identifies the path for a change within the changeset. For example, the <code>IdentifierPath</code> for a core network segment change might be <code>"CORE_NETWORK_SEGMENT/us-east-1/devsegment"</code>.</p>
    pub fn set_identifier_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier_path = input;
        self
    }
    /// <p>Uniquely identifies the path for a change within the changeset. For example, the <code>IdentifierPath</code> for a core network segment change might be <code>"CORE_NETWORK_SEGMENT/us-east-1/devsegment"</code>.</p>
    pub fn get_identifier_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier_path
    }
    /// Consumes the builder and constructs a [`CoreNetworkChange`](crate::types::CoreNetworkChange).
    pub fn build(self) -> crate::types::CoreNetworkChange {
        crate::types::CoreNetworkChange {
            r#type: self.r#type,
            action: self.action,
            identifier: self.identifier,
            previous_values: self.previous_values,
            new_values: self.new_values,
            identifier_path: self.identifier_path,
        }
    }
}
