// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Device Defender security profile behavior violation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ViolationEvent {
    /// <p>The ID of the violation event.</p>
    pub violation_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the thing responsible for the violation event.</p>
    pub thing_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the security profile whose behavior was violated.</p>
    pub security_profile_name: ::std::option::Option<::std::string::String>,
    /// <p>The behavior that was violated.</p>
    pub behavior: ::std::option::Option<crate::types::Behavior>,
    /// <p>The value of the metric (the measurement).</p>
    pub metric_value: ::std::option::Option<crate::types::MetricValue>,
    /// <p> The details of a violation event. </p>
    pub violation_event_additional_info: ::std::option::Option<crate::types::ViolationEventAdditionalInfo>,
    /// <p>The type of violation event.</p>
    pub violation_event_type: ::std::option::Option<crate::types::ViolationEventType>,
    /// <p>The verification state of the violation (detect alarm).</p>
    pub verification_state: ::std::option::Option<crate::types::VerificationState>,
    /// <p>The description of the verification state of the violation.</p>
    pub verification_state_description: ::std::option::Option<::std::string::String>,
    /// <p>The time the violation event occurred.</p>
    pub violation_event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ViolationEvent {
    /// <p>The ID of the violation event.</p>
    pub fn violation_id(&self) -> ::std::option::Option<&str> {
        self.violation_id.as_deref()
    }
    /// <p>The name of the thing responsible for the violation event.</p>
    pub fn thing_name(&self) -> ::std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>The name of the security profile whose behavior was violated.</p>
    pub fn security_profile_name(&self) -> ::std::option::Option<&str> {
        self.security_profile_name.as_deref()
    }
    /// <p>The behavior that was violated.</p>
    pub fn behavior(&self) -> ::std::option::Option<&crate::types::Behavior> {
        self.behavior.as_ref()
    }
    /// <p>The value of the metric (the measurement).</p>
    pub fn metric_value(&self) -> ::std::option::Option<&crate::types::MetricValue> {
        self.metric_value.as_ref()
    }
    /// <p> The details of a violation event. </p>
    pub fn violation_event_additional_info(&self) -> ::std::option::Option<&crate::types::ViolationEventAdditionalInfo> {
        self.violation_event_additional_info.as_ref()
    }
    /// <p>The type of violation event.</p>
    pub fn violation_event_type(&self) -> ::std::option::Option<&crate::types::ViolationEventType> {
        self.violation_event_type.as_ref()
    }
    /// <p>The verification state of the violation (detect alarm).</p>
    pub fn verification_state(&self) -> ::std::option::Option<&crate::types::VerificationState> {
        self.verification_state.as_ref()
    }
    /// <p>The description of the verification state of the violation.</p>
    pub fn verification_state_description(&self) -> ::std::option::Option<&str> {
        self.verification_state_description.as_deref()
    }
    /// <p>The time the violation event occurred.</p>
    pub fn violation_event_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.violation_event_time.as_ref()
    }
}
impl ViolationEvent {
    /// Creates a new builder-style object to manufacture [`ViolationEvent`](crate::types::ViolationEvent).
    pub fn builder() -> crate::types::builders::ViolationEventBuilder {
        crate::types::builders::ViolationEventBuilder::default()
    }
}

/// A builder for [`ViolationEvent`](crate::types::ViolationEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ViolationEventBuilder {
    pub(crate) violation_id: ::std::option::Option<::std::string::String>,
    pub(crate) thing_name: ::std::option::Option<::std::string::String>,
    pub(crate) security_profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) behavior: ::std::option::Option<crate::types::Behavior>,
    pub(crate) metric_value: ::std::option::Option<crate::types::MetricValue>,
    pub(crate) violation_event_additional_info: ::std::option::Option<crate::types::ViolationEventAdditionalInfo>,
    pub(crate) violation_event_type: ::std::option::Option<crate::types::ViolationEventType>,
    pub(crate) verification_state: ::std::option::Option<crate::types::VerificationState>,
    pub(crate) verification_state_description: ::std::option::Option<::std::string::String>,
    pub(crate) violation_event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ViolationEventBuilder {
    /// <p>The ID of the violation event.</p>
    pub fn violation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.violation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the violation event.</p>
    pub fn set_violation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.violation_id = input;
        self
    }
    /// <p>The ID of the violation event.</p>
    pub fn get_violation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.violation_id
    }
    /// <p>The name of the thing responsible for the violation event.</p>
    pub fn thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.thing_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the thing responsible for the violation event.</p>
    pub fn set_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>The name of the thing responsible for the violation event.</p>
    pub fn get_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.thing_name
    }
    /// <p>The name of the security profile whose behavior was violated.</p>
    pub fn security_profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.security_profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the security profile whose behavior was violated.</p>
    pub fn set_security_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.security_profile_name = input;
        self
    }
    /// <p>The name of the security profile whose behavior was violated.</p>
    pub fn get_security_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.security_profile_name
    }
    /// <p>The behavior that was violated.</p>
    pub fn behavior(mut self, input: crate::types::Behavior) -> Self {
        self.behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The behavior that was violated.</p>
    pub fn set_behavior(mut self, input: ::std::option::Option<crate::types::Behavior>) -> Self {
        self.behavior = input;
        self
    }
    /// <p>The behavior that was violated.</p>
    pub fn get_behavior(&self) -> &::std::option::Option<crate::types::Behavior> {
        &self.behavior
    }
    /// <p>The value of the metric (the measurement).</p>
    pub fn metric_value(mut self, input: crate::types::MetricValue) -> Self {
        self.metric_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the metric (the measurement).</p>
    pub fn set_metric_value(mut self, input: ::std::option::Option<crate::types::MetricValue>) -> Self {
        self.metric_value = input;
        self
    }
    /// <p>The value of the metric (the measurement).</p>
    pub fn get_metric_value(&self) -> &::std::option::Option<crate::types::MetricValue> {
        &self.metric_value
    }
    /// <p> The details of a violation event. </p>
    pub fn violation_event_additional_info(mut self, input: crate::types::ViolationEventAdditionalInfo) -> Self {
        self.violation_event_additional_info = ::std::option::Option::Some(input);
        self
    }
    /// <p> The details of a violation event. </p>
    pub fn set_violation_event_additional_info(mut self, input: ::std::option::Option<crate::types::ViolationEventAdditionalInfo>) -> Self {
        self.violation_event_additional_info = input;
        self
    }
    /// <p> The details of a violation event. </p>
    pub fn get_violation_event_additional_info(&self) -> &::std::option::Option<crate::types::ViolationEventAdditionalInfo> {
        &self.violation_event_additional_info
    }
    /// <p>The type of violation event.</p>
    pub fn violation_event_type(mut self, input: crate::types::ViolationEventType) -> Self {
        self.violation_event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of violation event.</p>
    pub fn set_violation_event_type(mut self, input: ::std::option::Option<crate::types::ViolationEventType>) -> Self {
        self.violation_event_type = input;
        self
    }
    /// <p>The type of violation event.</p>
    pub fn get_violation_event_type(&self) -> &::std::option::Option<crate::types::ViolationEventType> {
        &self.violation_event_type
    }
    /// <p>The verification state of the violation (detect alarm).</p>
    pub fn verification_state(mut self, input: crate::types::VerificationState) -> Self {
        self.verification_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The verification state of the violation (detect alarm).</p>
    pub fn set_verification_state(mut self, input: ::std::option::Option<crate::types::VerificationState>) -> Self {
        self.verification_state = input;
        self
    }
    /// <p>The verification state of the violation (detect alarm).</p>
    pub fn get_verification_state(&self) -> &::std::option::Option<crate::types::VerificationState> {
        &self.verification_state
    }
    /// <p>The description of the verification state of the violation.</p>
    pub fn verification_state_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verification_state_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the verification state of the violation.</p>
    pub fn set_verification_state_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verification_state_description = input;
        self
    }
    /// <p>The description of the verification state of the violation.</p>
    pub fn get_verification_state_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.verification_state_description
    }
    /// <p>The time the violation event occurred.</p>
    pub fn violation_event_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.violation_event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the violation event occurred.</p>
    pub fn set_violation_event_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.violation_event_time = input;
        self
    }
    /// <p>The time the violation event occurred.</p>
    pub fn get_violation_event_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.violation_event_time
    }
    /// Consumes the builder and constructs a [`ViolationEvent`](crate::types::ViolationEvent).
    pub fn build(self) -> crate::types::ViolationEvent {
        crate::types::ViolationEvent {
            violation_id: self.violation_id,
            thing_name: self.thing_name,
            security_profile_name: self.security_profile_name,
            behavior: self.behavior,
            metric_value: self.metric_value,
            violation_event_additional_info: self.violation_event_additional_info,
            violation_event_type: self.violation_event_type,
            verification_state: self.verification_state,
            verification_state_description: self.verification_state_description,
            violation_event_time: self.violation_event_time,
        }
    }
}
