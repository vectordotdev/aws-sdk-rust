// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The connectivity status of the thing.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ThingConnectivity {
    /// <p>True if the thing is connected to the Amazon Web Services IoT Core service; false if it is not connected.</p>
    pub connected: bool,
    /// <p>The epoch time (in milliseconds) when the thing last connected or disconnected. If the thing has been disconnected for approximately an hour, the time value might be missing.</p>
    pub timestamp: ::std::option::Option<i64>,
    /// <p>The reason why the client is disconnected. If the thing has been disconnected for approximately an hour, the <code>disconnectReason</code> value might be missing.</p>
    pub disconnect_reason: ::std::option::Option<::std::string::String>,
}
impl ThingConnectivity {
    /// <p>True if the thing is connected to the Amazon Web Services IoT Core service; false if it is not connected.</p>
    pub fn connected(&self) -> bool {
        self.connected
    }
    /// <p>The epoch time (in milliseconds) when the thing last connected or disconnected. If the thing has been disconnected for approximately an hour, the time value might be missing.</p>
    pub fn timestamp(&self) -> ::std::option::Option<i64> {
        self.timestamp
    }
    /// <p>The reason why the client is disconnected. If the thing has been disconnected for approximately an hour, the <code>disconnectReason</code> value might be missing.</p>
    pub fn disconnect_reason(&self) -> ::std::option::Option<&str> {
        self.disconnect_reason.as_deref()
    }
}
impl ThingConnectivity {
    /// Creates a new builder-style object to manufacture [`ThingConnectivity`](crate::types::ThingConnectivity).
    pub fn builder() -> crate::types::builders::ThingConnectivityBuilder {
        crate::types::builders::ThingConnectivityBuilder::default()
    }
}

/// A builder for [`ThingConnectivity`](crate::types::ThingConnectivity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ThingConnectivityBuilder {
    pub(crate) connected: ::std::option::Option<bool>,
    pub(crate) timestamp: ::std::option::Option<i64>,
    pub(crate) disconnect_reason: ::std::option::Option<::std::string::String>,
}
impl ThingConnectivityBuilder {
    /// <p>True if the thing is connected to the Amazon Web Services IoT Core service; false if it is not connected.</p>
    pub fn connected(mut self, input: bool) -> Self {
        self.connected = ::std::option::Option::Some(input);
        self
    }
    /// <p>True if the thing is connected to the Amazon Web Services IoT Core service; false if it is not connected.</p>
    pub fn set_connected(mut self, input: ::std::option::Option<bool>) -> Self {
        self.connected = input;
        self
    }
    /// <p>True if the thing is connected to the Amazon Web Services IoT Core service; false if it is not connected.</p>
    pub fn get_connected(&self) -> &::std::option::Option<bool> {
        &self.connected
    }
    /// <p>The epoch time (in milliseconds) when the thing last connected or disconnected. If the thing has been disconnected for approximately an hour, the time value might be missing.</p>
    pub fn timestamp(mut self, input: i64) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The epoch time (in milliseconds) when the thing last connected or disconnected. If the thing has been disconnected for approximately an hour, the time value might be missing.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The epoch time (in milliseconds) when the thing last connected or disconnected. If the thing has been disconnected for approximately an hour, the time value might be missing.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<i64> {
        &self.timestamp
    }
    /// <p>The reason why the client is disconnected. If the thing has been disconnected for approximately an hour, the <code>disconnectReason</code> value might be missing.</p>
    pub fn disconnect_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.disconnect_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason why the client is disconnected. If the thing has been disconnected for approximately an hour, the <code>disconnectReason</code> value might be missing.</p>
    pub fn set_disconnect_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.disconnect_reason = input;
        self
    }
    /// <p>The reason why the client is disconnected. If the thing has been disconnected for approximately an hour, the <code>disconnectReason</code> value might be missing.</p>
    pub fn get_disconnect_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.disconnect_reason
    }
    /// Consumes the builder and constructs a [`ThingConnectivity`](crate::types::ThingConnectivity).
    pub fn build(self) -> crate::types::ThingConnectivity {
        crate::types::ThingConnectivity {
            connected: self.connected.unwrap_or_default(),
            timestamp: self.timestamp,
            disconnect_reason: self.disconnect_reason,
        }
    }
}
