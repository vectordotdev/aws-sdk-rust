// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an action that sends data to CloudWatch Logs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudwatchLogsAction {
    /// <p>The IAM role that allows access to the CloudWatch log.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The CloudWatch log group to which the action sends data.</p>
    pub log_group_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether batches of log records will be extracted and uploaded into CloudWatch. Values include <code>true</code> or <code>false</code> <i>(default)</i>.</p>
    pub batch_mode: ::std::option::Option<bool>,
}
impl CloudwatchLogsAction {
    /// <p>The IAM role that allows access to the CloudWatch log.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The CloudWatch log group to which the action sends data.</p>
    pub fn log_group_name(&self) -> ::std::option::Option<&str> {
        self.log_group_name.as_deref()
    }
    /// <p>Indicates whether batches of log records will be extracted and uploaded into CloudWatch. Values include <code>true</code> or <code>false</code> <i>(default)</i>.</p>
    pub fn batch_mode(&self) -> ::std::option::Option<bool> {
        self.batch_mode
    }
}
impl CloudwatchLogsAction {
    /// Creates a new builder-style object to manufacture [`CloudwatchLogsAction`](crate::types::CloudwatchLogsAction).
    pub fn builder() -> crate::types::builders::CloudwatchLogsActionBuilder {
        crate::types::builders::CloudwatchLogsActionBuilder::default()
    }
}

/// A builder for [`CloudwatchLogsAction`](crate::types::CloudwatchLogsAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudwatchLogsActionBuilder {
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) log_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) batch_mode: ::std::option::Option<bool>,
}
impl CloudwatchLogsActionBuilder {
    /// <p>The IAM role that allows access to the CloudWatch log.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role that allows access to the CloudWatch log.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role that allows access to the CloudWatch log.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The CloudWatch log group to which the action sends data.</p>
    pub fn log_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CloudWatch log group to which the action sends data.</p>
    pub fn set_log_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_name = input;
        self
    }
    /// <p>The CloudWatch log group to which the action sends data.</p>
    pub fn get_log_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_name
    }
    /// <p>Indicates whether batches of log records will be extracted and uploaded into CloudWatch. Values include <code>true</code> or <code>false</code> <i>(default)</i>.</p>
    pub fn batch_mode(mut self, input: bool) -> Self {
        self.batch_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether batches of log records will be extracted and uploaded into CloudWatch. Values include <code>true</code> or <code>false</code> <i>(default)</i>.</p>
    pub fn set_batch_mode(mut self, input: ::std::option::Option<bool>) -> Self {
        self.batch_mode = input;
        self
    }
    /// <p>Indicates whether batches of log records will be extracted and uploaded into CloudWatch. Values include <code>true</code> or <code>false</code> <i>(default)</i>.</p>
    pub fn get_batch_mode(&self) -> &::std::option::Option<bool> {
        &self.batch_mode
    }
    /// Consumes the builder and constructs a [`CloudwatchLogsAction`](crate::types::CloudwatchLogsAction).
    pub fn build(self) -> crate::types::CloudwatchLogsAction {
        crate::types::CloudwatchLogsAction {
            role_arn: self.role_arn,
            log_group_name: self.log_group_name,
            batch_mode: self.batch_mode,
        }
    }
}
