// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetPackageOutput {
    /// <p>The name of the package.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN for the package.</p>
    pub package_arn: ::std::option::Option<::std::string::String>,
    /// <p>The package description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the default package version.</p>
    pub default_version_name: ::std::option::Option<::std::string::String>,
    /// <p>The date the package was created.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date when the package was last updated.</p>
    pub last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPackageOutput {
    /// <p>The name of the package.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The ARN for the package.</p>
    pub fn package_arn(&self) -> ::std::option::Option<&str> {
        self.package_arn.as_deref()
    }
    /// <p>The package description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the default package version.</p>
    pub fn default_version_name(&self) -> ::std::option::Option<&str> {
        self.default_version_name.as_deref()
    }
    /// <p>The date the package was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date when the package was last updated.</p>
    pub fn last_modified_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
}
impl ::std::fmt::Debug for GetPackageOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPackageOutput");
        formatter.field("package_name", &self.package_name);
        formatter.field("package_arn", &self.package_arn);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("default_version_name", &self.default_version_name);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetPackageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPackageOutput {
    /// Creates a new builder-style object to manufacture [`GetPackageOutput`](crate::operation::get_package::GetPackageOutput).
    pub fn builder() -> crate::operation::get_package::builders::GetPackageOutputBuilder {
        crate::operation::get_package::builders::GetPackageOutputBuilder::default()
    }
}

/// A builder for [`GetPackageOutput`](crate::operation::get_package::GetPackageOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetPackageOutputBuilder {
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) package_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) default_version_name: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPackageOutputBuilder {
    /// <p>The name of the package.</p>
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the package.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The name of the package.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>The ARN for the package.</p>
    pub fn package_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the package.</p>
    pub fn set_package_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_arn = input;
        self
    }
    /// <p>The ARN for the package.</p>
    pub fn get_package_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_arn
    }
    /// <p>The package description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The package description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The package description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the default package version.</p>
    pub fn default_version_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_version_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the default package version.</p>
    pub fn set_default_version_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_version_name = input;
        self
    }
    /// <p>The name of the default package version.</p>
    pub fn get_default_version_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_version_name
    }
    /// <p>The date the package was created.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the package was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date the package was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date when the package was last updated.</p>
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the package was last updated.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date when the package was last updated.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPackageOutput`](crate::operation::get_package::GetPackageOutput).
    pub fn build(self) -> crate::operation::get_package::GetPackageOutput {
        crate::operation::get_package::GetPackageOutput {
            package_name: self.package_name,
            package_arn: self.package_arn,
            description: self.description,
            default_version_name: self.default_version_name,
            creation_date: self.creation_date,
            last_modified_date: self.last_modified_date,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetPackageOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPackageOutputBuilder");
        formatter.field("package_name", &self.package_name);
        formatter.field("package_arn", &self.package_arn);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("default_version_name", &self.default_version_name);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
