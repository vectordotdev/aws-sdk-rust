// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_authorizers::_list_authorizers_output::ListAuthorizersOutputBuilder;

pub use crate::operation::list_authorizers::_list_authorizers_input::ListAuthorizersInputBuilder;

impl ListAuthorizersInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_authorizers::ListAuthorizersOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_authorizers::ListAuthorizersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_authorizers();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListAuthorizers`.
///
/// <p>Lists the authorizers registered in your account.</p>
/// <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListAuthorizers</a> action.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListAuthorizersFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_authorizers::builders::ListAuthorizersInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl ListAuthorizersFluentBuilder {
    /// Creates a new `ListAuthorizers`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListAuthorizers as a reference.
    pub fn as_input(&self) -> &crate::operation::list_authorizers::builders::ListAuthorizersInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_authorizers::ListAuthorizersOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::list_authorizers::ListAuthorizersError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_authorizers::ListAuthorizers::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_authorizers::ListAuthorizers::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::list_authorizers::ListAuthorizersOutput,
            crate::operation::list_authorizers::ListAuthorizersError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::list_authorizers::ListAuthorizersError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_authorizers::paginator::ListAuthorizersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_authorizers::paginator::ListAuthorizersPaginator {
        crate::operation::list_authorizers::paginator::ListAuthorizersPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.inner = self.inner.page_size(input);
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_page_size(input);
        self
    }
    /// <p>The maximum number of results to return at one time.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<i32> {
        self.inner.get_page_size()
    }
    /// <p>A marker used to get the next set of results.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>A marker used to get the next set of results.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>A marker used to get the next set of results.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_marker()
    }
    /// <p>Return the list of authorizers in ascending alphabetical order.</p>
    pub fn ascending_order(mut self, input: bool) -> Self {
        self.inner = self.inner.ascending_order(input);
        self
    }
    /// <p>Return the list of authorizers in ascending alphabetical order.</p>
    pub fn set_ascending_order(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_ascending_order(input);
        self
    }
    /// <p>Return the list of authorizers in ascending alphabetical order.</p>
    pub fn get_ascending_order(&self) -> &::std::option::Option<bool> {
        self.inner.get_ascending_order()
    }
    /// <p>The status of the list authorizers request.</p>
    pub fn status(mut self, input: crate::types::AuthorizerStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the list authorizers request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AuthorizerStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The status of the list authorizers request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AuthorizerStatus> {
        self.inner.get_status()
    }
}
