// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a request to execute a statement.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecuteStatementRequest {
    /// <p>Specifies the transaction ID of the request.</p>
    pub transaction_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the statement of the request.</p>
    pub statement: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the parameters for the parameterized statement in the request.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::ValueHolder>>,
}
impl ExecuteStatementRequest {
    /// <p>Specifies the transaction ID of the request.</p>
    pub fn transaction_id(&self) -> ::std::option::Option<&str> {
        self.transaction_id.as_deref()
    }
    /// <p>Specifies the statement of the request.</p>
    pub fn statement(&self) -> ::std::option::Option<&str> {
        self.statement.as_deref()
    }
    /// <p>Specifies the parameters for the parameterized statement in the request.</p>
    pub fn parameters(&self) -> ::std::option::Option<&[crate::types::ValueHolder]> {
        self.parameters.as_deref()
    }
}
impl ExecuteStatementRequest {
    /// Creates a new builder-style object to manufacture [`ExecuteStatementRequest`](crate::types::ExecuteStatementRequest).
    pub fn builder() -> crate::types::builders::ExecuteStatementRequestBuilder {
        crate::types::builders::ExecuteStatementRequestBuilder::default()
    }
}

/// A builder for [`ExecuteStatementRequest`](crate::types::ExecuteStatementRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecuteStatementRequestBuilder {
    pub(crate) transaction_id: ::std::option::Option<::std::string::String>,
    pub(crate) statement: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::ValueHolder>>,
}
impl ExecuteStatementRequestBuilder {
    /// <p>Specifies the transaction ID of the request.</p>
    pub fn transaction_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transaction_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the transaction ID of the request.</p>
    pub fn set_transaction_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transaction_id = input;
        self
    }
    /// <p>Specifies the transaction ID of the request.</p>
    pub fn get_transaction_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transaction_id
    }
    /// <p>Specifies the statement of the request.</p>
    pub fn statement(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the statement of the request.</p>
    pub fn set_statement(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement = input;
        self
    }
    /// <p>Specifies the statement of the request.</p>
    pub fn get_statement(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Specifies the parameters for the parameterized statement in the request.</p>
    pub fn parameters(mut self, input: crate::types::ValueHolder) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the parameters for the parameterized statement in the request.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ValueHolder>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Specifies the parameters for the parameterized statement in the request.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ValueHolder>> {
        &self.parameters
    }
    /// Consumes the builder and constructs a [`ExecuteStatementRequest`](crate::types::ExecuteStatementRequest).
    pub fn build(self) -> crate::types::ExecuteStatementRequest {
        crate::types::ExecuteStatementRequest {
            transaction_id: self.transaction_id,
            statement: self.statement,
            parameters: self.parameters,
        }
    }
}
