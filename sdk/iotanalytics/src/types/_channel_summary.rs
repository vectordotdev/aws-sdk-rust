// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of information about a channel.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChannelSummary {
    /// <p>The name of the channel.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>Where channel data is stored.</p>
    pub channel_storage: ::std::option::Option<crate::types::ChannelStorageSummary>,
    /// <p>The status of the channel.</p>
    pub status: ::std::option::Option<crate::types::ChannelStatus>,
    /// <p>When the channel was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time the channel was updated.</p>
    pub last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time when a new message arrived in the channel.</p>
    /// <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub last_message_arrival_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ChannelSummary {
    /// <p>The name of the channel.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>Where channel data is stored.</p>
    pub fn channel_storage(&self) -> ::std::option::Option<&crate::types::ChannelStorageSummary> {
        self.channel_storage.as_ref()
    }
    /// <p>The status of the channel.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ChannelStatus> {
        self.status.as_ref()
    }
    /// <p>When the channel was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the channel was updated.</p>
    pub fn last_update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>The last time when a new message arrived in the channel.</p>
    /// <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn last_message_arrival_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_message_arrival_time.as_ref()
    }
}
impl ChannelSummary {
    /// Creates a new builder-style object to manufacture [`ChannelSummary`](crate::types::ChannelSummary).
    pub fn builder() -> crate::types::builders::ChannelSummaryBuilder {
        crate::types::builders::ChannelSummaryBuilder::default()
    }
}

/// A builder for [`ChannelSummary`](crate::types::ChannelSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChannelSummaryBuilder {
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_storage: ::std::option::Option<crate::types::ChannelStorageSummary>,
    pub(crate) status: ::std::option::Option<crate::types::ChannelStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_message_arrival_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ChannelSummaryBuilder {
    /// <p>The name of the channel.</p>
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the channel.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>Where channel data is stored.</p>
    pub fn channel_storage(mut self, input: crate::types::ChannelStorageSummary) -> Self {
        self.channel_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Where channel data is stored.</p>
    pub fn set_channel_storage(mut self, input: ::std::option::Option<crate::types::ChannelStorageSummary>) -> Self {
        self.channel_storage = input;
        self
    }
    /// <p>Where channel data is stored.</p>
    pub fn get_channel_storage(&self) -> &::std::option::Option<crate::types::ChannelStorageSummary> {
        &self.channel_storage
    }
    /// <p>The status of the channel.</p>
    pub fn status(mut self, input: crate::types::ChannelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the channel.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ChannelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the channel.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ChannelStatus> {
        &self.status
    }
    /// <p>When the channel was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the channel was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the channel was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last time the channel was updated.</p>
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the channel was updated.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The last time the channel was updated.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// <p>The last time when a new message arrived in the channel.</p>
    /// <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn last_message_arrival_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_message_arrival_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time when a new message arrived in the channel.</p>
    /// <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn set_last_message_arrival_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_message_arrival_time = input;
        self
    }
    /// <p>The last time when a new message arrived in the channel.</p>
    /// <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn get_last_message_arrival_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_message_arrival_time
    }
    /// Consumes the builder and constructs a [`ChannelSummary`](crate::types::ChannelSummary).
    pub fn build(self) -> crate::types::ChannelSummary {
        crate::types::ChannelSummary {
            channel_name: self.channel_name,
            channel_storage: self.channel_storage,
            status: self.status,
            creation_time: self.creation_time,
            last_update_time: self.last_update_time,
            last_message_arrival_time: self.last_message_arrival_time,
        }
    }
}
