// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Channel {
    /// <p>The name of the channel.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. You can't change this storage option after the channel is created.</p>
    pub storage: ::std::option::Option<crate::types::ChannelStorage>,
    /// <p>The ARN of the channel.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the channel.</p>
    pub status: ::std::option::Option<crate::types::ChannelStatus>,
    /// <p>How long, in days, message data is kept for the channel.</p>
    pub retention_period: ::std::option::Option<crate::types::RetentionPeriod>,
    /// <p>When the channel was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the channel was last updated.</p>
    pub last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time when a new message arrived in the channel.</p>
    /// <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub last_message_arrival_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Channel {
    /// <p>The name of the channel.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. You can't change this storage option after the channel is created.</p>
    pub fn storage(&self) -> ::std::option::Option<&crate::types::ChannelStorage> {
        self.storage.as_ref()
    }
    /// <p>The ARN of the channel.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The status of the channel.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ChannelStatus> {
        self.status.as_ref()
    }
    /// <p>How long, in days, message data is kept for the channel.</p>
    pub fn retention_period(&self) -> ::std::option::Option<&crate::types::RetentionPeriod> {
        self.retention_period.as_ref()
    }
    /// <p>When the channel was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>When the channel was last updated.</p>
    pub fn last_update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>The last time when a new message arrived in the channel.</p>
    /// <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn last_message_arrival_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_message_arrival_time.as_ref()
    }
}
impl Channel {
    /// Creates a new builder-style object to manufacture [`Channel`](crate::types::Channel).
    pub fn builder() -> crate::types::builders::ChannelBuilder {
        crate::types::builders::ChannelBuilder::default()
    }
}

/// A builder for [`Channel`](crate::types::Channel).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChannelBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) storage: ::std::option::Option<crate::types::ChannelStorage>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ChannelStatus>,
    pub(crate) retention_period: ::std::option::Option<crate::types::RetentionPeriod>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_message_arrival_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ChannelBuilder {
    /// <p>The name of the channel.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the channel.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the channel.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. You can't change this storage option after the channel is created.</p>
    pub fn storage(mut self, input: crate::types::ChannelStorage) -> Self {
        self.storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. You can't change this storage option after the channel is created.</p>
    pub fn set_storage(mut self, input: ::std::option::Option<crate::types::ChannelStorage>) -> Self {
        self.storage = input;
        self
    }
    /// <p>Where channel data is stored. You can choose one of <code>serviceManagedS3</code> or <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. You can't change this storage option after the channel is created.</p>
    pub fn get_storage(&self) -> &::std::option::Option<crate::types::ChannelStorage> {
        &self.storage
    }
    /// <p>The ARN of the channel.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The status of the channel.</p>
    pub fn status(mut self, input: crate::types::ChannelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the channel.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ChannelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the channel.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ChannelStatus> {
        &self.status
    }
    /// <p>How long, in days, message data is kept for the channel.</p>
    pub fn retention_period(mut self, input: crate::types::RetentionPeriod) -> Self {
        self.retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>How long, in days, message data is kept for the channel.</p>
    pub fn set_retention_period(mut self, input: ::std::option::Option<crate::types::RetentionPeriod>) -> Self {
        self.retention_period = input;
        self
    }
    /// <p>How long, in days, message data is kept for the channel.</p>
    pub fn get_retention_period(&self) -> &::std::option::Option<crate::types::RetentionPeriod> {
        &self.retention_period
    }
    /// <p>When the channel was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the channel was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the channel was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>When the channel was last updated.</p>
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the channel was last updated.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>When the channel was last updated.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// <p>The last time when a new message arrived in the channel.</p>
    /// <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn last_message_arrival_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_message_arrival_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time when a new message arrived in the channel.</p>
    /// <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn set_last_message_arrival_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_message_arrival_time = input;
        self
    }
    /// <p>The last time when a new message arrived in the channel.</p>
    /// <p>IoT Analytics updates this value at most once per minute for one channel. Hence, the <code>lastMessageArrivalTime</code> value is an approximation.</p>
    /// <p>This feature only applies to messages that arrived in the data store after October 23, 2020. </p>
    pub fn get_last_message_arrival_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_message_arrival_time
    }
    /// Consumes the builder and constructs a [`Channel`](crate::types::Channel).
    pub fn build(self) -> crate::types::Channel {
        crate::types::Channel {
            name: self.name,
            storage: self.storage,
            arn: self.arn,
            status: self.status,
            retention_period: self.retention_period,
            creation_time: self.creation_time,
            last_update_time: self.last_update_time,
            last_message_arrival_time: self.last_message_arrival_time,
        }
    }
}
