// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to store channel data in an S3 bucket that you manage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomerManagedChannelS3StorageSummary {
    /// <p>The name of the S3 bucket in which channel data is stored.</p>
    pub bucket: ::std::option::Option<::std::string::String>,
    /// <p>(Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).</p>
    pub key_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl CustomerManagedChannelS3StorageSummary {
    /// <p>The name of the S3 bucket in which channel data is stored.</p>
    pub fn bucket(&self) -> ::std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>(Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).</p>
    pub fn key_prefix(&self) -> ::std::option::Option<&str> {
        self.key_prefix.as_deref()
    }
    /// <p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl CustomerManagedChannelS3StorageSummary {
    /// Creates a new builder-style object to manufacture [`CustomerManagedChannelS3StorageSummary`](crate::types::CustomerManagedChannelS3StorageSummary).
    pub fn builder() -> crate::types::builders::CustomerManagedChannelS3StorageSummaryBuilder {
        crate::types::builders::CustomerManagedChannelS3StorageSummaryBuilder::default()
    }
}

/// A builder for [`CustomerManagedChannelS3StorageSummary`](crate::types::CustomerManagedChannelS3StorageSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomerManagedChannelS3StorageSummaryBuilder {
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) key_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl CustomerManagedChannelS3StorageSummaryBuilder {
    /// <p>The name of the S3 bucket in which channel data is stored.</p>
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket in which channel data is stored.</p>
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The name of the S3 bucket in which channel data is stored.</p>
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    /// <p>(Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).</p>
    pub fn key_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>(Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).</p>
    pub fn set_key_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_prefix = input;
        self
    }
    /// <p>(Optional) The prefix used to create the keys of the channel data objects. Each object in an S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a forward slash (/).</p>
    pub fn get_key_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_prefix
    }
    /// <p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`CustomerManagedChannelS3StorageSummary`](crate::types::CustomerManagedChannelS3StorageSummary).
    pub fn build(self) -> crate::types::CustomerManagedChannelS3StorageSummary {
        crate::types::CustomerManagedChannelS3StorageSummary {
            bucket: self.bucket,
            key_prefix: self.key_prefix,
            role_arn: self.role_arn,
        }
    }
}
