// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a scanning rule for a private registry.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegistryScanningRule {
    /// <p>The frequency that scans are performed at for a private registry. When the <code>ENHANCED</code> scan type is specified, the supported scan frequencies are <code>CONTINUOUS_SCAN</code> and <code>SCAN_ON_PUSH</code>. When the <code>BASIC</code> scan type is specified, the <code>SCAN_ON_PUSH</code> and <code>MANUAL</code> scan frequencies are supported.</p>
    pub scan_frequency: ::std::option::Option<crate::types::ScanFrequency>,
    /// <p>The repository filters associated with the scanning configuration for a private registry.</p>
    pub repository_filters: ::std::option::Option<::std::vec::Vec<crate::types::ScanningRepositoryFilter>>,
}
impl RegistryScanningRule {
    /// <p>The frequency that scans are performed at for a private registry. When the <code>ENHANCED</code> scan type is specified, the supported scan frequencies are <code>CONTINUOUS_SCAN</code> and <code>SCAN_ON_PUSH</code>. When the <code>BASIC</code> scan type is specified, the <code>SCAN_ON_PUSH</code> and <code>MANUAL</code> scan frequencies are supported.</p>
    pub fn scan_frequency(&self) -> ::std::option::Option<&crate::types::ScanFrequency> {
        self.scan_frequency.as_ref()
    }
    /// <p>The repository filters associated with the scanning configuration for a private registry.</p>
    pub fn repository_filters(&self) -> ::std::option::Option<&[crate::types::ScanningRepositoryFilter]> {
        self.repository_filters.as_deref()
    }
}
impl RegistryScanningRule {
    /// Creates a new builder-style object to manufacture [`RegistryScanningRule`](crate::types::RegistryScanningRule).
    pub fn builder() -> crate::types::builders::RegistryScanningRuleBuilder {
        crate::types::builders::RegistryScanningRuleBuilder::default()
    }
}

/// A builder for [`RegistryScanningRule`](crate::types::RegistryScanningRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegistryScanningRuleBuilder {
    pub(crate) scan_frequency: ::std::option::Option<crate::types::ScanFrequency>,
    pub(crate) repository_filters: ::std::option::Option<::std::vec::Vec<crate::types::ScanningRepositoryFilter>>,
}
impl RegistryScanningRuleBuilder {
    /// <p>The frequency that scans are performed at for a private registry. When the <code>ENHANCED</code> scan type is specified, the supported scan frequencies are <code>CONTINUOUS_SCAN</code> and <code>SCAN_ON_PUSH</code>. When the <code>BASIC</code> scan type is specified, the <code>SCAN_ON_PUSH</code> and <code>MANUAL</code> scan frequencies are supported.</p>
    pub fn scan_frequency(mut self, input: crate::types::ScanFrequency) -> Self {
        self.scan_frequency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The frequency that scans are performed at for a private registry. When the <code>ENHANCED</code> scan type is specified, the supported scan frequencies are <code>CONTINUOUS_SCAN</code> and <code>SCAN_ON_PUSH</code>. When the <code>BASIC</code> scan type is specified, the <code>SCAN_ON_PUSH</code> and <code>MANUAL</code> scan frequencies are supported.</p>
    pub fn set_scan_frequency(mut self, input: ::std::option::Option<crate::types::ScanFrequency>) -> Self {
        self.scan_frequency = input;
        self
    }
    /// <p>The frequency that scans are performed at for a private registry. When the <code>ENHANCED</code> scan type is specified, the supported scan frequencies are <code>CONTINUOUS_SCAN</code> and <code>SCAN_ON_PUSH</code>. When the <code>BASIC</code> scan type is specified, the <code>SCAN_ON_PUSH</code> and <code>MANUAL</code> scan frequencies are supported.</p>
    pub fn get_scan_frequency(&self) -> &::std::option::Option<crate::types::ScanFrequency> {
        &self.scan_frequency
    }
    /// Appends an item to `repository_filters`.
    ///
    /// To override the contents of this collection use [`set_repository_filters`](Self::set_repository_filters).
    ///
    /// <p>The repository filters associated with the scanning configuration for a private registry.</p>
    pub fn repository_filters(mut self, input: crate::types::ScanningRepositoryFilter) -> Self {
        let mut v = self.repository_filters.unwrap_or_default();
        v.push(input);
        self.repository_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The repository filters associated with the scanning configuration for a private registry.</p>
    pub fn set_repository_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScanningRepositoryFilter>>) -> Self {
        self.repository_filters = input;
        self
    }
    /// <p>The repository filters associated with the scanning configuration for a private registry.</p>
    pub fn get_repository_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScanningRepositoryFilter>> {
        &self.repository_filters
    }
    /// Consumes the builder and constructs a [`RegistryScanningRule`](crate::types::RegistryScanningRule).
    pub fn build(self) -> crate::types::RegistryScanningRule {
        crate::types::RegistryScanningRule {
            scan_frequency: self.scan_frequency,
            repository_filters: self.repository_filters,
        }
    }
}
