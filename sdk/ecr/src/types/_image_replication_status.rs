// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of the replication process for an image.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageReplicationStatus {
    /// <p>The destination Region for the image replication.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID associated with the registry to which the image belongs.</p>
    pub registry_id: ::std::option::Option<::std::string::String>,
    /// <p>The image replication status.</p>
    pub status: ::std::option::Option<crate::types::ReplicationStatus>,
    /// <p>The failure code for a replication that has failed.</p>
    pub failure_code: ::std::option::Option<::std::string::String>,
}
impl ImageReplicationStatus {
    /// <p>The destination Region for the image replication.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The Amazon Web Services account ID associated with the registry to which the image belongs.</p>
    pub fn registry_id(&self) -> ::std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The image replication status.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ReplicationStatus> {
        self.status.as_ref()
    }
    /// <p>The failure code for a replication that has failed.</p>
    pub fn failure_code(&self) -> ::std::option::Option<&str> {
        self.failure_code.as_deref()
    }
}
impl ImageReplicationStatus {
    /// Creates a new builder-style object to manufacture [`ImageReplicationStatus`](crate::types::ImageReplicationStatus).
    pub fn builder() -> crate::types::builders::ImageReplicationStatusBuilder {
        crate::types::builders::ImageReplicationStatusBuilder::default()
    }
}

/// A builder for [`ImageReplicationStatus`](crate::types::ImageReplicationStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImageReplicationStatusBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) registry_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ReplicationStatus>,
    pub(crate) failure_code: ::std::option::Option<::std::string::String>,
}
impl ImageReplicationStatusBuilder {
    /// <p>The destination Region for the image replication.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination Region for the image replication.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The destination Region for the image replication.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The Amazon Web Services account ID associated with the registry to which the image belongs.</p>
    pub fn registry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry to which the image belongs.</p>
    pub fn set_registry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the registry to which the image belongs.</p>
    pub fn get_registry_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_id
    }
    /// <p>The image replication status.</p>
    pub fn status(mut self, input: crate::types::ReplicationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The image replication status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ReplicationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The image replication status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ReplicationStatus> {
        &self.status
    }
    /// <p>The failure code for a replication that has failed.</p>
    pub fn failure_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure code for a replication that has failed.</p>
    pub fn set_failure_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The failure code for a replication that has failed.</p>
    pub fn get_failure_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_code
    }
    /// Consumes the builder and constructs a [`ImageReplicationStatus`](crate::types::ImageReplicationStatus).
    pub fn build(self) -> crate::types::ImageReplicationStatus {
        crate::types::ImageReplicationStatus {
            region: self.region,
            registry_id: self.registry_id,
            status: self.status,
            failure_code: self.failure_code,
        }
    }
}
