// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details about any failures associated with the scanning configuration of a repository.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RepositoryScanningConfigurationFailure {
    /// <p>The name of the repository.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
    /// <p>The failure code.</p>
    pub failure_code: ::std::option::Option<crate::types::ScanningConfigurationFailureCode>,
    /// <p>The reason for the failure.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
}
impl RepositoryScanningConfigurationFailure {
    /// <p>The name of the repository.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The failure code.</p>
    pub fn failure_code(&self) -> ::std::option::Option<&crate::types::ScanningConfigurationFailureCode> {
        self.failure_code.as_ref()
    }
    /// <p>The reason for the failure.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl RepositoryScanningConfigurationFailure {
    /// Creates a new builder-style object to manufacture [`RepositoryScanningConfigurationFailure`](crate::types::RepositoryScanningConfigurationFailure).
    pub fn builder() -> crate::types::builders::RepositoryScanningConfigurationFailureBuilder {
        crate::types::builders::RepositoryScanningConfigurationFailureBuilder::default()
    }
}

/// A builder for [`RepositoryScanningConfigurationFailure`](crate::types::RepositoryScanningConfigurationFailure).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RepositoryScanningConfigurationFailureBuilder {
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) failure_code: ::std::option::Option<crate::types::ScanningConfigurationFailureCode>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
}
impl RepositoryScanningConfigurationFailureBuilder {
    /// <p>The name of the repository.</p>
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the repository.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>The failure code.</p>
    pub fn failure_code(mut self, input: crate::types::ScanningConfigurationFailureCode) -> Self {
        self.failure_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The failure code.</p>
    pub fn set_failure_code(mut self, input: ::std::option::Option<crate::types::ScanningConfigurationFailureCode>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The failure code.</p>
    pub fn get_failure_code(&self) -> &::std::option::Option<crate::types::ScanningConfigurationFailureCode> {
        &self.failure_code
    }
    /// <p>The reason for the failure.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the failure.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason for the failure.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// Consumes the builder and constructs a [`RepositoryScanningConfigurationFailure`](crate::types::RepositoryScanningConfigurationFailure).
    pub fn build(self) -> crate::types::RepositoryScanningConfigurationFailure {
        crate::types::RepositoryScanningConfigurationFailure {
            repository_name: self.repository_name,
            failure_code: self.failure_code,
            failure_reason: self.failure_reason,
        }
    }
}
