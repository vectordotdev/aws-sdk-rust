// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MaximumAllowedResources {
    /// <p>The maximum allowed CPU for an application.</p>
    pub cpu: ::std::option::Option<::std::string::String>,
    /// <p>The maximum allowed resources for an application.</p>
    pub memory: ::std::option::Option<::std::string::String>,
    /// <p>The maximum allowed disk for an application.</p>
    pub disk: ::std::option::Option<::std::string::String>,
}
impl MaximumAllowedResources {
    /// <p>The maximum allowed CPU for an application.</p>
    pub fn cpu(&self) -> ::std::option::Option<&str> {
        self.cpu.as_deref()
    }
    /// <p>The maximum allowed resources for an application.</p>
    pub fn memory(&self) -> ::std::option::Option<&str> {
        self.memory.as_deref()
    }
    /// <p>The maximum allowed disk for an application.</p>
    pub fn disk(&self) -> ::std::option::Option<&str> {
        self.disk.as_deref()
    }
}
impl MaximumAllowedResources {
    /// Creates a new builder-style object to manufacture [`MaximumAllowedResources`](crate::types::MaximumAllowedResources).
    pub fn builder() -> crate::types::builders::MaximumAllowedResourcesBuilder {
        crate::types::builders::MaximumAllowedResourcesBuilder::default()
    }
}

/// A builder for [`MaximumAllowedResources`](crate::types::MaximumAllowedResources).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MaximumAllowedResourcesBuilder {
    pub(crate) cpu: ::std::option::Option<::std::string::String>,
    pub(crate) memory: ::std::option::Option<::std::string::String>,
    pub(crate) disk: ::std::option::Option<::std::string::String>,
}
impl MaximumAllowedResourcesBuilder {
    /// <p>The maximum allowed CPU for an application.</p>
    pub fn cpu(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cpu = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum allowed CPU for an application.</p>
    pub fn set_cpu(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cpu = input;
        self
    }
    /// <p>The maximum allowed CPU for an application.</p>
    pub fn get_cpu(&self) -> &::std::option::Option<::std::string::String> {
        &self.cpu
    }
    /// <p>The maximum allowed resources for an application.</p>
    pub fn memory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum allowed resources for an application.</p>
    pub fn set_memory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory = input;
        self
    }
    /// <p>The maximum allowed resources for an application.</p>
    pub fn get_memory(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory
    }
    /// <p>The maximum allowed disk for an application.</p>
    pub fn disk(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.disk = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The maximum allowed disk for an application.</p>
    pub fn set_disk(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.disk = input;
        self
    }
    /// <p>The maximum allowed disk for an application.</p>
    pub fn get_disk(&self) -> &::std::option::Option<::std::string::String> {
        &self.disk
    }
    /// Consumes the builder and constructs a [`MaximumAllowedResources`](crate::types::MaximumAllowedResources).
    pub fn build(self) -> crate::types::MaximumAllowedResources {
        crate::types::MaximumAllowedResources {
            cpu: self.cpu,
            memory: self.memory,
            disk: self.disk,
        }
    }
}
