// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resource utilization for memory, storage, and vCPU for jobs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceUtilization {
    /// <p>The aggregated vCPU used per hour from the time the job starts executing until the job is terminated.</p>
    pub v_cpu_hour: ::std::option::Option<f64>,
    /// <p>The aggregated memory used per hour from the time the job starts executing until the job is terminated.</p>
    pub memory_gb_hour: ::std::option::Option<f64>,
    /// <p>The aggregated storage used per hour from the time the job starts executing until the job is terminated.</p>
    pub storage_gb_hour: ::std::option::Option<f64>,
}
impl ResourceUtilization {
    /// <p>The aggregated vCPU used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn v_cpu_hour(&self) -> ::std::option::Option<f64> {
        self.v_cpu_hour
    }
    /// <p>The aggregated memory used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn memory_gb_hour(&self) -> ::std::option::Option<f64> {
        self.memory_gb_hour
    }
    /// <p>The aggregated storage used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn storage_gb_hour(&self) -> ::std::option::Option<f64> {
        self.storage_gb_hour
    }
}
impl ResourceUtilization {
    /// Creates a new builder-style object to manufacture [`ResourceUtilization`](crate::types::ResourceUtilization).
    pub fn builder() -> crate::types::builders::ResourceUtilizationBuilder {
        crate::types::builders::ResourceUtilizationBuilder::default()
    }
}

/// A builder for [`ResourceUtilization`](crate::types::ResourceUtilization).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceUtilizationBuilder {
    pub(crate) v_cpu_hour: ::std::option::Option<f64>,
    pub(crate) memory_gb_hour: ::std::option::Option<f64>,
    pub(crate) storage_gb_hour: ::std::option::Option<f64>,
}
impl ResourceUtilizationBuilder {
    /// <p>The aggregated vCPU used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn v_cpu_hour(mut self, input: f64) -> Self {
        self.v_cpu_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregated vCPU used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn set_v_cpu_hour(mut self, input: ::std::option::Option<f64>) -> Self {
        self.v_cpu_hour = input;
        self
    }
    /// <p>The aggregated vCPU used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn get_v_cpu_hour(&self) -> &::std::option::Option<f64> {
        &self.v_cpu_hour
    }
    /// <p>The aggregated memory used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn memory_gb_hour(mut self, input: f64) -> Self {
        self.memory_gb_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregated memory used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn set_memory_gb_hour(mut self, input: ::std::option::Option<f64>) -> Self {
        self.memory_gb_hour = input;
        self
    }
    /// <p>The aggregated memory used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn get_memory_gb_hour(&self) -> &::std::option::Option<f64> {
        &self.memory_gb_hour
    }
    /// <p>The aggregated storage used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn storage_gb_hour(mut self, input: f64) -> Self {
        self.storage_gb_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregated storage used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn set_storage_gb_hour(mut self, input: ::std::option::Option<f64>) -> Self {
        self.storage_gb_hour = input;
        self
    }
    /// <p>The aggregated storage used per hour from the time the job starts executing until the job is terminated.</p>
    pub fn get_storage_gb_hour(&self) -> &::std::option::Option<f64> {
        &self.storage_gb_hour
    }
    /// Consumes the builder and constructs a [`ResourceUtilization`](crate::types::ResourceUtilization).
    pub fn build(self) -> crate::types::ResourceUtilization {
        crate::types::ResourceUtilization {
            v_cpu_hour: self.v_cpu_hour,
            memory_gb_hour: self.memory_gb_hour,
            storage_gb_hour: self.storage_gb_hour,
        }
    }
}
