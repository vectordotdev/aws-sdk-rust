// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about agents that were instructed to start collecting data. Information includes the agent ID, a description of the operation, and whether the agent configuration was updated.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentConfigurationStatus {
    /// <p>The agent ID.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>Information about the status of the <code>StartDataCollection</code> and <code>StopDataCollection</code> operations. The system has recorded the data collection operation. The agent receives this command the next time it polls for a new command. </p>
    pub operation_succeeded: bool,
    /// <p>A description of the operation performed.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl AgentConfigurationStatus {
    /// <p>The agent ID.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>Information about the status of the <code>StartDataCollection</code> and <code>StopDataCollection</code> operations. The system has recorded the data collection operation. The agent receives this command the next time it polls for a new command. </p>
    pub fn operation_succeeded(&self) -> bool {
        self.operation_succeeded
    }
    /// <p>A description of the operation performed.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl AgentConfigurationStatus {
    /// Creates a new builder-style object to manufacture [`AgentConfigurationStatus`](crate::types::AgentConfigurationStatus).
    pub fn builder() -> crate::types::builders::AgentConfigurationStatusBuilder {
        crate::types::builders::AgentConfigurationStatusBuilder::default()
    }
}

/// A builder for [`AgentConfigurationStatus`](crate::types::AgentConfigurationStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AgentConfigurationStatusBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) operation_succeeded: ::std::option::Option<bool>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl AgentConfigurationStatusBuilder {
    /// <p>The agent ID.</p>
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The agent ID.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The agent ID.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>Information about the status of the <code>StartDataCollection</code> and <code>StopDataCollection</code> operations. The system has recorded the data collection operation. The agent receives this command the next time it polls for a new command. </p>
    pub fn operation_succeeded(mut self, input: bool) -> Self {
        self.operation_succeeded = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the status of the <code>StartDataCollection</code> and <code>StopDataCollection</code> operations. The system has recorded the data collection operation. The agent receives this command the next time it polls for a new command. </p>
    pub fn set_operation_succeeded(mut self, input: ::std::option::Option<bool>) -> Self {
        self.operation_succeeded = input;
        self
    }
    /// <p>Information about the status of the <code>StartDataCollection</code> and <code>StopDataCollection</code> operations. The system has recorded the data collection operation. The agent receives this command the next time it polls for a new command. </p>
    pub fn get_operation_succeeded(&self) -> &::std::option::Option<bool> {
        &self.operation_succeeded
    }
    /// <p>A description of the operation performed.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the operation performed.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the operation performed.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`AgentConfigurationStatus`](crate::types::AgentConfigurationStatus).
    pub fn build(self) -> crate::types::AgentConfigurationStatus {
        crate::types::AgentConfigurationStatus {
            agent_id: self.agent_id,
            operation_succeeded: self.operation_succeeded.unwrap_or_default(),
            description: self.description,
        }
    }
}
