// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Specifies the performance metrics to use for the server that is used for recommendations. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UsageMetricBasis {
    /// <p> A utilization metric that is used by the recommendations. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> Specifies the percentage of the specified utilization metric that is used by the recommendations. </p>
    pub percentage_adjust: ::std::option::Option<f64>,
}
impl UsageMetricBasis {
    /// <p> A utilization metric that is used by the recommendations. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> Specifies the percentage of the specified utilization metric that is used by the recommendations. </p>
    pub fn percentage_adjust(&self) -> ::std::option::Option<f64> {
        self.percentage_adjust
    }
}
impl UsageMetricBasis {
    /// Creates a new builder-style object to manufacture [`UsageMetricBasis`](crate::types::UsageMetricBasis).
    pub fn builder() -> crate::types::builders::UsageMetricBasisBuilder {
        crate::types::builders::UsageMetricBasisBuilder::default()
    }
}

/// A builder for [`UsageMetricBasis`](crate::types::UsageMetricBasis).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UsageMetricBasisBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) percentage_adjust: ::std::option::Option<f64>,
}
impl UsageMetricBasisBuilder {
    /// <p> A utilization metric that is used by the recommendations. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A utilization metric that is used by the recommendations. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> A utilization metric that is used by the recommendations. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> Specifies the percentage of the specified utilization metric that is used by the recommendations. </p>
    pub fn percentage_adjust(mut self, input: f64) -> Self {
        self.percentage_adjust = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies the percentage of the specified utilization metric that is used by the recommendations. </p>
    pub fn set_percentage_adjust(mut self, input: ::std::option::Option<f64>) -> Self {
        self.percentage_adjust = input;
        self
    }
    /// <p> Specifies the percentage of the specified utilization metric that is used by the recommendations. </p>
    pub fn get_percentage_adjust(&self) -> &::std::option::Option<f64> {
        &self.percentage_adjust
    }
    /// Consumes the builder and constructs a [`UsageMetricBasis`](crate::types::UsageMetricBasis).
    pub fn build(self) -> crate::types::UsageMetricBasis {
        crate::types::UsageMetricBasis {
            name: self.name,
            percentage_adjust: self.percentage_adjust,
        }
    }
}
