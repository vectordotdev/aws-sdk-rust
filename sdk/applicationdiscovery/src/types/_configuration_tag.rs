// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Tags for a configuration item. Tags are metadata that help you categorize IT assets.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationTag {
    /// <p>A type of IT asset to tag.</p>
    pub configuration_type: ::std::option::Option<crate::types::ConfigurationItemType>,
    /// <p>The configuration ID for the item to tag. You can specify a list of keys and values.</p>
    pub configuration_id: ::std::option::Option<::std::string::String>,
    /// <p>A type of tag on which to filter. For example, <i>serverType</i>.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>A value on which to filter. For example <i>key = serverType</i> and <i>value = web server</i>.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The time the configuration tag was created in Coordinated Universal Time (UTC).</p>
    pub time_of_creation: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ConfigurationTag {
    /// <p>A type of IT asset to tag.</p>
    pub fn configuration_type(&self) -> ::std::option::Option<&crate::types::ConfigurationItemType> {
        self.configuration_type.as_ref()
    }
    /// <p>The configuration ID for the item to tag. You can specify a list of keys and values.</p>
    pub fn configuration_id(&self) -> ::std::option::Option<&str> {
        self.configuration_id.as_deref()
    }
    /// <p>A type of tag on which to filter. For example, <i>serverType</i>.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>A value on which to filter. For example <i>key = serverType</i> and <i>value = web server</i>.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The time the configuration tag was created in Coordinated Universal Time (UTC).</p>
    pub fn time_of_creation(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.time_of_creation.as_ref()
    }
}
impl ConfigurationTag {
    /// Creates a new builder-style object to manufacture [`ConfigurationTag`](crate::types::ConfigurationTag).
    pub fn builder() -> crate::types::builders::ConfigurationTagBuilder {
        crate::types::builders::ConfigurationTagBuilder::default()
    }
}

/// A builder for [`ConfigurationTag`](crate::types::ConfigurationTag).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigurationTagBuilder {
    pub(crate) configuration_type: ::std::option::Option<crate::types::ConfigurationItemType>,
    pub(crate) configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) time_of_creation: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ConfigurationTagBuilder {
    /// <p>A type of IT asset to tag.</p>
    pub fn configuration_type(mut self, input: crate::types::ConfigurationItemType) -> Self {
        self.configuration_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>A type of IT asset to tag.</p>
    pub fn set_configuration_type(mut self, input: ::std::option::Option<crate::types::ConfigurationItemType>) -> Self {
        self.configuration_type = input;
        self
    }
    /// <p>A type of IT asset to tag.</p>
    pub fn get_configuration_type(&self) -> &::std::option::Option<crate::types::ConfigurationItemType> {
        &self.configuration_type
    }
    /// <p>The configuration ID for the item to tag. You can specify a list of keys and values.</p>
    pub fn configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The configuration ID for the item to tag. You can specify a list of keys and values.</p>
    pub fn set_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_id = input;
        self
    }
    /// <p>The configuration ID for the item to tag. You can specify a list of keys and values.</p>
    pub fn get_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_id
    }
    /// <p>A type of tag on which to filter. For example, <i>serverType</i>.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A type of tag on which to filter. For example, <i>serverType</i>.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>A type of tag on which to filter. For example, <i>serverType</i>.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>A value on which to filter. For example <i>key = serverType</i> and <i>value = web server</i>.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value on which to filter. For example <i>key = serverType</i> and <i>value = web server</i>.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>A value on which to filter. For example <i>key = serverType</i> and <i>value = web server</i>.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The time the configuration tag was created in Coordinated Universal Time (UTC).</p>
    pub fn time_of_creation(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.time_of_creation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the configuration tag was created in Coordinated Universal Time (UTC).</p>
    pub fn set_time_of_creation(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.time_of_creation = input;
        self
    }
    /// <p>The time the configuration tag was created in Coordinated Universal Time (UTC).</p>
    pub fn get_time_of_creation(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.time_of_creation
    }
    /// Consumes the builder and constructs a [`ConfigurationTag`](crate::types::ConfigurationTag).
    pub fn build(self) -> crate::types::ConfigurationTag {
        crate::types::ConfigurationTag {
            configuration_type: self.configuration_type,
            configuration_id: self.configuration_id,
            key: self.key,
            value: self.value,
            time_of_creation: self.time_of_creation,
        }
    }
}
