// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sidewalk object for creating a wireless device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SidewalkCreateWirelessDevice {
    /// <p>The ID of the Sidewalk device profile.</p>
    pub device_profile_id: ::std::option::Option<::std::string::String>,
}
impl SidewalkCreateWirelessDevice {
    /// <p>The ID of the Sidewalk device profile.</p>
    pub fn device_profile_id(&self) -> ::std::option::Option<&str> {
        self.device_profile_id.as_deref()
    }
}
impl SidewalkCreateWirelessDevice {
    /// Creates a new builder-style object to manufacture [`SidewalkCreateWirelessDevice`](crate::types::SidewalkCreateWirelessDevice).
    pub fn builder() -> crate::types::builders::SidewalkCreateWirelessDeviceBuilder {
        crate::types::builders::SidewalkCreateWirelessDeviceBuilder::default()
    }
}

/// A builder for [`SidewalkCreateWirelessDevice`](crate::types::SidewalkCreateWirelessDevice).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SidewalkCreateWirelessDeviceBuilder {
    pub(crate) device_profile_id: ::std::option::Option<::std::string::String>,
}
impl SidewalkCreateWirelessDeviceBuilder {
    /// <p>The ID of the Sidewalk device profile.</p>
    pub fn device_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Sidewalk device profile.</p>
    pub fn set_device_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_profile_id = input;
        self
    }
    /// <p>The ID of the Sidewalk device profile.</p>
    pub fn get_device_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_profile_id
    }
    /// Consumes the builder and constructs a [`SidewalkCreateWirelessDevice`](crate::types::SidewalkCreateWirelessDevice).
    pub fn build(self) -> crate::types::SidewalkCreateWirelessDevice {
        crate::types::SidewalkCreateWirelessDevice {
            device_profile_id: self.device_profile_id,
        }
    }
}
