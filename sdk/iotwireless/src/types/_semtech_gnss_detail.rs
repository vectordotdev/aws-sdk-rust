// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the Semtech GNSS solver object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SemtechGnssDetail {
    /// <p>The vendor of the solver object.</p>
    pub provider: ::std::option::Option<crate::types::PositionSolverProvider>,
    /// <p>The type of positioning solver used.</p>
    pub r#type: ::std::option::Option<crate::types::PositionSolverType>,
    /// <p>The status indicating whether the solver is enabled.</p>
    pub status: ::std::option::Option<crate::types::PositionConfigurationStatus>,
    /// <p>Whether forward error correction is enabled.</p>
    pub fec: ::std::option::Option<crate::types::PositionConfigurationFec>,
}
impl SemtechGnssDetail {
    /// <p>The vendor of the solver object.</p>
    pub fn provider(&self) -> ::std::option::Option<&crate::types::PositionSolverProvider> {
        self.provider.as_ref()
    }
    /// <p>The type of positioning solver used.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::PositionSolverType> {
        self.r#type.as_ref()
    }
    /// <p>The status indicating whether the solver is enabled.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PositionConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>Whether forward error correction is enabled.</p>
    pub fn fec(&self) -> ::std::option::Option<&crate::types::PositionConfigurationFec> {
        self.fec.as_ref()
    }
}
impl SemtechGnssDetail {
    /// Creates a new builder-style object to manufacture [`SemtechGnssDetail`](crate::types::SemtechGnssDetail).
    pub fn builder() -> crate::types::builders::SemtechGnssDetailBuilder {
        crate::types::builders::SemtechGnssDetailBuilder::default()
    }
}

/// A builder for [`SemtechGnssDetail`](crate::types::SemtechGnssDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SemtechGnssDetailBuilder {
    pub(crate) provider: ::std::option::Option<crate::types::PositionSolverProvider>,
    pub(crate) r#type: ::std::option::Option<crate::types::PositionSolverType>,
    pub(crate) status: ::std::option::Option<crate::types::PositionConfigurationStatus>,
    pub(crate) fec: ::std::option::Option<crate::types::PositionConfigurationFec>,
}
impl SemtechGnssDetailBuilder {
    /// <p>The vendor of the solver object.</p>
    pub fn provider(mut self, input: crate::types::PositionSolverProvider) -> Self {
        self.provider = ::std::option::Option::Some(input);
        self
    }
    /// <p>The vendor of the solver object.</p>
    pub fn set_provider(mut self, input: ::std::option::Option<crate::types::PositionSolverProvider>) -> Self {
        self.provider = input;
        self
    }
    /// <p>The vendor of the solver object.</p>
    pub fn get_provider(&self) -> &::std::option::Option<crate::types::PositionSolverProvider> {
        &self.provider
    }
    /// <p>The type of positioning solver used.</p>
    pub fn r#type(mut self, input: crate::types::PositionSolverType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of positioning solver used.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PositionSolverType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of positioning solver used.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PositionSolverType> {
        &self.r#type
    }
    /// <p>The status indicating whether the solver is enabled.</p>
    pub fn status(mut self, input: crate::types::PositionConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status indicating whether the solver is enabled.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PositionConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status indicating whether the solver is enabled.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PositionConfigurationStatus> {
        &self.status
    }
    /// <p>Whether forward error correction is enabled.</p>
    pub fn fec(mut self, input: crate::types::PositionConfigurationFec) -> Self {
        self.fec = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether forward error correction is enabled.</p>
    pub fn set_fec(mut self, input: ::std::option::Option<crate::types::PositionConfigurationFec>) -> Self {
        self.fec = input;
        self
    }
    /// <p>Whether forward error correction is enabled.</p>
    pub fn get_fec(&self) -> &::std::option::Option<crate::types::PositionConfigurationFec> {
        &self.fec
    }
    /// Consumes the builder and constructs a [`SemtechGnssDetail`](crate::types::SemtechGnssDetail).
    pub fn build(self) -> crate::types::SemtechGnssDetail {
        crate::types::SemtechGnssDetail {
            provider: self.provider,
            r#type: self.r#type,
            status: self.status,
            fec: self.fec,
        }
    }
}
