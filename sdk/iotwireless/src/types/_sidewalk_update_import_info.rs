// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sidewalk object information for updating an import task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SidewalkUpdateImportInfo {
    /// <p>The CSV file contained in an S3 bucket that's used for appending devices to an existing import task.</p>
    pub device_creation_file: ::std::option::Option<::std::string::String>,
}
impl SidewalkUpdateImportInfo {
    /// <p>The CSV file contained in an S3 bucket that's used for appending devices to an existing import task.</p>
    pub fn device_creation_file(&self) -> ::std::option::Option<&str> {
        self.device_creation_file.as_deref()
    }
}
impl SidewalkUpdateImportInfo {
    /// Creates a new builder-style object to manufacture [`SidewalkUpdateImportInfo`](crate::types::SidewalkUpdateImportInfo).
    pub fn builder() -> crate::types::builders::SidewalkUpdateImportInfoBuilder {
        crate::types::builders::SidewalkUpdateImportInfoBuilder::default()
    }
}

/// A builder for [`SidewalkUpdateImportInfo`](crate::types::SidewalkUpdateImportInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SidewalkUpdateImportInfoBuilder {
    pub(crate) device_creation_file: ::std::option::Option<::std::string::String>,
}
impl SidewalkUpdateImportInfoBuilder {
    /// <p>The CSV file contained in an S3 bucket that's used for appending devices to an existing import task.</p>
    pub fn device_creation_file(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_creation_file = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CSV file contained in an S3 bucket that's used for appending devices to an existing import task.</p>
    pub fn set_device_creation_file(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_creation_file = input;
        self
    }
    /// <p>The CSV file contained in an S3 bucket that's used for appending devices to an existing import task.</p>
    pub fn get_device_creation_file(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_creation_file
    }
    /// Consumes the builder and constructs a [`SidewalkUpdateImportInfo`](crate::types::SidewalkUpdateImportInfo).
    pub fn build(self) -> crate::types::SidewalkUpdateImportInfo {
        crate::types::SidewalkUpdateImportInfo {
            device_creation_file: self.device_creation_file,
        }
    }
}
