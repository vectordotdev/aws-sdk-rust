// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a wireless device that has been added to an import task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportedWirelessDevice {
    /// <p>The Sidewalk-related information about a device that has been added to an import task.</p>
    pub sidewalk: ::std::option::Option<crate::types::ImportedSidewalkDevice>,
}
impl ImportedWirelessDevice {
    /// <p>The Sidewalk-related information about a device that has been added to an import task.</p>
    pub fn sidewalk(&self) -> ::std::option::Option<&crate::types::ImportedSidewalkDevice> {
        self.sidewalk.as_ref()
    }
}
impl ImportedWirelessDevice {
    /// Creates a new builder-style object to manufacture [`ImportedWirelessDevice`](crate::types::ImportedWirelessDevice).
    pub fn builder() -> crate::types::builders::ImportedWirelessDeviceBuilder {
        crate::types::builders::ImportedWirelessDeviceBuilder::default()
    }
}

/// A builder for [`ImportedWirelessDevice`](crate::types::ImportedWirelessDevice).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportedWirelessDeviceBuilder {
    pub(crate) sidewalk: ::std::option::Option<crate::types::ImportedSidewalkDevice>,
}
impl ImportedWirelessDeviceBuilder {
    /// <p>The Sidewalk-related information about a device that has been added to an import task.</p>
    pub fn sidewalk(mut self, input: crate::types::ImportedSidewalkDevice) -> Self {
        self.sidewalk = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Sidewalk-related information about a device that has been added to an import task.</p>
    pub fn set_sidewalk(mut self, input: ::std::option::Option<crate::types::ImportedSidewalkDevice>) -> Self {
        self.sidewalk = input;
        self
    }
    /// <p>The Sidewalk-related information about a device that has been added to an import task.</p>
    pub fn get_sidewalk(&self) -> &::std::option::Option<crate::types::ImportedSidewalkDevice> {
        &self.sidewalk
    }
    /// Consumes the builder and constructs a [`ImportedWirelessDevice`](crate::types::ImportedWirelessDevice).
    pub fn build(self) -> crate::types::ImportedWirelessDevice {
        crate::types::ImportedWirelessDevice { sidewalk: self.sidewalk }
    }
}
