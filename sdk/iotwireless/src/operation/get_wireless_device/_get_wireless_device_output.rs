// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetWirelessDeviceOutput {
    /// <p>The wireless device type.</p>
    pub r#type: ::std::option::Option<crate::types::WirelessDeviceType>,
    /// <p>The name of the resource.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the resource.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the destination to which the device is assigned.</p>
    pub destination_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the wireless device.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name of the resource.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the thing associated with the wireless device. The value is empty if a thing isn't associated with the device.</p>
    pub thing_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the thing associated with the wireless device.</p>
    pub thing_arn: ::std::option::Option<::std::string::String>,
    /// <p>Information about the wireless device.</p>
    pub lo_ra_wan: ::std::option::Option<crate::types::LoRaWanDevice>,
    /// <p>Sidewalk device object.</p>
    pub sidewalk: ::std::option::Option<crate::types::SidewalkDevice>,
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub positioning: ::std::option::Option<crate::types::PositioningConfigStatus>,
    _request_id: Option<String>,
}
impl GetWirelessDeviceOutput {
    /// <p>The wireless device type.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::WirelessDeviceType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the resource.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the resource.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the destination to which the device is assigned.</p>
    pub fn destination_name(&self) -> ::std::option::Option<&str> {
        self.destination_name.as_deref()
    }
    /// <p>The ID of the wireless device.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the thing associated with the wireless device. The value is empty if a thing isn't associated with the device.</p>
    pub fn thing_name(&self) -> ::std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>The ARN of the thing associated with the wireless device.</p>
    pub fn thing_arn(&self) -> ::std::option::Option<&str> {
        self.thing_arn.as_deref()
    }
    /// <p>Information about the wireless device.</p>
    pub fn lo_ra_wan(&self) -> ::std::option::Option<&crate::types::LoRaWanDevice> {
        self.lo_ra_wan.as_ref()
    }
    /// <p>Sidewalk device object.</p>
    pub fn sidewalk(&self) -> ::std::option::Option<&crate::types::SidewalkDevice> {
        self.sidewalk.as_ref()
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn positioning(&self) -> ::std::option::Option<&crate::types::PositioningConfigStatus> {
        self.positioning.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetWirelessDeviceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetWirelessDeviceOutput {
    /// Creates a new builder-style object to manufacture [`GetWirelessDeviceOutput`](crate::operation::get_wireless_device::GetWirelessDeviceOutput).
    pub fn builder() -> crate::operation::get_wireless_device::builders::GetWirelessDeviceOutputBuilder {
        crate::operation::get_wireless_device::builders::GetWirelessDeviceOutputBuilder::default()
    }
}

/// A builder for [`GetWirelessDeviceOutput`](crate::operation::get_wireless_device::GetWirelessDeviceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetWirelessDeviceOutputBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::WirelessDeviceType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) destination_name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) thing_name: ::std::option::Option<::std::string::String>,
    pub(crate) thing_arn: ::std::option::Option<::std::string::String>,
    pub(crate) lo_ra_wan: ::std::option::Option<crate::types::LoRaWanDevice>,
    pub(crate) sidewalk: ::std::option::Option<crate::types::SidewalkDevice>,
    pub(crate) positioning: ::std::option::Option<crate::types::PositioningConfigStatus>,
    _request_id: Option<String>,
}
impl GetWirelessDeviceOutputBuilder {
    /// <p>The wireless device type.</p>
    pub fn r#type(mut self, input: crate::types::WirelessDeviceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The wireless device type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::WirelessDeviceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The wireless device type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::WirelessDeviceType> {
        &self.r#type
    }
    /// <p>The name of the resource.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the resource.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the resource.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the destination to which the device is assigned.</p>
    pub fn destination_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the destination to which the device is assigned.</p>
    pub fn set_destination_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_name = input;
        self
    }
    /// <p>The name of the destination to which the device is assigned.</p>
    pub fn get_destination_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_name
    }
    /// <p>The ID of the wireless device.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the wireless device.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the wireless device.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name of the resource.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the thing associated with the wireless device. The value is empty if a thing isn't associated with the device.</p>
    pub fn thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.thing_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the thing associated with the wireless device. The value is empty if a thing isn't associated with the device.</p>
    pub fn set_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>The name of the thing associated with the wireless device. The value is empty if a thing isn't associated with the device.</p>
    pub fn get_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.thing_name
    }
    /// <p>The ARN of the thing associated with the wireless device.</p>
    pub fn thing_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.thing_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the thing associated with the wireless device.</p>
    pub fn set_thing_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.thing_arn = input;
        self
    }
    /// <p>The ARN of the thing associated with the wireless device.</p>
    pub fn get_thing_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.thing_arn
    }
    /// <p>Information about the wireless device.</p>
    pub fn lo_ra_wan(mut self, input: crate::types::LoRaWanDevice) -> Self {
        self.lo_ra_wan = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the wireless device.</p>
    pub fn set_lo_ra_wan(mut self, input: ::std::option::Option<crate::types::LoRaWanDevice>) -> Self {
        self.lo_ra_wan = input;
        self
    }
    /// <p>Information about the wireless device.</p>
    pub fn get_lo_ra_wan(&self) -> &::std::option::Option<crate::types::LoRaWanDevice> {
        &self.lo_ra_wan
    }
    /// <p>Sidewalk device object.</p>
    pub fn sidewalk(mut self, input: crate::types::SidewalkDevice) -> Self {
        self.sidewalk = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sidewalk device object.</p>
    pub fn set_sidewalk(mut self, input: ::std::option::Option<crate::types::SidewalkDevice>) -> Self {
        self.sidewalk = input;
        self
    }
    /// <p>Sidewalk device object.</p>
    pub fn get_sidewalk(&self) -> &::std::option::Option<crate::types::SidewalkDevice> {
        &self.sidewalk
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn positioning(mut self, input: crate::types::PositioningConfigStatus) -> Self {
        self.positioning = ::std::option::Option::Some(input);
        self
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn set_positioning(mut self, input: ::std::option::Option<crate::types::PositioningConfigStatus>) -> Self {
        self.positioning = input;
        self
    }
    /// <p>FPort values for the GNSS, stream, and ClockSync functions of the positioning information.</p>
    pub fn get_positioning(&self) -> &::std::option::Option<crate::types::PositioningConfigStatus> {
        &self.positioning
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetWirelessDeviceOutput`](crate::operation::get_wireless_device::GetWirelessDeviceOutput).
    pub fn build(self) -> crate::operation::get_wireless_device::GetWirelessDeviceOutput {
        crate::operation::get_wireless_device::GetWirelessDeviceOutput {
            r#type: self.r#type,
            name: self.name,
            description: self.description,
            destination_name: self.destination_name,
            id: self.id,
            arn: self.arn,
            thing_name: self.thing_name,
            thing_arn: self.thing_arn,
            lo_ra_wan: self.lo_ra_wan,
            sidewalk: self.sidewalk,
            positioning: self.positioning,
            _request_id: self._request_id,
        }
    }
}
