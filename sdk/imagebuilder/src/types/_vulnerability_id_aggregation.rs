// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Includes counts of image and pipeline resource findings by vulnerability.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VulnerabilityIdAggregation {
    /// <p>The vulnerability Id for this set of counts.</p>
    pub vulnerability_id: ::std::option::Option<::std::string::String>,
    /// <p>Counts by severity level for medium severity and higher level findings, plus a total for all of the findings for the specified vulnerability.</p>
    pub severity_counts: ::std::option::Option<crate::types::SeverityCounts>,
}
impl VulnerabilityIdAggregation {
    /// <p>The vulnerability Id for this set of counts.</p>
    pub fn vulnerability_id(&self) -> ::std::option::Option<&str> {
        self.vulnerability_id.as_deref()
    }
    /// <p>Counts by severity level for medium severity and higher level findings, plus a total for all of the findings for the specified vulnerability.</p>
    pub fn severity_counts(&self) -> ::std::option::Option<&crate::types::SeverityCounts> {
        self.severity_counts.as_ref()
    }
}
impl VulnerabilityIdAggregation {
    /// Creates a new builder-style object to manufacture [`VulnerabilityIdAggregation`](crate::types::VulnerabilityIdAggregation).
    pub fn builder() -> crate::types::builders::VulnerabilityIdAggregationBuilder {
        crate::types::builders::VulnerabilityIdAggregationBuilder::default()
    }
}

/// A builder for [`VulnerabilityIdAggregation`](crate::types::VulnerabilityIdAggregation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VulnerabilityIdAggregationBuilder {
    pub(crate) vulnerability_id: ::std::option::Option<::std::string::String>,
    pub(crate) severity_counts: ::std::option::Option<crate::types::SeverityCounts>,
}
impl VulnerabilityIdAggregationBuilder {
    /// <p>The vulnerability Id for this set of counts.</p>
    pub fn vulnerability_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vulnerability_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The vulnerability Id for this set of counts.</p>
    pub fn set_vulnerability_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vulnerability_id = input;
        self
    }
    /// <p>The vulnerability Id for this set of counts.</p>
    pub fn get_vulnerability_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vulnerability_id
    }
    /// <p>Counts by severity level for medium severity and higher level findings, plus a total for all of the findings for the specified vulnerability.</p>
    pub fn severity_counts(mut self, input: crate::types::SeverityCounts) -> Self {
        self.severity_counts = ::std::option::Option::Some(input);
        self
    }
    /// <p>Counts by severity level for medium severity and higher level findings, plus a total for all of the findings for the specified vulnerability.</p>
    pub fn set_severity_counts(mut self, input: ::std::option::Option<crate::types::SeverityCounts>) -> Self {
        self.severity_counts = input;
        self
    }
    /// <p>Counts by severity level for medium severity and higher level findings, plus a total for all of the findings for the specified vulnerability.</p>
    pub fn get_severity_counts(&self) -> &::std::option::Option<crate::types::SeverityCounts> {
        &self.severity_counts
    }
    /// Consumes the builder and constructs a [`VulnerabilityIdAggregation`](crate::types::VulnerabilityIdAggregation).
    pub fn build(self) -> crate::types::VulnerabilityIdAggregation {
        crate::types::VulnerabilityIdAggregation {
            vulnerability_id: self.vulnerability_id,
            severity_counts: self.severity_counts,
        }
    }
}
