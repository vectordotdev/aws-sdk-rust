// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a parameter that is used to provide configuration details for the component.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComponentParameterDetail {
    /// <p>The name of this input parameter.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of input this parameter provides. The currently supported value is "string".</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The default value of this parameter if no input is provided.</p>
    pub default_value: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Describes this parameter.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl ComponentParameterDetail {
    /// <p>The name of this input parameter.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of input this parameter provides. The currently supported value is "string".</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The default value of this parameter if no input is provided.</p>
    pub fn default_value(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.default_value.as_deref()
    }
    /// <p>Describes this parameter.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ComponentParameterDetail {
    /// Creates a new builder-style object to manufacture [`ComponentParameterDetail`](crate::types::ComponentParameterDetail).
    pub fn builder() -> crate::types::builders::ComponentParameterDetailBuilder {
        crate::types::builders::ComponentParameterDetailBuilder::default()
    }
}

/// A builder for [`ComponentParameterDetail`](crate::types::ComponentParameterDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ComponentParameterDetailBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) default_value: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl ComponentParameterDetailBuilder {
    /// <p>The name of this input parameter.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this input parameter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of this input parameter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of input this parameter provides. The currently supported value is "string".</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of input this parameter provides. The currently supported value is "string".</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of input this parameter provides. The currently supported value is "string".</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// Appends an item to `default_value`.
    ///
    /// To override the contents of this collection use [`set_default_value`](Self::set_default_value).
    ///
    /// <p>The default value of this parameter if no input is provided.</p>
    pub fn default_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.default_value.unwrap_or_default();
        v.push(input.into());
        self.default_value = ::std::option::Option::Some(v);
        self
    }
    /// <p>The default value of this parameter if no input is provided.</p>
    pub fn set_default_value(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.default_value = input;
        self
    }
    /// <p>The default value of this parameter if no input is provided.</p>
    pub fn get_default_value(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.default_value
    }
    /// <p>Describes this parameter.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes this parameter.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Describes this parameter.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`ComponentParameterDetail`](crate::types::ComponentParameterDetail).
    pub fn build(self) -> crate::types::ComponentParameterDetail {
        crate::types::ComponentParameterDetail {
            name: self.name,
            r#type: self.r#type,
            default_value: self.default_value,
            description: self.description,
        }
    }
}
