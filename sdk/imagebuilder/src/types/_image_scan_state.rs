// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Shows the vulnerability scan status for a specific image, and the reason for that status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageScanState {
    /// <p>The current state of vulnerability scans for the image.</p>
    pub status: ::std::option::Option<crate::types::ImageScanStatus>,
    /// <p>The reason for the scan status for the image.</p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl ImageScanState {
    /// <p>The current state of vulnerability scans for the image.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ImageScanStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the scan status for the image.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl ImageScanState {
    /// Creates a new builder-style object to manufacture [`ImageScanState`](crate::types::ImageScanState).
    pub fn builder() -> crate::types::builders::ImageScanStateBuilder {
        crate::types::builders::ImageScanStateBuilder::default()
    }
}

/// A builder for [`ImageScanState`](crate::types::ImageScanState).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImageScanStateBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ImageScanStatus>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl ImageScanStateBuilder {
    /// <p>The current state of vulnerability scans for the image.</p>
    pub fn status(mut self, input: crate::types::ImageScanStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of vulnerability scans for the image.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ImageScanStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current state of vulnerability scans for the image.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ImageScanStatus> {
        &self.status
    }
    /// <p>The reason for the scan status for the image.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the scan status for the image.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason for the scan status for the image.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`ImageScanState`](crate::types::ImageScanState).
    pub fn build(self) -> crate::types::ImageScanState {
        crate::types::ImageScanState {
            status: self.status,
            reason: self.reason,
        }
    }
}
