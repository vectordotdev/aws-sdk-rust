// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Runtime details and status for the workflow step.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkflowStepMetadata {
    /// <p>A unique identifier for the workflow step, assigned at runtime.</p>
    pub step_execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the workflow step.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Description of the workflow step.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The step action name.</p>
    pub action: ::std::option::Option<::std::string::String>,
    /// <p>Runtime status for the workflow step.</p>
    pub status: ::std::option::Option<crate::types::WorkflowStepExecutionStatus>,
    /// <p>Reports on the rollback status of the step, if applicable.</p>
    pub rollback_status: ::std::option::Option<crate::types::WorkflowStepExecutionRollbackStatus>,
    /// <p>Detailed output message that the workflow step provides at runtime.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>Input parameters that Image Builder provides for the workflow step.</p>
    pub inputs: ::std::option::Option<::std::string::String>,
    /// <p>The file names that the workflow step created as output for this runtime instance of the workflow.</p>
    pub outputs: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the workflow step started.</p>
    pub start_time: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the workflow step finished.</p>
    pub end_time: ::std::option::Option<::std::string::String>,
}
impl WorkflowStepMetadata {
    /// <p>A unique identifier for the workflow step, assigned at runtime.</p>
    pub fn step_execution_id(&self) -> ::std::option::Option<&str> {
        self.step_execution_id.as_deref()
    }
    /// <p>The name of the workflow step.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Description of the workflow step.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The step action name.</p>
    pub fn action(&self) -> ::std::option::Option<&str> {
        self.action.as_deref()
    }
    /// <p>Runtime status for the workflow step.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WorkflowStepExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>Reports on the rollback status of the step, if applicable.</p>
    pub fn rollback_status(&self) -> ::std::option::Option<&crate::types::WorkflowStepExecutionRollbackStatus> {
        self.rollback_status.as_ref()
    }
    /// <p>Detailed output message that the workflow step provides at runtime.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>Input parameters that Image Builder provides for the workflow step.</p>
    pub fn inputs(&self) -> ::std::option::Option<&str> {
        self.inputs.as_deref()
    }
    /// <p>The file names that the workflow step created as output for this runtime instance of the workflow.</p>
    pub fn outputs(&self) -> ::std::option::Option<&str> {
        self.outputs.as_deref()
    }
    /// <p>The timestamp when the workflow step started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&str> {
        self.start_time.as_deref()
    }
    /// <p>The timestamp when the workflow step finished.</p>
    pub fn end_time(&self) -> ::std::option::Option<&str> {
        self.end_time.as_deref()
    }
}
impl WorkflowStepMetadata {
    /// Creates a new builder-style object to manufacture [`WorkflowStepMetadata`](crate::types::WorkflowStepMetadata).
    pub fn builder() -> crate::types::builders::WorkflowStepMetadataBuilder {
        crate::types::builders::WorkflowStepMetadataBuilder::default()
    }
}

/// A builder for [`WorkflowStepMetadata`](crate::types::WorkflowStepMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkflowStepMetadataBuilder {
    pub(crate) step_execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::WorkflowStepExecutionStatus>,
    pub(crate) rollback_status: ::std::option::Option<crate::types::WorkflowStepExecutionRollbackStatus>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) inputs: ::std::option::Option<::std::string::String>,
    pub(crate) outputs: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::std::string::String>,
    pub(crate) end_time: ::std::option::Option<::std::string::String>,
}
impl WorkflowStepMetadataBuilder {
    /// <p>A unique identifier for the workflow step, assigned at runtime.</p>
    pub fn step_execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the workflow step, assigned at runtime.</p>
    pub fn set_step_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_execution_id = input;
        self
    }
    /// <p>A unique identifier for the workflow step, assigned at runtime.</p>
    pub fn get_step_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_execution_id
    }
    /// <p>The name of the workflow step.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow step.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the workflow step.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Description of the workflow step.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Description of the workflow step.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Description of the workflow step.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The step action name.</p>
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step action name.</p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action = input;
        self
    }
    /// <p>The step action name.</p>
    pub fn get_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.action
    }
    /// <p>Runtime status for the workflow step.</p>
    pub fn status(mut self, input: crate::types::WorkflowStepExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Runtime status for the workflow step.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkflowStepExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Runtime status for the workflow step.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkflowStepExecutionStatus> {
        &self.status
    }
    /// <p>Reports on the rollback status of the step, if applicable.</p>
    pub fn rollback_status(mut self, input: crate::types::WorkflowStepExecutionRollbackStatus) -> Self {
        self.rollback_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reports on the rollback status of the step, if applicable.</p>
    pub fn set_rollback_status(mut self, input: ::std::option::Option<crate::types::WorkflowStepExecutionRollbackStatus>) -> Self {
        self.rollback_status = input;
        self
    }
    /// <p>Reports on the rollback status of the step, if applicable.</p>
    pub fn get_rollback_status(&self) -> &::std::option::Option<crate::types::WorkflowStepExecutionRollbackStatus> {
        &self.rollback_status
    }
    /// <p>Detailed output message that the workflow step provides at runtime.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Detailed output message that the workflow step provides at runtime.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Detailed output message that the workflow step provides at runtime.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>Input parameters that Image Builder provides for the workflow step.</p>
    pub fn inputs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inputs = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Input parameters that Image Builder provides for the workflow step.</p>
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inputs = input;
        self
    }
    /// <p>Input parameters that Image Builder provides for the workflow step.</p>
    pub fn get_inputs(&self) -> &::std::option::Option<::std::string::String> {
        &self.inputs
    }
    /// <p>The file names that the workflow step created as output for this runtime instance of the workflow.</p>
    pub fn outputs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.outputs = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file names that the workflow step created as output for this runtime instance of the workflow.</p>
    pub fn set_outputs(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.outputs = input;
        self
    }
    /// <p>The file names that the workflow step created as output for this runtime instance of the workflow.</p>
    pub fn get_outputs(&self) -> &::std::option::Option<::std::string::String> {
        &self.outputs
    }
    /// <p>The timestamp when the workflow step started.</p>
    pub fn start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp when the workflow step started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The timestamp when the workflow step started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_time
    }
    /// <p>The timestamp when the workflow step finished.</p>
    pub fn end_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp when the workflow step finished.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The timestamp when the workflow step finished.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`WorkflowStepMetadata`](crate::types::WorkflowStepMetadata).
    pub fn build(self) -> crate::types::WorkflowStepMetadata {
        crate::types::WorkflowStepMetadata {
            step_execution_id: self.step_execution_id,
            name: self.name,
            description: self.description,
            action: self.action,
            status: self.status,
            rollback_status: self.rollback_status,
            message: self.message,
            inputs: self.inputs,
            outputs: self.outputs,
            start_time: self.start_time,
            end_time: self.end_time,
        }
    }
}
