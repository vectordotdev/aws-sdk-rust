// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a blueprint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Blueprint {
    /// <p>The name of the blueprint.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the blueprint.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date and time the blueprint was registered.</p>
    pub created_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time the blueprint was last modified.</p>
    pub last_modified_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A JSON string that indicates the list of parameter specifications for the blueprint.</p>
    pub parameter_spec: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the path in Amazon S3 where the blueprint is published.</p>
    pub blueprint_location: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a path in Amazon S3 where the blueprint is copied when you call <code>CreateBlueprint/UpdateBlueprint</code> to register the blueprint in Glue.</p>
    pub blueprint_service_location: ::std::option::Option<::std::string::String>,
    /// <p>The status of the blueprint registration.</p>
    /// <ul>
    /// <li> <p>Creating — The blueprint registration is in progress.</p> </li>
    /// <li> <p>Active — The blueprint has been successfully registered.</p> </li>
    /// <li> <p>Updating — An update to the blueprint registration is in progress.</p> </li>
    /// <li> <p>Failed — The blueprint registration failed.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::BlueprintStatus>,
    /// <p>An error message.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.</p>
    pub last_active_definition: ::std::option::Option<crate::types::LastActiveDefinition>,
}
impl Blueprint {
    /// <p>The name of the blueprint.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the blueprint.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time the blueprint was registered.</p>
    pub fn created_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_on.as_ref()
    }
    /// <p>The date and time the blueprint was last modified.</p>
    pub fn last_modified_on(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_on.as_ref()
    }
    /// <p>A JSON string that indicates the list of parameter specifications for the blueprint.</p>
    pub fn parameter_spec(&self) -> ::std::option::Option<&str> {
        self.parameter_spec.as_deref()
    }
    /// <p>Specifies the path in Amazon S3 where the blueprint is published.</p>
    pub fn blueprint_location(&self) -> ::std::option::Option<&str> {
        self.blueprint_location.as_deref()
    }
    /// <p>Specifies a path in Amazon S3 where the blueprint is copied when you call <code>CreateBlueprint/UpdateBlueprint</code> to register the blueprint in Glue.</p>
    pub fn blueprint_service_location(&self) -> ::std::option::Option<&str> {
        self.blueprint_service_location.as_deref()
    }
    /// <p>The status of the blueprint registration.</p>
    /// <ul>
    /// <li> <p>Creating — The blueprint registration is in progress.</p> </li>
    /// <li> <p>Active — The blueprint has been successfully registered.</p> </li>
    /// <li> <p>Updating — An update to the blueprint registration is in progress.</p> </li>
    /// <li> <p>Failed — The blueprint registration failed.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::BlueprintStatus> {
        self.status.as_ref()
    }
    /// <p>An error message.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.</p>
    pub fn last_active_definition(&self) -> ::std::option::Option<&crate::types::LastActiveDefinition> {
        self.last_active_definition.as_ref()
    }
}
impl Blueprint {
    /// Creates a new builder-style object to manufacture [`Blueprint`](crate::types::Blueprint).
    pub fn builder() -> crate::types::builders::BlueprintBuilder {
        crate::types::builders::BlueprintBuilder::default()
    }
}

/// A builder for [`Blueprint`](crate::types::Blueprint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BlueprintBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_on: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) parameter_spec: ::std::option::Option<::std::string::String>,
    pub(crate) blueprint_location: ::std::option::Option<::std::string::String>,
    pub(crate) blueprint_service_location: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::BlueprintStatus>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) last_active_definition: ::std::option::Option<crate::types::LastActiveDefinition>,
}
impl BlueprintBuilder {
    /// <p>The name of the blueprint.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the blueprint.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the blueprint.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the blueprint.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the blueprint.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the blueprint.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date and time the blueprint was registered.</p>
    pub fn created_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the blueprint was registered.</p>
    pub fn set_created_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_on = input;
        self
    }
    /// <p>The date and time the blueprint was registered.</p>
    pub fn get_created_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_on
    }
    /// <p>The date and time the blueprint was last modified.</p>
    pub fn last_modified_on(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_on = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the blueprint was last modified.</p>
    pub fn set_last_modified_on(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_on = input;
        self
    }
    /// <p>The date and time the blueprint was last modified.</p>
    pub fn get_last_modified_on(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_on
    }
    /// <p>A JSON string that indicates the list of parameter specifications for the blueprint.</p>
    pub fn parameter_spec(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameter_spec = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A JSON string that indicates the list of parameter specifications for the blueprint.</p>
    pub fn set_parameter_spec(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameter_spec = input;
        self
    }
    /// <p>A JSON string that indicates the list of parameter specifications for the blueprint.</p>
    pub fn get_parameter_spec(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameter_spec
    }
    /// <p>Specifies the path in Amazon S3 where the blueprint is published.</p>
    pub fn blueprint_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blueprint_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the path in Amazon S3 where the blueprint is published.</p>
    pub fn set_blueprint_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blueprint_location = input;
        self
    }
    /// <p>Specifies the path in Amazon S3 where the blueprint is published.</p>
    pub fn get_blueprint_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.blueprint_location
    }
    /// <p>Specifies a path in Amazon S3 where the blueprint is copied when you call <code>CreateBlueprint/UpdateBlueprint</code> to register the blueprint in Glue.</p>
    pub fn blueprint_service_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blueprint_service_location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a path in Amazon S3 where the blueprint is copied when you call <code>CreateBlueprint/UpdateBlueprint</code> to register the blueprint in Glue.</p>
    pub fn set_blueprint_service_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blueprint_service_location = input;
        self
    }
    /// <p>Specifies a path in Amazon S3 where the blueprint is copied when you call <code>CreateBlueprint/UpdateBlueprint</code> to register the blueprint in Glue.</p>
    pub fn get_blueprint_service_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.blueprint_service_location
    }
    /// <p>The status of the blueprint registration.</p>
    /// <ul>
    /// <li> <p>Creating — The blueprint registration is in progress.</p> </li>
    /// <li> <p>Active — The blueprint has been successfully registered.</p> </li>
    /// <li> <p>Updating — An update to the blueprint registration is in progress.</p> </li>
    /// <li> <p>Failed — The blueprint registration failed.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::BlueprintStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the blueprint registration.</p>
    /// <ul>
    /// <li> <p>Creating — The blueprint registration is in progress.</p> </li>
    /// <li> <p>Active — The blueprint has been successfully registered.</p> </li>
    /// <li> <p>Updating — An update to the blueprint registration is in progress.</p> </li>
    /// <li> <p>Failed — The blueprint registration failed.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BlueprintStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the blueprint registration.</p>
    /// <ul>
    /// <li> <p>Creating — The blueprint registration is in progress.</p> </li>
    /// <li> <p>Active — The blueprint has been successfully registered.</p> </li>
    /// <li> <p>Updating — An update to the blueprint registration is in progress.</p> </li>
    /// <li> <p>Failed — The blueprint registration failed.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BlueprintStatus> {
        &self.status
    }
    /// <p>An error message.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error message.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>An error message.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.</p>
    pub fn last_active_definition(mut self, input: crate::types::LastActiveDefinition) -> Self {
        self.last_active_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.</p>
    pub fn set_last_active_definition(mut self, input: ::std::option::Option<crate::types::LastActiveDefinition>) -> Self {
        self.last_active_definition = input;
        self
    }
    /// <p>When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.</p>
    pub fn get_last_active_definition(&self) -> &::std::option::Option<crate::types::LastActiveDefinition> {
        &self.last_active_definition
    }
    /// Consumes the builder and constructs a [`Blueprint`](crate::types::Blueprint).
    pub fn build(self) -> crate::types::Blueprint {
        crate::types::Blueprint {
            name: self.name,
            description: self.description,
            created_on: self.created_on,
            last_modified_on: self.last_modified_on,
            parameter_spec: self.parameter_spec,
            blueprint_location: self.blueprint_location,
            blueprint_service_location: self.blueprint_service_location,
            status: self.status,
            error_message: self.error_message,
            last_active_definition: self.last_active_definition,
        }
    }
}
