// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a Snowflake data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnowflakeSource {
    /// <p>The name of the Snowflake data source.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Configuration for the Snowflake data source.</p>
    pub data: ::std::option::Option<crate::types::SnowflakeNodeData>,
    /// <p>Specifies user-defined schemas for your output data.</p>
    pub output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl SnowflakeSource {
    /// <p>The name of the Snowflake data source.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Configuration for the Snowflake data source.</p>
    pub fn data(&self) -> ::std::option::Option<&crate::types::SnowflakeNodeData> {
        self.data.as_ref()
    }
    /// <p>Specifies user-defined schemas for your output data.</p>
    pub fn output_schemas(&self) -> ::std::option::Option<&[crate::types::GlueSchema]> {
        self.output_schemas.as_deref()
    }
}
impl SnowflakeSource {
    /// Creates a new builder-style object to manufacture [`SnowflakeSource`](crate::types::SnowflakeSource).
    pub fn builder() -> crate::types::builders::SnowflakeSourceBuilder {
        crate::types::builders::SnowflakeSourceBuilder::default()
    }
}

/// A builder for [`SnowflakeSource`](crate::types::SnowflakeSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SnowflakeSourceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<crate::types::SnowflakeNodeData>,
    pub(crate) output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl SnowflakeSourceBuilder {
    /// <p>The name of the Snowflake data source.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Snowflake data source.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Snowflake data source.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Configuration for the Snowflake data source.</p>
    pub fn data(mut self, input: crate::types::SnowflakeNodeData) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for the Snowflake data source.</p>
    pub fn set_data(mut self, input: ::std::option::Option<crate::types::SnowflakeNodeData>) -> Self {
        self.data = input;
        self
    }
    /// <p>Configuration for the Snowflake data source.</p>
    pub fn get_data(&self) -> &::std::option::Option<crate::types::SnowflakeNodeData> {
        &self.data
    }
    /// Appends an item to `output_schemas`.
    ///
    /// To override the contents of this collection use [`set_output_schemas`](Self::set_output_schemas).
    ///
    /// <p>Specifies user-defined schemas for your output data.</p>
    pub fn output_schemas(mut self, input: crate::types::GlueSchema) -> Self {
        let mut v = self.output_schemas.unwrap_or_default();
        v.push(input);
        self.output_schemas = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies user-defined schemas for your output data.</p>
    pub fn set_output_schemas(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>) -> Self {
        self.output_schemas = input;
        self
    }
    /// <p>Specifies user-defined schemas for your output data.</p>
    pub fn get_output_schemas(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>> {
        &self.output_schemas
    }
    /// Consumes the builder and constructs a [`SnowflakeSource`](crate::types::SnowflakeSource).
    pub fn build(self) -> crate::types::SnowflakeSource {
        crate::types::SnowflakeSource {
            name: self.name,
            data: self.data,
            output_schemas: self.output_schemas,
        }
    }
}
