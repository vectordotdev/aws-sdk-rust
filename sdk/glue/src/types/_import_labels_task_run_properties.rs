// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies configuration properties for an importing labels task run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportLabelsTaskRunProperties {
    /// <p>The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels.</p>
    pub input_s3_path: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether to overwrite your existing labels.</p>
    pub replace: bool,
}
impl ImportLabelsTaskRunProperties {
    /// <p>The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels.</p>
    pub fn input_s3_path(&self) -> ::std::option::Option<&str> {
        self.input_s3_path.as_deref()
    }
    /// <p>Indicates whether to overwrite your existing labels.</p>
    pub fn replace(&self) -> bool {
        self.replace
    }
}
impl ImportLabelsTaskRunProperties {
    /// Creates a new builder-style object to manufacture [`ImportLabelsTaskRunProperties`](crate::types::ImportLabelsTaskRunProperties).
    pub fn builder() -> crate::types::builders::ImportLabelsTaskRunPropertiesBuilder {
        crate::types::builders::ImportLabelsTaskRunPropertiesBuilder::default()
    }
}

/// A builder for [`ImportLabelsTaskRunProperties`](crate::types::ImportLabelsTaskRunProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportLabelsTaskRunPropertiesBuilder {
    pub(crate) input_s3_path: ::std::option::Option<::std::string::String>,
    pub(crate) replace: ::std::option::Option<bool>,
}
impl ImportLabelsTaskRunPropertiesBuilder {
    /// <p>The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels.</p>
    pub fn input_s3_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_s3_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels.</p>
    pub fn set_input_s3_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_s3_path = input;
        self
    }
    /// <p>The Amazon Simple Storage Service (Amazon S3) path from where you will import the labels.</p>
    pub fn get_input_s3_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_s3_path
    }
    /// <p>Indicates whether to overwrite your existing labels.</p>
    pub fn replace(mut self, input: bool) -> Self {
        self.replace = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to overwrite your existing labels.</p>
    pub fn set_replace(mut self, input: ::std::option::Option<bool>) -> Self {
        self.replace = input;
        self
    }
    /// <p>Indicates whether to overwrite your existing labels.</p>
    pub fn get_replace(&self) -> &::std::option::Option<bool> {
        &self.replace
    }
    /// Consumes the builder and constructs a [`ImportLabelsTaskRunProperties`](crate::types::ImportLabelsTaskRunProperties).
    pub fn build(self) -> crate::types::ImportLabelsTaskRunProperties {
        crate::types::ImportLabelsTaskRunProperties {
            input_s3_path: self.input_s3_path,
            replace: self.replace.unwrap_or_default(),
        }
    }
}
