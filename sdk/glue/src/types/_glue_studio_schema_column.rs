// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a single column in a Glue schema definition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GlueStudioSchemaColumn {
    /// <p>The name of the column in the Glue Studio schema.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The hive type for this column in the Glue Studio schema.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
}
impl GlueStudioSchemaColumn {
    /// <p>The name of the column in the Glue Studio schema.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The hive type for this column in the Glue Studio schema.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl GlueStudioSchemaColumn {
    /// Creates a new builder-style object to manufacture [`GlueStudioSchemaColumn`](crate::types::GlueStudioSchemaColumn).
    pub fn builder() -> crate::types::builders::GlueStudioSchemaColumnBuilder {
        crate::types::builders::GlueStudioSchemaColumnBuilder::default()
    }
}

/// A builder for [`GlueStudioSchemaColumn`](crate::types::GlueStudioSchemaColumn).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GlueStudioSchemaColumnBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
}
impl GlueStudioSchemaColumnBuilder {
    /// <p>The name of the column in the Glue Studio schema.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the column in the Glue Studio schema.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the column in the Glue Studio schema.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The hive type for this column in the Glue Studio schema.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hive type for this column in the Glue Studio schema.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The hive type for this column in the Glue Studio schema.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`GlueStudioSchemaColumn`](crate::types::GlueStudioSchemaColumn).
    pub fn build(self) -> crate::types::GlueStudioSchemaColumn {
        crate::types::GlueStudioSchemaColumn {
            name: self.name,
            r#type: self.r#type,
        }
    }
}
