// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a Delta Lake data source that is registered in the Glue Data Catalog.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CatalogDeltaSource {
    /// <p>The name of the Delta Lake data source.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database to read from.</p>
    pub database: ::std::option::Option<::std::string::String>,
    /// <p>The name of the table in the database to read from.</p>
    pub table: ::std::option::Option<::std::string::String>,
    /// <p>Specifies additional connection options.</p>
    pub additional_delta_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Specifies the data schema for the Delta Lake source.</p>
    pub output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl CatalogDeltaSource {
    /// <p>The name of the Delta Lake data source.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the database to read from.</p>
    pub fn database(&self) -> ::std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn table(&self) -> ::std::option::Option<&str> {
        self.table.as_deref()
    }
    /// <p>Specifies additional connection options.</p>
    pub fn additional_delta_options(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.additional_delta_options.as_ref()
    }
    /// <p>Specifies the data schema for the Delta Lake source.</p>
    pub fn output_schemas(&self) -> ::std::option::Option<&[crate::types::GlueSchema]> {
        self.output_schemas.as_deref()
    }
}
impl CatalogDeltaSource {
    /// Creates a new builder-style object to manufacture [`CatalogDeltaSource`](crate::types::CatalogDeltaSource).
    pub fn builder() -> crate::types::builders::CatalogDeltaSourceBuilder {
        crate::types::builders::CatalogDeltaSourceBuilder::default()
    }
}

/// A builder for [`CatalogDeltaSource`](crate::types::CatalogDeltaSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CatalogDeltaSourceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) table: ::std::option::Option<::std::string::String>,
    pub(crate) additional_delta_options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) output_schemas: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>,
}
impl CatalogDeltaSourceBuilder {
    /// <p>The name of the Delta Lake data source.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Delta Lake data source.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Delta Lake data source.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the database to read from.</p>
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database to read from.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The name of the database to read from.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn table(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn set_table(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn get_table(&self) -> &::std::option::Option<::std::string::String> {
        &self.table
    }
    /// Adds a key-value pair to `additional_delta_options`.
    ///
    /// To override the contents of this collection use [`set_additional_delta_options`](Self::set_additional_delta_options).
    ///
    /// <p>Specifies additional connection options.</p>
    pub fn additional_delta_options(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_delta_options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_delta_options = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Specifies additional connection options.</p>
    pub fn set_additional_delta_options(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.additional_delta_options = input;
        self
    }
    /// <p>Specifies additional connection options.</p>
    pub fn get_additional_delta_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.additional_delta_options
    }
    /// Appends an item to `output_schemas`.
    ///
    /// To override the contents of this collection use [`set_output_schemas`](Self::set_output_schemas).
    ///
    /// <p>Specifies the data schema for the Delta Lake source.</p>
    pub fn output_schemas(mut self, input: crate::types::GlueSchema) -> Self {
        let mut v = self.output_schemas.unwrap_or_default();
        v.push(input);
        self.output_schemas = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the data schema for the Delta Lake source.</p>
    pub fn set_output_schemas(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>>) -> Self {
        self.output_schemas = input;
        self
    }
    /// <p>Specifies the data schema for the Delta Lake source.</p>
    pub fn get_output_schemas(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlueSchema>> {
        &self.output_schemas
    }
    /// Consumes the builder and constructs a [`CatalogDeltaSource`](crate::types::CatalogDeltaSource).
    pub fn build(self) -> crate::types::CatalogDeltaSource {
        crate::types::CatalogDeltaSource {
            name: self.name,
            database: self.database,
            table: self.table,
            additional_delta_options: self.additional_delta_options,
            output_schemas: self.output_schemas,
        }
    }
}
