// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an Amazon Redshift source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AmazonRedshiftSource {
    /// <p>The name of the Amazon Redshift source.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the data of the Amazon Reshift source node.</p>
    pub data: ::std::option::Option<crate::types::AmazonRedshiftNodeData>,
}
impl AmazonRedshiftSource {
    /// <p>The name of the Amazon Redshift source.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies the data of the Amazon Reshift source node.</p>
    pub fn data(&self) -> ::std::option::Option<&crate::types::AmazonRedshiftNodeData> {
        self.data.as_ref()
    }
}
impl AmazonRedshiftSource {
    /// Creates a new builder-style object to manufacture [`AmazonRedshiftSource`](crate::types::AmazonRedshiftSource).
    pub fn builder() -> crate::types::builders::AmazonRedshiftSourceBuilder {
        crate::types::builders::AmazonRedshiftSourceBuilder::default()
    }
}

/// A builder for [`AmazonRedshiftSource`](crate::types::AmazonRedshiftSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AmazonRedshiftSourceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<crate::types::AmazonRedshiftNodeData>,
}
impl AmazonRedshiftSourceBuilder {
    /// <p>The name of the Amazon Redshift source.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Redshift source.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Amazon Redshift source.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Specifies the data of the Amazon Reshift source node.</p>
    pub fn data(mut self, input: crate::types::AmazonRedshiftNodeData) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the data of the Amazon Reshift source node.</p>
    pub fn set_data(mut self, input: ::std::option::Option<crate::types::AmazonRedshiftNodeData>) -> Self {
        self.data = input;
        self
    }
    /// <p>Specifies the data of the Amazon Reshift source node.</p>
    pub fn get_data(&self) -> &::std::option::Option<crate::types::AmazonRedshiftNodeData> {
        &self.data
    }
    /// Consumes the builder and constructs a [`AmazonRedshiftSource`](crate::types::AmazonRedshiftSource).
    pub fn build(self) -> crate::types::AmazonRedshiftSource {
        crate::types::AmazonRedshiftSource {
            name: self.name,
            data: self.data,
        }
    }
}
