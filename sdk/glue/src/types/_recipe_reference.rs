// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A reference to a Glue DataBrew recipe.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecipeReference {
    /// <p>The ARN of the DataBrew recipe.</p>
    pub recipe_arn: ::std::option::Option<::std::string::String>,
    /// <p>The RecipeVersion of the DataBrew recipe.</p>
    pub recipe_version: ::std::option::Option<::std::string::String>,
}
impl RecipeReference {
    /// <p>The ARN of the DataBrew recipe.</p>
    pub fn recipe_arn(&self) -> ::std::option::Option<&str> {
        self.recipe_arn.as_deref()
    }
    /// <p>The RecipeVersion of the DataBrew recipe.</p>
    pub fn recipe_version(&self) -> ::std::option::Option<&str> {
        self.recipe_version.as_deref()
    }
}
impl RecipeReference {
    /// Creates a new builder-style object to manufacture [`RecipeReference`](crate::types::RecipeReference).
    pub fn builder() -> crate::types::builders::RecipeReferenceBuilder {
        crate::types::builders::RecipeReferenceBuilder::default()
    }
}

/// A builder for [`RecipeReference`](crate::types::RecipeReference).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecipeReferenceBuilder {
    pub(crate) recipe_arn: ::std::option::Option<::std::string::String>,
    pub(crate) recipe_version: ::std::option::Option<::std::string::String>,
}
impl RecipeReferenceBuilder {
    /// <p>The ARN of the DataBrew recipe.</p>
    pub fn recipe_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recipe_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the DataBrew recipe.</p>
    pub fn set_recipe_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recipe_arn = input;
        self
    }
    /// <p>The ARN of the DataBrew recipe.</p>
    pub fn get_recipe_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.recipe_arn
    }
    /// <p>The RecipeVersion of the DataBrew recipe.</p>
    pub fn recipe_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recipe_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The RecipeVersion of the DataBrew recipe.</p>
    pub fn set_recipe_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recipe_version = input;
        self
    }
    /// <p>The RecipeVersion of the DataBrew recipe.</p>
    pub fn get_recipe_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.recipe_version
    }
    /// Consumes the builder and constructs a [`RecipeReference`](crate::types::RecipeReference).
    pub fn build(self) -> crate::types::RecipeReference {
        crate::types::RecipeReference {
            recipe_arn: self.recipe_arn,
            recipe_version: self.recipe_version,
        }
    }
}
