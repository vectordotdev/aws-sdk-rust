// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains credential information for an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum Credential {
    /// <p>Contains API key credential information.</p>
    ApiKeyCredential(crate::types::ApiKeyCredential),
    /// <p>Contains OAuth2 client credential information.</p>
    Oauth2Credential(crate::types::Oauth2Credential),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl Credential {
    /// Tries to convert the enum instance into [`ApiKeyCredential`](crate::types::Credential::ApiKeyCredential), extracting the inner [`ApiKeyCredential`](crate::types::ApiKeyCredential).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_api_key_credential(&self) -> ::std::result::Result<&crate::types::ApiKeyCredential, &Self> {
        if let Credential::ApiKeyCredential(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ApiKeyCredential`](crate::types::Credential::ApiKeyCredential).
    pub fn is_api_key_credential(&self) -> bool {
        self.as_api_key_credential().is_ok()
    }
    /// Tries to convert the enum instance into [`Oauth2Credential`](crate::types::Credential::Oauth2Credential), extracting the inner [`Oauth2Credential`](crate::types::Oauth2Credential).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_oauth2_credential(&self) -> ::std::result::Result<&crate::types::Oauth2Credential, &Self> {
        if let Credential::Oauth2Credential(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Oauth2Credential`](crate::types::Credential::Oauth2Credential).
    pub fn is_oauth2_credential(&self) -> bool {
        self.as_oauth2_credential().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
