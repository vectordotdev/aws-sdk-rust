// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an Amazon Kinesis Data Firehose delivery stream.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FirehoseStream {
    /// <p>The name of the Amazon Kinesis Data Firehose delivery stream.</p>
    pub stream_name: ::std::option::Option<::std::string::String>,
}
impl FirehoseStream {
    /// <p>The name of the Amazon Kinesis Data Firehose delivery stream.</p>
    pub fn stream_name(&self) -> ::std::option::Option<&str> {
        self.stream_name.as_deref()
    }
}
impl FirehoseStream {
    /// Creates a new builder-style object to manufacture [`FirehoseStream`](crate::types::FirehoseStream).
    pub fn builder() -> crate::types::builders::FirehoseStreamBuilder {
        crate::types::builders::FirehoseStreamBuilder::default()
    }
}

/// A builder for [`FirehoseStream`](crate::types::FirehoseStream).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FirehoseStreamBuilder {
    pub(crate) stream_name: ::std::option::Option<::std::string::String>,
}
impl FirehoseStreamBuilder {
    /// <p>The name of the Amazon Kinesis Data Firehose delivery stream.</p>
    pub fn stream_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Kinesis Data Firehose delivery stream.</p>
    pub fn set_stream_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_name = input;
        self
    }
    /// <p>The name of the Amazon Kinesis Data Firehose delivery stream.</p>
    pub fn get_stream_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_name
    }
    /// Consumes the builder and constructs a [`FirehoseStream`](crate::types::FirehoseStream).
    pub fn build(self) -> crate::types::FirehoseStream {
        crate::types::FirehoseStream {
            stream_name: self.stream_name,
        }
    }
}
