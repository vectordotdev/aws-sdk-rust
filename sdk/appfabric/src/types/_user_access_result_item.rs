// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a user's access to an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UserAccessResultItem {
    /// <p>The name of the application.</p>
    pub app: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the application tenant.</p>
    pub tenant_id: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the tenant.</p>
    pub tenant_display_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID of the task.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the user access result item.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code>: The user access task is in progress.</p> </li>
    /// <li> <p> <code>COMPLETED</code>: The user access task completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code>: The user access task failed.</p> </li>
    /// <li> <p> <code>EXPIRED</code>: The user access task expired.</p> </li>
    /// </ul>
    pub result_status: ::std::option::Option<crate::types::ResultStatus>,
    /// <p>The email address of the target user.</p>
    pub email: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID of user.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The full name of the user.</p>
    pub user_full_name: ::std::option::Option<::std::string::String>,
    /// <p>The first name of the user.</p>
    pub user_first_name: ::std::option::Option<::std::string::String>,
    /// <p>The last name of the user.</p>
    pub user_last_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the user returned by the application.</p>
    pub user_status: ::std::option::Option<::std::string::String>,
    /// <p>Contains information about an error returned from a user access task.</p>
    pub task_error: ::std::option::Option<crate::types::TaskError>,
}
impl UserAccessResultItem {
    /// <p>The name of the application.</p>
    pub fn app(&self) -> ::std::option::Option<&str> {
        self.app.as_deref()
    }
    /// <p>The ID of the application tenant.</p>
    pub fn tenant_id(&self) -> ::std::option::Option<&str> {
        self.tenant_id.as_deref()
    }
    /// <p>The display name of the tenant.</p>
    pub fn tenant_display_name(&self) -> ::std::option::Option<&str> {
        self.tenant_display_name.as_deref()
    }
    /// <p>The unique ID of the task.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The status of the user access result item.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code>: The user access task is in progress.</p> </li>
    /// <li> <p> <code>COMPLETED</code>: The user access task completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code>: The user access task failed.</p> </li>
    /// <li> <p> <code>EXPIRED</code>: The user access task expired.</p> </li>
    /// </ul>
    pub fn result_status(&self) -> ::std::option::Option<&crate::types::ResultStatus> {
        self.result_status.as_ref()
    }
    /// <p>The email address of the target user.</p>
    pub fn email(&self) -> ::std::option::Option<&str> {
        self.email.as_deref()
    }
    /// <p>The unique ID of user.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The full name of the user.</p>
    pub fn user_full_name(&self) -> ::std::option::Option<&str> {
        self.user_full_name.as_deref()
    }
    /// <p>The first name of the user.</p>
    pub fn user_first_name(&self) -> ::std::option::Option<&str> {
        self.user_first_name.as_deref()
    }
    /// <p>The last name of the user.</p>
    pub fn user_last_name(&self) -> ::std::option::Option<&str> {
        self.user_last_name.as_deref()
    }
    /// <p>The status of the user returned by the application.</p>
    pub fn user_status(&self) -> ::std::option::Option<&str> {
        self.user_status.as_deref()
    }
    /// <p>Contains information about an error returned from a user access task.</p>
    pub fn task_error(&self) -> ::std::option::Option<&crate::types::TaskError> {
        self.task_error.as_ref()
    }
}
impl ::std::fmt::Debug for UserAccessResultItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserAccessResultItem");
        formatter.field("app", &self.app);
        formatter.field("tenant_id", &self.tenant_id);
        formatter.field("tenant_display_name", &self.tenant_display_name);
        formatter.field("task_id", &self.task_id);
        formatter.field("result_status", &self.result_status);
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("user_id", &"*** Sensitive Data Redacted ***");
        formatter.field("user_full_name", &"*** Sensitive Data Redacted ***");
        formatter.field("user_first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("user_last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("user_status", &self.user_status);
        formatter.field("task_error", &self.task_error);
        formatter.finish()
    }
}
impl UserAccessResultItem {
    /// Creates a new builder-style object to manufacture [`UserAccessResultItem`](crate::types::UserAccessResultItem).
    pub fn builder() -> crate::types::builders::UserAccessResultItemBuilder {
        crate::types::builders::UserAccessResultItemBuilder::default()
    }
}

/// A builder for [`UserAccessResultItem`](crate::types::UserAccessResultItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UserAccessResultItemBuilder {
    pub(crate) app: ::std::option::Option<::std::string::String>,
    pub(crate) tenant_id: ::std::option::Option<::std::string::String>,
    pub(crate) tenant_display_name: ::std::option::Option<::std::string::String>,
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) result_status: ::std::option::Option<crate::types::ResultStatus>,
    pub(crate) email: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_full_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_first_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_last_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_status: ::std::option::Option<::std::string::String>,
    pub(crate) task_error: ::std::option::Option<crate::types::TaskError>,
}
impl UserAccessResultItemBuilder {
    /// <p>The name of the application.</p>
    pub fn app(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_app(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app = input;
        self
    }
    /// <p>The name of the application.</p>
    pub fn get_app(&self) -> &::std::option::Option<::std::string::String> {
        &self.app
    }
    /// <p>The ID of the application tenant.</p>
    pub fn tenant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application tenant.</p>
    pub fn set_tenant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_id = input;
        self
    }
    /// <p>The ID of the application tenant.</p>
    pub fn get_tenant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_id
    }
    /// <p>The display name of the tenant.</p>
    pub fn tenant_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the tenant.</p>
    pub fn set_tenant_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_display_name = input;
        self
    }
    /// <p>The display name of the tenant.</p>
    pub fn get_tenant_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_display_name
    }
    /// <p>The unique ID of the task.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The unique ID of the task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The status of the user access result item.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code>: The user access task is in progress.</p> </li>
    /// <li> <p> <code>COMPLETED</code>: The user access task completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code>: The user access task failed.</p> </li>
    /// <li> <p> <code>EXPIRED</code>: The user access task expired.</p> </li>
    /// </ul>
    pub fn result_status(mut self, input: crate::types::ResultStatus) -> Self {
        self.result_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the user access result item.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code>: The user access task is in progress.</p> </li>
    /// <li> <p> <code>COMPLETED</code>: The user access task completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code>: The user access task failed.</p> </li>
    /// <li> <p> <code>EXPIRED</code>: The user access task expired.</p> </li>
    /// </ul>
    pub fn set_result_status(mut self, input: ::std::option::Option<crate::types::ResultStatus>) -> Self {
        self.result_status = input;
        self
    }
    /// <p>The status of the user access result item.</p>
    /// <p>The following states are possible:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code>: The user access task is in progress.</p> </li>
    /// <li> <p> <code>COMPLETED</code>: The user access task completed successfully.</p> </li>
    /// <li> <p> <code>FAILED</code>: The user access task failed.</p> </li>
    /// <li> <p> <code>EXPIRED</code>: The user access task expired.</p> </li>
    /// </ul>
    pub fn get_result_status(&self) -> &::std::option::Option<crate::types::ResultStatus> {
        &self.result_status
    }
    /// <p>The email address of the target user.</p>
    pub fn email(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address of the target user.</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The email address of the target user.</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::string::String> {
        &self.email
    }
    /// <p>The unique ID of user.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of user.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The unique ID of user.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>The full name of the user.</p>
    pub fn user_full_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_full_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full name of the user.</p>
    pub fn set_user_full_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_full_name = input;
        self
    }
    /// <p>The full name of the user.</p>
    pub fn get_user_full_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_full_name
    }
    /// <p>The first name of the user.</p>
    pub fn user_first_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_first_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The first name of the user.</p>
    pub fn set_user_first_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_first_name = input;
        self
    }
    /// <p>The first name of the user.</p>
    pub fn get_user_first_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_first_name
    }
    /// <p>The last name of the user.</p>
    pub fn user_last_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_last_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The last name of the user.</p>
    pub fn set_user_last_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_last_name = input;
        self
    }
    /// <p>The last name of the user.</p>
    pub fn get_user_last_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_last_name
    }
    /// <p>The status of the user returned by the application.</p>
    pub fn user_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the user returned by the application.</p>
    pub fn set_user_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_status = input;
        self
    }
    /// <p>The status of the user returned by the application.</p>
    pub fn get_user_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_status
    }
    /// <p>Contains information about an error returned from a user access task.</p>
    pub fn task_error(mut self, input: crate::types::TaskError) -> Self {
        self.task_error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about an error returned from a user access task.</p>
    pub fn set_task_error(mut self, input: ::std::option::Option<crate::types::TaskError>) -> Self {
        self.task_error = input;
        self
    }
    /// <p>Contains information about an error returned from a user access task.</p>
    pub fn get_task_error(&self) -> &::std::option::Option<crate::types::TaskError> {
        &self.task_error
    }
    /// Consumes the builder and constructs a [`UserAccessResultItem`](crate::types::UserAccessResultItem).
    pub fn build(self) -> crate::types::UserAccessResultItem {
        crate::types::UserAccessResultItem {
            app: self.app,
            tenant_id: self.tenant_id,
            tenant_display_name: self.tenant_display_name,
            task_id: self.task_id,
            result_status: self.result_status,
            email: self.email,
            user_id: self.user_id,
            user_full_name: self.user_full_name,
            user_first_name: self.user_first_name,
            user_last_name: self.user_last_name,
            user_status: self.user_status,
            task_error: self.task_error,
        }
    }
}
impl ::std::fmt::Debug for UserAccessResultItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserAccessResultItemBuilder");
        formatter.field("app", &self.app);
        formatter.field("tenant_id", &self.tenant_id);
        formatter.field("tenant_display_name", &self.tenant_display_name);
        formatter.field("task_id", &self.task_id);
        formatter.field("result_status", &self.result_status);
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.field("user_id", &"*** Sensitive Data Redacted ***");
        formatter.field("user_full_name", &"*** Sensitive Data Redacted ***");
        formatter.field("user_first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("user_last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("user_status", &self.user_status);
        formatter.field("task_error", &self.task_error);
        formatter.finish()
    }
}
