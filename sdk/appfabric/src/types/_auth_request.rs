// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains authorization request information, which is required for Amazon Web Services AppFabric to get the OAuth2 access token for an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AuthRequest {
    /// <p>The redirect URL that is specified in the AuthURL and the application client.</p>
    pub redirect_uri: ::std::option::Option<::std::string::String>,
    /// <p>The authorization code returned by the application after permission is granted in the application OAuth page (after clicking on the AuthURL).</p>
    pub code: ::std::option::Option<::std::string::String>,
}
impl AuthRequest {
    /// <p>The redirect URL that is specified in the AuthURL and the application client.</p>
    pub fn redirect_uri(&self) -> ::std::option::Option<&str> {
        self.redirect_uri.as_deref()
    }
    /// <p>The authorization code returned by the application after permission is granted in the application OAuth page (after clicking on the AuthURL).</p>
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }
}
impl ::std::fmt::Debug for AuthRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AuthRequest");
        formatter.field("redirect_uri", &self.redirect_uri);
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AuthRequest {
    /// Creates a new builder-style object to manufacture [`AuthRequest`](crate::types::AuthRequest).
    pub fn builder() -> crate::types::builders::AuthRequestBuilder {
        crate::types::builders::AuthRequestBuilder::default()
    }
}

/// A builder for [`AuthRequest`](crate::types::AuthRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AuthRequestBuilder {
    pub(crate) redirect_uri: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
}
impl AuthRequestBuilder {
    /// <p>The redirect URL that is specified in the AuthURL and the application client.</p>
    pub fn redirect_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.redirect_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The redirect URL that is specified in the AuthURL and the application client.</p>
    pub fn set_redirect_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.redirect_uri = input;
        self
    }
    /// <p>The redirect URL that is specified in the AuthURL and the application client.</p>
    pub fn get_redirect_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.redirect_uri
    }
    /// <p>The authorization code returned by the application after permission is granted in the application OAuth page (after clicking on the AuthURL).</p>
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authorization code returned by the application after permission is granted in the application OAuth page (after clicking on the AuthURL).</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The authorization code returned by the application after permission is granted in the application OAuth page (after clicking on the AuthURL).</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// Consumes the builder and constructs a [`AuthRequest`](crate::types::AuthRequest).
    pub fn build(self) -> crate::types::AuthRequest {
        crate::types::AuthRequest {
            redirect_uri: self.redirect_uri,
            code: self.code,
        }
    }
}
impl ::std::fmt::Debug for AuthRequestBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AuthRequestBuilder");
        formatter.field("redirect_uri", &self.redirect_uri);
        formatter.field("code", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
