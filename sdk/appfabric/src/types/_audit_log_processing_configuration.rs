// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an audit log processing configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuditLogProcessingConfiguration {
    /// <p>The event schema in which the audit logs need to be formatted.</p>
    pub schema: ::std::option::Option<crate::types::Schema>,
    /// <p>The format in which the audit logs need to be formatted.</p>
    pub format: ::std::option::Option<crate::types::Format>,
}
impl AuditLogProcessingConfiguration {
    /// <p>The event schema in which the audit logs need to be formatted.</p>
    pub fn schema(&self) -> ::std::option::Option<&crate::types::Schema> {
        self.schema.as_ref()
    }
    /// <p>The format in which the audit logs need to be formatted.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::Format> {
        self.format.as_ref()
    }
}
impl AuditLogProcessingConfiguration {
    /// Creates a new builder-style object to manufacture [`AuditLogProcessingConfiguration`](crate::types::AuditLogProcessingConfiguration).
    pub fn builder() -> crate::types::builders::AuditLogProcessingConfigurationBuilder {
        crate::types::builders::AuditLogProcessingConfigurationBuilder::default()
    }
}

/// A builder for [`AuditLogProcessingConfiguration`](crate::types::AuditLogProcessingConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuditLogProcessingConfigurationBuilder {
    pub(crate) schema: ::std::option::Option<crate::types::Schema>,
    pub(crate) format: ::std::option::Option<crate::types::Format>,
}
impl AuditLogProcessingConfigurationBuilder {
    /// <p>The event schema in which the audit logs need to be formatted.</p>
    pub fn schema(mut self, input: crate::types::Schema) -> Self {
        self.schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event schema in which the audit logs need to be formatted.</p>
    pub fn set_schema(mut self, input: ::std::option::Option<crate::types::Schema>) -> Self {
        self.schema = input;
        self
    }
    /// <p>The event schema in which the audit logs need to be formatted.</p>
    pub fn get_schema(&self) -> &::std::option::Option<crate::types::Schema> {
        &self.schema
    }
    /// <p>The format in which the audit logs need to be formatted.</p>
    pub fn format(mut self, input: crate::types::Format) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format in which the audit logs need to be formatted.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::Format>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format in which the audit logs need to be formatted.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::Format> {
        &self.format
    }
    /// Consumes the builder and constructs a [`AuditLogProcessingConfiguration`](crate::types::AuditLogProcessingConfiguration).
    pub fn build(self) -> crate::types::AuditLogProcessingConfiguration {
        crate::types::AuditLogProcessingConfiguration {
            schema: self.schema,
            format: self.format,
        }
    }
}
