// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a user access task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserAccessTaskItem {
    /// <p>The name of the application.</p>
    pub app: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the application tenant.</p>
    pub tenant_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID of the task.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>Error from the task, if any.</p>
    pub error: ::std::option::Option<crate::types::TaskError>,
}
impl UserAccessTaskItem {
    /// <p>The name of the application.</p>
    pub fn app(&self) -> ::std::option::Option<&str> {
        self.app.as_deref()
    }
    /// <p>The ID of the application tenant.</p>
    pub fn tenant_id(&self) -> ::std::option::Option<&str> {
        self.tenant_id.as_deref()
    }
    /// <p>The unique ID of the task.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>Error from the task, if any.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::TaskError> {
        self.error.as_ref()
    }
}
impl UserAccessTaskItem {
    /// Creates a new builder-style object to manufacture [`UserAccessTaskItem`](crate::types::UserAccessTaskItem).
    pub fn builder() -> crate::types::builders::UserAccessTaskItemBuilder {
        crate::types::builders::UserAccessTaskItemBuilder::default()
    }
}

/// A builder for [`UserAccessTaskItem`](crate::types::UserAccessTaskItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserAccessTaskItemBuilder {
    pub(crate) app: ::std::option::Option<::std::string::String>,
    pub(crate) tenant_id: ::std::option::Option<::std::string::String>,
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) error: ::std::option::Option<crate::types::TaskError>,
}
impl UserAccessTaskItemBuilder {
    /// <p>The name of the application.</p>
    pub fn app(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_app(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app = input;
        self
    }
    /// <p>The name of the application.</p>
    pub fn get_app(&self) -> &::std::option::Option<::std::string::String> {
        &self.app
    }
    /// <p>The ID of the application tenant.</p>
    pub fn tenant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application tenant.</p>
    pub fn set_tenant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_id = input;
        self
    }
    /// <p>The ID of the application tenant.</p>
    pub fn get_tenant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_id
    }
    /// <p>The unique ID of the task.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the task.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The unique ID of the task.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>Error from the task, if any.</p>
    pub fn error(mut self, input: crate::types::TaskError) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Error from the task, if any.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::TaskError>) -> Self {
        self.error = input;
        self
    }
    /// <p>Error from the task, if any.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::TaskError> {
        &self.error
    }
    /// Consumes the builder and constructs a [`UserAccessTaskItem`](crate::types::UserAccessTaskItem).
    pub fn build(self) -> crate::types::UserAccessTaskItem {
        crate::types::UserAccessTaskItem {
            app: self.app,
            tenant_id: self.tenant_id,
            task_id: self.task_id,
            error: self.error,
        }
    }
}
