// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains OAuth2 client credential information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Oauth2Credential {
    /// <p>The client ID of the client application.</p>
    pub client_id: ::std::option::Option<::std::string::String>,
    /// <p>The client secret of the client application.</p>
    pub client_secret: ::std::option::Option<::std::string::String>,
}
impl Oauth2Credential {
    /// <p>The client ID of the client application.</p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>The client secret of the client application.</p>
    pub fn client_secret(&self) -> ::std::option::Option<&str> {
        self.client_secret.as_deref()
    }
}
impl ::std::fmt::Debug for Oauth2Credential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Oauth2Credential");
        formatter.field("client_id", &self.client_id);
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Oauth2Credential {
    /// Creates a new builder-style object to manufacture [`Oauth2Credential`](crate::types::Oauth2Credential).
    pub fn builder() -> crate::types::builders::Oauth2CredentialBuilder {
        crate::types::builders::Oauth2CredentialBuilder::default()
    }
}

/// A builder for [`Oauth2Credential`](crate::types::Oauth2Credential).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct Oauth2CredentialBuilder {
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_secret: ::std::option::Option<::std::string::String>,
}
impl Oauth2CredentialBuilder {
    /// <p>The client ID of the client application.</p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client ID of the client application.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The client ID of the client application.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p>The client secret of the client application.</p>
    pub fn client_secret(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_secret = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client secret of the client application.</p>
    pub fn set_client_secret(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_secret = input;
        self
    }
    /// <p>The client secret of the client application.</p>
    pub fn get_client_secret(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_secret
    }
    /// Consumes the builder and constructs a [`Oauth2Credential`](crate::types::Oauth2Credential).
    pub fn build(self) -> crate::types::Oauth2Credential {
        crate::types::Oauth2Credential {
            client_id: self.client_id,
            client_secret: self.client_secret,
        }
    }
}
impl ::std::fmt::Debug for Oauth2CredentialBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Oauth2CredentialBuilder");
        formatter.field("client_id", &self.client_id);
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
