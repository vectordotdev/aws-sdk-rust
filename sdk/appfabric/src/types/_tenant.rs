// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an application tenant.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Tenant {
    /// <p>The ID of the application tenant.</p>
    pub tenant_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The display name of the tenant.</p>
    pub tenant_display_name: ::std::option::Option<::std::string::String>,
}
impl Tenant {
    /// <p>The ID of the application tenant.</p>
    pub fn tenant_identifier(&self) -> ::std::option::Option<&str> {
        self.tenant_identifier.as_deref()
    }
    /// <p>The display name of the tenant.</p>
    pub fn tenant_display_name(&self) -> ::std::option::Option<&str> {
        self.tenant_display_name.as_deref()
    }
}
impl Tenant {
    /// Creates a new builder-style object to manufacture [`Tenant`](crate::types::Tenant).
    pub fn builder() -> crate::types::builders::TenantBuilder {
        crate::types::builders::TenantBuilder::default()
    }
}

/// A builder for [`Tenant`](crate::types::Tenant).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TenantBuilder {
    pub(crate) tenant_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) tenant_display_name: ::std::option::Option<::std::string::String>,
}
impl TenantBuilder {
    /// <p>The ID of the application tenant.</p>
    pub fn tenant_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application tenant.</p>
    pub fn set_tenant_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_identifier = input;
        self
    }
    /// <p>The ID of the application tenant.</p>
    pub fn get_tenant_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_identifier
    }
    /// <p>The display name of the tenant.</p>
    pub fn tenant_display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the tenant.</p>
    pub fn set_tenant_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_display_name = input;
        self
    }
    /// <p>The display name of the tenant.</p>
    pub fn get_tenant_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_display_name
    }
    /// Consumes the builder and constructs a [`Tenant`](crate::types::Tenant).
    pub fn build(self) -> crate::types::Tenant {
        crate::types::Tenant {
            tenant_identifier: self.tenant_identifier,
            tenant_display_name: self.tenant_display_name,
        }
    }
}
