// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A JSON object that contains one or more of the following fields:</p>
/// <ul>
/// <li> <p> <code>ListTapesInput$Limit</code> </p> </li>
/// <li> <p> <code>ListTapesInput$Marker</code> </p> </li>
/// <li> <p> <code>ListTapesInput$TapeARNs</code> </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTapesInput {
    /// <p>The Amazon Resource Name (ARN) of each of the tapes you want to list. If you don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.</p>
    pub tape_ar_ns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A string that indicates the position at which to begin the returned list of tapes.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>An optional number limit for the tapes in the list returned by this call.</p>
    pub limit: ::std::option::Option<i32>,
}
impl ListTapesInput {
    /// <p>The Amazon Resource Name (ARN) of each of the tapes you want to list. If you don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.</p>
    pub fn tape_ar_ns(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.tape_ar_ns.as_deref()
    }
    /// <p>A string that indicates the position at which to begin the returned list of tapes.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>An optional number limit for the tapes in the list returned by this call.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
}
impl ListTapesInput {
    /// Creates a new builder-style object to manufacture [`ListTapesInput`](crate::operation::list_tapes::ListTapesInput).
    pub fn builder() -> crate::operation::list_tapes::builders::ListTapesInputBuilder {
        crate::operation::list_tapes::builders::ListTapesInputBuilder::default()
    }
}

/// A builder for [`ListTapesInput`](crate::operation::list_tapes::ListTapesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTapesInputBuilder {
    pub(crate) tape_ar_ns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
}
impl ListTapesInputBuilder {
    /// Appends an item to `tape_ar_ns`.
    ///
    /// To override the contents of this collection use [`set_tape_ar_ns`](Self::set_tape_ar_ns).
    ///
    /// <p>The Amazon Resource Name (ARN) of each of the tapes you want to list. If you don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.</p>
    pub fn tape_ar_ns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tape_ar_ns.unwrap_or_default();
        v.push(input.into());
        self.tape_ar_ns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of each of the tapes you want to list. If you don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.</p>
    pub fn set_tape_ar_ns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tape_ar_ns = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of each of the tapes you want to list. If you don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.</p>
    pub fn get_tape_ar_ns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tape_ar_ns
    }
    /// <p>A string that indicates the position at which to begin the returned list of tapes.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string that indicates the position at which to begin the returned list of tapes.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>A string that indicates the position at which to begin the returned list of tapes.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>An optional number limit for the tapes in the list returned by this call.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional number limit for the tapes in the list returned by this call.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>An optional number limit for the tapes in the list returned by this call.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// Consumes the builder and constructs a [`ListTapesInput`](crate::operation::list_tapes::ListTapesInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_tapes::ListTapesInput, ::aws_smithy_http::operation::error::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_tapes::ListTapesInput {
            tape_ar_ns: self.tape_ar_ns,
            marker: self.marker,
            limit: self.limit,
        })
    }
}
