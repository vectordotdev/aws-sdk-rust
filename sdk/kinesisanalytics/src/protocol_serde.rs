// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_add_application_cloud_watch_logging_option;

pub(crate) mod shape_add_application_input;

pub(crate) mod shape_add_application_input_processing_configuration;

pub(crate) mod shape_add_application_output;

pub(crate) mod shape_add_application_reference_data_source;

pub(crate) mod shape_create_application;

pub(crate) mod shape_delete_application;

pub(crate) mod shape_delete_application_cloud_watch_logging_option;

pub(crate) mod shape_delete_application_input_processing_configuration;

pub(crate) mod shape_delete_application_output;

pub(crate) mod shape_delete_application_reference_data_source;

pub(crate) mod shape_describe_application;

pub(crate) mod shape_discover_input_schema;

pub(crate) mod shape_list_applications;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_start_application;

pub(crate) mod shape_stop_application;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_application;

pub(crate) mod shape_add_application_cloud_watch_logging_option_input;

pub(crate) mod shape_add_application_input_input;

pub(crate) mod shape_add_application_input_processing_configuration_input;

pub(crate) mod shape_add_application_output_input;

pub(crate) mod shape_add_application_reference_data_source_input;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_code_validation_exception;

pub(crate) mod shape_concurrent_modification_exception;

pub(crate) mod shape_create_application_input;

pub(crate) mod shape_delete_application_cloud_watch_logging_option_input;

pub(crate) mod shape_delete_application_input;

pub(crate) mod shape_delete_application_input_processing_configuration_input;

pub(crate) mod shape_delete_application_output_input;

pub(crate) mod shape_delete_application_reference_data_source_input;

pub(crate) mod shape_describe_application_input;

pub(crate) mod shape_discover_input_schema_input;

pub(crate) mod shape_invalid_application_configuration_exception;

pub(crate) mod shape_invalid_argument_exception;

pub(crate) mod shape_limit_exceeded_exception;

pub(crate) mod shape_list_applications_input;

pub(crate) mod shape_list_tags_for_resource_input;

pub(crate) mod shape_resource_in_use_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_resource_provisioned_throughput_exceeded_exception;

pub(crate) mod shape_service_unavailable_exception;

pub(crate) mod shape_start_application_input;

pub(crate) mod shape_stop_application_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_too_many_tags_exception;

pub(crate) mod shape_unable_to_detect_schema_exception;

pub(crate) mod shape_unsupported_operation_exception;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_update_application_input;

pub(crate) mod shape_application_detail;

pub(crate) mod shape_application_summaries;

pub(crate) mod shape_application_summary;

pub(crate) mod shape_application_update;

pub(crate) mod shape_cloud_watch_logging_option;

pub(crate) mod shape_input;

pub(crate) mod shape_input_configuration;

pub(crate) mod shape_input_processing_configuration;

pub(crate) mod shape_input_starting_position_configuration;

pub(crate) mod shape_output;

pub(crate) mod shape_parsed_input_records;

pub(crate) mod shape_processed_input_records;

pub(crate) mod shape_raw_input_records;

pub(crate) mod shape_reference_data_source;

pub(crate) mod shape_s3_configuration;

pub(crate) mod shape_source_schema;

pub(crate) mod shape_tag;

pub(crate) mod shape_tags;

pub(crate) mod shape_cloud_watch_logging_option_descriptions;

pub(crate) mod shape_cloud_watch_logging_option_update;

pub(crate) mod shape_destination_schema;

pub(crate) mod shape_input_descriptions;

pub(crate) mod shape_input_lambda_processor;

pub(crate) mod shape_input_parallelism;

pub(crate) mod shape_input_update;

pub(crate) mod shape_kinesis_firehose_input;

pub(crate) mod shape_kinesis_firehose_output;

pub(crate) mod shape_kinesis_streams_input;

pub(crate) mod shape_kinesis_streams_output;

pub(crate) mod shape_lambda_output;

pub(crate) mod shape_output_descriptions;

pub(crate) mod shape_output_update;

pub(crate) mod shape_parsed_input_record;

pub(crate) mod shape_record_columns;

pub(crate) mod shape_record_format;

pub(crate) mod shape_reference_data_source_descriptions;

pub(crate) mod shape_reference_data_source_update;

pub(crate) mod shape_s3_reference_data_source;

pub(crate) mod shape_cloud_watch_logging_option_description;

pub(crate) mod shape_input_description;

pub(crate) mod shape_input_parallelism_update;

pub(crate) mod shape_input_processing_configuration_update;

pub(crate) mod shape_input_schema_update;

pub(crate) mod shape_kinesis_firehose_input_update;

pub(crate) mod shape_kinesis_firehose_output_update;

pub(crate) mod shape_kinesis_streams_input_update;

pub(crate) mod shape_kinesis_streams_output_update;

pub(crate) mod shape_lambda_output_update;

pub(crate) mod shape_mapping_parameters;

pub(crate) mod shape_output_description;

pub(crate) mod shape_record_column;

pub(crate) mod shape_reference_data_source_description;

pub(crate) mod shape_s3_reference_data_source_update;

pub(crate) mod shape_csv_mapping_parameters;

pub(crate) mod shape_in_app_stream_names;

pub(crate) mod shape_input_lambda_processor_update;

pub(crate) mod shape_input_processing_configuration_description;

pub(crate) mod shape_json_mapping_parameters;

pub(crate) mod shape_kinesis_firehose_input_description;

pub(crate) mod shape_kinesis_firehose_output_description;

pub(crate) mod shape_kinesis_streams_input_description;

pub(crate) mod shape_kinesis_streams_output_description;

pub(crate) mod shape_lambda_output_description;

pub(crate) mod shape_s3_reference_data_source_description;

pub(crate) mod shape_input_lambda_processor_description;
