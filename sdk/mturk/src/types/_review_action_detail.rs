// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Both the AssignmentReviewReport and the HITReviewReport elements contains the ReviewActionDetail data structure. This structure is returned multiple times for each action specified in the Review Policy. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReviewActionDetail {
    /// <p>The unique identifier for the action.</p>
    pub action_id: ::std::option::Option<::std::string::String>,
    /// <p> The nature of the action itself. The Review Policy is responsible for examining the HIT and Assignments, emitting results, and deciding which other actions will be necessary. </p>
    pub action_name: ::std::option::Option<::std::string::String>,
    /// <p> The specific HITId or AssignmentID targeted by the action.</p>
    pub target_id: ::std::option::Option<::std::string::String>,
    /// <p> The type of object in TargetId.</p>
    pub target_type: ::std::option::Option<::std::string::String>,
    /// <p> The current disposition of the action: INTENDED, SUCCEEDED, FAILED, or CANCELLED. </p>
    pub status: ::std::option::Option<crate::types::ReviewActionStatus>,
    /// <p> The date when the action was completed.</p>
    pub complete_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> A description of the outcome of the review.</p>
    pub result: ::std::option::Option<::std::string::String>,
    /// <p> Present only when the Results have a FAILED Status.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
}
impl ReviewActionDetail {
    /// <p>The unique identifier for the action.</p>
    pub fn action_id(&self) -> ::std::option::Option<&str> {
        self.action_id.as_deref()
    }
    /// <p> The nature of the action itself. The Review Policy is responsible for examining the HIT and Assignments, emitting results, and deciding which other actions will be necessary. </p>
    pub fn action_name(&self) -> ::std::option::Option<&str> {
        self.action_name.as_deref()
    }
    /// <p> The specific HITId or AssignmentID targeted by the action.</p>
    pub fn target_id(&self) -> ::std::option::Option<&str> {
        self.target_id.as_deref()
    }
    /// <p> The type of object in TargetId.</p>
    pub fn target_type(&self) -> ::std::option::Option<&str> {
        self.target_type.as_deref()
    }
    /// <p> The current disposition of the action: INTENDED, SUCCEEDED, FAILED, or CANCELLED. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ReviewActionStatus> {
        self.status.as_ref()
    }
    /// <p> The date when the action was completed.</p>
    pub fn complete_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.complete_time.as_ref()
    }
    /// <p> A description of the outcome of the review.</p>
    pub fn result(&self) -> ::std::option::Option<&str> {
        self.result.as_deref()
    }
    /// <p> Present only when the Results have a FAILED Status.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
}
impl ReviewActionDetail {
    /// Creates a new builder-style object to manufacture [`ReviewActionDetail`](crate::types::ReviewActionDetail).
    pub fn builder() -> crate::types::builders::ReviewActionDetailBuilder {
        crate::types::builders::ReviewActionDetailBuilder::default()
    }
}

/// A builder for [`ReviewActionDetail`](crate::types::ReviewActionDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReviewActionDetailBuilder {
    pub(crate) action_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_name: ::std::option::Option<::std::string::String>,
    pub(crate) target_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_type: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ReviewActionStatus>,
    pub(crate) complete_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) result: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
}
impl ReviewActionDetailBuilder {
    /// <p>The unique identifier for the action.</p>
    pub fn action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the action.</p>
    pub fn set_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_id = input;
        self
    }
    /// <p>The unique identifier for the action.</p>
    pub fn get_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_id
    }
    /// <p> The nature of the action itself. The Review Policy is responsible for examining the HIT and Assignments, emitting results, and deciding which other actions will be necessary. </p>
    pub fn action_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The nature of the action itself. The Review Policy is responsible for examining the HIT and Assignments, emitting results, and deciding which other actions will be necessary. </p>
    pub fn set_action_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// <p> The nature of the action itself. The Review Policy is responsible for examining the HIT and Assignments, emitting results, and deciding which other actions will be necessary. </p>
    pub fn get_action_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_name
    }
    /// <p> The specific HITId or AssignmentID targeted by the action.</p>
    pub fn target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The specific HITId or AssignmentID targeted by the action.</p>
    pub fn set_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_id = input;
        self
    }
    /// <p> The specific HITId or AssignmentID targeted by the action.</p>
    pub fn get_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_id
    }
    /// <p> The type of object in TargetId.</p>
    pub fn target_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The type of object in TargetId.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_type = input;
        self
    }
    /// <p> The type of object in TargetId.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_type
    }
    /// <p> The current disposition of the action: INTENDED, SUCCEEDED, FAILED, or CANCELLED. </p>
    pub fn status(mut self, input: crate::types::ReviewActionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The current disposition of the action: INTENDED, SUCCEEDED, FAILED, or CANCELLED. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ReviewActionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The current disposition of the action: INTENDED, SUCCEEDED, FAILED, or CANCELLED. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ReviewActionStatus> {
        &self.status
    }
    /// <p> The date when the action was completed.</p>
    pub fn complete_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.complete_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> The date when the action was completed.</p>
    pub fn set_complete_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.complete_time = input;
        self
    }
    /// <p> The date when the action was completed.</p>
    pub fn get_complete_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.complete_time
    }
    /// <p> A description of the outcome of the review.</p>
    pub fn result(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.result = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A description of the outcome of the review.</p>
    pub fn set_result(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.result = input;
        self
    }
    /// <p> A description of the outcome of the review.</p>
    pub fn get_result(&self) -> &::std::option::Option<::std::string::String> {
        &self.result
    }
    /// <p> Present only when the Results have a FAILED Status.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Present only when the Results have a FAILED Status.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p> Present only when the Results have a FAILED Status.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// Consumes the builder and constructs a [`ReviewActionDetail`](crate::types::ReviewActionDetail).
    pub fn build(self) -> crate::types::ReviewActionDetail {
        crate::types::ReviewActionDetail {
            action_id: self.action_id,
            action_name: self.action_name,
            target_id: self.target_id,
            target_type: self.target_type,
            status: self.status,
            complete_time: self.complete_time,
            result: self.result,
            error_code: self.error_code,
        }
    }
}
