// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The WorkerBlock data structure represents a Worker who has been blocked. It has two elements: the WorkerId and the Reason for the block. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WorkerBlock {
    /// <p> The ID of the Worker who accepted the HIT.</p>
    pub worker_id: ::std::option::Option<::std::string::String>,
    /// <p> A message explaining the reason the Worker was blocked. </p>
    pub reason: ::std::option::Option<::std::string::String>,
}
impl WorkerBlock {
    /// <p> The ID of the Worker who accepted the HIT.</p>
    pub fn worker_id(&self) -> ::std::option::Option<&str> {
        self.worker_id.as_deref()
    }
    /// <p> A message explaining the reason the Worker was blocked. </p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
}
impl WorkerBlock {
    /// Creates a new builder-style object to manufacture [`WorkerBlock`](crate::types::WorkerBlock).
    pub fn builder() -> crate::types::builders::WorkerBlockBuilder {
        crate::types::builders::WorkerBlockBuilder::default()
    }
}

/// A builder for [`WorkerBlock`](crate::types::WorkerBlock).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WorkerBlockBuilder {
    pub(crate) worker_id: ::std::option::Option<::std::string::String>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
}
impl WorkerBlockBuilder {
    /// <p> The ID of the Worker who accepted the HIT.</p>
    pub fn worker_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.worker_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID of the Worker who accepted the HIT.</p>
    pub fn set_worker_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.worker_id = input;
        self
    }
    /// <p> The ID of the Worker who accepted the HIT.</p>
    pub fn get_worker_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.worker_id
    }
    /// <p> A message explaining the reason the Worker was blocked. </p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A message explaining the reason the Worker was blocked. </p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p> A message explaining the reason the Worker was blocked. </p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// Consumes the builder and constructs a [`WorkerBlock`](crate::types::WorkerBlock).
    pub fn build(self) -> crate::types::WorkerBlock {
        crate::types::WorkerBlock {
            worker_id: self.worker_id,
            reason: self.reason,
        }
    }
}
