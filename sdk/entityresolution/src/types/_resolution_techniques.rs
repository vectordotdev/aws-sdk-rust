// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object which defines the <code>resolutionType</code> and the <code>ruleBasedProperties</code> </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResolutionTechniques {
    /// <p>There are two types of matching, <code>RULE_MATCHING</code> and <code>ML_MATCHING</code> </p>
    pub resolution_type: ::std::option::Option<crate::types::ResolutionType>,
    /// <p>An object which defines the list of matching rules to run and has a field <code>Rules</code>, which is a list of rule objects.</p>
    pub rule_based_properties: ::std::option::Option<crate::types::RuleBasedProperties>,
}
impl ResolutionTechniques {
    /// <p>There are two types of matching, <code>RULE_MATCHING</code> and <code>ML_MATCHING</code> </p>
    pub fn resolution_type(&self) -> ::std::option::Option<&crate::types::ResolutionType> {
        self.resolution_type.as_ref()
    }
    /// <p>An object which defines the list of matching rules to run and has a field <code>Rules</code>, which is a list of rule objects.</p>
    pub fn rule_based_properties(&self) -> ::std::option::Option<&crate::types::RuleBasedProperties> {
        self.rule_based_properties.as_ref()
    }
}
impl ResolutionTechniques {
    /// Creates a new builder-style object to manufacture [`ResolutionTechniques`](crate::types::ResolutionTechniques).
    pub fn builder() -> crate::types::builders::ResolutionTechniquesBuilder {
        crate::types::builders::ResolutionTechniquesBuilder::default()
    }
}

/// A builder for [`ResolutionTechniques`](crate::types::ResolutionTechniques).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResolutionTechniquesBuilder {
    pub(crate) resolution_type: ::std::option::Option<crate::types::ResolutionType>,
    pub(crate) rule_based_properties: ::std::option::Option<crate::types::RuleBasedProperties>,
}
impl ResolutionTechniquesBuilder {
    /// <p>There are two types of matching, <code>RULE_MATCHING</code> and <code>ML_MATCHING</code> </p>
    pub fn resolution_type(mut self, input: crate::types::ResolutionType) -> Self {
        self.resolution_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>There are two types of matching, <code>RULE_MATCHING</code> and <code>ML_MATCHING</code> </p>
    pub fn set_resolution_type(mut self, input: ::std::option::Option<crate::types::ResolutionType>) -> Self {
        self.resolution_type = input;
        self
    }
    /// <p>There are two types of matching, <code>RULE_MATCHING</code> and <code>ML_MATCHING</code> </p>
    pub fn get_resolution_type(&self) -> &::std::option::Option<crate::types::ResolutionType> {
        &self.resolution_type
    }
    /// <p>An object which defines the list of matching rules to run and has a field <code>Rules</code>, which is a list of rule objects.</p>
    pub fn rule_based_properties(mut self, input: crate::types::RuleBasedProperties) -> Self {
        self.rule_based_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object which defines the list of matching rules to run and has a field <code>Rules</code>, which is a list of rule objects.</p>
    pub fn set_rule_based_properties(mut self, input: ::std::option::Option<crate::types::RuleBasedProperties>) -> Self {
        self.rule_based_properties = input;
        self
    }
    /// <p>An object which defines the list of matching rules to run and has a field <code>Rules</code>, which is a list of rule objects.</p>
    pub fn get_rule_based_properties(&self) -> &::std::option::Option<crate::types::RuleBasedProperties> {
        &self.rule_based_properties
    }
    /// Consumes the builder and constructs a [`ResolutionTechniques`](crate::types::ResolutionTechniques).
    pub fn build(self) -> crate::types::ResolutionTechniques {
        crate::types::ResolutionTechniques {
            resolution_type: self.resolution_type,
            rule_based_properties: self.rule_based_properties,
        }
    }
}
