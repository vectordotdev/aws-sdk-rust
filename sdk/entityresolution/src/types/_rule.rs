// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing <code>RuleName</code>, and <code>MatchingKeys</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Rule {
    /// <p>A name for the matching rule.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>MatchingKeys</code>. The <code>MatchingKeys</code> must have been defined in the <code>SchemaMapping</code>. Two records are considered to match according to this rule if all of the <code>MatchingKeys</code> match.</p>
    pub matching_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl Rule {
    /// <p>A name for the matching rule.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>A list of <code>MatchingKeys</code>. The <code>MatchingKeys</code> must have been defined in the <code>SchemaMapping</code>. Two records are considered to match according to this rule if all of the <code>MatchingKeys</code> match.</p>
    pub fn matching_keys(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.matching_keys.as_deref()
    }
}
impl Rule {
    /// Creates a new builder-style object to manufacture [`Rule`](crate::types::Rule).
    pub fn builder() -> crate::types::builders::RuleBuilder {
        crate::types::builders::RuleBuilder::default()
    }
}

/// A builder for [`Rule`](crate::types::Rule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuleBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) matching_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RuleBuilder {
    /// <p>A name for the matching rule.</p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the matching rule.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>A name for the matching rule.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// Appends an item to `matching_keys`.
    ///
    /// To override the contents of this collection use [`set_matching_keys`](Self::set_matching_keys).
    ///
    /// <p>A list of <code>MatchingKeys</code>. The <code>MatchingKeys</code> must have been defined in the <code>SchemaMapping</code>. Two records are considered to match according to this rule if all of the <code>MatchingKeys</code> match.</p>
    pub fn matching_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.matching_keys.unwrap_or_default();
        v.push(input.into());
        self.matching_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>MatchingKeys</code>. The <code>MatchingKeys</code> must have been defined in the <code>SchemaMapping</code>. Two records are considered to match according to this rule if all of the <code>MatchingKeys</code> match.</p>
    pub fn set_matching_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.matching_keys = input;
        self
    }
    /// <p>A list of <code>MatchingKeys</code>. The <code>MatchingKeys</code> must have been defined in the <code>SchemaMapping</code>. Two records are considered to match according to this rule if all of the <code>MatchingKeys</code> match.</p>
    pub fn get_matching_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.matching_keys
    }
    /// Consumes the builder and constructs a [`Rule`](crate::types::Rule).
    pub fn build(self) -> crate::types::Rule {
        crate::types::Rule {
            rule_name: self.rule_name,
            matching_keys: self.matching_keys,
        }
    }
}
