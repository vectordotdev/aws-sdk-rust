// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of <code>OutputAttribute</code> objects, each of which have the fields Name and Hashed. Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutputSource {
    /// <p>The S3 path to which Entity Resolution will write the output table.</p>
    pub output_s3_path: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>OutputAttribute</code> objects, each of which have the fields Name and Hashed. Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.</p>
    pub output: ::std::option::Option<::std::vec::Vec<crate::types::OutputAttribute>>,
    /// <p>Customer KMS ARN for encryption at rest. If not provided, system will use an Entity Resolution managed KMS key.</p>
    pub kms_arn: ::std::option::Option<::std::string::String>,
    /// <p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>
    pub apply_normalization: ::std::option::Option<bool>,
}
impl OutputSource {
    /// <p>The S3 path to which Entity Resolution will write the output table.</p>
    pub fn output_s3_path(&self) -> ::std::option::Option<&str> {
        self.output_s3_path.as_deref()
    }
    /// <p>A list of <code>OutputAttribute</code> objects, each of which have the fields Name and Hashed. Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.</p>
    pub fn output(&self) -> ::std::option::Option<&[crate::types::OutputAttribute]> {
        self.output.as_deref()
    }
    /// <p>Customer KMS ARN for encryption at rest. If not provided, system will use an Entity Resolution managed KMS key.</p>
    pub fn kms_arn(&self) -> ::std::option::Option<&str> {
        self.kms_arn.as_deref()
    }
    /// <p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>
    pub fn apply_normalization(&self) -> ::std::option::Option<bool> {
        self.apply_normalization
    }
}
impl OutputSource {
    /// Creates a new builder-style object to manufacture [`OutputSource`](crate::types::OutputSource).
    pub fn builder() -> crate::types::builders::OutputSourceBuilder {
        crate::types::builders::OutputSourceBuilder::default()
    }
}

/// A builder for [`OutputSource`](crate::types::OutputSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OutputSourceBuilder {
    pub(crate) output_s3_path: ::std::option::Option<::std::string::String>,
    pub(crate) output: ::std::option::Option<::std::vec::Vec<crate::types::OutputAttribute>>,
    pub(crate) kms_arn: ::std::option::Option<::std::string::String>,
    pub(crate) apply_normalization: ::std::option::Option<bool>,
}
impl OutputSourceBuilder {
    /// <p>The S3 path to which Entity Resolution will write the output table.</p>
    pub fn output_s3_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_s3_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 path to which Entity Resolution will write the output table.</p>
    pub fn set_output_s3_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_s3_path = input;
        self
    }
    /// <p>The S3 path to which Entity Resolution will write the output table.</p>
    pub fn get_output_s3_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_s3_path
    }
    /// Appends an item to `output`.
    ///
    /// To override the contents of this collection use [`set_output`](Self::set_output).
    ///
    /// <p>A list of <code>OutputAttribute</code> objects, each of which have the fields Name and Hashed. Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.</p>
    pub fn output(mut self, input: crate::types::OutputAttribute) -> Self {
        let mut v = self.output.unwrap_or_default();
        v.push(input);
        self.output = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>OutputAttribute</code> objects, each of which have the fields Name and Hashed. Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.</p>
    pub fn set_output(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OutputAttribute>>) -> Self {
        self.output = input;
        self
    }
    /// <p>A list of <code>OutputAttribute</code> objects, each of which have the fields Name and Hashed. Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.</p>
    pub fn get_output(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OutputAttribute>> {
        &self.output
    }
    /// <p>Customer KMS ARN for encryption at rest. If not provided, system will use an Entity Resolution managed KMS key.</p>
    pub fn kms_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Customer KMS ARN for encryption at rest. If not provided, system will use an Entity Resolution managed KMS key.</p>
    pub fn set_kms_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_arn = input;
        self
    }
    /// <p>Customer KMS ARN for encryption at rest. If not provided, system will use an Entity Resolution managed KMS key.</p>
    pub fn get_kms_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_arn
    }
    /// <p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>
    pub fn apply_normalization(mut self, input: bool) -> Self {
        self.apply_normalization = ::std::option::Option::Some(input);
        self
    }
    /// <p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>
    pub fn set_apply_normalization(mut self, input: ::std::option::Option<bool>) -> Self {
        self.apply_normalization = input;
        self
    }
    /// <p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>
    pub fn get_apply_normalization(&self) -> &::std::option::Option<bool> {
        &self.apply_normalization
    }
    /// Consumes the builder and constructs a [`OutputSource`](crate::types::OutputSource).
    pub fn build(self) -> crate::types::OutputSource {
        crate::types::OutputSource {
            output_s3_path: self.output_s3_path,
            output: self.output,
            kms_arn: self.kms_arn,
            apply_normalization: self.apply_normalization,
        }
    }
}
