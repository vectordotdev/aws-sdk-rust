// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The API of the connector application that Amazon AppFlow uses to transfer your data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataTransferApi {
    /// <p>The name of the connector application API.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>You can specify one of the following types:</p>
    /// <dl>
    /// <dt>
    /// AUTOMATIC
    /// </dt>
    /// <dd>
    /// <p>The default. Optimizes a flow for datasets that fluctuate in size from small to large. For each flow run, Amazon AppFlow chooses to use the SYNC or ASYNC API type based on the amount of data that the run transfers.</p>
    /// </dd>
    /// <dt>
    /// SYNC
    /// </dt>
    /// <dd>
    /// <p>A synchronous API. This type of API optimizes a flow for small to medium-sized datasets.</p>
    /// </dd>
    /// <dt>
    /// ASYNC
    /// </dt>
    /// <dd>
    /// <p>An asynchronous API. This type of API optimizes a flow for large datasets.</p>
    /// </dd>
    /// </dl>
    pub r#type: ::std::option::Option<crate::types::DataTransferApiType>,
}
impl DataTransferApi {
    /// <p>The name of the connector application API.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>You can specify one of the following types:</p>
    /// <dl>
    /// <dt>
    /// AUTOMATIC
    /// </dt>
    /// <dd>
    /// <p>The default. Optimizes a flow for datasets that fluctuate in size from small to large. For each flow run, Amazon AppFlow chooses to use the SYNC or ASYNC API type based on the amount of data that the run transfers.</p>
    /// </dd>
    /// <dt>
    /// SYNC
    /// </dt>
    /// <dd>
    /// <p>A synchronous API. This type of API optimizes a flow for small to medium-sized datasets.</p>
    /// </dd>
    /// <dt>
    /// ASYNC
    /// </dt>
    /// <dd>
    /// <p>An asynchronous API. This type of API optimizes a flow for large datasets.</p>
    /// </dd>
    /// </dl>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::DataTransferApiType> {
        self.r#type.as_ref()
    }
}
impl DataTransferApi {
    /// Creates a new builder-style object to manufacture [`DataTransferApi`](crate::types::DataTransferApi).
    pub fn builder() -> crate::types::builders::DataTransferApiBuilder {
        crate::types::builders::DataTransferApiBuilder::default()
    }
}

/// A builder for [`DataTransferApi`](crate::types::DataTransferApi).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataTransferApiBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::DataTransferApiType>,
}
impl DataTransferApiBuilder {
    /// <p>The name of the connector application API.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the connector application API.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the connector application API.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>You can specify one of the following types:</p>
    /// <dl>
    /// <dt>
    /// AUTOMATIC
    /// </dt>
    /// <dd>
    /// <p>The default. Optimizes a flow for datasets that fluctuate in size from small to large. For each flow run, Amazon AppFlow chooses to use the SYNC or ASYNC API type based on the amount of data that the run transfers.</p>
    /// </dd>
    /// <dt>
    /// SYNC
    /// </dt>
    /// <dd>
    /// <p>A synchronous API. This type of API optimizes a flow for small to medium-sized datasets.</p>
    /// </dd>
    /// <dt>
    /// ASYNC
    /// </dt>
    /// <dd>
    /// <p>An asynchronous API. This type of API optimizes a flow for large datasets.</p>
    /// </dd>
    /// </dl>
    pub fn r#type(mut self, input: crate::types::DataTransferApiType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can specify one of the following types:</p>
    /// <dl>
    /// <dt>
    /// AUTOMATIC
    /// </dt>
    /// <dd>
    /// <p>The default. Optimizes a flow for datasets that fluctuate in size from small to large. For each flow run, Amazon AppFlow chooses to use the SYNC or ASYNC API type based on the amount of data that the run transfers.</p>
    /// </dd>
    /// <dt>
    /// SYNC
    /// </dt>
    /// <dd>
    /// <p>A synchronous API. This type of API optimizes a flow for small to medium-sized datasets.</p>
    /// </dd>
    /// <dt>
    /// ASYNC
    /// </dt>
    /// <dd>
    /// <p>An asynchronous API. This type of API optimizes a flow for large datasets.</p>
    /// </dd>
    /// </dl>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DataTransferApiType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>You can specify one of the following types:</p>
    /// <dl>
    /// <dt>
    /// AUTOMATIC
    /// </dt>
    /// <dd>
    /// <p>The default. Optimizes a flow for datasets that fluctuate in size from small to large. For each flow run, Amazon AppFlow chooses to use the SYNC or ASYNC API type based on the amount of data that the run transfers.</p>
    /// </dd>
    /// <dt>
    /// SYNC
    /// </dt>
    /// <dd>
    /// <p>A synchronous API. This type of API optimizes a flow for small to medium-sized datasets.</p>
    /// </dd>
    /// <dt>
    /// ASYNC
    /// </dt>
    /// <dd>
    /// <p>An asynchronous API. This type of API optimizes a flow for large datasets.</p>
    /// </dd>
    /// </dl>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DataTransferApiType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`DataTransferApi`](crate::types::DataTransferApi).
    pub fn build(self) -> crate::types::DataTransferApi {
        crate::types::DataTransferApi {
            name: self.name,
            r#type: self.r#type,
        }
    }
}
