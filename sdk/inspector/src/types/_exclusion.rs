// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about what was excluded from an assessment run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Exclusion {
    /// <p>The ARN that specifies the exclusion.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the exclusion.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>The description of the exclusion.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The recommendation for the exclusion.</p>
    pub recommendation: ::std::option::Option<::std::string::String>,
    /// <p>The AWS resources for which the exclusion pertains.</p>
    pub scopes: ::std::option::Option<::std::vec::Vec<crate::types::Scope>>,
    /// <p>The system-defined attributes for the exclusion.</p>
    pub attributes: ::std::option::Option<::std::vec::Vec<crate::types::Attribute>>,
}
impl Exclusion {
    /// <p>The ARN that specifies the exclusion.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the exclusion.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The description of the exclusion.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The recommendation for the exclusion.</p>
    pub fn recommendation(&self) -> ::std::option::Option<&str> {
        self.recommendation.as_deref()
    }
    /// <p>The AWS resources for which the exclusion pertains.</p>
    pub fn scopes(&self) -> ::std::option::Option<&[crate::types::Scope]> {
        self.scopes.as_deref()
    }
    /// <p>The system-defined attributes for the exclusion.</p>
    pub fn attributes(&self) -> ::std::option::Option<&[crate::types::Attribute]> {
        self.attributes.as_deref()
    }
}
impl Exclusion {
    /// Creates a new builder-style object to manufacture [`Exclusion`](crate::types::Exclusion).
    pub fn builder() -> crate::types::builders::ExclusionBuilder {
        crate::types::builders::ExclusionBuilder::default()
    }
}

/// A builder for [`Exclusion`](crate::types::Exclusion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExclusionBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) recommendation: ::std::option::Option<::std::string::String>,
    pub(crate) scopes: ::std::option::Option<::std::vec::Vec<crate::types::Scope>>,
    pub(crate) attributes: ::std::option::Option<::std::vec::Vec<crate::types::Attribute>>,
}
impl ExclusionBuilder {
    /// <p>The ARN that specifies the exclusion.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN that specifies the exclusion.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN that specifies the exclusion.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the exclusion.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the exclusion.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The name of the exclusion.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The description of the exclusion.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the exclusion.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the exclusion.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The recommendation for the exclusion.</p>
    pub fn recommendation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommendation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommendation for the exclusion.</p>
    pub fn set_recommendation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommendation = input;
        self
    }
    /// <p>The recommendation for the exclusion.</p>
    pub fn get_recommendation(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommendation
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>The AWS resources for which the exclusion pertains.</p>
    pub fn scopes(mut self, input: crate::types::Scope) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input);
        self.scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The AWS resources for which the exclusion pertains.</p>
    pub fn set_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Scope>>) -> Self {
        self.scopes = input;
        self
    }
    /// <p>The AWS resources for which the exclusion pertains.</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Scope>> {
        &self.scopes
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>The system-defined attributes for the exclusion.</p>
    pub fn attributes(mut self, input: crate::types::Attribute) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The system-defined attributes for the exclusion.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Attribute>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The system-defined attributes for the exclusion.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Attribute>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`Exclusion`](crate::types::Exclusion).
    pub fn build(self) -> crate::types::Exclusion {
        crate::types::Exclusion {
            arn: self.arn,
            title: self.title,
            description: self.description,
            recommendation: self.recommendation,
            scopes: self.scopes,
            attributes: self.attributes,
        }
    }
}
