// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetRegionOptStatusOutput {
    /// <p>The Region code that was passed in.</p>
    pub region_name: ::std::option::Option<::std::string::String>,
    /// <p>One of the potential statuses a Region can undergo (Enabled, Enabling, Disabled, Disabling, Enabled_By_Default).</p>
    pub region_opt_status: ::std::option::Option<crate::types::RegionOptStatus>,
    _request_id: Option<String>,
}
impl GetRegionOptStatusOutput {
    /// <p>The Region code that was passed in.</p>
    pub fn region_name(&self) -> ::std::option::Option<&str> {
        self.region_name.as_deref()
    }
    /// <p>One of the potential statuses a Region can undergo (Enabled, Enabling, Disabled, Disabling, Enabled_By_Default).</p>
    pub fn region_opt_status(&self) -> ::std::option::Option<&crate::types::RegionOptStatus> {
        self.region_opt_status.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetRegionOptStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRegionOptStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetRegionOptStatusOutput`](crate::operation::get_region_opt_status::GetRegionOptStatusOutput).
    pub fn builder() -> crate::operation::get_region_opt_status::builders::GetRegionOptStatusOutputBuilder {
        crate::operation::get_region_opt_status::builders::GetRegionOptStatusOutputBuilder::default()
    }
}

/// A builder for [`GetRegionOptStatusOutput`](crate::operation::get_region_opt_status::GetRegionOptStatusOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetRegionOptStatusOutputBuilder {
    pub(crate) region_name: ::std::option::Option<::std::string::String>,
    pub(crate) region_opt_status: ::std::option::Option<crate::types::RegionOptStatus>,
    _request_id: Option<String>,
}
impl GetRegionOptStatusOutputBuilder {
    /// <p>The Region code that was passed in.</p>
    pub fn region_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region code that was passed in.</p>
    pub fn set_region_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region_name = input;
        self
    }
    /// <p>The Region code that was passed in.</p>
    pub fn get_region_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.region_name
    }
    /// <p>One of the potential statuses a Region can undergo (Enabled, Enabling, Disabled, Disabling, Enabled_By_Default).</p>
    pub fn region_opt_status(mut self, input: crate::types::RegionOptStatus) -> Self {
        self.region_opt_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>One of the potential statuses a Region can undergo (Enabled, Enabling, Disabled, Disabling, Enabled_By_Default).</p>
    pub fn set_region_opt_status(mut self, input: ::std::option::Option<crate::types::RegionOptStatus>) -> Self {
        self.region_opt_status = input;
        self
    }
    /// <p>One of the potential statuses a Region can undergo (Enabled, Enabling, Disabled, Disabling, Enabled_By_Default).</p>
    pub fn get_region_opt_status(&self) -> &::std::option::Option<crate::types::RegionOptStatus> {
        &self.region_opt_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRegionOptStatusOutput`](crate::operation::get_region_opt_status::GetRegionOptStatusOutput).
    pub fn build(self) -> crate::operation::get_region_opt_status::GetRegionOptStatusOutput {
        crate::operation::get_region_opt_status::GetRegionOptStatusOutput {
            region_name: self.region_name,
            region_opt_status: self.region_opt_status,
            _request_id: self._request_id,
        }
    }
}
