// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a condition that when matched will be added to the response of the operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoverageFilterCriterion {
    /// <p>An enum value representing possible filter fields.</p>
    pub criterion_key: ::std::option::Option<crate::types::CoverageFilterCriterionKey>,
    /// <p>Contains information about the condition.</p>
    pub filter_condition: ::std::option::Option<crate::types::CoverageFilterCondition>,
}
impl CoverageFilterCriterion {
    /// <p>An enum value representing possible filter fields.</p>
    pub fn criterion_key(&self) -> ::std::option::Option<&crate::types::CoverageFilterCriterionKey> {
        self.criterion_key.as_ref()
    }
    /// <p>Contains information about the condition.</p>
    pub fn filter_condition(&self) -> ::std::option::Option<&crate::types::CoverageFilterCondition> {
        self.filter_condition.as_ref()
    }
}
impl CoverageFilterCriterion {
    /// Creates a new builder-style object to manufacture [`CoverageFilterCriterion`](crate::types::CoverageFilterCriterion).
    pub fn builder() -> crate::types::builders::CoverageFilterCriterionBuilder {
        crate::types::builders::CoverageFilterCriterionBuilder::default()
    }
}

/// A builder for [`CoverageFilterCriterion`](crate::types::CoverageFilterCriterion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoverageFilterCriterionBuilder {
    pub(crate) criterion_key: ::std::option::Option<crate::types::CoverageFilterCriterionKey>,
    pub(crate) filter_condition: ::std::option::Option<crate::types::CoverageFilterCondition>,
}
impl CoverageFilterCriterionBuilder {
    /// <p>An enum value representing possible filter fields.</p>
    pub fn criterion_key(mut self, input: crate::types::CoverageFilterCriterionKey) -> Self {
        self.criterion_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>An enum value representing possible filter fields.</p>
    pub fn set_criterion_key(mut self, input: ::std::option::Option<crate::types::CoverageFilterCriterionKey>) -> Self {
        self.criterion_key = input;
        self
    }
    /// <p>An enum value representing possible filter fields.</p>
    pub fn get_criterion_key(&self) -> &::std::option::Option<crate::types::CoverageFilterCriterionKey> {
        &self.criterion_key
    }
    /// <p>Contains information about the condition.</p>
    pub fn filter_condition(mut self, input: crate::types::CoverageFilterCondition) -> Self {
        self.filter_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about the condition.</p>
    pub fn set_filter_condition(mut self, input: ::std::option::Option<crate::types::CoverageFilterCondition>) -> Self {
        self.filter_condition = input;
        self
    }
    /// <p>Contains information about the condition.</p>
    pub fn get_filter_condition(&self) -> &::std::option::Option<crate::types::CoverageFilterCondition> {
        &self.filter_condition
    }
    /// Consumes the builder and constructs a [`CoverageFilterCriterion`](crate::types::CoverageFilterCriterion).
    pub fn build(self) -> crate::types::CoverageFilterCriterion {
        crate::types::CoverageFilterCriterion {
            criterion_key: self.criterion_key,
            filter_condition: self.filter_condition,
        }
    }
}
