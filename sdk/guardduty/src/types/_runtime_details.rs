// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the process and any required context values for a specific finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuntimeDetails {
    /// <p>Information about the observed process.</p>
    pub process: ::std::option::Option<crate::types::ProcessDetails>,
    /// <p>Additional information about the suspicious activity.</p>
    pub context: ::std::option::Option<crate::types::RuntimeContext>,
}
impl RuntimeDetails {
    /// <p>Information about the observed process.</p>
    pub fn process(&self) -> ::std::option::Option<&crate::types::ProcessDetails> {
        self.process.as_ref()
    }
    /// <p>Additional information about the suspicious activity.</p>
    pub fn context(&self) -> ::std::option::Option<&crate::types::RuntimeContext> {
        self.context.as_ref()
    }
}
impl RuntimeDetails {
    /// Creates a new builder-style object to manufacture [`RuntimeDetails`](crate::types::RuntimeDetails).
    pub fn builder() -> crate::types::builders::RuntimeDetailsBuilder {
        crate::types::builders::RuntimeDetailsBuilder::default()
    }
}

/// A builder for [`RuntimeDetails`](crate::types::RuntimeDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuntimeDetailsBuilder {
    pub(crate) process: ::std::option::Option<crate::types::ProcessDetails>,
    pub(crate) context: ::std::option::Option<crate::types::RuntimeContext>,
}
impl RuntimeDetailsBuilder {
    /// <p>Information about the observed process.</p>
    pub fn process(mut self, input: crate::types::ProcessDetails) -> Self {
        self.process = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the observed process.</p>
    pub fn set_process(mut self, input: ::std::option::Option<crate::types::ProcessDetails>) -> Self {
        self.process = input;
        self
    }
    /// <p>Information about the observed process.</p>
    pub fn get_process(&self) -> &::std::option::Option<crate::types::ProcessDetails> {
        &self.process
    }
    /// <p>Additional information about the suspicious activity.</p>
    pub fn context(mut self, input: crate::types::RuntimeContext) -> Self {
        self.context = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional information about the suspicious activity.</p>
    pub fn set_context(mut self, input: ::std::option::Option<crate::types::RuntimeContext>) -> Self {
        self.context = input;
        self
    }
    /// <p>Additional information about the suspicious activity.</p>
    pub fn get_context(&self) -> &::std::option::Option<crate::types::RuntimeContext> {
        &self.context
    }
    /// Consumes the builder and constructs a [`RuntimeDetails`](crate::types::RuntimeDetails).
    pub fn build(self) -> crate::types::RuntimeDetails {
        crate::types::RuntimeDetails {
            process: self.process,
            context: self.context,
        }
    }
}
