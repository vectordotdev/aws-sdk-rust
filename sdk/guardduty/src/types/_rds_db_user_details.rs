// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the user and authentication details for a database instance involved in the finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsDbUserDetails {
    /// <p>The user name used in the anomalous login attempt.</p>
    pub user: ::std::option::Option<::std::string::String>,
    /// <p>The application name used in the anomalous login attempt.</p>
    pub application: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database instance involved in the anomalous login attempt.</p>
    pub database: ::std::option::Option<::std::string::String>,
    /// <p>The version of the Secure Socket Layer (SSL) used for the network.</p>
    pub ssl: ::std::option::Option<::std::string::String>,
    /// <p>The authentication method used by the user involved in the finding.</p>
    pub auth_method: ::std::option::Option<::std::string::String>,
}
impl RdsDbUserDetails {
    /// <p>The user name used in the anomalous login attempt.</p>
    pub fn user(&self) -> ::std::option::Option<&str> {
        self.user.as_deref()
    }
    /// <p>The application name used in the anomalous login attempt.</p>
    pub fn application(&self) -> ::std::option::Option<&str> {
        self.application.as_deref()
    }
    /// <p>The name of the database instance involved in the anomalous login attempt.</p>
    pub fn database(&self) -> ::std::option::Option<&str> {
        self.database.as_deref()
    }
    /// <p>The version of the Secure Socket Layer (SSL) used for the network.</p>
    pub fn ssl(&self) -> ::std::option::Option<&str> {
        self.ssl.as_deref()
    }
    /// <p>The authentication method used by the user involved in the finding.</p>
    pub fn auth_method(&self) -> ::std::option::Option<&str> {
        self.auth_method.as_deref()
    }
}
impl RdsDbUserDetails {
    /// Creates a new builder-style object to manufacture [`RdsDbUserDetails`](crate::types::RdsDbUserDetails).
    pub fn builder() -> crate::types::builders::RdsDbUserDetailsBuilder {
        crate::types::builders::RdsDbUserDetailsBuilder::default()
    }
}

/// A builder for [`RdsDbUserDetails`](crate::types::RdsDbUserDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RdsDbUserDetailsBuilder {
    pub(crate) user: ::std::option::Option<::std::string::String>,
    pub(crate) application: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) ssl: ::std::option::Option<::std::string::String>,
    pub(crate) auth_method: ::std::option::Option<::std::string::String>,
}
impl RdsDbUserDetailsBuilder {
    /// <p>The user name used in the anomalous login attempt.</p>
    pub fn user(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user name used in the anomalous login attempt.</p>
    pub fn set_user(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user = input;
        self
    }
    /// <p>The user name used in the anomalous login attempt.</p>
    pub fn get_user(&self) -> &::std::option::Option<::std::string::String> {
        &self.user
    }
    /// <p>The application name used in the anomalous login attempt.</p>
    pub fn application(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The application name used in the anomalous login attempt.</p>
    pub fn set_application(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application = input;
        self
    }
    /// <p>The application name used in the anomalous login attempt.</p>
    pub fn get_application(&self) -> &::std::option::Option<::std::string::String> {
        &self.application
    }
    /// <p>The name of the database instance involved in the anomalous login attempt.</p>
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database instance involved in the anomalous login attempt.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The name of the database instance involved in the anomalous login attempt.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>The version of the Secure Socket Layer (SSL) used for the network.</p>
    pub fn ssl(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ssl = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the Secure Socket Layer (SSL) used for the network.</p>
    pub fn set_ssl(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ssl = input;
        self
    }
    /// <p>The version of the Secure Socket Layer (SSL) used for the network.</p>
    pub fn get_ssl(&self) -> &::std::option::Option<::std::string::String> {
        &self.ssl
    }
    /// <p>The authentication method used by the user involved in the finding.</p>
    pub fn auth_method(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auth_method = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authentication method used by the user involved in the finding.</p>
    pub fn set_auth_method(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auth_method = input;
        self
    }
    /// <p>The authentication method used by the user involved in the finding.</p>
    pub fn get_auth_method(&self) -> &::std::option::Option<::std::string::String> {
        &self.auth_method
    }
    /// Consumes the builder and constructs a [`RdsDbUserDetails`](crate::types::RdsDbUserDetails).
    pub fn build(self) -> crate::types::RdsDbUserDetails {
        crate::types::RdsDbUserDetails {
            user: self.user,
            application: self.application,
            database: self.database,
            ssl: self.ssl,
            auth_method: self.auth_method,
        }
    }
}
