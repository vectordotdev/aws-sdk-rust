// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the coverage statistics for a resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CoverageStatistics {
    /// <p>Represents coverage statistics for EKS clusters aggregated by resource type.</p>
    pub count_by_resource_type: ::std::option::Option<::std::collections::HashMap<crate::types::ResourceType, i64>>,
    /// <p>Represents coverage statistics for EKS clusters aggregated by coverage status.</p>
    pub count_by_coverage_status: ::std::option::Option<::std::collections::HashMap<crate::types::CoverageStatus, i64>>,
}
impl CoverageStatistics {
    /// <p>Represents coverage statistics for EKS clusters aggregated by resource type.</p>
    pub fn count_by_resource_type(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::ResourceType, i64>> {
        self.count_by_resource_type.as_ref()
    }
    /// <p>Represents coverage statistics for EKS clusters aggregated by coverage status.</p>
    pub fn count_by_coverage_status(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::CoverageStatus, i64>> {
        self.count_by_coverage_status.as_ref()
    }
}
impl CoverageStatistics {
    /// Creates a new builder-style object to manufacture [`CoverageStatistics`](crate::types::CoverageStatistics).
    pub fn builder() -> crate::types::builders::CoverageStatisticsBuilder {
        crate::types::builders::CoverageStatisticsBuilder::default()
    }
}

/// A builder for [`CoverageStatistics`](crate::types::CoverageStatistics).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CoverageStatisticsBuilder {
    pub(crate) count_by_resource_type: ::std::option::Option<::std::collections::HashMap<crate::types::ResourceType, i64>>,
    pub(crate) count_by_coverage_status: ::std::option::Option<::std::collections::HashMap<crate::types::CoverageStatus, i64>>,
}
impl CoverageStatisticsBuilder {
    /// Adds a key-value pair to `count_by_resource_type`.
    ///
    /// To override the contents of this collection use [`set_count_by_resource_type`](Self::set_count_by_resource_type).
    ///
    /// <p>Represents coverage statistics for EKS clusters aggregated by resource type.</p>
    pub fn count_by_resource_type(mut self, k: crate::types::ResourceType, v: i64) -> Self {
        let mut hash_map = self.count_by_resource_type.unwrap_or_default();
        hash_map.insert(k, v);
        self.count_by_resource_type = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Represents coverage statistics for EKS clusters aggregated by resource type.</p>
    pub fn set_count_by_resource_type(mut self, input: ::std::option::Option<::std::collections::HashMap<crate::types::ResourceType, i64>>) -> Self {
        self.count_by_resource_type = input;
        self
    }
    /// <p>Represents coverage statistics for EKS clusters aggregated by resource type.</p>
    pub fn get_count_by_resource_type(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::ResourceType, i64>> {
        &self.count_by_resource_type
    }
    /// Adds a key-value pair to `count_by_coverage_status`.
    ///
    /// To override the contents of this collection use [`set_count_by_coverage_status`](Self::set_count_by_coverage_status).
    ///
    /// <p>Represents coverage statistics for EKS clusters aggregated by coverage status.</p>
    pub fn count_by_coverage_status(mut self, k: crate::types::CoverageStatus, v: i64) -> Self {
        let mut hash_map = self.count_by_coverage_status.unwrap_or_default();
        hash_map.insert(k, v);
        self.count_by_coverage_status = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Represents coverage statistics for EKS clusters aggregated by coverage status.</p>
    pub fn set_count_by_coverage_status(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::CoverageStatus, i64>>,
    ) -> Self {
        self.count_by_coverage_status = input;
        self
    }
    /// <p>Represents coverage statistics for EKS clusters aggregated by coverage status.</p>
    pub fn get_count_by_coverage_status(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::CoverageStatus, i64>> {
        &self.count_by_coverage_status
    }
    /// Consumes the builder and constructs a [`CoverageStatistics`](crate::types::CoverageStatistics).
    pub fn build(self) -> crate::types::CoverageStatistics {
        crate::types::CoverageStatistics {
            count_by_resource_type: self.count_by_resource_type,
            count_by_coverage_status: self.count_by_coverage_status,
        }
    }
}
