// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the runtime process details.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LineageObject {
    /// <p>The time when the process started. This is in UTC format.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The process ID of the child process.</p>
    pub namespace_pid: i32,
    /// <p>The user ID of the user that executed the process.</p>
    pub user_id: i32,
    /// <p>The name of the process.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the process.</p>
    pub pid: i32,
    /// <p>The unique ID assigned to the process by GuardDuty.</p>
    pub uuid: ::std::option::Option<::std::string::String>,
    /// <p>The absolute path of the process executable file.</p>
    pub executable_path: ::std::option::Option<::std::string::String>,
    /// <p>The effective user ID that was used to execute the process.</p>
    pub euid: i32,
    /// <p>The unique ID of the parent process. This ID is assigned to the parent process by GuardDuty.</p>
    pub parent_uuid: ::std::option::Option<::std::string::String>,
}
impl LineageObject {
    /// <p>The time when the process started. This is in UTC format.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The process ID of the child process.</p>
    pub fn namespace_pid(&self) -> i32 {
        self.namespace_pid
    }
    /// <p>The user ID of the user that executed the process.</p>
    pub fn user_id(&self) -> i32 {
        self.user_id
    }
    /// <p>The name of the process.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the process.</p>
    pub fn pid(&self) -> i32 {
        self.pid
    }
    /// <p>The unique ID assigned to the process by GuardDuty.</p>
    pub fn uuid(&self) -> ::std::option::Option<&str> {
        self.uuid.as_deref()
    }
    /// <p>The absolute path of the process executable file.</p>
    pub fn executable_path(&self) -> ::std::option::Option<&str> {
        self.executable_path.as_deref()
    }
    /// <p>The effective user ID that was used to execute the process.</p>
    pub fn euid(&self) -> i32 {
        self.euid
    }
    /// <p>The unique ID of the parent process. This ID is assigned to the parent process by GuardDuty.</p>
    pub fn parent_uuid(&self) -> ::std::option::Option<&str> {
        self.parent_uuid.as_deref()
    }
}
impl LineageObject {
    /// Creates a new builder-style object to manufacture [`LineageObject`](crate::types::LineageObject).
    pub fn builder() -> crate::types::builders::LineageObjectBuilder {
        crate::types::builders::LineageObjectBuilder::default()
    }
}

/// A builder for [`LineageObject`](crate::types::LineageObject).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LineageObjectBuilder {
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) namespace_pid: ::std::option::Option<i32>,
    pub(crate) user_id: ::std::option::Option<i32>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) pid: ::std::option::Option<i32>,
    pub(crate) uuid: ::std::option::Option<::std::string::String>,
    pub(crate) executable_path: ::std::option::Option<::std::string::String>,
    pub(crate) euid: ::std::option::Option<i32>,
    pub(crate) parent_uuid: ::std::option::Option<::std::string::String>,
}
impl LineageObjectBuilder {
    /// <p>The time when the process started. This is in UTC format.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the process started. This is in UTC format.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time when the process started. This is in UTC format.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The process ID of the child process.</p>
    pub fn namespace_pid(mut self, input: i32) -> Self {
        self.namespace_pid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The process ID of the child process.</p>
    pub fn set_namespace_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.namespace_pid = input;
        self
    }
    /// <p>The process ID of the child process.</p>
    pub fn get_namespace_pid(&self) -> &::std::option::Option<i32> {
        &self.namespace_pid
    }
    /// <p>The user ID of the user that executed the process.</p>
    pub fn user_id(mut self, input: i32) -> Self {
        self.user_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The user ID of the user that executed the process.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The user ID of the user that executed the process.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<i32> {
        &self.user_id
    }
    /// <p>The name of the process.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the process.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the process.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID of the process.</p>
    pub fn pid(mut self, input: i32) -> Self {
        self.pid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the process.</p>
    pub fn set_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pid = input;
        self
    }
    /// <p>The ID of the process.</p>
    pub fn get_pid(&self) -> &::std::option::Option<i32> {
        &self.pid
    }
    /// <p>The unique ID assigned to the process by GuardDuty.</p>
    pub fn uuid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uuid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID assigned to the process by GuardDuty.</p>
    pub fn set_uuid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uuid = input;
        self
    }
    /// <p>The unique ID assigned to the process by GuardDuty.</p>
    pub fn get_uuid(&self) -> &::std::option::Option<::std::string::String> {
        &self.uuid
    }
    /// <p>The absolute path of the process executable file.</p>
    pub fn executable_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.executable_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The absolute path of the process executable file.</p>
    pub fn set_executable_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.executable_path = input;
        self
    }
    /// <p>The absolute path of the process executable file.</p>
    pub fn get_executable_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.executable_path
    }
    /// <p>The effective user ID that was used to execute the process.</p>
    pub fn euid(mut self, input: i32) -> Self {
        self.euid = ::std::option::Option::Some(input);
        self
    }
    /// <p>The effective user ID that was used to execute the process.</p>
    pub fn set_euid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.euid = input;
        self
    }
    /// <p>The effective user ID that was used to execute the process.</p>
    pub fn get_euid(&self) -> &::std::option::Option<i32> {
        &self.euid
    }
    /// <p>The unique ID of the parent process. This ID is assigned to the parent process by GuardDuty.</p>
    pub fn parent_uuid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_uuid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the parent process. This ID is assigned to the parent process by GuardDuty.</p>
    pub fn set_parent_uuid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_uuid = input;
        self
    }
    /// <p>The unique ID of the parent process. This ID is assigned to the parent process by GuardDuty.</p>
    pub fn get_parent_uuid(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_uuid
    }
    /// Consumes the builder and constructs a [`LineageObject`](crate::types::LineageObject).
    pub fn build(self) -> crate::types::LineageObject {
        crate::types::LineageObject {
            start_time: self.start_time,
            namespace_pid: self.namespace_pid.unwrap_or_default(),
            user_id: self.user_id.unwrap_or_default(),
            name: self.name,
            pid: self.pid.unwrap_or_default(),
            uuid: self.uuid,
            executable_path: self.executable_path,
            euid: self.euid.unwrap_or_default(),
            parent_uuid: self.parent_uuid,
        }
    }
}
