// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the result of the total usage based on the feature.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UsageFeatureResult {
    /// <p>The feature that generated the usage cost.</p>
    pub feature: ::std::option::Option<crate::types::UsageFeature>,
    /// <p>Contains the total usage with the corresponding currency unit for that value.</p>
    pub total: ::std::option::Option<crate::types::Total>,
}
impl UsageFeatureResult {
    /// <p>The feature that generated the usage cost.</p>
    pub fn feature(&self) -> ::std::option::Option<&crate::types::UsageFeature> {
        self.feature.as_ref()
    }
    /// <p>Contains the total usage with the corresponding currency unit for that value.</p>
    pub fn total(&self) -> ::std::option::Option<&crate::types::Total> {
        self.total.as_ref()
    }
}
impl UsageFeatureResult {
    /// Creates a new builder-style object to manufacture [`UsageFeatureResult`](crate::types::UsageFeatureResult).
    pub fn builder() -> crate::types::builders::UsageFeatureResultBuilder {
        crate::types::builders::UsageFeatureResultBuilder::default()
    }
}

/// A builder for [`UsageFeatureResult`](crate::types::UsageFeatureResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UsageFeatureResultBuilder {
    pub(crate) feature: ::std::option::Option<crate::types::UsageFeature>,
    pub(crate) total: ::std::option::Option<crate::types::Total>,
}
impl UsageFeatureResultBuilder {
    /// <p>The feature that generated the usage cost.</p>
    pub fn feature(mut self, input: crate::types::UsageFeature) -> Self {
        self.feature = ::std::option::Option::Some(input);
        self
    }
    /// <p>The feature that generated the usage cost.</p>
    pub fn set_feature(mut self, input: ::std::option::Option<crate::types::UsageFeature>) -> Self {
        self.feature = input;
        self
    }
    /// <p>The feature that generated the usage cost.</p>
    pub fn get_feature(&self) -> &::std::option::Option<crate::types::UsageFeature> {
        &self.feature
    }
    /// <p>Contains the total usage with the corresponding currency unit for that value.</p>
    pub fn total(mut self, input: crate::types::Total) -> Self {
        self.total = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the total usage with the corresponding currency unit for that value.</p>
    pub fn set_total(mut self, input: ::std::option::Option<crate::types::Total>) -> Self {
        self.total = input;
        self
    }
    /// <p>Contains the total usage with the corresponding currency unit for that value.</p>
    pub fn get_total(&self) -> &::std::option::Option<crate::types::Total> {
        &self.total
    }
    /// Consumes the builder and constructs a [`UsageFeatureResult`](crate::types::UsageFeatureResult).
    pub fn build(self) -> crate::types::UsageFeatureResult {
        crate::types::UsageFeatureResult {
            feature: self.feature,
            total: self.total,
        }
    }
}
