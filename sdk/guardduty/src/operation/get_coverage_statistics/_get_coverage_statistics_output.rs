// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCoverageStatisticsOutput {
    /// <p>Represents the count aggregated by the <code>statusCode</code> and <code>resourceType</code>.</p>
    pub coverage_statistics: ::std::option::Option<crate::types::CoverageStatistics>,
    _request_id: Option<String>,
}
impl GetCoverageStatisticsOutput {
    /// <p>Represents the count aggregated by the <code>statusCode</code> and <code>resourceType</code>.</p>
    pub fn coverage_statistics(&self) -> ::std::option::Option<&crate::types::CoverageStatistics> {
        self.coverage_statistics.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetCoverageStatisticsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCoverageStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetCoverageStatisticsOutput`](crate::operation::get_coverage_statistics::GetCoverageStatisticsOutput).
    pub fn builder() -> crate::operation::get_coverage_statistics::builders::GetCoverageStatisticsOutputBuilder {
        crate::operation::get_coverage_statistics::builders::GetCoverageStatisticsOutputBuilder::default()
    }
}

/// A builder for [`GetCoverageStatisticsOutput`](crate::operation::get_coverage_statistics::GetCoverageStatisticsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetCoverageStatisticsOutputBuilder {
    pub(crate) coverage_statistics: ::std::option::Option<crate::types::CoverageStatistics>,
    _request_id: Option<String>,
}
impl GetCoverageStatisticsOutputBuilder {
    /// <p>Represents the count aggregated by the <code>statusCode</code> and <code>resourceType</code>.</p>
    pub fn coverage_statistics(mut self, input: crate::types::CoverageStatistics) -> Self {
        self.coverage_statistics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the count aggregated by the <code>statusCode</code> and <code>resourceType</code>.</p>
    pub fn set_coverage_statistics(mut self, input: ::std::option::Option<crate::types::CoverageStatistics>) -> Self {
        self.coverage_statistics = input;
        self
    }
    /// <p>Represents the count aggregated by the <code>statusCode</code> and <code>resourceType</code>.</p>
    pub fn get_coverage_statistics(&self) -> &::std::option::Option<crate::types::CoverageStatistics> {
        &self.coverage_statistics
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCoverageStatisticsOutput`](crate::operation::get_coverage_statistics::GetCoverageStatisticsOutput).
    pub fn build(self) -> crate::operation::get_coverage_statistics::GetCoverageStatisticsOutput {
        crate::operation::get_coverage_statistics::GetCoverageStatisticsOutput {
            coverage_statistics: self.coverage_statistics,
            _request_id: self._request_id,
        }
    }
}
