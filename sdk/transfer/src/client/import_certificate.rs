// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ImportCertificate`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`usage(CertificateUsageType)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::usage) / [`set_usage(Option<CertificateUsageType>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::set_usage): <p>Specifies whether this certificate is used for signing or encryption.</p>
    ///   - [`certificate(impl ::std::convert::Into<String>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::certificate) / [`set_certificate(Option<String>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::set_certificate): <ul>   <li> <p>For the CLI, provide a file path for a certificate in URI format. For example, <code>--certificate file://encryption-cert.pem</code>. Alternatively, you can provide the raw content.</p> </li>   <li> <p>For the SDK, specify the raw content of a certificate file. For example, <code>--certificate "`cat encryption-cert.pem`"</code>.</p> </li>  </ul>
    ///   - [`certificate_chain(impl ::std::convert::Into<String>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::certificate_chain) / [`set_certificate_chain(Option<String>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::set_certificate_chain): <p>An optional list of certificates that make up the chain for the certificate that's being imported.</p>
    ///   - [`private_key(impl ::std::convert::Into<String>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::private_key) / [`set_private_key(Option<String>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::set_private_key): <ul>   <li> <p>For the CLI, provide a file path for a private key in URI format.For example, <code>--private-key file://encryption-key.pem</code>. Alternatively, you can provide the raw content of the private key file.</p> </li>   <li> <p>For the SDK, specify the raw content of a private key file. For example, <code>--private-key "`cat encryption-key.pem`"</code> </p> </li>  </ul>
    ///   - [`active_date(DateTime)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::active_date) / [`set_active_date(Option<DateTime>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::set_active_date): <p>An optional date that specifies when the certificate becomes active.</p>
    ///   - [`inactive_date(DateTime)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::inactive_date) / [`set_inactive_date(Option<DateTime>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::set_inactive_date): <p>An optional date that specifies when the certificate becomes inactive.</p>
    ///   - [`description(impl ::std::convert::Into<String>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::set_description): <p>A short description that helps identify the certificate. </p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::set_tags): <p>Key-value pairs that can be used to group and search for certificates.</p>
    /// - On success, responds with [`ImportCertificateOutput`](crate::operation::import_certificate::ImportCertificateOutput) with field(s):
    ///   - [`certificate_id(Option<String>)`](crate::operation::import_certificate::ImportCertificateOutput::certificate_id): <p>An array of identifiers for the imported certificates. You use this identifier for working with profiles and partner profiles.</p>
    /// - On failure, responds with [`SdkError<ImportCertificateError>`](crate::operation::import_certificate::ImportCertificateError)
    pub fn import_certificate(&self) -> crate::operation::import_certificate::builders::ImportCertificateFluentBuilder {
        crate::operation::import_certificate::builders::ImportCertificateFluentBuilder::new(self.handle.clone())
    }
}
