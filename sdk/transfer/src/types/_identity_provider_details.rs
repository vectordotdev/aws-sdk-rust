// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information related to the type of user authentication that is in use for a file transfer protocol-enabled server's users. A server can have only one method of authentication.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdentityProviderDetails {
    /// <p>Provides the location of the service endpoint used to authenticate users.</p>
    pub url: ::std::option::Option<::std::string::String>,
    /// <p>This parameter is only applicable if your <code>IdentityProviderType</code> is <code>API_GATEWAY</code>. Provides the type of <code>InvocationRole</code> used to authenticate the user account.</p>
    pub invocation_role: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Directory Service directory that you want to stop sharing.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN for a Lambda function to use for the Identity provider.</p>
    pub function: ::std::option::Option<::std::string::String>,
    /// <p>For SFTP-enabled servers, and for custom identity providers <i>only</i>, you can specify whether to authenticate using a password, SSH key pair, or both.</p>
    /// <ul>
    /// <li> <p> <code>PASSWORD</code> - users must provide their password to connect.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY</code> - users must provide their private key to connect.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY_OR_PASSWORD</code> - users can authenticate with either their password or their key. This is the default value.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY_AND_PASSWORD</code> - users must provide both their private key and their password to connect. The server checks the key first, and then if the key is valid, the system prompts for a password. If the private key provided does not match the public key that is stored, authentication fails.</p> </li>
    /// </ul>
    pub sftp_authentication_methods: ::std::option::Option<crate::types::SftpAuthenticationMethods>,
}
impl IdentityProviderDetails {
    /// <p>Provides the location of the service endpoint used to authenticate users.</p>
    pub fn url(&self) -> ::std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>This parameter is only applicable if your <code>IdentityProviderType</code> is <code>API_GATEWAY</code>. Provides the type of <code>InvocationRole</code> used to authenticate the user account.</p>
    pub fn invocation_role(&self) -> ::std::option::Option<&str> {
        self.invocation_role.as_deref()
    }
    /// <p>The identifier of the Directory Service directory that you want to stop sharing.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The ARN for a Lambda function to use for the Identity provider.</p>
    pub fn function(&self) -> ::std::option::Option<&str> {
        self.function.as_deref()
    }
    /// <p>For SFTP-enabled servers, and for custom identity providers <i>only</i>, you can specify whether to authenticate using a password, SSH key pair, or both.</p>
    /// <ul>
    /// <li> <p> <code>PASSWORD</code> - users must provide their password to connect.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY</code> - users must provide their private key to connect.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY_OR_PASSWORD</code> - users can authenticate with either their password or their key. This is the default value.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY_AND_PASSWORD</code> - users must provide both their private key and their password to connect. The server checks the key first, and then if the key is valid, the system prompts for a password. If the private key provided does not match the public key that is stored, authentication fails.</p> </li>
    /// </ul>
    pub fn sftp_authentication_methods(&self) -> ::std::option::Option<&crate::types::SftpAuthenticationMethods> {
        self.sftp_authentication_methods.as_ref()
    }
}
impl IdentityProviderDetails {
    /// Creates a new builder-style object to manufacture [`IdentityProviderDetails`](crate::types::IdentityProviderDetails).
    pub fn builder() -> crate::types::builders::IdentityProviderDetailsBuilder {
        crate::types::builders::IdentityProviderDetailsBuilder::default()
    }
}

/// A builder for [`IdentityProviderDetails`](crate::types::IdentityProviderDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IdentityProviderDetailsBuilder {
    pub(crate) url: ::std::option::Option<::std::string::String>,
    pub(crate) invocation_role: ::std::option::Option<::std::string::String>,
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) function: ::std::option::Option<::std::string::String>,
    pub(crate) sftp_authentication_methods: ::std::option::Option<crate::types::SftpAuthenticationMethods>,
}
impl IdentityProviderDetailsBuilder {
    /// <p>Provides the location of the service endpoint used to authenticate users.</p>
    pub fn url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides the location of the service endpoint used to authenticate users.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>Provides the location of the service endpoint used to authenticate users.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.url
    }
    /// <p>This parameter is only applicable if your <code>IdentityProviderType</code> is <code>API_GATEWAY</code>. Provides the type of <code>InvocationRole</code> used to authenticate the user account.</p>
    pub fn invocation_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invocation_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This parameter is only applicable if your <code>IdentityProviderType</code> is <code>API_GATEWAY</code>. Provides the type of <code>InvocationRole</code> used to authenticate the user account.</p>
    pub fn set_invocation_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invocation_role = input;
        self
    }
    /// <p>This parameter is only applicable if your <code>IdentityProviderType</code> is <code>API_GATEWAY</code>. Provides the type of <code>InvocationRole</code> used to authenticate the user account.</p>
    pub fn get_invocation_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.invocation_role
    }
    /// <p>The identifier of the Directory Service directory that you want to stop sharing.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Directory Service directory that you want to stop sharing.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the Directory Service directory that you want to stop sharing.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The ARN for a Lambda function to use for the Identity provider.</p>
    pub fn function(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for a Lambda function to use for the Identity provider.</p>
    pub fn set_function(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function = input;
        self
    }
    /// <p>The ARN for a Lambda function to use for the Identity provider.</p>
    pub fn get_function(&self) -> &::std::option::Option<::std::string::String> {
        &self.function
    }
    /// <p>For SFTP-enabled servers, and for custom identity providers <i>only</i>, you can specify whether to authenticate using a password, SSH key pair, or both.</p>
    /// <ul>
    /// <li> <p> <code>PASSWORD</code> - users must provide their password to connect.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY</code> - users must provide their private key to connect.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY_OR_PASSWORD</code> - users can authenticate with either their password or their key. This is the default value.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY_AND_PASSWORD</code> - users must provide both their private key and their password to connect. The server checks the key first, and then if the key is valid, the system prompts for a password. If the private key provided does not match the public key that is stored, authentication fails.</p> </li>
    /// </ul>
    pub fn sftp_authentication_methods(mut self, input: crate::types::SftpAuthenticationMethods) -> Self {
        self.sftp_authentication_methods = ::std::option::Option::Some(input);
        self
    }
    /// <p>For SFTP-enabled servers, and for custom identity providers <i>only</i>, you can specify whether to authenticate using a password, SSH key pair, or both.</p>
    /// <ul>
    /// <li> <p> <code>PASSWORD</code> - users must provide their password to connect.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY</code> - users must provide their private key to connect.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY_OR_PASSWORD</code> - users can authenticate with either their password or their key. This is the default value.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY_AND_PASSWORD</code> - users must provide both their private key and their password to connect. The server checks the key first, and then if the key is valid, the system prompts for a password. If the private key provided does not match the public key that is stored, authentication fails.</p> </li>
    /// </ul>
    pub fn set_sftp_authentication_methods(mut self, input: ::std::option::Option<crate::types::SftpAuthenticationMethods>) -> Self {
        self.sftp_authentication_methods = input;
        self
    }
    /// <p>For SFTP-enabled servers, and for custom identity providers <i>only</i>, you can specify whether to authenticate using a password, SSH key pair, or both.</p>
    /// <ul>
    /// <li> <p> <code>PASSWORD</code> - users must provide their password to connect.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY</code> - users must provide their private key to connect.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY_OR_PASSWORD</code> - users can authenticate with either their password or their key. This is the default value.</p> </li>
    /// <li> <p> <code>PUBLIC_KEY_AND_PASSWORD</code> - users must provide both their private key and their password to connect. The server checks the key first, and then if the key is valid, the system prompts for a password. If the private key provided does not match the public key that is stored, authentication fails.</p> </li>
    /// </ul>
    pub fn get_sftp_authentication_methods(&self) -> &::std::option::Option<crate::types::SftpAuthenticationMethods> {
        &self.sftp_authentication_methods
    }
    /// Consumes the builder and constructs a [`IdentityProviderDetails`](crate::types::IdentityProviderDetails).
    pub fn build(self) -> crate::types::IdentityProviderDetails {
        crate::types::IdentityProviderDetails {
            url: self.url,
            invocation_role: self.invocation_role,
            directory_id: self.directory_id,
            function: self.function,
            sftp_authentication_methods: self.sftp_authentication_methods,
        }
    }
}
