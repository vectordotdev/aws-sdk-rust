// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns the properties of the profile that was specified.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListedProfile {
    /// <p>The Amazon Resource Name (ARN) of the specified profile.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the local or partner AS2 profile.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The <code>As2Id</code> is the <i>AS2-name</i>, as defined in the <a href="https://datatracker.ietf.org/doc/html/rfc4130">RFC 4130</a>. For inbound transfers, this is the <code>AS2-From</code> header for the AS2 messages sent from the partner. For outbound connectors, this is the <code>AS2-To</code> header for the AS2 messages sent to the partner using the <code>StartFileTransfer</code> API operation. This ID cannot include spaces.</p>
    pub as2_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub profile_type: ::std::option::Option<crate::types::ProfileType>,
}
impl ListedProfile {
    /// <p>The Amazon Resource Name (ARN) of the specified profile.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A unique identifier for the local or partner AS2 profile.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The <code>As2Id</code> is the <i>AS2-name</i>, as defined in the <a href="https://datatracker.ietf.org/doc/html/rfc4130">RFC 4130</a>. For inbound transfers, this is the <code>AS2-From</code> header for the AS2 messages sent from the partner. For outbound connectors, this is the <code>AS2-To</code> header for the AS2 messages sent to the partner using the <code>StartFileTransfer</code> API operation. This ID cannot include spaces.</p>
    pub fn as2_id(&self) -> ::std::option::Option<&str> {
        self.as2_id.as_deref()
    }
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub fn profile_type(&self) -> ::std::option::Option<&crate::types::ProfileType> {
        self.profile_type.as_ref()
    }
}
impl ListedProfile {
    /// Creates a new builder-style object to manufacture [`ListedProfile`](crate::types::ListedProfile).
    pub fn builder() -> crate::types::builders::ListedProfileBuilder {
        crate::types::builders::ListedProfileBuilder::default()
    }
}

/// A builder for [`ListedProfile`](crate::types::ListedProfile).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListedProfileBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) as2_id: ::std::option::Option<::std::string::String>,
    pub(crate) profile_type: ::std::option::Option<crate::types::ProfileType>,
}
impl ListedProfileBuilder {
    /// <p>The Amazon Resource Name (ARN) of the specified profile.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the specified profile.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the specified profile.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A unique identifier for the local or partner AS2 profile.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the local or partner AS2 profile.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>A unique identifier for the local or partner AS2 profile.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>The <code>As2Id</code> is the <i>AS2-name</i>, as defined in the <a href="https://datatracker.ietf.org/doc/html/rfc4130">RFC 4130</a>. For inbound transfers, this is the <code>AS2-From</code> header for the AS2 messages sent from the partner. For outbound connectors, this is the <code>AS2-To</code> header for the AS2 messages sent to the partner using the <code>StartFileTransfer</code> API operation. This ID cannot include spaces.</p>
    pub fn as2_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.as2_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>As2Id</code> is the <i>AS2-name</i>, as defined in the <a href="https://datatracker.ietf.org/doc/html/rfc4130">RFC 4130</a>. For inbound transfers, this is the <code>AS2-From</code> header for the AS2 messages sent from the partner. For outbound connectors, this is the <code>AS2-To</code> header for the AS2 messages sent to the partner using the <code>StartFileTransfer</code> API operation. This ID cannot include spaces.</p>
    pub fn set_as2_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.as2_id = input;
        self
    }
    /// <p>The <code>As2Id</code> is the <i>AS2-name</i>, as defined in the <a href="https://datatracker.ietf.org/doc/html/rfc4130">RFC 4130</a>. For inbound transfers, this is the <code>AS2-From</code> header for the AS2 messages sent from the partner. For outbound connectors, this is the <code>AS2-To</code> header for the AS2 messages sent to the partner using the <code>StartFileTransfer</code> API operation. This ID cannot include spaces.</p>
    pub fn get_as2_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.as2_id
    }
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub fn profile_type(mut self, input: crate::types::ProfileType) -> Self {
        self.profile_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub fn set_profile_type(mut self, input: ::std::option::Option<crate::types::ProfileType>) -> Self {
        self.profile_type = input;
        self
    }
    /// <p>Indicates whether to list only <code>LOCAL</code> type profiles or only <code>PARTNER</code> type profiles. If not supplied in the request, the command lists all types of profiles.</p>
    pub fn get_profile_type(&self) -> &::std::option::Option<crate::types::ProfileType> {
        &self.profile_type
    }
    /// Consumes the builder and constructs a [`ListedProfile`](crate::types::ListedProfile).
    pub fn build(self) -> crate::types::ListedProfile {
        crate::types::ListedProfile {
            arn: self.arn,
            profile_id: self.profile_id,
            as2_id: self.as2_id,
            profile_type: self.profile_type,
        }
    }
}
