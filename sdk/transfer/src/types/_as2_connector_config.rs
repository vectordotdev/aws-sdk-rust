// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details for an AS2 connector object. The connector object is used for AS2 outbound processes, to connect the Transfer Family customer with the trading partner.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct As2ConnectorConfig {
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub local_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the partner profile for the connector.</p>
    pub partner_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>Used as the <code>Subject</code> HTTP header attribute in AS2 messages that are being sent with the connector.</p>
    pub message_subject: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the AS2 file is compressed.</p>
    pub compression: ::std::option::Option<crate::types::CompressionEnum>,
    /// <p>The algorithm that is used to encrypt the file.</p> <note>
    /// <p>You can only specify <code>NONE</code> if the URL for your connector uses HTTPS. This ensures that no traffic is sent in clear text.</p>
    /// </note>
    pub encryption_algorithm: ::std::option::Option<crate::types::EncryptionAlg>,
    /// <p>The algorithm that is used to sign the AS2 messages sent with the connector.</p>
    pub signing_algorithm: ::std::option::Option<crate::types::SigningAlg>,
    /// <p>The signing algorithm for the MDN response.</p> <note>
    /// <p>If set to DEFAULT (or not set at all), the value for <code>SigningAlgorithm</code> is used.</p>
    /// </note>
    pub mdn_signing_algorithm: ::std::option::Option<crate::types::MdnSigningAlg>,
    /// <p>Used for outbound requests (from an Transfer Family server to a partner AS2 server) to determine whether the partner response for transfers is synchronous or asynchronous. Specify either of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SYNC</code>: The system expects a synchronous MDN response, confirming that the file was transferred successfully (or not).</p> </li>
    /// <li> <p> <code>NONE</code>: Specifies that no MDN response is required.</p> </li>
    /// </ul>
    pub mdn_response: ::std::option::Option<crate::types::MdnResponse>,
    /// <p>Provides Basic authentication support to the AS2 Connectors API. To use Basic authentication, you must provide the name or Amazon Resource Name (ARN) of a secret in Secrets Manager.</p>
    /// <p>The default value for this parameter is <code>null</code>, which indicates that Basic authentication is not enabled for the connector.</p>
    /// <p>If the connector should use Basic authentication, the secret needs to be in the following format:</p>
    /// <p> <code>{ "Username": "user-name", "Password": "user-password" }</code> </p>
    /// <p>Replace <code>user-name</code> and <code>user-password</code> with the credentials for the actual user that is being authenticated.</p>
    /// <p>Note the following:</p>
    /// <ul>
    /// <li> <p>You are storing these credentials in Secrets Manager, <i>not passing them directly</i> into this API.</p> </li>
    /// <li> <p>If you are using the API, SDKs, or CloudFormation to configure your connector, then you must create the secret before you can enable Basic authentication. However, if you are using the Amazon Web Services management console, you can have the system create the secret for you.</p> </li>
    /// </ul>
    /// <p>If you have previously enabled Basic authentication for a connector, you can disable it by using the <code>UpdateConnector</code> API call. For example, if you are using the CLI, you can run the following command to remove Basic authentication:</p>
    /// <p> <code>update-connector --connector-id my-connector-id --as2-config 'BasicAuthSecretId=""'</code> </p>
    pub basic_auth_secret_id: ::std::option::Option<::std::string::String>,
}
impl As2ConnectorConfig {
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn local_profile_id(&self) -> ::std::option::Option<&str> {
        self.local_profile_id.as_deref()
    }
    /// <p>A unique identifier for the partner profile for the connector.</p>
    pub fn partner_profile_id(&self) -> ::std::option::Option<&str> {
        self.partner_profile_id.as_deref()
    }
    /// <p>Used as the <code>Subject</code> HTTP header attribute in AS2 messages that are being sent with the connector.</p>
    pub fn message_subject(&self) -> ::std::option::Option<&str> {
        self.message_subject.as_deref()
    }
    /// <p>Specifies whether the AS2 file is compressed.</p>
    pub fn compression(&self) -> ::std::option::Option<&crate::types::CompressionEnum> {
        self.compression.as_ref()
    }
    /// <p>The algorithm that is used to encrypt the file.</p> <note>
    /// <p>You can only specify <code>NONE</code> if the URL for your connector uses HTTPS. This ensures that no traffic is sent in clear text.</p>
    /// </note>
    pub fn encryption_algorithm(&self) -> ::std::option::Option<&crate::types::EncryptionAlg> {
        self.encryption_algorithm.as_ref()
    }
    /// <p>The algorithm that is used to sign the AS2 messages sent with the connector.</p>
    pub fn signing_algorithm(&self) -> ::std::option::Option<&crate::types::SigningAlg> {
        self.signing_algorithm.as_ref()
    }
    /// <p>The signing algorithm for the MDN response.</p> <note>
    /// <p>If set to DEFAULT (or not set at all), the value for <code>SigningAlgorithm</code> is used.</p>
    /// </note>
    pub fn mdn_signing_algorithm(&self) -> ::std::option::Option<&crate::types::MdnSigningAlg> {
        self.mdn_signing_algorithm.as_ref()
    }
    /// <p>Used for outbound requests (from an Transfer Family server to a partner AS2 server) to determine whether the partner response for transfers is synchronous or asynchronous. Specify either of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SYNC</code>: The system expects a synchronous MDN response, confirming that the file was transferred successfully (or not).</p> </li>
    /// <li> <p> <code>NONE</code>: Specifies that no MDN response is required.</p> </li>
    /// </ul>
    pub fn mdn_response(&self) -> ::std::option::Option<&crate::types::MdnResponse> {
        self.mdn_response.as_ref()
    }
    /// <p>Provides Basic authentication support to the AS2 Connectors API. To use Basic authentication, you must provide the name or Amazon Resource Name (ARN) of a secret in Secrets Manager.</p>
    /// <p>The default value for this parameter is <code>null</code>, which indicates that Basic authentication is not enabled for the connector.</p>
    /// <p>If the connector should use Basic authentication, the secret needs to be in the following format:</p>
    /// <p> <code>{ "Username": "user-name", "Password": "user-password" }</code> </p>
    /// <p>Replace <code>user-name</code> and <code>user-password</code> with the credentials for the actual user that is being authenticated.</p>
    /// <p>Note the following:</p>
    /// <ul>
    /// <li> <p>You are storing these credentials in Secrets Manager, <i>not passing them directly</i> into this API.</p> </li>
    /// <li> <p>If you are using the API, SDKs, or CloudFormation to configure your connector, then you must create the secret before you can enable Basic authentication. However, if you are using the Amazon Web Services management console, you can have the system create the secret for you.</p> </li>
    /// </ul>
    /// <p>If you have previously enabled Basic authentication for a connector, you can disable it by using the <code>UpdateConnector</code> API call. For example, if you are using the CLI, you can run the following command to remove Basic authentication:</p>
    /// <p> <code>update-connector --connector-id my-connector-id --as2-config 'BasicAuthSecretId=""'</code> </p>
    pub fn basic_auth_secret_id(&self) -> ::std::option::Option<&str> {
        self.basic_auth_secret_id.as_deref()
    }
}
impl As2ConnectorConfig {
    /// Creates a new builder-style object to manufacture [`As2ConnectorConfig`](crate::types::As2ConnectorConfig).
    pub fn builder() -> crate::types::builders::As2ConnectorConfigBuilder {
        crate::types::builders::As2ConnectorConfigBuilder::default()
    }
}

/// A builder for [`As2ConnectorConfig`](crate::types::As2ConnectorConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct As2ConnectorConfigBuilder {
    pub(crate) local_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) partner_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) message_subject: ::std::option::Option<::std::string::String>,
    pub(crate) compression: ::std::option::Option<crate::types::CompressionEnum>,
    pub(crate) encryption_algorithm: ::std::option::Option<crate::types::EncryptionAlg>,
    pub(crate) signing_algorithm: ::std::option::Option<crate::types::SigningAlg>,
    pub(crate) mdn_signing_algorithm: ::std::option::Option<crate::types::MdnSigningAlg>,
    pub(crate) mdn_response: ::std::option::Option<crate::types::MdnResponse>,
    pub(crate) basic_auth_secret_id: ::std::option::Option<::std::string::String>,
}
impl As2ConnectorConfigBuilder {
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn local_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.local_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn set_local_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.local_profile_id = input;
        self
    }
    /// <p>A unique identifier for the AS2 local profile.</p>
    pub fn get_local_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.local_profile_id
    }
    /// <p>A unique identifier for the partner profile for the connector.</p>
    pub fn partner_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.partner_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the partner profile for the connector.</p>
    pub fn set_partner_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.partner_profile_id = input;
        self
    }
    /// <p>A unique identifier for the partner profile for the connector.</p>
    pub fn get_partner_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.partner_profile_id
    }
    /// <p>Used as the <code>Subject</code> HTTP header attribute in AS2 messages that are being sent with the connector.</p>
    pub fn message_subject(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_subject = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Used as the <code>Subject</code> HTTP header attribute in AS2 messages that are being sent with the connector.</p>
    pub fn set_message_subject(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_subject = input;
        self
    }
    /// <p>Used as the <code>Subject</code> HTTP header attribute in AS2 messages that are being sent with the connector.</p>
    pub fn get_message_subject(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_subject
    }
    /// <p>Specifies whether the AS2 file is compressed.</p>
    pub fn compression(mut self, input: crate::types::CompressionEnum) -> Self {
        self.compression = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the AS2 file is compressed.</p>
    pub fn set_compression(mut self, input: ::std::option::Option<crate::types::CompressionEnum>) -> Self {
        self.compression = input;
        self
    }
    /// <p>Specifies whether the AS2 file is compressed.</p>
    pub fn get_compression(&self) -> &::std::option::Option<crate::types::CompressionEnum> {
        &self.compression
    }
    /// <p>The algorithm that is used to encrypt the file.</p> <note>
    /// <p>You can only specify <code>NONE</code> if the URL for your connector uses HTTPS. This ensures that no traffic is sent in clear text.</p>
    /// </note>
    pub fn encryption_algorithm(mut self, input: crate::types::EncryptionAlg) -> Self {
        self.encryption_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The algorithm that is used to encrypt the file.</p> <note>
    /// <p>You can only specify <code>NONE</code> if the URL for your connector uses HTTPS. This ensures that no traffic is sent in clear text.</p>
    /// </note>
    pub fn set_encryption_algorithm(mut self, input: ::std::option::Option<crate::types::EncryptionAlg>) -> Self {
        self.encryption_algorithm = input;
        self
    }
    /// <p>The algorithm that is used to encrypt the file.</p> <note>
    /// <p>You can only specify <code>NONE</code> if the URL for your connector uses HTTPS. This ensures that no traffic is sent in clear text.</p>
    /// </note>
    pub fn get_encryption_algorithm(&self) -> &::std::option::Option<crate::types::EncryptionAlg> {
        &self.encryption_algorithm
    }
    /// <p>The algorithm that is used to sign the AS2 messages sent with the connector.</p>
    pub fn signing_algorithm(mut self, input: crate::types::SigningAlg) -> Self {
        self.signing_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The algorithm that is used to sign the AS2 messages sent with the connector.</p>
    pub fn set_signing_algorithm(mut self, input: ::std::option::Option<crate::types::SigningAlg>) -> Self {
        self.signing_algorithm = input;
        self
    }
    /// <p>The algorithm that is used to sign the AS2 messages sent with the connector.</p>
    pub fn get_signing_algorithm(&self) -> &::std::option::Option<crate::types::SigningAlg> {
        &self.signing_algorithm
    }
    /// <p>The signing algorithm for the MDN response.</p> <note>
    /// <p>If set to DEFAULT (or not set at all), the value for <code>SigningAlgorithm</code> is used.</p>
    /// </note>
    pub fn mdn_signing_algorithm(mut self, input: crate::types::MdnSigningAlg) -> Self {
        self.mdn_signing_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The signing algorithm for the MDN response.</p> <note>
    /// <p>If set to DEFAULT (or not set at all), the value for <code>SigningAlgorithm</code> is used.</p>
    /// </note>
    pub fn set_mdn_signing_algorithm(mut self, input: ::std::option::Option<crate::types::MdnSigningAlg>) -> Self {
        self.mdn_signing_algorithm = input;
        self
    }
    /// <p>The signing algorithm for the MDN response.</p> <note>
    /// <p>If set to DEFAULT (or not set at all), the value for <code>SigningAlgorithm</code> is used.</p>
    /// </note>
    pub fn get_mdn_signing_algorithm(&self) -> &::std::option::Option<crate::types::MdnSigningAlg> {
        &self.mdn_signing_algorithm
    }
    /// <p>Used for outbound requests (from an Transfer Family server to a partner AS2 server) to determine whether the partner response for transfers is synchronous or asynchronous. Specify either of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SYNC</code>: The system expects a synchronous MDN response, confirming that the file was transferred successfully (or not).</p> </li>
    /// <li> <p> <code>NONE</code>: Specifies that no MDN response is required.</p> </li>
    /// </ul>
    pub fn mdn_response(mut self, input: crate::types::MdnResponse) -> Self {
        self.mdn_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>Used for outbound requests (from an Transfer Family server to a partner AS2 server) to determine whether the partner response for transfers is synchronous or asynchronous. Specify either of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SYNC</code>: The system expects a synchronous MDN response, confirming that the file was transferred successfully (or not).</p> </li>
    /// <li> <p> <code>NONE</code>: Specifies that no MDN response is required.</p> </li>
    /// </ul>
    pub fn set_mdn_response(mut self, input: ::std::option::Option<crate::types::MdnResponse>) -> Self {
        self.mdn_response = input;
        self
    }
    /// <p>Used for outbound requests (from an Transfer Family server to a partner AS2 server) to determine whether the partner response for transfers is synchronous or asynchronous. Specify either of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SYNC</code>: The system expects a synchronous MDN response, confirming that the file was transferred successfully (or not).</p> </li>
    /// <li> <p> <code>NONE</code>: Specifies that no MDN response is required.</p> </li>
    /// </ul>
    pub fn get_mdn_response(&self) -> &::std::option::Option<crate::types::MdnResponse> {
        &self.mdn_response
    }
    /// <p>Provides Basic authentication support to the AS2 Connectors API. To use Basic authentication, you must provide the name or Amazon Resource Name (ARN) of a secret in Secrets Manager.</p>
    /// <p>The default value for this parameter is <code>null</code>, which indicates that Basic authentication is not enabled for the connector.</p>
    /// <p>If the connector should use Basic authentication, the secret needs to be in the following format:</p>
    /// <p> <code>{ "Username": "user-name", "Password": "user-password" }</code> </p>
    /// <p>Replace <code>user-name</code> and <code>user-password</code> with the credentials for the actual user that is being authenticated.</p>
    /// <p>Note the following:</p>
    /// <ul>
    /// <li> <p>You are storing these credentials in Secrets Manager, <i>not passing them directly</i> into this API.</p> </li>
    /// <li> <p>If you are using the API, SDKs, or CloudFormation to configure your connector, then you must create the secret before you can enable Basic authentication. However, if you are using the Amazon Web Services management console, you can have the system create the secret for you.</p> </li>
    /// </ul>
    /// <p>If you have previously enabled Basic authentication for a connector, you can disable it by using the <code>UpdateConnector</code> API call. For example, if you are using the CLI, you can run the following command to remove Basic authentication:</p>
    /// <p> <code>update-connector --connector-id my-connector-id --as2-config 'BasicAuthSecretId=""'</code> </p>
    pub fn basic_auth_secret_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.basic_auth_secret_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides Basic authentication support to the AS2 Connectors API. To use Basic authentication, you must provide the name or Amazon Resource Name (ARN) of a secret in Secrets Manager.</p>
    /// <p>The default value for this parameter is <code>null</code>, which indicates that Basic authentication is not enabled for the connector.</p>
    /// <p>If the connector should use Basic authentication, the secret needs to be in the following format:</p>
    /// <p> <code>{ "Username": "user-name", "Password": "user-password" }</code> </p>
    /// <p>Replace <code>user-name</code> and <code>user-password</code> with the credentials for the actual user that is being authenticated.</p>
    /// <p>Note the following:</p>
    /// <ul>
    /// <li> <p>You are storing these credentials in Secrets Manager, <i>not passing them directly</i> into this API.</p> </li>
    /// <li> <p>If you are using the API, SDKs, or CloudFormation to configure your connector, then you must create the secret before you can enable Basic authentication. However, if you are using the Amazon Web Services management console, you can have the system create the secret for you.</p> </li>
    /// </ul>
    /// <p>If you have previously enabled Basic authentication for a connector, you can disable it by using the <code>UpdateConnector</code> API call. For example, if you are using the CLI, you can run the following command to remove Basic authentication:</p>
    /// <p> <code>update-connector --connector-id my-connector-id --as2-config 'BasicAuthSecretId=""'</code> </p>
    pub fn set_basic_auth_secret_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.basic_auth_secret_id = input;
        self
    }
    /// <p>Provides Basic authentication support to the AS2 Connectors API. To use Basic authentication, you must provide the name or Amazon Resource Name (ARN) of a secret in Secrets Manager.</p>
    /// <p>The default value for this parameter is <code>null</code>, which indicates that Basic authentication is not enabled for the connector.</p>
    /// <p>If the connector should use Basic authentication, the secret needs to be in the following format:</p>
    /// <p> <code>{ "Username": "user-name", "Password": "user-password" }</code> </p>
    /// <p>Replace <code>user-name</code> and <code>user-password</code> with the credentials for the actual user that is being authenticated.</p>
    /// <p>Note the following:</p>
    /// <ul>
    /// <li> <p>You are storing these credentials in Secrets Manager, <i>not passing them directly</i> into this API.</p> </li>
    /// <li> <p>If you are using the API, SDKs, or CloudFormation to configure your connector, then you must create the secret before you can enable Basic authentication. However, if you are using the Amazon Web Services management console, you can have the system create the secret for you.</p> </li>
    /// </ul>
    /// <p>If you have previously enabled Basic authentication for a connector, you can disable it by using the <code>UpdateConnector</code> API call. For example, if you are using the CLI, you can run the following command to remove Basic authentication:</p>
    /// <p> <code>update-connector --connector-id my-connector-id --as2-config 'BasicAuthSecretId=""'</code> </p>
    pub fn get_basic_auth_secret_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.basic_auth_secret_id
    }
    /// Consumes the builder and constructs a [`As2ConnectorConfig`](crate::types::As2ConnectorConfig).
    pub fn build(self) -> crate::types::As2ConnectorConfig {
        crate::types::As2ConnectorConfig {
            local_profile_id: self.local_profile_id,
            partner_profile_id: self.partner_profile_id,
            message_subject: self.message_subject,
            compression: self.compression,
            encryption_algorithm: self.encryption_algorithm,
            signing_algorithm: self.signing_algorithm,
            mdn_signing_algorithm: self.mdn_signing_algorithm,
            mdn_response: self.mdn_response,
            basic_auth_secret_id: self.basic_auth_secret_id,
        }
    }
}
