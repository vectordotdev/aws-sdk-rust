// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The full name of the user.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Name {
    /// <p>A string containing a formatted version of the name for display.</p>
    pub formatted: ::std::option::Option<::std::string::String>,
    /// <p>The family name of the user.</p>
    pub family_name: ::std::option::Option<::std::string::String>,
    /// <p>The given name of the user.</p>
    pub given_name: ::std::option::Option<::std::string::String>,
    /// <p>The middle name of the user.</p>
    pub middle_name: ::std::option::Option<::std::string::String>,
    /// <p>The honorific prefix of the user. For example, "Dr."</p>
    pub honorific_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The honorific suffix of the user. For example, "M.D."</p>
    pub honorific_suffix: ::std::option::Option<::std::string::String>,
}
impl Name {
    /// <p>A string containing a formatted version of the name for display.</p>
    pub fn formatted(&self) -> ::std::option::Option<&str> {
        self.formatted.as_deref()
    }
    /// <p>The family name of the user.</p>
    pub fn family_name(&self) -> ::std::option::Option<&str> {
        self.family_name.as_deref()
    }
    /// <p>The given name of the user.</p>
    pub fn given_name(&self) -> ::std::option::Option<&str> {
        self.given_name.as_deref()
    }
    /// <p>The middle name of the user.</p>
    pub fn middle_name(&self) -> ::std::option::Option<&str> {
        self.middle_name.as_deref()
    }
    /// <p>The honorific prefix of the user. For example, "Dr."</p>
    pub fn honorific_prefix(&self) -> ::std::option::Option<&str> {
        self.honorific_prefix.as_deref()
    }
    /// <p>The honorific suffix of the user. For example, "M.D."</p>
    pub fn honorific_suffix(&self) -> ::std::option::Option<&str> {
        self.honorific_suffix.as_deref()
    }
}
impl ::std::fmt::Debug for Name {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Name");
        formatter.field("formatted", &"*** Sensitive Data Redacted ***");
        formatter.field("family_name", &"*** Sensitive Data Redacted ***");
        formatter.field("given_name", &"*** Sensitive Data Redacted ***");
        formatter.field("middle_name", &"*** Sensitive Data Redacted ***");
        formatter.field("honorific_prefix", &"*** Sensitive Data Redacted ***");
        formatter.field("honorific_suffix", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl Name {
    /// Creates a new builder-style object to manufacture [`Name`](crate::types::Name).
    pub fn builder() -> crate::types::builders::NameBuilder {
        crate::types::builders::NameBuilder::default()
    }
}

/// A builder for [`Name`](crate::types::Name).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct NameBuilder {
    pub(crate) formatted: ::std::option::Option<::std::string::String>,
    pub(crate) family_name: ::std::option::Option<::std::string::String>,
    pub(crate) given_name: ::std::option::Option<::std::string::String>,
    pub(crate) middle_name: ::std::option::Option<::std::string::String>,
    pub(crate) honorific_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) honorific_suffix: ::std::option::Option<::std::string::String>,
}
impl NameBuilder {
    /// <p>A string containing a formatted version of the name for display.</p>
    pub fn formatted(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.formatted = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string containing a formatted version of the name for display.</p>
    pub fn set_formatted(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.formatted = input;
        self
    }
    /// <p>A string containing a formatted version of the name for display.</p>
    pub fn get_formatted(&self) -> &::std::option::Option<::std::string::String> {
        &self.formatted
    }
    /// <p>The family name of the user.</p>
    pub fn family_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.family_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The family name of the user.</p>
    pub fn set_family_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.family_name = input;
        self
    }
    /// <p>The family name of the user.</p>
    pub fn get_family_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.family_name
    }
    /// <p>The given name of the user.</p>
    pub fn given_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.given_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The given name of the user.</p>
    pub fn set_given_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.given_name = input;
        self
    }
    /// <p>The given name of the user.</p>
    pub fn get_given_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.given_name
    }
    /// <p>The middle name of the user.</p>
    pub fn middle_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.middle_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The middle name of the user.</p>
    pub fn set_middle_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.middle_name = input;
        self
    }
    /// <p>The middle name of the user.</p>
    pub fn get_middle_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.middle_name
    }
    /// <p>The honorific prefix of the user. For example, "Dr."</p>
    pub fn honorific_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.honorific_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The honorific prefix of the user. For example, "Dr."</p>
    pub fn set_honorific_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.honorific_prefix = input;
        self
    }
    /// <p>The honorific prefix of the user. For example, "Dr."</p>
    pub fn get_honorific_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.honorific_prefix
    }
    /// <p>The honorific suffix of the user. For example, "M.D."</p>
    pub fn honorific_suffix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.honorific_suffix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The honorific suffix of the user. For example, "M.D."</p>
    pub fn set_honorific_suffix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.honorific_suffix = input;
        self
    }
    /// <p>The honorific suffix of the user. For example, "M.D."</p>
    pub fn get_honorific_suffix(&self) -> &::std::option::Option<::std::string::String> {
        &self.honorific_suffix
    }
    /// Consumes the builder and constructs a [`Name`](crate::types::Name).
    pub fn build(self) -> crate::types::Name {
        crate::types::Name {
            formatted: self.formatted,
            family_name: self.family_name,
            given_name: self.given_name,
            middle_name: self.middle_name,
            honorific_prefix: self.honorific_prefix,
            honorific_suffix: self.honorific_suffix,
        }
    }
}
impl ::std::fmt::Debug for NameBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NameBuilder");
        formatter.field("formatted", &"*** Sensitive Data Redacted ***");
        formatter.field("family_name", &"*** Sensitive Data Redacted ***");
        formatter.field("given_name", &"*** Sensitive Data Redacted ***");
        formatter.field("middle_name", &"*** Sensitive Data Redacted ***");
        formatter.field("honorific_prefix", &"*** Sensitive Data Redacted ***");
        formatter.field("honorific_suffix", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
