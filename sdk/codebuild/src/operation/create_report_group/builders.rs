// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_report_group::_create_report_group_output::CreateReportGroupOutputBuilder;

pub use crate::operation::create_report_group::_create_report_group_input::CreateReportGroupInputBuilder;

impl CreateReportGroupInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_report_group::CreateReportGroupOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::create_report_group::CreateReportGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_report_group();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateReportGroup`.
///
/// <p> Creates a report group. A report group contains a collection of reports. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateReportGroupFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_report_group::builders::CreateReportGroupInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl CreateReportGroupFluentBuilder {
    /// Creates a new `CreateReportGroup`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateReportGroup as a reference.
    pub fn as_input(&self) -> &crate::operation::create_report_group::builders::CreateReportGroupInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_report_group::CreateReportGroupOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::create_report_group::CreateReportGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_report_group::CreateReportGroup::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_report_group::CreateReportGroup::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::create_report_group::CreateReportGroupOutput,
            crate::operation::create_report_group::CreateReportGroupError,
        >,
        ::aws_smithy_http::result::SdkError<crate::operation::create_report_group::CreateReportGroupError>,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p> The name of the report group. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p> The name of the report group. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p> The name of the report group. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p> The type of report group. </p>
    pub fn r#type(mut self, input: crate::types::ReportType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p> The type of report group. </p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ReportType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p> The type of report group. </p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ReportType> {
        self.inner.get_type()
    }
    /// <p> A <code>ReportExportConfig</code> object that contains information about where the report group test results are exported. </p>
    pub fn export_config(mut self, input: crate::types::ReportExportConfig) -> Self {
        self.inner = self.inner.export_config(input);
        self
    }
    /// <p> A <code>ReportExportConfig</code> object that contains information about where the report group test results are exported. </p>
    pub fn set_export_config(mut self, input: ::std::option::Option<crate::types::ReportExportConfig>) -> Self {
        self.inner = self.inner.set_export_config(input);
        self
    }
    /// <p> A <code>ReportExportConfig</code> object that contains information about where the report group test results are exported. </p>
    pub fn get_export_config(&self) -> &::std::option::Option<crate::types::ReportExportConfig> {
        self.inner.get_export_config()
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> A list of tag key and value pairs associated with this report group. </p>
    /// <p>These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p> A list of tag key and value pairs associated with this report group. </p>
    /// <p>These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p> A list of tag key and value pairs associated with this report group. </p>
    /// <p>These tags are available for use by Amazon Web Services services that support CodeBuild report group tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
