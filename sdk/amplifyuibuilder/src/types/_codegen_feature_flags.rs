// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the feature flags that you can specify for a code generation job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodegenFeatureFlags {
    /// <p>Specifes whether a code generation job supports data relationships.</p>
    pub is_relationship_supported: ::std::option::Option<bool>,
    /// <p>Specifies whether a code generation job supports non models.</p>
    pub is_non_model_supported: ::std::option::Option<bool>,
}
impl CodegenFeatureFlags {
    /// <p>Specifes whether a code generation job supports data relationships.</p>
    pub fn is_relationship_supported(&self) -> ::std::option::Option<bool> {
        self.is_relationship_supported
    }
    /// <p>Specifies whether a code generation job supports non models.</p>
    pub fn is_non_model_supported(&self) -> ::std::option::Option<bool> {
        self.is_non_model_supported
    }
}
impl CodegenFeatureFlags {
    /// Creates a new builder-style object to manufacture [`CodegenFeatureFlags`](crate::types::CodegenFeatureFlags).
    pub fn builder() -> crate::types::builders::CodegenFeatureFlagsBuilder {
        crate::types::builders::CodegenFeatureFlagsBuilder::default()
    }
}

/// A builder for [`CodegenFeatureFlags`](crate::types::CodegenFeatureFlags).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodegenFeatureFlagsBuilder {
    pub(crate) is_relationship_supported: ::std::option::Option<bool>,
    pub(crate) is_non_model_supported: ::std::option::Option<bool>,
}
impl CodegenFeatureFlagsBuilder {
    /// <p>Specifes whether a code generation job supports data relationships.</p>
    pub fn is_relationship_supported(mut self, input: bool) -> Self {
        self.is_relationship_supported = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifes whether a code generation job supports data relationships.</p>
    pub fn set_is_relationship_supported(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_relationship_supported = input;
        self
    }
    /// <p>Specifes whether a code generation job supports data relationships.</p>
    pub fn get_is_relationship_supported(&self) -> &::std::option::Option<bool> {
        &self.is_relationship_supported
    }
    /// <p>Specifies whether a code generation job supports non models.</p>
    pub fn is_non_model_supported(mut self, input: bool) -> Self {
        self.is_non_model_supported = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether a code generation job supports non models.</p>
    pub fn set_is_non_model_supported(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_non_model_supported = input;
        self
    }
    /// <p>Specifies whether a code generation job supports non models.</p>
    pub fn get_is_non_model_supported(&self) -> &::std::option::Option<bool> {
        &self.is_non_model_supported
    }
    /// Consumes the builder and constructs a [`CodegenFeatureFlags`](crate::types::CodegenFeatureFlags).
    pub fn build(self) -> crate::types::CodegenFeatureFlags {
        crate::types::CodegenFeatureFlags {
            is_relationship_supported: self.is_relationship_supported,
            is_non_model_supported: self.is_non_model_supported,
        }
    }
}
