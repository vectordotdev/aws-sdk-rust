// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the code generation job configuration for a React project.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReactStartCodegenJobData {
    /// <p>The JavaScript module type.</p>
    pub module: ::std::option::Option<crate::types::JsModule>,
    /// <p>The ECMAScript specification to use.</p>
    pub target: ::std::option::Option<crate::types::JsTarget>,
    /// <p>The file type to use for a JavaScript project.</p>
    pub script: ::std::option::Option<crate::types::JsScript>,
    /// <p>Specifies whether the code generation job should render type declaration files.</p>
    pub render_type_declarations: bool,
    /// <p>Specifies whether the code generation job should render inline source maps.</p>
    pub inline_source_map: bool,
}
impl ReactStartCodegenJobData {
    /// <p>The JavaScript module type.</p>
    pub fn module(&self) -> ::std::option::Option<&crate::types::JsModule> {
        self.module.as_ref()
    }
    /// <p>The ECMAScript specification to use.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::JsTarget> {
        self.target.as_ref()
    }
    /// <p>The file type to use for a JavaScript project.</p>
    pub fn script(&self) -> ::std::option::Option<&crate::types::JsScript> {
        self.script.as_ref()
    }
    /// <p>Specifies whether the code generation job should render type declaration files.</p>
    pub fn render_type_declarations(&self) -> bool {
        self.render_type_declarations
    }
    /// <p>Specifies whether the code generation job should render inline source maps.</p>
    pub fn inline_source_map(&self) -> bool {
        self.inline_source_map
    }
}
impl ReactStartCodegenJobData {
    /// Creates a new builder-style object to manufacture [`ReactStartCodegenJobData`](crate::types::ReactStartCodegenJobData).
    pub fn builder() -> crate::types::builders::ReactStartCodegenJobDataBuilder {
        crate::types::builders::ReactStartCodegenJobDataBuilder::default()
    }
}

/// A builder for [`ReactStartCodegenJobData`](crate::types::ReactStartCodegenJobData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReactStartCodegenJobDataBuilder {
    pub(crate) module: ::std::option::Option<crate::types::JsModule>,
    pub(crate) target: ::std::option::Option<crate::types::JsTarget>,
    pub(crate) script: ::std::option::Option<crate::types::JsScript>,
    pub(crate) render_type_declarations: ::std::option::Option<bool>,
    pub(crate) inline_source_map: ::std::option::Option<bool>,
}
impl ReactStartCodegenJobDataBuilder {
    /// <p>The JavaScript module type.</p>
    pub fn module(mut self, input: crate::types::JsModule) -> Self {
        self.module = ::std::option::Option::Some(input);
        self
    }
    /// <p>The JavaScript module type.</p>
    pub fn set_module(mut self, input: ::std::option::Option<crate::types::JsModule>) -> Self {
        self.module = input;
        self
    }
    /// <p>The JavaScript module type.</p>
    pub fn get_module(&self) -> &::std::option::Option<crate::types::JsModule> {
        &self.module
    }
    /// <p>The ECMAScript specification to use.</p>
    pub fn target(mut self, input: crate::types::JsTarget) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ECMAScript specification to use.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::JsTarget>) -> Self {
        self.target = input;
        self
    }
    /// <p>The ECMAScript specification to use.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::JsTarget> {
        &self.target
    }
    /// <p>The file type to use for a JavaScript project.</p>
    pub fn script(mut self, input: crate::types::JsScript) -> Self {
        self.script = ::std::option::Option::Some(input);
        self
    }
    /// <p>The file type to use for a JavaScript project.</p>
    pub fn set_script(mut self, input: ::std::option::Option<crate::types::JsScript>) -> Self {
        self.script = input;
        self
    }
    /// <p>The file type to use for a JavaScript project.</p>
    pub fn get_script(&self) -> &::std::option::Option<crate::types::JsScript> {
        &self.script
    }
    /// <p>Specifies whether the code generation job should render type declaration files.</p>
    pub fn render_type_declarations(mut self, input: bool) -> Self {
        self.render_type_declarations = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the code generation job should render type declaration files.</p>
    pub fn set_render_type_declarations(mut self, input: ::std::option::Option<bool>) -> Self {
        self.render_type_declarations = input;
        self
    }
    /// <p>Specifies whether the code generation job should render type declaration files.</p>
    pub fn get_render_type_declarations(&self) -> &::std::option::Option<bool> {
        &self.render_type_declarations
    }
    /// <p>Specifies whether the code generation job should render inline source maps.</p>
    pub fn inline_source_map(mut self, input: bool) -> Self {
        self.inline_source_map = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the code generation job should render inline source maps.</p>
    pub fn set_inline_source_map(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inline_source_map = input;
        self
    }
    /// <p>Specifies whether the code generation job should render inline source maps.</p>
    pub fn get_inline_source_map(&self) -> &::std::option::Option<bool> {
        &self.inline_source_map
    }
    /// Consumes the builder and constructs a [`ReactStartCodegenJobData`](crate::types::ReactStartCodegenJobData).
    pub fn build(self) -> crate::types::ReactStartCodegenJobData {
        crate::types::ReactStartCodegenJobData {
            module: self.module,
            target: self.target,
            script: self.script,
            render_type_declarations: self.render_type_declarations.unwrap_or_default(),
            inline_source_map: self.inline_source_map.unwrap_or_default(),
        }
    }
}
