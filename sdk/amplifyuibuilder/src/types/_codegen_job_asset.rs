// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an asset for a code generation job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodegenJobAsset {
    /// <p>The URL to use to access the asset.</p>
    pub download_url: ::std::option::Option<::std::string::String>,
}
impl CodegenJobAsset {
    /// <p>The URL to use to access the asset.</p>
    pub fn download_url(&self) -> ::std::option::Option<&str> {
        self.download_url.as_deref()
    }
}
impl CodegenJobAsset {
    /// Creates a new builder-style object to manufacture [`CodegenJobAsset`](crate::types::CodegenJobAsset).
    pub fn builder() -> crate::types::builders::CodegenJobAssetBuilder {
        crate::types::builders::CodegenJobAssetBuilder::default()
    }
}

/// A builder for [`CodegenJobAsset`](crate::types::CodegenJobAsset).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodegenJobAssetBuilder {
    pub(crate) download_url: ::std::option::Option<::std::string::String>,
}
impl CodegenJobAssetBuilder {
    /// <p>The URL to use to access the asset.</p>
    pub fn download_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.download_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL to use to access the asset.</p>
    pub fn set_download_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.download_url = input;
        self
    }
    /// <p>The URL to use to access the asset.</p>
    pub fn get_download_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.download_url
    }
    /// Consumes the builder and constructs a [`CodegenJobAsset`](crate::types::CodegenJobAsset).
    pub fn build(self) -> crate::types::CodegenJobAsset {
        crate::types::CodegenJobAsset {
            download_url: self.download_url,
        }
    }
}
