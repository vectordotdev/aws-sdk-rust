// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the data binding configuration for a form's input fields at runtime.You can use <code>FormInputBindingPropertiesValue</code> to add exposed properties to a form to allow different values to be entered when a form is reused in different places in an app.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FormInputBindingPropertiesValue {
    /// <p>The property type.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>Describes the properties to customize with data at runtime.</p>
    pub binding_properties: ::std::option::Option<crate::types::FormInputBindingPropertiesValueProperties>,
}
impl FormInputBindingPropertiesValue {
    /// <p>The property type.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>Describes the properties to customize with data at runtime.</p>
    pub fn binding_properties(&self) -> ::std::option::Option<&crate::types::FormInputBindingPropertiesValueProperties> {
        self.binding_properties.as_ref()
    }
}
impl FormInputBindingPropertiesValue {
    /// Creates a new builder-style object to manufacture [`FormInputBindingPropertiesValue`](crate::types::FormInputBindingPropertiesValue).
    pub fn builder() -> crate::types::builders::FormInputBindingPropertiesValueBuilder {
        crate::types::builders::FormInputBindingPropertiesValueBuilder::default()
    }
}

/// A builder for [`FormInputBindingPropertiesValue`](crate::types::FormInputBindingPropertiesValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FormInputBindingPropertiesValueBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) binding_properties: ::std::option::Option<crate::types::FormInputBindingPropertiesValueProperties>,
}
impl FormInputBindingPropertiesValueBuilder {
    /// <p>The property type.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The property type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The property type.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>Describes the properties to customize with data at runtime.</p>
    pub fn binding_properties(mut self, input: crate::types::FormInputBindingPropertiesValueProperties) -> Self {
        self.binding_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the properties to customize with data at runtime.</p>
    pub fn set_binding_properties(mut self, input: ::std::option::Option<crate::types::FormInputBindingPropertiesValueProperties>) -> Self {
        self.binding_properties = input;
        self
    }
    /// <p>Describes the properties to customize with data at runtime.</p>
    pub fn get_binding_properties(&self) -> &::std::option::Option<crate::types::FormInputBindingPropertiesValueProperties> {
        &self.binding_properties
    }
    /// Consumes the builder and constructs a [`FormInputBindingPropertiesValue`](crate::types::FormInputBindingPropertiesValue).
    pub fn build(self) -> crate::types::FormInputBindingPropertiesValue {
        crate::types::FormInputBindingPropertiesValue {
            r#type: self.r#type,
            binding_properties: self.binding_properties,
        }
    }
}
