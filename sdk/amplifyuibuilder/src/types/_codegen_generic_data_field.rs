// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a field in a generic data schema.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodegenGenericDataField {
    /// <p>The data type for the generic data field.</p>
    pub data_type: ::std::option::Option<crate::types::CodegenGenericDataFieldDataType>,
    /// <p>The value of the data type for the generic data field.</p>
    pub data_type_value: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the generic data field is required.</p>
    pub required: ::std::option::Option<bool>,
    /// <p>Specifies whether the generic data field is read-only.</p>
    pub read_only: ::std::option::Option<bool>,
    /// <p>Specifies whether the generic data field is an array.</p>
    pub is_array: ::std::option::Option<bool>,
    /// <p>The relationship of the generic data schema.</p>
    pub relationship: ::std::option::Option<crate::types::CodegenGenericDataRelationshipType>,
}
impl CodegenGenericDataField {
    /// <p>The data type for the generic data field.</p>
    pub fn data_type(&self) -> ::std::option::Option<&crate::types::CodegenGenericDataFieldDataType> {
        self.data_type.as_ref()
    }
    /// <p>The value of the data type for the generic data field.</p>
    pub fn data_type_value(&self) -> ::std::option::Option<&str> {
        self.data_type_value.as_deref()
    }
    /// <p>Specifies whether the generic data field is required.</p>
    pub fn required(&self) -> ::std::option::Option<bool> {
        self.required
    }
    /// <p>Specifies whether the generic data field is read-only.</p>
    pub fn read_only(&self) -> ::std::option::Option<bool> {
        self.read_only
    }
    /// <p>Specifies whether the generic data field is an array.</p>
    pub fn is_array(&self) -> ::std::option::Option<bool> {
        self.is_array
    }
    /// <p>The relationship of the generic data schema.</p>
    pub fn relationship(&self) -> ::std::option::Option<&crate::types::CodegenGenericDataRelationshipType> {
        self.relationship.as_ref()
    }
}
impl CodegenGenericDataField {
    /// Creates a new builder-style object to manufacture [`CodegenGenericDataField`](crate::types::CodegenGenericDataField).
    pub fn builder() -> crate::types::builders::CodegenGenericDataFieldBuilder {
        crate::types::builders::CodegenGenericDataFieldBuilder::default()
    }
}

/// A builder for [`CodegenGenericDataField`](crate::types::CodegenGenericDataField).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodegenGenericDataFieldBuilder {
    pub(crate) data_type: ::std::option::Option<crate::types::CodegenGenericDataFieldDataType>,
    pub(crate) data_type_value: ::std::option::Option<::std::string::String>,
    pub(crate) required: ::std::option::Option<bool>,
    pub(crate) read_only: ::std::option::Option<bool>,
    pub(crate) is_array: ::std::option::Option<bool>,
    pub(crate) relationship: ::std::option::Option<crate::types::CodegenGenericDataRelationshipType>,
}
impl CodegenGenericDataFieldBuilder {
    /// <p>The data type for the generic data field.</p>
    pub fn data_type(mut self, input: crate::types::CodegenGenericDataFieldDataType) -> Self {
        self.data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type for the generic data field.</p>
    pub fn set_data_type(mut self, input: ::std::option::Option<crate::types::CodegenGenericDataFieldDataType>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>The data type for the generic data field.</p>
    pub fn get_data_type(&self) -> &::std::option::Option<crate::types::CodegenGenericDataFieldDataType> {
        &self.data_type
    }
    /// <p>The value of the data type for the generic data field.</p>
    pub fn data_type_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_type_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the data type for the generic data field.</p>
    pub fn set_data_type_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_type_value = input;
        self
    }
    /// <p>The value of the data type for the generic data field.</p>
    pub fn get_data_type_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_type_value
    }
    /// <p>Specifies whether the generic data field is required.</p>
    pub fn required(mut self, input: bool) -> Self {
        self.required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the generic data field is required.</p>
    pub fn set_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// <p>Specifies whether the generic data field is required.</p>
    pub fn get_required(&self) -> &::std::option::Option<bool> {
        &self.required
    }
    /// <p>Specifies whether the generic data field is read-only.</p>
    pub fn read_only(mut self, input: bool) -> Self {
        self.read_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the generic data field is read-only.</p>
    pub fn set_read_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.read_only = input;
        self
    }
    /// <p>Specifies whether the generic data field is read-only.</p>
    pub fn get_read_only(&self) -> &::std::option::Option<bool> {
        &self.read_only
    }
    /// <p>Specifies whether the generic data field is an array.</p>
    pub fn is_array(mut self, input: bool) -> Self {
        self.is_array = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the generic data field is an array.</p>
    pub fn set_is_array(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_array = input;
        self
    }
    /// <p>Specifies whether the generic data field is an array.</p>
    pub fn get_is_array(&self) -> &::std::option::Option<bool> {
        &self.is_array
    }
    /// <p>The relationship of the generic data schema.</p>
    pub fn relationship(mut self, input: crate::types::CodegenGenericDataRelationshipType) -> Self {
        self.relationship = ::std::option::Option::Some(input);
        self
    }
    /// <p>The relationship of the generic data schema.</p>
    pub fn set_relationship(mut self, input: ::std::option::Option<crate::types::CodegenGenericDataRelationshipType>) -> Self {
        self.relationship = input;
        self
    }
    /// <p>The relationship of the generic data schema.</p>
    pub fn get_relationship(&self) -> &::std::option::Option<crate::types::CodegenGenericDataRelationshipType> {
        &self.relationship
    }
    /// Consumes the builder and constructs a [`CodegenGenericDataField`](crate::types::CodegenGenericDataField).
    pub fn build(self) -> crate::types::CodegenGenericDataField {
        crate::types::CodegenGenericDataField {
            data_type: self.data_type,
            data_type_value: self.data_type_value,
            required: self.required,
            read_only: self.read_only,
            is_array: self.is_array,
            relationship: self.relationship,
        }
    }
}
