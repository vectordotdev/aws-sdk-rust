// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_codegen_job_generic_data_schema(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CodegenJobGenericDataSchema,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.data_source_type {
        object.key("dataSourceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.models {
        #[allow(unused_mut)]
        let mut object_3 = object.key("models").start_object();
        for (key_4, value_5) in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_6 = object_3.key(key_4.as_str()).start_object();
                crate::protocol_serde::shape_codegen_generic_data_model::ser_codegen_generic_data_model(&mut object_6, value_5)?;
                object_6.finish();
            }
        }
        object_3.finish();
    }
    if let Some(var_7) = &input.enums {
        #[allow(unused_mut)]
        let mut object_8 = object.key("enums").start_object();
        for (key_9, value_10) in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_11 = object_8.key(key_9.as_str()).start_object();
                crate::protocol_serde::shape_codegen_generic_data_enum::ser_codegen_generic_data_enum(&mut object_11, value_10)?;
                object_11.finish();
            }
        }
        object_8.finish();
    }
    if let Some(var_12) = &input.non_models {
        #[allow(unused_mut)]
        let mut object_13 = object.key("nonModels").start_object();
        for (key_14, value_15) in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_16 = object_13.key(key_14.as_str()).start_object();
                crate::protocol_serde::shape_codegen_generic_data_non_model::ser_codegen_generic_data_non_model(&mut object_16, value_15)?;
                object_16.finish();
            }
        }
        object_13.finish();
    }
    Ok(())
}

pub(crate) fn de_codegen_job_generic_data_schema<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::CodegenJobGenericDataSchema>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CodegenJobGenericDataSchemaBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "dataSourceType" => {
                            builder = builder.set_data_source_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CodegenJobGenericDataSourceType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "models" => {
                            builder = builder.set_models(crate::protocol_serde::shape_codegen_generic_data_models::de_codegen_generic_data_models(
                                tokens,
                            )?);
                        }
                        "enums" => {
                            builder = builder.set_enums(crate::protocol_serde::shape_codegen_generic_data_enums::de_codegen_generic_data_enums(
                                tokens,
                            )?);
                        }
                        "nonModels" => {
                            builder = builder.set_non_models(
                                crate::protocol_serde::shape_codegen_generic_data_non_models::de_codegen_generic_data_non_models(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
