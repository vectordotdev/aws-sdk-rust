// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_recurrence_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RecurrenceSettings,
) -> Result<(), ::aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.monthly_settings {
        let mut array_2 = object.key("MonthlySettings").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_monthly_setting::ser_monthly_setting(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.weekly_settings {
        let mut array_6 = object.key("WeeklySettings").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_weekly_setting::ser_weekly_setting(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.daily_settings {
        let mut array_10 = object.key("DailySettings").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_hand_off_time::ser_hand_off_time(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.number_of_on_calls {
        object.key("NumberOfOnCalls").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.shift_coverages {
        #[allow(unused_mut)]
        let mut object_15 = object.key("ShiftCoverages").start_object();
        for (key_16, value_17) in var_14 {
            {
                let mut array_18 = object_15.key(key_16.as_str()).start_array();
                for item_19 in value_17 {
                    {
                        #[allow(unused_mut)]
                        let mut object_20 = array_18.value().start_object();
                        crate::protocol_serde::shape_coverage_time::ser_coverage_time(&mut object_20, item_19)?;
                        object_20.finish();
                    }
                }
                array_18.finish();
            }
        }
        object_15.finish();
    }
    if let Some(var_21) = &input.recurrence_multiplier {
        object.key("RecurrenceMultiplier").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_recurrence_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::RecurrenceSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RecurrenceSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "MonthlySettings" => {
                            builder = builder.set_monthly_settings(crate::protocol_serde::shape_monthly_settings::de_monthly_settings(tokens)?);
                        }
                        "WeeklySettings" => {
                            builder = builder.set_weekly_settings(crate::protocol_serde::shape_weekly_settings::de_weekly_settings(tokens)?);
                        }
                        "DailySettings" => {
                            builder = builder.set_daily_settings(crate::protocol_serde::shape_daily_settings::de_daily_settings(tokens)?);
                        }
                        "NumberOfOnCalls" => {
                            builder = builder.set_number_of_on_calls(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "ShiftCoverages" => {
                            builder = builder.set_shift_coverages(crate::protocol_serde::shape_shift_coverages_map::de_shift_coverages_map(tokens)?);
                        }
                        "RecurrenceMultiplier" => {
                            builder = builder.set_recurrence_multiplier(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
