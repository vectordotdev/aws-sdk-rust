// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_configuration_set_event_destination::_create_configuration_set_event_destination_output::CreateConfigurationSetEventDestinationOutputBuilder;

pub use crate::operation::create_configuration_set_event_destination::_create_configuration_set_event_destination_input::CreateConfigurationSetEventDestinationInputBuilder;

impl CreateConfigurationSetEventDestinationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_configuration_set_event_destination();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateConfigurationSetEventDestination`.
///
/// <p>Create an event destination. <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
/// <p>A single configuration set can include more than one event destination.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateConfigurationSetEventDestinationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_configuration_set_event_destination::builders::CreateConfigurationSetEventDestinationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl CreateConfigurationSetEventDestinationFluentBuilder {
    /// Creates a new `CreateConfigurationSetEventDestination`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateConfigurationSetEventDestination as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::create_configuration_set_event_destination::builders::CreateConfigurationSetEventDestinationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self.inner.build().map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestination::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestination::orchestrate(&runtime_plugins, input)
            .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent.
    // TODO(enableNewSmithyRuntimeCleanup): Remove `async` and `Result` once we switch to orchestrator
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::orchestrator::CustomizableOperation<
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationOutput,
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError,
        >,
    > {
        ::std::result::Result::Ok(crate::client::customize::orchestrator::CustomizableOperation {
            customizable_send: ::std::boxed::Box::new(move |config_override| {
                ::std::boxed::Box::pin(async { self.config_override(config_override).send().await })
            }),
            config_override: None,
            interceptors: vec![],
            runtime_plugins: vec![],
        })
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the configuration set .</p>
    pub fn configuration_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.configuration_set_name(input.into());
        self
    }
    /// <p>The name of the configuration set .</p>
    pub fn set_configuration_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_configuration_set_name(input);
        self
    }
    /// <p>The name of the configuration set .</p>
    pub fn get_configuration_set_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_configuration_set_name()
    }
    /// <p>A name that identifies the event destination within the configuration set.</p>
    pub fn event_destination_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.event_destination_name(input.into());
        self
    }
    /// <p>A name that identifies the event destination within the configuration set.</p>
    pub fn set_event_destination_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_event_destination_name(input);
        self
    }
    /// <p>A name that identifies the event destination within the configuration set.</p>
    pub fn get_event_destination_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_event_destination_name()
    }
    /// <p>An object that defines the event destination.</p>
    pub fn event_destination(mut self, input: crate::types::EventDestinationDefinition) -> Self {
        self.inner = self.inner.event_destination(input);
        self
    }
    /// <p>An object that defines the event destination.</p>
    pub fn set_event_destination(mut self, input: ::std::option::Option<crate::types::EventDestinationDefinition>) -> Self {
        self.inner = self.inner.set_event_destination(input);
        self
    }
    /// <p>An object that defines the event destination.</p>
    pub fn get_event_destination(&self) -> &::std::option::Option<crate::types::EventDestinationDefinition> {
        self.inner.get_event_destination()
    }
}
