// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a dedicated IP pool.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DedicatedIpPool {
    /// <p>The name of the dedicated IP pool.</p>
    pub pool_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the dedicated IP pool.</p>
    /// <ul>
    /// <li> <p> <code>STANDARD</code> – A dedicated IP pool where you can control which IPs are part of the pool.</p> </li>
    /// <li> <p> <code>MANAGED</code> – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.</p> </li>
    /// </ul>
    pub scaling_mode: ::std::option::Option<crate::types::ScalingMode>,
}
impl DedicatedIpPool {
    /// <p>The name of the dedicated IP pool.</p>
    pub fn pool_name(&self) -> ::std::option::Option<&str> {
        self.pool_name.as_deref()
    }
    /// <p>The type of the dedicated IP pool.</p>
    /// <ul>
    /// <li> <p> <code>STANDARD</code> – A dedicated IP pool where you can control which IPs are part of the pool.</p> </li>
    /// <li> <p> <code>MANAGED</code> – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.</p> </li>
    /// </ul>
    pub fn scaling_mode(&self) -> ::std::option::Option<&crate::types::ScalingMode> {
        self.scaling_mode.as_ref()
    }
}
impl DedicatedIpPool {
    /// Creates a new builder-style object to manufacture [`DedicatedIpPool`](crate::types::DedicatedIpPool).
    pub fn builder() -> crate::types::builders::DedicatedIpPoolBuilder {
        crate::types::builders::DedicatedIpPoolBuilder::default()
    }
}

/// A builder for [`DedicatedIpPool`](crate::types::DedicatedIpPool).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DedicatedIpPoolBuilder {
    pub(crate) pool_name: ::std::option::Option<::std::string::String>,
    pub(crate) scaling_mode: ::std::option::Option<crate::types::ScalingMode>,
}
impl DedicatedIpPoolBuilder {
    /// <p>The name of the dedicated IP pool.</p>
    pub fn pool_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dedicated IP pool.</p>
    pub fn set_pool_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_name = input;
        self
    }
    /// <p>The name of the dedicated IP pool.</p>
    pub fn get_pool_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_name
    }
    /// <p>The type of the dedicated IP pool.</p>
    /// <ul>
    /// <li> <p> <code>STANDARD</code> – A dedicated IP pool where you can control which IPs are part of the pool.</p> </li>
    /// <li> <p> <code>MANAGED</code> – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.</p> </li>
    /// </ul>
    pub fn scaling_mode(mut self, input: crate::types::ScalingMode) -> Self {
        self.scaling_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the dedicated IP pool.</p>
    /// <ul>
    /// <li> <p> <code>STANDARD</code> – A dedicated IP pool where you can control which IPs are part of the pool.</p> </li>
    /// <li> <p> <code>MANAGED</code> – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.</p> </li>
    /// </ul>
    pub fn set_scaling_mode(mut self, input: ::std::option::Option<crate::types::ScalingMode>) -> Self {
        self.scaling_mode = input;
        self
    }
    /// <p>The type of the dedicated IP pool.</p>
    /// <ul>
    /// <li> <p> <code>STANDARD</code> – A dedicated IP pool where you can control which IPs are part of the pool.</p> </li>
    /// <li> <p> <code>MANAGED</code> – A dedicated IP pool where the reputation and number of IPs are automatically managed by Amazon SES.</p> </li>
    /// </ul>
    pub fn get_scaling_mode(&self) -> &::std::option::Option<crate::types::ScalingMode> {
        &self.scaling_mode
    }
    /// Consumes the builder and constructs a [`DedicatedIpPool`](crate::types::DedicatedIpPool).
    pub fn build(self) -> crate::types::DedicatedIpPool {
        crate::types::DedicatedIpPool {
            pool_name: self.pool_name,
            scaling_mode: self.scaling_mode,
        }
    }
}
