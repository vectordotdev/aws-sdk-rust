// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Auto-Tune settings for a domain, displayed when enabling or disabling Auto-Tune.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutoTuneOptionsOutput {
    /// <p>The current state of Auto-Tune on the domain.</p>
    pub state: ::std::option::Option<crate::types::AutoTuneState>,
    /// <p>Any errors that occurred while enabling or disabling Auto-Tune.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>Whether the domain's off-peak window will be used to deploy Auto-Tune changes rather than a maintenance schedule.</p>
    pub use_off_peak_window: ::std::option::Option<bool>,
}
impl AutoTuneOptionsOutput {
    /// <p>The current state of Auto-Tune on the domain.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::AutoTuneState> {
        self.state.as_ref()
    }
    /// <p>Any errors that occurred while enabling or disabling Auto-Tune.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>Whether the domain's off-peak window will be used to deploy Auto-Tune changes rather than a maintenance schedule.</p>
    pub fn use_off_peak_window(&self) -> ::std::option::Option<bool> {
        self.use_off_peak_window
    }
}
impl AutoTuneOptionsOutput {
    /// Creates a new builder-style object to manufacture [`AutoTuneOptionsOutput`](crate::types::AutoTuneOptionsOutput).
    pub fn builder() -> crate::types::builders::AutoTuneOptionsOutputBuilder {
        crate::types::builders::AutoTuneOptionsOutputBuilder::default()
    }
}

/// A builder for [`AutoTuneOptionsOutput`](crate::types::AutoTuneOptionsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AutoTuneOptionsOutputBuilder {
    pub(crate) state: ::std::option::Option<crate::types::AutoTuneState>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) use_off_peak_window: ::std::option::Option<bool>,
}
impl AutoTuneOptionsOutputBuilder {
    /// <p>The current state of Auto-Tune on the domain.</p>
    pub fn state(mut self, input: crate::types::AutoTuneState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of Auto-Tune on the domain.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::AutoTuneState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of Auto-Tune on the domain.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::AutoTuneState> {
        &self.state
    }
    /// <p>Any errors that occurred while enabling or disabling Auto-Tune.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Any errors that occurred while enabling or disabling Auto-Tune.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>Any errors that occurred while enabling or disabling Auto-Tune.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>Whether the domain's off-peak window will be used to deploy Auto-Tune changes rather than a maintenance schedule.</p>
    pub fn use_off_peak_window(mut self, input: bool) -> Self {
        self.use_off_peak_window = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the domain's off-peak window will be used to deploy Auto-Tune changes rather than a maintenance schedule.</p>
    pub fn set_use_off_peak_window(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_off_peak_window = input;
        self
    }
    /// <p>Whether the domain's off-peak window will be used to deploy Auto-Tune changes rather than a maintenance schedule.</p>
    pub fn get_use_off_peak_window(&self) -> &::std::option::Option<bool> {
        &self.use_off_peak_window
    }
    /// Consumes the builder and constructs a [`AutoTuneOptionsOutput`](crate::types::AutoTuneOptionsOutput).
    pub fn build(self) -> crate::types::AutoTuneOptionsOutput {
        crate::types::AutoTuneOptionsOutput {
            state: self.state,
            error_message: self.error_message,
            use_off_peak_window: self.use_off_peak_window,
        }
    }
}
