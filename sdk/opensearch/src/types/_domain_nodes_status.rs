// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for information about nodes on the domain.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DomainNodesStatus {
    /// <p>The ID of the node.</p>
    pub node_id: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the nodes is a data, master, or ultrawarm node.</p>
    pub node_type: ::std::option::Option<crate::types::NodeType>,
    /// <p>The Availability Zone of the node.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The instance type information of the node.</p>
    pub instance_type: ::std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    /// <p>Indicates if the node is active or in standby.</p>
    pub node_status: ::std::option::Option<crate::types::NodeStatus>,
    /// <p>Indicates if the node has EBS or instance storage. </p>
    pub storage_type: ::std::option::Option<::std::string::String>,
    /// <p>If the nodes has EBS storage, indicates if the volume type is GP2 or GP3. Only applicable for data nodes. </p>
    pub storage_volume_type: ::std::option::Option<crate::types::VolumeType>,
    /// <p>The storage size of the node, in GiB.</p>
    pub storage_size: ::std::option::Option<::std::string::String>,
}
impl DomainNodesStatus {
    /// <p>The ID of the node.</p>
    pub fn node_id(&self) -> ::std::option::Option<&str> {
        self.node_id.as_deref()
    }
    /// <p>Indicates whether the nodes is a data, master, or ultrawarm node.</p>
    pub fn node_type(&self) -> ::std::option::Option<&crate::types::NodeType> {
        self.node_type.as_ref()
    }
    /// <p>The Availability Zone of the node.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The instance type information of the node.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::OpenSearchPartitionInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>Indicates if the node is active or in standby.</p>
    pub fn node_status(&self) -> ::std::option::Option<&crate::types::NodeStatus> {
        self.node_status.as_ref()
    }
    /// <p>Indicates if the node has EBS or instance storage. </p>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>If the nodes has EBS storage, indicates if the volume type is GP2 or GP3. Only applicable for data nodes. </p>
    pub fn storage_volume_type(&self) -> ::std::option::Option<&crate::types::VolumeType> {
        self.storage_volume_type.as_ref()
    }
    /// <p>The storage size of the node, in GiB.</p>
    pub fn storage_size(&self) -> ::std::option::Option<&str> {
        self.storage_size.as_deref()
    }
}
impl DomainNodesStatus {
    /// Creates a new builder-style object to manufacture [`DomainNodesStatus`](crate::types::DomainNodesStatus).
    pub fn builder() -> crate::types::builders::DomainNodesStatusBuilder {
        crate::types::builders::DomainNodesStatusBuilder::default()
    }
}

/// A builder for [`DomainNodesStatus`](crate::types::DomainNodesStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DomainNodesStatusBuilder {
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
    pub(crate) node_type: ::std::option::Option<crate::types::NodeType>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    pub(crate) node_status: ::std::option::Option<crate::types::NodeStatus>,
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
    pub(crate) storage_volume_type: ::std::option::Option<crate::types::VolumeType>,
    pub(crate) storage_size: ::std::option::Option<::std::string::String>,
}
impl DomainNodesStatusBuilder {
    /// <p>The ID of the node.</p>
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the node.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The ID of the node.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// <p>Indicates whether the nodes is a data, master, or ultrawarm node.</p>
    pub fn node_type(mut self, input: crate::types::NodeType) -> Self {
        self.node_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the nodes is a data, master, or ultrawarm node.</p>
    pub fn set_node_type(mut self, input: ::std::option::Option<crate::types::NodeType>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>Indicates whether the nodes is a data, master, or ultrawarm node.</p>
    pub fn get_node_type(&self) -> &::std::option::Option<crate::types::NodeType> {
        &self.node_type
    }
    /// <p>The Availability Zone of the node.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone of the node.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone of the node.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The instance type information of the node.</p>
    pub fn instance_type(mut self, input: crate::types::OpenSearchPartitionInstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The instance type information of the node.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::OpenSearchPartitionInstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type information of the node.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::OpenSearchPartitionInstanceType> {
        &self.instance_type
    }
    /// <p>Indicates if the node is active or in standby.</p>
    pub fn node_status(mut self, input: crate::types::NodeStatus) -> Self {
        self.node_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the node is active or in standby.</p>
    pub fn set_node_status(mut self, input: ::std::option::Option<crate::types::NodeStatus>) -> Self {
        self.node_status = input;
        self
    }
    /// <p>Indicates if the node is active or in standby.</p>
    pub fn get_node_status(&self) -> &::std::option::Option<crate::types::NodeStatus> {
        &self.node_status
    }
    /// <p>Indicates if the node has EBS or instance storage. </p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates if the node has EBS or instance storage. </p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>Indicates if the node has EBS or instance storage. </p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// <p>If the nodes has EBS storage, indicates if the volume type is GP2 or GP3. Only applicable for data nodes. </p>
    pub fn storage_volume_type(mut self, input: crate::types::VolumeType) -> Self {
        self.storage_volume_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the nodes has EBS storage, indicates if the volume type is GP2 or GP3. Only applicable for data nodes. </p>
    pub fn set_storage_volume_type(mut self, input: ::std::option::Option<crate::types::VolumeType>) -> Self {
        self.storage_volume_type = input;
        self
    }
    /// <p>If the nodes has EBS storage, indicates if the volume type is GP2 or GP3. Only applicable for data nodes. </p>
    pub fn get_storage_volume_type(&self) -> &::std::option::Option<crate::types::VolumeType> {
        &self.storage_volume_type
    }
    /// <p>The storage size of the node, in GiB.</p>
    pub fn storage_size(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_size = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage size of the node, in GiB.</p>
    pub fn set_storage_size(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_size = input;
        self
    }
    /// <p>The storage size of the node, in GiB.</p>
    pub fn get_storage_size(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_size
    }
    /// Consumes the builder and constructs a [`DomainNodesStatus`](crate::types::DomainNodesStatus).
    pub fn build(self) -> crate::types::DomainNodesStatus {
        crate::types::DomainNodesStatus {
            node_id: self.node_id,
            node_type: self.node_type,
            availability_zone: self.availability_zone,
            instance_type: self.instance_type,
            node_status: self.node_status,
            storage_type: self.storage_type,
            storage_volume_type: self.storage_volume_type,
            storage_size: self.storage_size,
        }
    }
}
