// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A custom 10-hour, low-traffic window during which OpenSearch Service can perform mandatory configuration changes on the domain. These actions can include scheduled service software updates and blue/green Auto-Tune enhancements. OpenSearch Service will schedule these actions during the window that you specify.</p>
/// <p>If you don't specify a window start time, it defaults to 10:00 P.M. local time.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/off-peak.html">Defining off-peak maintenance windows for Amazon OpenSearch Service</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OffPeakWindow {
    /// <p>A custom start time for the off-peak window, in Coordinated Universal Time (UTC). The window length will always be 10 hours, so you can't specify an end time. For example, if you specify 11:00 P.M. UTC as a start time, the end time will automatically be set to 9:00 A.M.</p>
    pub window_start_time: ::std::option::Option<crate::types::WindowStartTime>,
}
impl OffPeakWindow {
    /// <p>A custom start time for the off-peak window, in Coordinated Universal Time (UTC). The window length will always be 10 hours, so you can't specify an end time. For example, if you specify 11:00 P.M. UTC as a start time, the end time will automatically be set to 9:00 A.M.</p>
    pub fn window_start_time(&self) -> ::std::option::Option<&crate::types::WindowStartTime> {
        self.window_start_time.as_ref()
    }
}
impl OffPeakWindow {
    /// Creates a new builder-style object to manufacture [`OffPeakWindow`](crate::types::OffPeakWindow).
    pub fn builder() -> crate::types::builders::OffPeakWindowBuilder {
        crate::types::builders::OffPeakWindowBuilder::default()
    }
}

/// A builder for [`OffPeakWindow`](crate::types::OffPeakWindow).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OffPeakWindowBuilder {
    pub(crate) window_start_time: ::std::option::Option<crate::types::WindowStartTime>,
}
impl OffPeakWindowBuilder {
    /// <p>A custom start time for the off-peak window, in Coordinated Universal Time (UTC). The window length will always be 10 hours, so you can't specify an end time. For example, if you specify 11:00 P.M. UTC as a start time, the end time will automatically be set to 9:00 A.M.</p>
    pub fn window_start_time(mut self, input: crate::types::WindowStartTime) -> Self {
        self.window_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A custom start time for the off-peak window, in Coordinated Universal Time (UTC). The window length will always be 10 hours, so you can't specify an end time. For example, if you specify 11:00 P.M. UTC as a start time, the end time will automatically be set to 9:00 A.M.</p>
    pub fn set_window_start_time(mut self, input: ::std::option::Option<crate::types::WindowStartTime>) -> Self {
        self.window_start_time = input;
        self
    }
    /// <p>A custom start time for the off-peak window, in Coordinated Universal Time (UTC). The window length will always be 10 hours, so you can't specify an end time. For example, if you specify 11:00 P.M. UTC as a start time, the end time will automatically be set to 9:00 A.M.</p>
    pub fn get_window_start_time(&self) -> &::std::option::Option<crate::types::WindowStartTime> {
        &self.window_start_time
    }
    /// Consumes the builder and constructs a [`OffPeakWindow`](crate::types::OffPeakWindow).
    pub fn build(self) -> crate::types::OffPeakWindow {
        crate::types::OffPeakWindow {
            window_start_time: self.window_start_time,
        }
    }
}
