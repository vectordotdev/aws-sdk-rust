// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The new state, variable values, and timer settings of the detector (instance).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetectorStateDefinition {
    /// <p>The name of the new state of the detector (instance).</p>
    pub state_name: ::std::option::Option<::std::string::String>,
    /// <p>The new values of the detector's variables. Any variable whose value isn't specified is cleared.</p>
    pub variables: ::std::option::Option<::std::vec::Vec<crate::types::VariableDefinition>>,
    /// <p>The new values of the detector's timers. Any timer whose value isn't specified is cleared, and its timeout event won't occur.</p>
    pub timers: ::std::option::Option<::std::vec::Vec<crate::types::TimerDefinition>>,
}
impl DetectorStateDefinition {
    /// <p>The name of the new state of the detector (instance).</p>
    pub fn state_name(&self) -> ::std::option::Option<&str> {
        self.state_name.as_deref()
    }
    /// <p>The new values of the detector's variables. Any variable whose value isn't specified is cleared.</p>
    pub fn variables(&self) -> ::std::option::Option<&[crate::types::VariableDefinition]> {
        self.variables.as_deref()
    }
    /// <p>The new values of the detector's timers. Any timer whose value isn't specified is cleared, and its timeout event won't occur.</p>
    pub fn timers(&self) -> ::std::option::Option<&[crate::types::TimerDefinition]> {
        self.timers.as_deref()
    }
}
impl DetectorStateDefinition {
    /// Creates a new builder-style object to manufacture [`DetectorStateDefinition`](crate::types::DetectorStateDefinition).
    pub fn builder() -> crate::types::builders::DetectorStateDefinitionBuilder {
        crate::types::builders::DetectorStateDefinitionBuilder::default()
    }
}

/// A builder for [`DetectorStateDefinition`](crate::types::DetectorStateDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetectorStateDefinitionBuilder {
    pub(crate) state_name: ::std::option::Option<::std::string::String>,
    pub(crate) variables: ::std::option::Option<::std::vec::Vec<crate::types::VariableDefinition>>,
    pub(crate) timers: ::std::option::Option<::std::vec::Vec<crate::types::TimerDefinition>>,
}
impl DetectorStateDefinitionBuilder {
    /// <p>The name of the new state of the detector (instance).</p>
    pub fn state_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the new state of the detector (instance).</p>
    pub fn set_state_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_name = input;
        self
    }
    /// <p>The name of the new state of the detector (instance).</p>
    pub fn get_state_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_name
    }
    /// Appends an item to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p>The new values of the detector's variables. Any variable whose value isn't specified is cleared.</p>
    pub fn variables(mut self, input: crate::types::VariableDefinition) -> Self {
        let mut v = self.variables.unwrap_or_default();
        v.push(input);
        self.variables = ::std::option::Option::Some(v);
        self
    }
    /// <p>The new values of the detector's variables. Any variable whose value isn't specified is cleared.</p>
    pub fn set_variables(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VariableDefinition>>) -> Self {
        self.variables = input;
        self
    }
    /// <p>The new values of the detector's variables. Any variable whose value isn't specified is cleared.</p>
    pub fn get_variables(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VariableDefinition>> {
        &self.variables
    }
    /// Appends an item to `timers`.
    ///
    /// To override the contents of this collection use [`set_timers`](Self::set_timers).
    ///
    /// <p>The new values of the detector's timers. Any timer whose value isn't specified is cleared, and its timeout event won't occur.</p>
    pub fn timers(mut self, input: crate::types::TimerDefinition) -> Self {
        let mut v = self.timers.unwrap_or_default();
        v.push(input);
        self.timers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The new values of the detector's timers. Any timer whose value isn't specified is cleared, and its timeout event won't occur.</p>
    pub fn set_timers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TimerDefinition>>) -> Self {
        self.timers = input;
        self
    }
    /// <p>The new values of the detector's timers. Any timer whose value isn't specified is cleared, and its timeout event won't occur.</p>
    pub fn get_timers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TimerDefinition>> {
        &self.timers
    }
    /// Consumes the builder and constructs a [`DetectorStateDefinition`](crate::types::DetectorStateDefinition).
    pub fn build(self) -> crate::types::DetectorStateDefinition {
        crate::types::DetectorStateDefinition {
            state_name: self.state_name,
            variables: self.variables,
            timers: self.timers,
        }
    }
}
