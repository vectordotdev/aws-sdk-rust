// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the hourly metrics for the given recommendation over the lookback period. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendationDetailHourlyMetrics {
    /// <p>The period of time that you want the usage and costs for.</p>
    pub start_time: ::std::option::Option<::std::string::String>,
    /// <p>The remaining On-Demand cost estimated to not be covered by the recommended Savings Plan, over the length of the lookback period.</p>
    pub estimated_on_demand_cost: ::std::option::Option<::std::string::String>,
    /// <p>The current amount of Savings Plans eligible usage that the Savings Plan covered.</p>
    pub current_coverage: ::std::option::Option<::std::string::String>,
    /// <p>The estimated coverage amount based on the recommended Savings Plan.</p>
    pub estimated_coverage: ::std::option::Option<::std::string::String>,
    /// <p>The estimated utilization for the recommended Savings Plan.</p>
    pub estimated_new_commitment_utilization: ::std::option::Option<::std::string::String>,
}
impl RecommendationDetailHourlyMetrics {
    /// <p>The period of time that you want the usage and costs for.</p>
    pub fn start_time(&self) -> ::std::option::Option<&str> {
        self.start_time.as_deref()
    }
    /// <p>The remaining On-Demand cost estimated to not be covered by the recommended Savings Plan, over the length of the lookback period.</p>
    pub fn estimated_on_demand_cost(&self) -> ::std::option::Option<&str> {
        self.estimated_on_demand_cost.as_deref()
    }
    /// <p>The current amount of Savings Plans eligible usage that the Savings Plan covered.</p>
    pub fn current_coverage(&self) -> ::std::option::Option<&str> {
        self.current_coverage.as_deref()
    }
    /// <p>The estimated coverage amount based on the recommended Savings Plan.</p>
    pub fn estimated_coverage(&self) -> ::std::option::Option<&str> {
        self.estimated_coverage.as_deref()
    }
    /// <p>The estimated utilization for the recommended Savings Plan.</p>
    pub fn estimated_new_commitment_utilization(&self) -> ::std::option::Option<&str> {
        self.estimated_new_commitment_utilization.as_deref()
    }
}
impl RecommendationDetailHourlyMetrics {
    /// Creates a new builder-style object to manufacture [`RecommendationDetailHourlyMetrics`](crate::types::RecommendationDetailHourlyMetrics).
    pub fn builder() -> crate::types::builders::RecommendationDetailHourlyMetricsBuilder {
        crate::types::builders::RecommendationDetailHourlyMetricsBuilder::default()
    }
}

/// A builder for [`RecommendationDetailHourlyMetrics`](crate::types::RecommendationDetailHourlyMetrics).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendationDetailHourlyMetricsBuilder {
    pub(crate) start_time: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_on_demand_cost: ::std::option::Option<::std::string::String>,
    pub(crate) current_coverage: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_coverage: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_new_commitment_utilization: ::std::option::Option<::std::string::String>,
}
impl RecommendationDetailHourlyMetricsBuilder {
    /// <p>The period of time that you want the usage and costs for.</p>
    pub fn start_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The period of time that you want the usage and costs for.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The period of time that you want the usage and costs for.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_time
    }
    /// <p>The remaining On-Demand cost estimated to not be covered by the recommended Savings Plan, over the length of the lookback period.</p>
    pub fn estimated_on_demand_cost(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_on_demand_cost = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The remaining On-Demand cost estimated to not be covered by the recommended Savings Plan, over the length of the lookback period.</p>
    pub fn set_estimated_on_demand_cost(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_on_demand_cost = input;
        self
    }
    /// <p>The remaining On-Demand cost estimated to not be covered by the recommended Savings Plan, over the length of the lookback period.</p>
    pub fn get_estimated_on_demand_cost(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_on_demand_cost
    }
    /// <p>The current amount of Savings Plans eligible usage that the Savings Plan covered.</p>
    pub fn current_coverage(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_coverage = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current amount of Savings Plans eligible usage that the Savings Plan covered.</p>
    pub fn set_current_coverage(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_coverage = input;
        self
    }
    /// <p>The current amount of Savings Plans eligible usage that the Savings Plan covered.</p>
    pub fn get_current_coverage(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_coverage
    }
    /// <p>The estimated coverage amount based on the recommended Savings Plan.</p>
    pub fn estimated_coverage(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_coverage = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated coverage amount based on the recommended Savings Plan.</p>
    pub fn set_estimated_coverage(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_coverage = input;
        self
    }
    /// <p>The estimated coverage amount based on the recommended Savings Plan.</p>
    pub fn get_estimated_coverage(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_coverage
    }
    /// <p>The estimated utilization for the recommended Savings Plan.</p>
    pub fn estimated_new_commitment_utilization(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_new_commitment_utilization = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated utilization for the recommended Savings Plan.</p>
    pub fn set_estimated_new_commitment_utilization(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_new_commitment_utilization = input;
        self
    }
    /// <p>The estimated utilization for the recommended Savings Plan.</p>
    pub fn get_estimated_new_commitment_utilization(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_new_commitment_utilization
    }
    /// Consumes the builder and constructs a [`RecommendationDetailHourlyMetrics`](crate::types::RecommendationDetailHourlyMetrics).
    pub fn build(self) -> crate::types::RecommendationDetailHourlyMetrics {
        crate::types::RecommendationDetailHourlyMetrics {
            start_time: self.start_time,
            estimated_on_demand_cost: self.estimated_on_demand_cost,
            current_coverage: self.current_coverage,
            estimated_coverage: self.estimated_coverage,
            estimated_new_commitment_utilization: self.estimated_new_commitment_utilization,
        }
    }
}
