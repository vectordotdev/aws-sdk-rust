// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary metrics for your Savings Plans Purchase Recommendations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SavingsPlansPurchaseRecommendationSummary {
    /// <p>The estimated return on investment that's based on the recommended Savings Plans and estimated savings.</p>
    pub estimated_roi: ::std::option::Option<::std::string::String>,
    /// <p>The currency code that Amazon Web Services used to generate the recommendations and present potential savings.</p>
    pub currency_code: ::std::option::Option<::std::string::String>,
    /// <p>The estimated total cost of the usage after purchasing the recommended Savings Plans. This is a sum of the cost of Savings Plans during this term, and the remaining On-Demand usage.</p>
    pub estimated_total_cost: ::std::option::Option<::std::string::String>,
    /// <p>The current total on demand spend of the applicable usage types over the lookback period.</p>
    pub current_on_demand_spend: ::std::option::Option<::std::string::String>,
    /// <p>The estimated total savings over the lookback period, based on the purchase of the recommended Savings Plans.</p>
    pub estimated_savings_amount: ::std::option::Option<::std::string::String>,
    /// <p>The aggregate number of Savings Plans recommendations that exist for your account.</p>
    pub total_recommendation_count: ::std::option::Option<::std::string::String>,
    /// <p>The recommended Savings Plans cost on a daily (24 hourly) basis.</p>
    pub daily_commitment_to_purchase: ::std::option::Option<::std::string::String>,
    /// <p>The recommended hourly commitment that's based on the recommendation parameters.</p>
    pub hourly_commitment_to_purchase: ::std::option::Option<::std::string::String>,
    /// <p>The estimated savings relative to the total cost of On-Demand usage, over the lookback period. This is calculated as <code>estimatedSavingsAmount</code>/ <code>CurrentOnDemandSpend</code>*100.</p>
    pub estimated_savings_percentage: ::std::option::Option<::std::string::String>,
    /// <p>The estimated monthly savings amount that's based on the recommended Savings Plans purchase.</p>
    pub estimated_monthly_savings_amount: ::std::option::Option<::std::string::String>,
    /// <p>The estimated On-Demand costs you expect with no additional commitment. It's based on your usage of the selected time period and the Savings Plans you own. </p>
    pub estimated_on_demand_cost_with_current_commitment: ::std::option::Option<::std::string::String>,
}
impl SavingsPlansPurchaseRecommendationSummary {
    /// <p>The estimated return on investment that's based on the recommended Savings Plans and estimated savings.</p>
    pub fn estimated_roi(&self) -> ::std::option::Option<&str> {
        self.estimated_roi.as_deref()
    }
    /// <p>The currency code that Amazon Web Services used to generate the recommendations and present potential savings.</p>
    pub fn currency_code(&self) -> ::std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>The estimated total cost of the usage after purchasing the recommended Savings Plans. This is a sum of the cost of Savings Plans during this term, and the remaining On-Demand usage.</p>
    pub fn estimated_total_cost(&self) -> ::std::option::Option<&str> {
        self.estimated_total_cost.as_deref()
    }
    /// <p>The current total on demand spend of the applicable usage types over the lookback period.</p>
    pub fn current_on_demand_spend(&self) -> ::std::option::Option<&str> {
        self.current_on_demand_spend.as_deref()
    }
    /// <p>The estimated total savings over the lookback period, based on the purchase of the recommended Savings Plans.</p>
    pub fn estimated_savings_amount(&self) -> ::std::option::Option<&str> {
        self.estimated_savings_amount.as_deref()
    }
    /// <p>The aggregate number of Savings Plans recommendations that exist for your account.</p>
    pub fn total_recommendation_count(&self) -> ::std::option::Option<&str> {
        self.total_recommendation_count.as_deref()
    }
    /// <p>The recommended Savings Plans cost on a daily (24 hourly) basis.</p>
    pub fn daily_commitment_to_purchase(&self) -> ::std::option::Option<&str> {
        self.daily_commitment_to_purchase.as_deref()
    }
    /// <p>The recommended hourly commitment that's based on the recommendation parameters.</p>
    pub fn hourly_commitment_to_purchase(&self) -> ::std::option::Option<&str> {
        self.hourly_commitment_to_purchase.as_deref()
    }
    /// <p>The estimated savings relative to the total cost of On-Demand usage, over the lookback period. This is calculated as <code>estimatedSavingsAmount</code>/ <code>CurrentOnDemandSpend</code>*100.</p>
    pub fn estimated_savings_percentage(&self) -> ::std::option::Option<&str> {
        self.estimated_savings_percentage.as_deref()
    }
    /// <p>The estimated monthly savings amount that's based on the recommended Savings Plans purchase.</p>
    pub fn estimated_monthly_savings_amount(&self) -> ::std::option::Option<&str> {
        self.estimated_monthly_savings_amount.as_deref()
    }
    /// <p>The estimated On-Demand costs you expect with no additional commitment. It's based on your usage of the selected time period and the Savings Plans you own. </p>
    pub fn estimated_on_demand_cost_with_current_commitment(&self) -> ::std::option::Option<&str> {
        self.estimated_on_demand_cost_with_current_commitment.as_deref()
    }
}
impl SavingsPlansPurchaseRecommendationSummary {
    /// Creates a new builder-style object to manufacture [`SavingsPlansPurchaseRecommendationSummary`](crate::types::SavingsPlansPurchaseRecommendationSummary).
    pub fn builder() -> crate::types::builders::SavingsPlansPurchaseRecommendationSummaryBuilder {
        crate::types::builders::SavingsPlansPurchaseRecommendationSummaryBuilder::default()
    }
}

/// A builder for [`SavingsPlansPurchaseRecommendationSummary`](crate::types::SavingsPlansPurchaseRecommendationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SavingsPlansPurchaseRecommendationSummaryBuilder {
    pub(crate) estimated_roi: ::std::option::Option<::std::string::String>,
    pub(crate) currency_code: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_total_cost: ::std::option::Option<::std::string::String>,
    pub(crate) current_on_demand_spend: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_savings_amount: ::std::option::Option<::std::string::String>,
    pub(crate) total_recommendation_count: ::std::option::Option<::std::string::String>,
    pub(crate) daily_commitment_to_purchase: ::std::option::Option<::std::string::String>,
    pub(crate) hourly_commitment_to_purchase: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_savings_percentage: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_monthly_savings_amount: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_on_demand_cost_with_current_commitment: ::std::option::Option<::std::string::String>,
}
impl SavingsPlansPurchaseRecommendationSummaryBuilder {
    /// <p>The estimated return on investment that's based on the recommended Savings Plans and estimated savings.</p>
    pub fn estimated_roi(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_roi = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated return on investment that's based on the recommended Savings Plans and estimated savings.</p>
    pub fn set_estimated_roi(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_roi = input;
        self
    }
    /// <p>The estimated return on investment that's based on the recommended Savings Plans and estimated savings.</p>
    pub fn get_estimated_roi(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_roi
    }
    /// <p>The currency code that Amazon Web Services used to generate the recommendations and present potential savings.</p>
    pub fn currency_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.currency_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The currency code that Amazon Web Services used to generate the recommendations and present potential savings.</p>
    pub fn set_currency_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>The currency code that Amazon Web Services used to generate the recommendations and present potential savings.</p>
    pub fn get_currency_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.currency_code
    }
    /// <p>The estimated total cost of the usage after purchasing the recommended Savings Plans. This is a sum of the cost of Savings Plans during this term, and the remaining On-Demand usage.</p>
    pub fn estimated_total_cost(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_total_cost = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated total cost of the usage after purchasing the recommended Savings Plans. This is a sum of the cost of Savings Plans during this term, and the remaining On-Demand usage.</p>
    pub fn set_estimated_total_cost(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_total_cost = input;
        self
    }
    /// <p>The estimated total cost of the usage after purchasing the recommended Savings Plans. This is a sum of the cost of Savings Plans during this term, and the remaining On-Demand usage.</p>
    pub fn get_estimated_total_cost(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_total_cost
    }
    /// <p>The current total on demand spend of the applicable usage types over the lookback period.</p>
    pub fn current_on_demand_spend(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_on_demand_spend = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current total on demand spend of the applicable usage types over the lookback period.</p>
    pub fn set_current_on_demand_spend(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_on_demand_spend = input;
        self
    }
    /// <p>The current total on demand spend of the applicable usage types over the lookback period.</p>
    pub fn get_current_on_demand_spend(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_on_demand_spend
    }
    /// <p>The estimated total savings over the lookback period, based on the purchase of the recommended Savings Plans.</p>
    pub fn estimated_savings_amount(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_savings_amount = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated total savings over the lookback period, based on the purchase of the recommended Savings Plans.</p>
    pub fn set_estimated_savings_amount(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_savings_amount = input;
        self
    }
    /// <p>The estimated total savings over the lookback period, based on the purchase of the recommended Savings Plans.</p>
    pub fn get_estimated_savings_amount(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_savings_amount
    }
    /// <p>The aggregate number of Savings Plans recommendations that exist for your account.</p>
    pub fn total_recommendation_count(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.total_recommendation_count = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The aggregate number of Savings Plans recommendations that exist for your account.</p>
    pub fn set_total_recommendation_count(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.total_recommendation_count = input;
        self
    }
    /// <p>The aggregate number of Savings Plans recommendations that exist for your account.</p>
    pub fn get_total_recommendation_count(&self) -> &::std::option::Option<::std::string::String> {
        &self.total_recommendation_count
    }
    /// <p>The recommended Savings Plans cost on a daily (24 hourly) basis.</p>
    pub fn daily_commitment_to_purchase(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.daily_commitment_to_purchase = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommended Savings Plans cost on a daily (24 hourly) basis.</p>
    pub fn set_daily_commitment_to_purchase(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.daily_commitment_to_purchase = input;
        self
    }
    /// <p>The recommended Savings Plans cost on a daily (24 hourly) basis.</p>
    pub fn get_daily_commitment_to_purchase(&self) -> &::std::option::Option<::std::string::String> {
        &self.daily_commitment_to_purchase
    }
    /// <p>The recommended hourly commitment that's based on the recommendation parameters.</p>
    pub fn hourly_commitment_to_purchase(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hourly_commitment_to_purchase = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommended hourly commitment that's based on the recommendation parameters.</p>
    pub fn set_hourly_commitment_to_purchase(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hourly_commitment_to_purchase = input;
        self
    }
    /// <p>The recommended hourly commitment that's based on the recommendation parameters.</p>
    pub fn get_hourly_commitment_to_purchase(&self) -> &::std::option::Option<::std::string::String> {
        &self.hourly_commitment_to_purchase
    }
    /// <p>The estimated savings relative to the total cost of On-Demand usage, over the lookback period. This is calculated as <code>estimatedSavingsAmount</code>/ <code>CurrentOnDemandSpend</code>*100.</p>
    pub fn estimated_savings_percentage(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_savings_percentage = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated savings relative to the total cost of On-Demand usage, over the lookback period. This is calculated as <code>estimatedSavingsAmount</code>/ <code>CurrentOnDemandSpend</code>*100.</p>
    pub fn set_estimated_savings_percentage(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_savings_percentage = input;
        self
    }
    /// <p>The estimated savings relative to the total cost of On-Demand usage, over the lookback period. This is calculated as <code>estimatedSavingsAmount</code>/ <code>CurrentOnDemandSpend</code>*100.</p>
    pub fn get_estimated_savings_percentage(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_savings_percentage
    }
    /// <p>The estimated monthly savings amount that's based on the recommended Savings Plans purchase.</p>
    pub fn estimated_monthly_savings_amount(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_monthly_savings_amount = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated monthly savings amount that's based on the recommended Savings Plans purchase.</p>
    pub fn set_estimated_monthly_savings_amount(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_monthly_savings_amount = input;
        self
    }
    /// <p>The estimated monthly savings amount that's based on the recommended Savings Plans purchase.</p>
    pub fn get_estimated_monthly_savings_amount(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_monthly_savings_amount
    }
    /// <p>The estimated On-Demand costs you expect with no additional commitment. It's based on your usage of the selected time period and the Savings Plans you own. </p>
    pub fn estimated_on_demand_cost_with_current_commitment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.estimated_on_demand_cost_with_current_commitment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The estimated On-Demand costs you expect with no additional commitment. It's based on your usage of the selected time period and the Savings Plans you own. </p>
    pub fn set_estimated_on_demand_cost_with_current_commitment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.estimated_on_demand_cost_with_current_commitment = input;
        self
    }
    /// <p>The estimated On-Demand costs you expect with no additional commitment. It's based on your usage of the selected time period and the Savings Plans you own. </p>
    pub fn get_estimated_on_demand_cost_with_current_commitment(&self) -> &::std::option::Option<::std::string::String> {
        &self.estimated_on_demand_cost_with_current_commitment
    }
    /// Consumes the builder and constructs a [`SavingsPlansPurchaseRecommendationSummary`](crate::types::SavingsPlansPurchaseRecommendationSummary).
    pub fn build(self) -> crate::types::SavingsPlansPurchaseRecommendationSummary {
        crate::types::SavingsPlansPurchaseRecommendationSummary {
            estimated_roi: self.estimated_roi,
            currency_code: self.currency_code,
            estimated_total_cost: self.estimated_total_cost,
            current_on_demand_spend: self.current_on_demand_spend,
            estimated_savings_amount: self.estimated_savings_amount,
            total_recommendation_count: self.total_recommendation_count,
            daily_commitment_to_purchase: self.daily_commitment_to_purchase,
            hourly_commitment_to_purchase: self.hourly_commitment_to_purchase,
            estimated_savings_percentage: self.estimated_savings_percentage,
            estimated_monthly_savings_amount: self.estimated_monthly_savings_amount,
            estimated_on_demand_cost_with_current_commitment: self.estimated_on_demand_cost_with_current_commitment,
        }
    }
}
