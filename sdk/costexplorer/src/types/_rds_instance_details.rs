// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the Amazon RDS instances that Amazon Web Services recommends that you purchase.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RdsInstanceDetails {
    /// <p>The instance family of the recommended reservation.</p>
    pub family: ::std::option::Option<::std::string::String>,
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region of the recommended reservation.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The database engine that the recommended reservation supports.</p>
    pub database_engine: ::std::option::Option<::std::string::String>,
    /// <p>The database edition that the recommended reservation supports.</p>
    pub database_edition: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether the recommendation is for a reservation in a single Availability Zone or a reservation with a backup in a second Availability Zone.</p>
    pub deployment_option: ::std::option::Option<::std::string::String>,
    /// <p>The license model that the recommended reservation supports.</p>
    pub license_model: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether the recommendation is for a current-generation instance. </p>
    pub current_generation: bool,
    /// <p>Determines whether the recommended reservation is size flexible.</p>
    pub size_flex_eligible: bool,
}
impl RdsInstanceDetails {
    /// <p>The instance family of the recommended reservation.</p>
    pub fn family(&self) -> ::std::option::Option<&str> {
        self.family.as_deref()
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The Amazon Web Services Region of the recommended reservation.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The database engine that the recommended reservation supports.</p>
    pub fn database_engine(&self) -> ::std::option::Option<&str> {
        self.database_engine.as_deref()
    }
    /// <p>The database edition that the recommended reservation supports.</p>
    pub fn database_edition(&self) -> ::std::option::Option<&str> {
        self.database_edition.as_deref()
    }
    /// <p>Determines whether the recommendation is for a reservation in a single Availability Zone or a reservation with a backup in a second Availability Zone.</p>
    pub fn deployment_option(&self) -> ::std::option::Option<&str> {
        self.deployment_option.as_deref()
    }
    /// <p>The license model that the recommended reservation supports.</p>
    pub fn license_model(&self) -> ::std::option::Option<&str> {
        self.license_model.as_deref()
    }
    /// <p>Determines whether the recommendation is for a current-generation instance. </p>
    pub fn current_generation(&self) -> bool {
        self.current_generation
    }
    /// <p>Determines whether the recommended reservation is size flexible.</p>
    pub fn size_flex_eligible(&self) -> bool {
        self.size_flex_eligible
    }
}
impl RdsInstanceDetails {
    /// Creates a new builder-style object to manufacture [`RdsInstanceDetails`](crate::types::RdsInstanceDetails).
    pub fn builder() -> crate::types::builders::RdsInstanceDetailsBuilder {
        crate::types::builders::RdsInstanceDetailsBuilder::default()
    }
}

/// A builder for [`RdsInstanceDetails`](crate::types::RdsInstanceDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RdsInstanceDetailsBuilder {
    pub(crate) family: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) database_engine: ::std::option::Option<::std::string::String>,
    pub(crate) database_edition: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_option: ::std::option::Option<::std::string::String>,
    pub(crate) license_model: ::std::option::Option<::std::string::String>,
    pub(crate) current_generation: ::std::option::Option<bool>,
    pub(crate) size_flex_eligible: ::std::option::Option<bool>,
}
impl RdsInstanceDetailsBuilder {
    /// <p>The instance family of the recommended reservation.</p>
    pub fn family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance family of the recommended reservation.</p>
    pub fn set_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.family = input;
        self
    }
    /// <p>The instance family of the recommended reservation.</p>
    pub fn get_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.family
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The type of instance that Amazon Web Services recommends.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>The Amazon Web Services Region of the recommended reservation.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region of the recommended reservation.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region of the recommended reservation.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The database engine that the recommended reservation supports.</p>
    pub fn database_engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database engine that the recommended reservation supports.</p>
    pub fn set_database_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_engine = input;
        self
    }
    /// <p>The database engine that the recommended reservation supports.</p>
    pub fn get_database_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_engine
    }
    /// <p>The database edition that the recommended reservation supports.</p>
    pub fn database_edition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_edition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database edition that the recommended reservation supports.</p>
    pub fn set_database_edition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_edition = input;
        self
    }
    /// <p>The database edition that the recommended reservation supports.</p>
    pub fn get_database_edition(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_edition
    }
    /// <p>Determines whether the recommendation is for a reservation in a single Availability Zone or a reservation with a backup in a second Availability Zone.</p>
    pub fn deployment_option(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_option = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Determines whether the recommendation is for a reservation in a single Availability Zone or a reservation with a backup in a second Availability Zone.</p>
    pub fn set_deployment_option(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_option = input;
        self
    }
    /// <p>Determines whether the recommendation is for a reservation in a single Availability Zone or a reservation with a backup in a second Availability Zone.</p>
    pub fn get_deployment_option(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_option
    }
    /// <p>The license model that the recommended reservation supports.</p>
    pub fn license_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The license model that the recommended reservation supports.</p>
    pub fn set_license_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>The license model that the recommended reservation supports.</p>
    pub fn get_license_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_model
    }
    /// <p>Determines whether the recommendation is for a current-generation instance. </p>
    pub fn current_generation(mut self, input: bool) -> Self {
        self.current_generation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the recommendation is for a current-generation instance. </p>
    pub fn set_current_generation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.current_generation = input;
        self
    }
    /// <p>Determines whether the recommendation is for a current-generation instance. </p>
    pub fn get_current_generation(&self) -> &::std::option::Option<bool> {
        &self.current_generation
    }
    /// <p>Determines whether the recommended reservation is size flexible.</p>
    pub fn size_flex_eligible(mut self, input: bool) -> Self {
        self.size_flex_eligible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the recommended reservation is size flexible.</p>
    pub fn set_size_flex_eligible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.size_flex_eligible = input;
        self
    }
    /// <p>Determines whether the recommended reservation is size flexible.</p>
    pub fn get_size_flex_eligible(&self) -> &::std::option::Option<bool> {
        &self.size_flex_eligible
    }
    /// Consumes the builder and constructs a [`RdsInstanceDetails`](crate::types::RdsInstanceDetails).
    pub fn build(self) -> crate::types::RdsInstanceDetails {
        crate::types::RdsInstanceDetails {
            family: self.family,
            instance_type: self.instance_type,
            region: self.region,
            database_engine: self.database_engine,
            database_edition: self.database_edition,
            deployment_option: self.deployment_option,
            license_model: self.license_model,
            current_generation: self.current_generation.unwrap_or_default(),
            size_flex_eligible: self.size_flex_eligible.unwrap_or_default(),
        }
    }
}
