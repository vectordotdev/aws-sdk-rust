// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The combination of a voice print and caller ID.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct VoiceProfile {
    /// <p>The ID of the voice profile.</p>
    pub voice_profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the voice profile.</p>
    pub voice_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the domain that contains the voice profile.</p>
    pub voice_profile_domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the voice profile was created and enrolled.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the voice profile was last updated.</p>
    pub updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which a voice profile expires unless you re-enroll the caller via the <code>UpdateVoiceProfile</code> API.</p>
    pub expiration_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl VoiceProfile {
    /// <p>The ID of the voice profile.</p>
    pub fn voice_profile_id(&self) -> ::std::option::Option<&str> {
        self.voice_profile_id.as_deref()
    }
    /// <p>The ARN of the voice profile.</p>
    pub fn voice_profile_arn(&self) -> ::std::option::Option<&str> {
        self.voice_profile_arn.as_deref()
    }
    /// <p>The ID of the domain that contains the voice profile.</p>
    pub fn voice_profile_domain_id(&self) -> ::std::option::Option<&str> {
        self.voice_profile_domain_id.as_deref()
    }
    /// <p>The time at which the voice profile was created and enrolled.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time at which the voice profile was last updated.</p>
    pub fn updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
    /// <p>The time at which a voice profile expires unless you re-enroll the caller via the <code>UpdateVoiceProfile</code> API.</p>
    pub fn expiration_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiration_timestamp.as_ref()
    }
}
impl ::std::fmt::Debug for VoiceProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VoiceProfile");
        formatter.field("voice_profile_id", &self.voice_profile_id);
        formatter.field("voice_profile_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("voice_profile_domain_id", &self.voice_profile_domain_id);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("updated_timestamp", &self.updated_timestamp);
        formatter.field("expiration_timestamp", &self.expiration_timestamp);
        formatter.finish()
    }
}
impl VoiceProfile {
    /// Creates a new builder-style object to manufacture [`VoiceProfile`](crate::types::VoiceProfile).
    pub fn builder() -> crate::types::builders::VoiceProfileBuilder {
        crate::types::builders::VoiceProfileBuilder::default()
    }
}

/// A builder for [`VoiceProfile`](crate::types::VoiceProfile).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct VoiceProfileBuilder {
    pub(crate) voice_profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) voice_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) voice_profile_domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expiration_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl VoiceProfileBuilder {
    /// <p>The ID of the voice profile.</p>
    pub fn voice_profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.voice_profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the voice profile.</p>
    pub fn set_voice_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.voice_profile_id = input;
        self
    }
    /// <p>The ID of the voice profile.</p>
    pub fn get_voice_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.voice_profile_id
    }
    /// <p>The ARN of the voice profile.</p>
    pub fn voice_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.voice_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the voice profile.</p>
    pub fn set_voice_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.voice_profile_arn = input;
        self
    }
    /// <p>The ARN of the voice profile.</p>
    pub fn get_voice_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.voice_profile_arn
    }
    /// <p>The ID of the domain that contains the voice profile.</p>
    pub fn voice_profile_domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.voice_profile_domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain that contains the voice profile.</p>
    pub fn set_voice_profile_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.voice_profile_domain_id = input;
        self
    }
    /// <p>The ID of the domain that contains the voice profile.</p>
    pub fn get_voice_profile_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.voice_profile_domain_id
    }
    /// <p>The time at which the voice profile was created and enrolled.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the voice profile was created and enrolled.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time at which the voice profile was created and enrolled.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>The time at which the voice profile was last updated.</p>
    pub fn updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the voice profile was last updated.</p>
    pub fn set_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_timestamp = input;
        self
    }
    /// <p>The time at which the voice profile was last updated.</p>
    pub fn get_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_timestamp
    }
    /// <p>The time at which a voice profile expires unless you re-enroll the caller via the <code>UpdateVoiceProfile</code> API.</p>
    pub fn expiration_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiration_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which a voice profile expires unless you re-enroll the caller via the <code>UpdateVoiceProfile</code> API.</p>
    pub fn set_expiration_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiration_timestamp = input;
        self
    }
    /// <p>The time at which a voice profile expires unless you re-enroll the caller via the <code>UpdateVoiceProfile</code> API.</p>
    pub fn get_expiration_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiration_timestamp
    }
    /// Consumes the builder and constructs a [`VoiceProfile`](crate::types::VoiceProfile).
    pub fn build(self) -> crate::types::VoiceProfile {
        crate::types::VoiceProfile {
            voice_profile_id: self.voice_profile_id,
            voice_profile_arn: self.voice_profile_arn,
            voice_profile_domain_id: self.voice_profile_domain_id,
            created_timestamp: self.created_timestamp,
            updated_timestamp: self.updated_timestamp,
            expiration_timestamp: self.expiration_timestamp,
        }
    }
}
impl ::std::fmt::Debug for VoiceProfileBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VoiceProfileBuilder");
        formatter.field("voice_profile_id", &self.voice_profile_id);
        formatter.field("voice_profile_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("voice_profile_domain_id", &self.voice_profile_domain_id);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("updated_timestamp", &self.updated_timestamp);
        formatter.field("expiration_timestamp", &self.expiration_timestamp);
        formatter.finish()
    }
}
