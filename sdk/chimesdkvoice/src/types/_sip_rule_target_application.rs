// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A target SIP media application and other details, such as priority and AWS Region, to be specified in the SIP rule. Only one SIP rule per AWS Region can be provided.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SipRuleTargetApplication {
    /// <p>The ID of a rule's target SIP media application.</p>
    pub sip_media_application_id: ::std::option::Option<::std::string::String>,
    /// <p>The priority setting of a rule's target SIP media application.</p>
    pub priority: ::std::option::Option<i32>,
    /// <p>The AWS Region of a rule's target SIP media application.</p>
    pub aws_region: ::std::option::Option<::std::string::String>,
}
impl SipRuleTargetApplication {
    /// <p>The ID of a rule's target SIP media application.</p>
    pub fn sip_media_application_id(&self) -> ::std::option::Option<&str> {
        self.sip_media_application_id.as_deref()
    }
    /// <p>The priority setting of a rule's target SIP media application.</p>
    pub fn priority(&self) -> ::std::option::Option<i32> {
        self.priority
    }
    /// <p>The AWS Region of a rule's target SIP media application.</p>
    pub fn aws_region(&self) -> ::std::option::Option<&str> {
        self.aws_region.as_deref()
    }
}
impl SipRuleTargetApplication {
    /// Creates a new builder-style object to manufacture [`SipRuleTargetApplication`](crate::types::SipRuleTargetApplication).
    pub fn builder() -> crate::types::builders::SipRuleTargetApplicationBuilder {
        crate::types::builders::SipRuleTargetApplicationBuilder::default()
    }
}

/// A builder for [`SipRuleTargetApplication`](crate::types::SipRuleTargetApplication).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SipRuleTargetApplicationBuilder {
    pub(crate) sip_media_application_id: ::std::option::Option<::std::string::String>,
    pub(crate) priority: ::std::option::Option<i32>,
    pub(crate) aws_region: ::std::option::Option<::std::string::String>,
}
impl SipRuleTargetApplicationBuilder {
    /// <p>The ID of a rule's target SIP media application.</p>
    pub fn sip_media_application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sip_media_application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a rule's target SIP media application.</p>
    pub fn set_sip_media_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sip_media_application_id = input;
        self
    }
    /// <p>The ID of a rule's target SIP media application.</p>
    pub fn get_sip_media_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sip_media_application_id
    }
    /// <p>The priority setting of a rule's target SIP media application.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The priority setting of a rule's target SIP media application.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The priority setting of a rule's target SIP media application.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        &self.priority
    }
    /// <p>The AWS Region of a rule's target SIP media application.</p>
    pub fn aws_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS Region of a rule's target SIP media application.</p>
    pub fn set_aws_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The AWS Region of a rule's target SIP media application.</p>
    pub fn get_aws_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_region
    }
    /// Consumes the builder and constructs a [`SipRuleTargetApplication`](crate::types::SipRuleTargetApplication).
    pub fn build(self) -> crate::types::SipRuleTargetApplication {
        crate::types::SipRuleTargetApplication {
            sip_media_application_id: self.sip_media_application_id,
            priority: self.priority,
            aws_region: self.aws_region,
        }
    }
}
