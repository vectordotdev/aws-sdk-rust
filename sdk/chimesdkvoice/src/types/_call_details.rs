// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of an Amazon Chime SDK Voice Connector call.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CallDetails {
    /// <p>The Voice Connector ID.</p>
    pub voice_connector_id: ::std::option::Option<::std::string::String>,
    /// <p>The transaction ID of a Voice Connector call.</p>
    pub transaction_id: ::std::option::Option<::std::string::String>,
    /// <p>Identifies a person as the caller or the callee.</p>
    pub is_caller: ::std::option::Option<bool>,
}
impl CallDetails {
    /// <p>The Voice Connector ID.</p>
    pub fn voice_connector_id(&self) -> ::std::option::Option<&str> {
        self.voice_connector_id.as_deref()
    }
    /// <p>The transaction ID of a Voice Connector call.</p>
    pub fn transaction_id(&self) -> ::std::option::Option<&str> {
        self.transaction_id.as_deref()
    }
    /// <p>Identifies a person as the caller or the callee.</p>
    pub fn is_caller(&self) -> ::std::option::Option<bool> {
        self.is_caller
    }
}
impl CallDetails {
    /// Creates a new builder-style object to manufacture [`CallDetails`](crate::types::CallDetails).
    pub fn builder() -> crate::types::builders::CallDetailsBuilder {
        crate::types::builders::CallDetailsBuilder::default()
    }
}

/// A builder for [`CallDetails`](crate::types::CallDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CallDetailsBuilder {
    pub(crate) voice_connector_id: ::std::option::Option<::std::string::String>,
    pub(crate) transaction_id: ::std::option::Option<::std::string::String>,
    pub(crate) is_caller: ::std::option::Option<bool>,
}
impl CallDetailsBuilder {
    /// <p>The Voice Connector ID.</p>
    pub fn voice_connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.voice_connector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Voice Connector ID.</p>
    pub fn set_voice_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.voice_connector_id = input;
        self
    }
    /// <p>The Voice Connector ID.</p>
    pub fn get_voice_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.voice_connector_id
    }
    /// <p>The transaction ID of a Voice Connector call.</p>
    pub fn transaction_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.transaction_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The transaction ID of a Voice Connector call.</p>
    pub fn set_transaction_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.transaction_id = input;
        self
    }
    /// <p>The transaction ID of a Voice Connector call.</p>
    pub fn get_transaction_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.transaction_id
    }
    /// <p>Identifies a person as the caller or the callee.</p>
    pub fn is_caller(mut self, input: bool) -> Self {
        self.is_caller = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies a person as the caller or the callee.</p>
    pub fn set_is_caller(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_caller = input;
        self
    }
    /// <p>Identifies a person as the caller or the callee.</p>
    pub fn get_is_caller(&self) -> &::std::option::Option<bool> {
        &self.is_caller
    }
    /// Consumes the builder and constructs a [`CallDetails`](crate::types::CallDetails).
    pub fn build(self) -> crate::types::CallDetails {
        crate::types::CallDetails {
            voice_connector_id: self.voice_connector_id,
            transaction_id: self.transaction_id,
            is_caller: self.is_caller,
        }
    }
}
