// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detailed data about the current state of the component.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ComponentState {
    /// <p>The name of the service that <code>serviceInstanceName</code> is associated with. Provided when a component is attached to a service instance.</p>
    pub service_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service instance that this component is attached to. Provided when a component is attached to a service instance.</p>
    pub service_instance_name: ::std::option::Option<::std::string::String>,
    /// <p>The service spec that the component uses to access service inputs. Provided when a component is attached to a service instance.</p>
    pub service_spec: ::std::option::Option<::std::string::String>,
    /// <p>The template file used.</p>
    pub template_file: ::std::option::Option<::std::string::String>,
}
impl ComponentState {
    /// <p>The name of the service that <code>serviceInstanceName</code> is associated with. Provided when a component is attached to a service instance.</p>
    pub fn service_name(&self) -> ::std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The name of the service instance that this component is attached to. Provided when a component is attached to a service instance.</p>
    pub fn service_instance_name(&self) -> ::std::option::Option<&str> {
        self.service_instance_name.as_deref()
    }
    /// <p>The service spec that the component uses to access service inputs. Provided when a component is attached to a service instance.</p>
    pub fn service_spec(&self) -> ::std::option::Option<&str> {
        self.service_spec.as_deref()
    }
    /// <p>The template file used.</p>
    pub fn template_file(&self) -> ::std::option::Option<&str> {
        self.template_file.as_deref()
    }
}
impl ::std::fmt::Debug for ComponentState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ComponentState");
        formatter.field("service_name", &self.service_name);
        formatter.field("service_instance_name", &self.service_instance_name);
        formatter.field("service_spec", &"*** Sensitive Data Redacted ***");
        formatter.field("template_file", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ComponentState {
    /// Creates a new builder-style object to manufacture [`ComponentState`](crate::types::ComponentState).
    pub fn builder() -> crate::types::builders::ComponentStateBuilder {
        crate::types::builders::ComponentStateBuilder::default()
    }
}

/// A builder for [`ComponentState`](crate::types::ComponentState).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ComponentStateBuilder {
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_instance_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_spec: ::std::option::Option<::std::string::String>,
    pub(crate) template_file: ::std::option::Option<::std::string::String>,
}
impl ComponentStateBuilder {
    /// <p>The name of the service that <code>serviceInstanceName</code> is associated with. Provided when a component is attached to a service instance.</p>
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service that <code>serviceInstanceName</code> is associated with. Provided when a component is attached to a service instance.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the service that <code>serviceInstanceName</code> is associated with. Provided when a component is attached to a service instance.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>The name of the service instance that this component is attached to. Provided when a component is attached to a service instance.</p>
    pub fn service_instance_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_instance_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service instance that this component is attached to. Provided when a component is attached to a service instance.</p>
    pub fn set_service_instance_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_instance_name = input;
        self
    }
    /// <p>The name of the service instance that this component is attached to. Provided when a component is attached to a service instance.</p>
    pub fn get_service_instance_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_instance_name
    }
    /// <p>The service spec that the component uses to access service inputs. Provided when a component is attached to a service instance.</p>
    pub fn service_spec(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_spec = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service spec that the component uses to access service inputs. Provided when a component is attached to a service instance.</p>
    pub fn set_service_spec(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_spec = input;
        self
    }
    /// <p>The service spec that the component uses to access service inputs. Provided when a component is attached to a service instance.</p>
    pub fn get_service_spec(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_spec
    }
    /// <p>The template file used.</p>
    pub fn template_file(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_file = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The template file used.</p>
    pub fn set_template_file(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_file = input;
        self
    }
    /// <p>The template file used.</p>
    pub fn get_template_file(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_file
    }
    /// Consumes the builder and constructs a [`ComponentState`](crate::types::ComponentState).
    pub fn build(self) -> crate::types::ComponentState {
        crate::types::ComponentState {
            service_name: self.service_name,
            service_instance_name: self.service_instance_name,
            service_spec: self.service_spec,
            template_file: self.template_file,
        }
    }
}
impl ::std::fmt::Debug for ComponentStateBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ComponentStateBuilder");
        formatter.field("service_name", &self.service_name);
        formatter.field("service_instance_name", &self.service_instance_name);
        formatter.field("service_spec", &"*** Sensitive Data Redacted ***");
        formatter.field("template_file", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
