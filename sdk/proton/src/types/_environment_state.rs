// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detailed data about the current state of the environment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EnvironmentState {
    /// <p>The environment spec that was used to create the environment.</p>
    pub spec: ::std::option::Option<::std::string::String>,
    /// <p>The name of the environment template that was used to create the environment.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>The major version of the environment template that was used to create the environment.</p>
    pub template_major_version: ::std::option::Option<::std::string::String>,
    /// <p>The minor version of the environment template that was used to create the environment.</p>
    pub template_minor_version: ::std::option::Option<::std::string::String>,
}
impl EnvironmentState {
    /// <p>The environment spec that was used to create the environment.</p>
    pub fn spec(&self) -> ::std::option::Option<&str> {
        self.spec.as_deref()
    }
    /// <p>The name of the environment template that was used to create the environment.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The major version of the environment template that was used to create the environment.</p>
    pub fn template_major_version(&self) -> ::std::option::Option<&str> {
        self.template_major_version.as_deref()
    }
    /// <p>The minor version of the environment template that was used to create the environment.</p>
    pub fn template_minor_version(&self) -> ::std::option::Option<&str> {
        self.template_minor_version.as_deref()
    }
}
impl ::std::fmt::Debug for EnvironmentState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentState");
        formatter.field("spec", &"*** Sensitive Data Redacted ***");
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.finish()
    }
}
impl EnvironmentState {
    /// Creates a new builder-style object to manufacture [`EnvironmentState`](crate::types::EnvironmentState).
    pub fn builder() -> crate::types::builders::EnvironmentStateBuilder {
        crate::types::builders::EnvironmentStateBuilder::default()
    }
}

/// A builder for [`EnvironmentState`](crate::types::EnvironmentState).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct EnvironmentStateBuilder {
    pub(crate) spec: ::std::option::Option<::std::string::String>,
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_major_version: ::std::option::Option<::std::string::String>,
    pub(crate) template_minor_version: ::std::option::Option<::std::string::String>,
}
impl EnvironmentStateBuilder {
    /// <p>The environment spec that was used to create the environment.</p>
    pub fn spec(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.spec = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The environment spec that was used to create the environment.</p>
    pub fn set_spec(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.spec = input;
        self
    }
    /// <p>The environment spec that was used to create the environment.</p>
    pub fn get_spec(&self) -> &::std::option::Option<::std::string::String> {
        &self.spec
    }
    /// <p>The name of the environment template that was used to create the environment.</p>
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the environment template that was used to create the environment.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the environment template that was used to create the environment.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The major version of the environment template that was used to create the environment.</p>
    pub fn template_major_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_major_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The major version of the environment template that was used to create the environment.</p>
    pub fn set_template_major_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_major_version = input;
        self
    }
    /// <p>The major version of the environment template that was used to create the environment.</p>
    pub fn get_template_major_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_major_version
    }
    /// <p>The minor version of the environment template that was used to create the environment.</p>
    pub fn template_minor_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_minor_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The minor version of the environment template that was used to create the environment.</p>
    pub fn set_template_minor_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_minor_version = input;
        self
    }
    /// <p>The minor version of the environment template that was used to create the environment.</p>
    pub fn get_template_minor_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_minor_version
    }
    /// Consumes the builder and constructs a [`EnvironmentState`](crate::types::EnvironmentState).
    pub fn build(self) -> crate::types::EnvironmentState {
        crate::types::EnvironmentState {
            spec: self.spec,
            template_name: self.template_name,
            template_major_version: self.template_major_version,
            template_minor_version: self.template_minor_version,
        }
    }
}
impl ::std::fmt::Debug for EnvironmentStateBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EnvironmentStateBuilder");
        formatter.field("spec", &"*** Sensitive Data Redacted ***");
        formatter.field("template_name", &self.template_name);
        formatter.field("template_major_version", &self.template_major_version);
        formatter.field("template_minor_version", &self.template_minor_version);
        formatter.finish()
    }
}
