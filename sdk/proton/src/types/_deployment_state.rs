// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detailed data about the current state of the deployment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum DeploymentState {
    /// <p>The state of the component associated with the deployment.</p>
    Component(crate::types::ComponentState),
    /// <p>The state of the environment associated with the deployment.</p>
    Environment(crate::types::EnvironmentState),
    /// <p>The state of the service instance associated with the deployment.</p>
    ServiceInstance(crate::types::ServiceInstanceState),
    /// <p>The state of the service pipeline associated with the deployment.</p>
    ServicePipeline(crate::types::ServicePipelineState),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl DeploymentState {
    /// Tries to convert the enum instance into [`Component`](crate::types::DeploymentState::Component), extracting the inner [`ComponentState`](crate::types::ComponentState).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_component(&self) -> ::std::result::Result<&crate::types::ComponentState, &Self> {
        if let DeploymentState::Component(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Component`](crate::types::DeploymentState::Component).
    pub fn is_component(&self) -> bool {
        self.as_component().is_ok()
    }
    /// Tries to convert the enum instance into [`Environment`](crate::types::DeploymentState::Environment), extracting the inner [`EnvironmentState`](crate::types::EnvironmentState).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_environment(&self) -> ::std::result::Result<&crate::types::EnvironmentState, &Self> {
        if let DeploymentState::Environment(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Environment`](crate::types::DeploymentState::Environment).
    pub fn is_environment(&self) -> bool {
        self.as_environment().is_ok()
    }
    /// Tries to convert the enum instance into [`ServiceInstance`](crate::types::DeploymentState::ServiceInstance), extracting the inner [`ServiceInstanceState`](crate::types::ServiceInstanceState).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_service_instance(&self) -> ::std::result::Result<&crate::types::ServiceInstanceState, &Self> {
        if let DeploymentState::ServiceInstance(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ServiceInstance`](crate::types::DeploymentState::ServiceInstance).
    pub fn is_service_instance(&self) -> bool {
        self.as_service_instance().is_ok()
    }
    /// Tries to convert the enum instance into [`ServicePipeline`](crate::types::DeploymentState::ServicePipeline), extracting the inner [`ServicePipelineState`](crate::types::ServicePipelineState).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_service_pipeline(&self) -> ::std::result::Result<&crate::types::ServicePipelineState, &Self> {
        if let DeploymentState::ServicePipeline(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ServicePipeline`](crate::types::DeploymentState::ServicePipeline).
    pub fn is_service_pipeline(&self) -> bool {
        self.as_service_pipeline().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
