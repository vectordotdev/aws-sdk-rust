// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_domains_output_next_token(
    input: &crate::operation::list_domains::ListDomainsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_package_version_assets_output_next_token(
    input: &crate::operation::list_package_version_assets::ListPackageVersionAssetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_package_versions_output_next_token(
    input: &crate::operation::list_package_versions::ListPackageVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_packages_output_next_token(
    input: &crate::operation::list_packages::ListPackagesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_repositories_output_next_token(
    input: &crate::operation::list_repositories::ListRepositoriesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_repositories_in_domain_output_next_token(
    input: &crate::operation::list_repositories_in_domain::ListRepositoriesInDomainOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_domains_output_domains(
    input: crate::operation::list_domains::ListDomainsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DomainSummary>> {
    let input = match input.domains {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_package_version_assets_output_assets(
    input: crate::operation::list_package_version_assets::ListPackageVersionAssetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetSummary>> {
    let input = match input.assets {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_package_versions_output_versions(
    input: crate::operation::list_package_versions::ListPackageVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PackageVersionSummary>> {
    let input = match input.versions {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_packages_output_packages(
    input: crate::operation::list_packages::ListPackagesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PackageSummary>> {
    let input = match input.packages {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_repositories_output_repositories(
    input: crate::operation::list_repositories::ListRepositoriesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RepositorySummary>> {
    let input = match input.repositories {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_repositories_in_domain_output_repositories(
    input: crate::operation::list_repositories_in_domain::ListRepositoriesInDomainOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RepositorySummary>> {
    let input = match input.repositories {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
