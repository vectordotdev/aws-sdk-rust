// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an export snapshot record.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportSnapshotRecord {
    /// <p>The export snapshot record name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the export snapshot record.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The date when the export snapshot record was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The AWS Region and Availability Zone where the export snapshot record is located.</p>
    pub location: ::std::option::Option<crate::types::ResourceLocation>,
    /// <p>The Lightsail resource type (e.g., <code>ExportSnapshotRecord</code>).</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The state of the export snapshot record.</p>
    pub state: ::std::option::Option<crate::types::RecordState>,
    /// <p>A list of objects describing the source of the export snapshot record.</p>
    pub source_info: ::std::option::Option<crate::types::ExportSnapshotRecordSourceInfo>,
    /// <p>A list of objects describing the destination of the export snapshot record.</p>
    pub destination_info: ::std::option::Option<crate::types::DestinationInfo>,
}
impl ExportSnapshotRecord {
    /// <p>The export snapshot record name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the export snapshot record.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date when the export snapshot record was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The AWS Region and Availability Zone where the export snapshot record is located.</p>
    pub fn location(&self) -> ::std::option::Option<&crate::types::ResourceLocation> {
        self.location.as_ref()
    }
    /// <p>The Lightsail resource type (e.g., <code>ExportSnapshotRecord</code>).</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The state of the export snapshot record.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::RecordState> {
        self.state.as_ref()
    }
    /// <p>A list of objects describing the source of the export snapshot record.</p>
    pub fn source_info(&self) -> ::std::option::Option<&crate::types::ExportSnapshotRecordSourceInfo> {
        self.source_info.as_ref()
    }
    /// <p>A list of objects describing the destination of the export snapshot record.</p>
    pub fn destination_info(&self) -> ::std::option::Option<&crate::types::DestinationInfo> {
        self.destination_info.as_ref()
    }
}
impl ExportSnapshotRecord {
    /// Creates a new builder-style object to manufacture [`ExportSnapshotRecord`](crate::types::ExportSnapshotRecord).
    pub fn builder() -> crate::types::builders::ExportSnapshotRecordBuilder {
        crate::types::builders::ExportSnapshotRecordBuilder::default()
    }
}

/// A builder for [`ExportSnapshotRecord`](crate::types::ExportSnapshotRecord).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportSnapshotRecordBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) location: ::std::option::Option<crate::types::ResourceLocation>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) state: ::std::option::Option<crate::types::RecordState>,
    pub(crate) source_info: ::std::option::Option<crate::types::ExportSnapshotRecordSourceInfo>,
    pub(crate) destination_info: ::std::option::Option<crate::types::DestinationInfo>,
}
impl ExportSnapshotRecordBuilder {
    /// <p>The export snapshot record name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The export snapshot record name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The export snapshot record name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the export snapshot record.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the export snapshot record.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the export snapshot record.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The date when the export snapshot record was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the export snapshot record was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date when the export snapshot record was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The AWS Region and Availability Zone where the export snapshot record is located.</p>
    pub fn location(mut self, input: crate::types::ResourceLocation) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AWS Region and Availability Zone where the export snapshot record is located.</p>
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::ResourceLocation>) -> Self {
        self.location = input;
        self
    }
    /// <p>The AWS Region and Availability Zone where the export snapshot record is located.</p>
    pub fn get_location(&self) -> &::std::option::Option<crate::types::ResourceLocation> {
        &self.location
    }
    /// <p>The Lightsail resource type (e.g., <code>ExportSnapshotRecord</code>).</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Lightsail resource type (e.g., <code>ExportSnapshotRecord</code>).</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The Lightsail resource type (e.g., <code>ExportSnapshotRecord</code>).</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The state of the export snapshot record.</p>
    pub fn state(mut self, input: crate::types::RecordState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the export snapshot record.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::RecordState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the export snapshot record.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::RecordState> {
        &self.state
    }
    /// <p>A list of objects describing the source of the export snapshot record.</p>
    pub fn source_info(mut self, input: crate::types::ExportSnapshotRecordSourceInfo) -> Self {
        self.source_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of objects describing the source of the export snapshot record.</p>
    pub fn set_source_info(mut self, input: ::std::option::Option<crate::types::ExportSnapshotRecordSourceInfo>) -> Self {
        self.source_info = input;
        self
    }
    /// <p>A list of objects describing the source of the export snapshot record.</p>
    pub fn get_source_info(&self) -> &::std::option::Option<crate::types::ExportSnapshotRecordSourceInfo> {
        &self.source_info
    }
    /// <p>A list of objects describing the destination of the export snapshot record.</p>
    pub fn destination_info(mut self, input: crate::types::DestinationInfo) -> Self {
        self.destination_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of objects describing the destination of the export snapshot record.</p>
    pub fn set_destination_info(mut self, input: ::std::option::Option<crate::types::DestinationInfo>) -> Self {
        self.destination_info = input;
        self
    }
    /// <p>A list of objects describing the destination of the export snapshot record.</p>
    pub fn get_destination_info(&self) -> &::std::option::Option<crate::types::DestinationInfo> {
        &self.destination_info
    }
    /// Consumes the builder and constructs a [`ExportSnapshotRecord`](crate::types::ExportSnapshotRecord).
    pub fn build(self) -> crate::types::ExportSnapshotRecord {
        crate::types::ExportSnapshotRecord {
            name: self.name,
            arn: self.arn,
            created_at: self.created_at,
            location: self.location,
            resource_type: self.resource_type,
            state: self.state,
            source_info: self.source_info,
            destination_info: self.destination_info,
        }
    }
}
