// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An estimate that's associated with a time period. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EstimateByTime {
    /// <p>The amount of cost or usage that's measured for the cost estimate.</p>
    pub usage_cost: ::std::option::Option<f64>,
    /// <p>The unit of measurement that's used for the cost estimate.</p>
    pub pricing_unit: ::std::option::Option<crate::types::PricingUnit>,
    /// <p>The number of pricing units used to calculate the total number of hours. For example, 1 unit equals 1 hour.</p>
    pub unit: ::std::option::Option<f64>,
    /// <p>The currency of the estimate in USD.</p>
    pub currency: ::std::option::Option<crate::types::Currency>,
    /// <p>The period of time, in days, that an estimate covers. The period has a start date and an end date. The start date must come before the end date.</p>
    pub time_period: ::std::option::Option<crate::types::TimePeriod>,
}
impl EstimateByTime {
    /// <p>The amount of cost or usage that's measured for the cost estimate.</p>
    pub fn usage_cost(&self) -> ::std::option::Option<f64> {
        self.usage_cost
    }
    /// <p>The unit of measurement that's used for the cost estimate.</p>
    pub fn pricing_unit(&self) -> ::std::option::Option<&crate::types::PricingUnit> {
        self.pricing_unit.as_ref()
    }
    /// <p>The number of pricing units used to calculate the total number of hours. For example, 1 unit equals 1 hour.</p>
    pub fn unit(&self) -> ::std::option::Option<f64> {
        self.unit
    }
    /// <p>The currency of the estimate in USD.</p>
    pub fn currency(&self) -> ::std::option::Option<&crate::types::Currency> {
        self.currency.as_ref()
    }
    /// <p>The period of time, in days, that an estimate covers. The period has a start date and an end date. The start date must come before the end date.</p>
    pub fn time_period(&self) -> ::std::option::Option<&crate::types::TimePeriod> {
        self.time_period.as_ref()
    }
}
impl EstimateByTime {
    /// Creates a new builder-style object to manufacture [`EstimateByTime`](crate::types::EstimateByTime).
    pub fn builder() -> crate::types::builders::EstimateByTimeBuilder {
        crate::types::builders::EstimateByTimeBuilder::default()
    }
}

/// A builder for [`EstimateByTime`](crate::types::EstimateByTime).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EstimateByTimeBuilder {
    pub(crate) usage_cost: ::std::option::Option<f64>,
    pub(crate) pricing_unit: ::std::option::Option<crate::types::PricingUnit>,
    pub(crate) unit: ::std::option::Option<f64>,
    pub(crate) currency: ::std::option::Option<crate::types::Currency>,
    pub(crate) time_period: ::std::option::Option<crate::types::TimePeriod>,
}
impl EstimateByTimeBuilder {
    /// <p>The amount of cost or usage that's measured for the cost estimate.</p>
    pub fn usage_cost(mut self, input: f64) -> Self {
        self.usage_cost = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of cost or usage that's measured for the cost estimate.</p>
    pub fn set_usage_cost(mut self, input: ::std::option::Option<f64>) -> Self {
        self.usage_cost = input;
        self
    }
    /// <p>The amount of cost or usage that's measured for the cost estimate.</p>
    pub fn get_usage_cost(&self) -> &::std::option::Option<f64> {
        &self.usage_cost
    }
    /// <p>The unit of measurement that's used for the cost estimate.</p>
    pub fn pricing_unit(mut self, input: crate::types::PricingUnit) -> Self {
        self.pricing_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unit of measurement that's used for the cost estimate.</p>
    pub fn set_pricing_unit(mut self, input: ::std::option::Option<crate::types::PricingUnit>) -> Self {
        self.pricing_unit = input;
        self
    }
    /// <p>The unit of measurement that's used for the cost estimate.</p>
    pub fn get_pricing_unit(&self) -> &::std::option::Option<crate::types::PricingUnit> {
        &self.pricing_unit
    }
    /// <p>The number of pricing units used to calculate the total number of hours. For example, 1 unit equals 1 hour.</p>
    pub fn unit(mut self, input: f64) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of pricing units used to calculate the total number of hours. For example, 1 unit equals 1 hour.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<f64>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The number of pricing units used to calculate the total number of hours. For example, 1 unit equals 1 hour.</p>
    pub fn get_unit(&self) -> &::std::option::Option<f64> {
        &self.unit
    }
    /// <p>The currency of the estimate in USD.</p>
    pub fn currency(mut self, input: crate::types::Currency) -> Self {
        self.currency = ::std::option::Option::Some(input);
        self
    }
    /// <p>The currency of the estimate in USD.</p>
    pub fn set_currency(mut self, input: ::std::option::Option<crate::types::Currency>) -> Self {
        self.currency = input;
        self
    }
    /// <p>The currency of the estimate in USD.</p>
    pub fn get_currency(&self) -> &::std::option::Option<crate::types::Currency> {
        &self.currency
    }
    /// <p>The period of time, in days, that an estimate covers. The period has a start date and an end date. The start date must come before the end date.</p>
    pub fn time_period(mut self, input: crate::types::TimePeriod) -> Self {
        self.time_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The period of time, in days, that an estimate covers. The period has a start date and an end date. The start date must come before the end date.</p>
    pub fn set_time_period(mut self, input: ::std::option::Option<crate::types::TimePeriod>) -> Self {
        self.time_period = input;
        self
    }
    /// <p>The period of time, in days, that an estimate covers. The period has a start date and an end date. The start date must come before the end date.</p>
    pub fn get_time_period(&self) -> &::std::option::Option<crate::types::TimePeriod> {
        &self.time_period
    }
    /// Consumes the builder and constructs a [`EstimateByTime`](crate::types::EstimateByTime).
    pub fn build(self) -> crate::types::EstimateByTime {
        crate::types::EstimateByTime {
            usage_cost: self.usage_cost,
            pricing_unit: self.pricing_unit,
            unit: self.unit,
            currency: self.currency,
            time_period: self.time_period,
        }
    }
}
