// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a contact method.</p>
/// <p>A contact method is a way to send you notifications. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContactMethod {
    /// <p>The destination of the contact method, such as an email address or a mobile phone number.</p>
    pub contact_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the contact method.</p>
    /// <p>A contact method has the following possible status:</p>
    /// <ul>
    /// <li> <p> <code>PendingVerification</code> - The contact method has not yet been verified, and the verification has not yet expired.</p> </li>
    /// <li> <p> <code>Valid</code> - The contact method has been verified.</p> </li>
    /// <li> <p> <code>InValid</code> - An attempt was made to verify the contact method, but the verification has expired.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::ContactMethodStatus>,
    /// <p>The protocol of the contact method, such as email or SMS (text messaging).</p>
    pub protocol: ::std::option::Option<crate::types::ContactProtocol>,
    /// <p>The name of the contact method.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the contact method.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the contact method was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An object that describes the location of the contact method, such as the Amazon Web Services Region and Availability Zone.</p>
    pub location: ::std::option::Option<crate::types::ResourceLocation>,
    /// <p>The Lightsail resource type (e.g., <code>ContactMethod</code>).</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The support code. Include this code in your email to support when you have questions about your Lightsail contact method. This code enables our support team to look up your Lightsail information more easily.</p>
    pub support_code: ::std::option::Option<::std::string::String>,
}
impl ContactMethod {
    /// <p>The destination of the contact method, such as an email address or a mobile phone number.</p>
    pub fn contact_endpoint(&self) -> ::std::option::Option<&str> {
        self.contact_endpoint.as_deref()
    }
    /// <p>The current status of the contact method.</p>
    /// <p>A contact method has the following possible status:</p>
    /// <ul>
    /// <li> <p> <code>PendingVerification</code> - The contact method has not yet been verified, and the verification has not yet expired.</p> </li>
    /// <li> <p> <code>Valid</code> - The contact method has been verified.</p> </li>
    /// <li> <p> <code>InValid</code> - An attempt was made to verify the contact method, but the verification has expired.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ContactMethodStatus> {
        self.status.as_ref()
    }
    /// <p>The protocol of the contact method, such as email or SMS (text messaging).</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::ContactProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The name of the contact method.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the contact method.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The timestamp when the contact method was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>An object that describes the location of the contact method, such as the Amazon Web Services Region and Availability Zone.</p>
    pub fn location(&self) -> ::std::option::Option<&crate::types::ResourceLocation> {
        self.location.as_ref()
    }
    /// <p>The Lightsail resource type (e.g., <code>ContactMethod</code>).</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The support code. Include this code in your email to support when you have questions about your Lightsail contact method. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn support_code(&self) -> ::std::option::Option<&str> {
        self.support_code.as_deref()
    }
}
impl ContactMethod {
    /// Creates a new builder-style object to manufacture [`ContactMethod`](crate::types::ContactMethod).
    pub fn builder() -> crate::types::builders::ContactMethodBuilder {
        crate::types::builders::ContactMethodBuilder::default()
    }
}

/// A builder for [`ContactMethod`](crate::types::ContactMethod).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContactMethodBuilder {
    pub(crate) contact_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ContactMethodStatus>,
    pub(crate) protocol: ::std::option::Option<crate::types::ContactProtocol>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) location: ::std::option::Option<crate::types::ResourceLocation>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) support_code: ::std::option::Option<::std::string::String>,
}
impl ContactMethodBuilder {
    /// <p>The destination of the contact method, such as an email address or a mobile phone number.</p>
    pub fn contact_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contact_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination of the contact method, such as an email address or a mobile phone number.</p>
    pub fn set_contact_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contact_endpoint = input;
        self
    }
    /// <p>The destination of the contact method, such as an email address or a mobile phone number.</p>
    pub fn get_contact_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.contact_endpoint
    }
    /// <p>The current status of the contact method.</p>
    /// <p>A contact method has the following possible status:</p>
    /// <ul>
    /// <li> <p> <code>PendingVerification</code> - The contact method has not yet been verified, and the verification has not yet expired.</p> </li>
    /// <li> <p> <code>Valid</code> - The contact method has been verified.</p> </li>
    /// <li> <p> <code>InValid</code> - An attempt was made to verify the contact method, but the verification has expired.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ContactMethodStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the contact method.</p>
    /// <p>A contact method has the following possible status:</p>
    /// <ul>
    /// <li> <p> <code>PendingVerification</code> - The contact method has not yet been verified, and the verification has not yet expired.</p> </li>
    /// <li> <p> <code>Valid</code> - The contact method has been verified.</p> </li>
    /// <li> <p> <code>InValid</code> - An attempt was made to verify the contact method, but the verification has expired.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ContactMethodStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the contact method.</p>
    /// <p>A contact method has the following possible status:</p>
    /// <ul>
    /// <li> <p> <code>PendingVerification</code> - The contact method has not yet been verified, and the verification has not yet expired.</p> </li>
    /// <li> <p> <code>Valid</code> - The contact method has been verified.</p> </li>
    /// <li> <p> <code>InValid</code> - An attempt was made to verify the contact method, but the verification has expired.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ContactMethodStatus> {
        &self.status
    }
    /// <p>The protocol of the contact method, such as email or SMS (text messaging).</p>
    pub fn protocol(mut self, input: crate::types::ContactProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol of the contact method, such as email or SMS (text messaging).</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::ContactProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol of the contact method, such as email or SMS (text messaging).</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::ContactProtocol> {
        &self.protocol
    }
    /// <p>The name of the contact method.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the contact method.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the contact method.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the contact method.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact method.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the contact method.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The timestamp when the contact method was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the contact method was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the contact method was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>An object that describes the location of the contact method, such as the Amazon Web Services Region and Availability Zone.</p>
    pub fn location(mut self, input: crate::types::ResourceLocation) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that describes the location of the contact method, such as the Amazon Web Services Region and Availability Zone.</p>
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::ResourceLocation>) -> Self {
        self.location = input;
        self
    }
    /// <p>An object that describes the location of the contact method, such as the Amazon Web Services Region and Availability Zone.</p>
    pub fn get_location(&self) -> &::std::option::Option<crate::types::ResourceLocation> {
        &self.location
    }
    /// <p>The Lightsail resource type (e.g., <code>ContactMethod</code>).</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Lightsail resource type (e.g., <code>ContactMethod</code>).</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The Lightsail resource type (e.g., <code>ContactMethod</code>).</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The support code. Include this code in your email to support when you have questions about your Lightsail contact method. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn support_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.support_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The support code. Include this code in your email to support when you have questions about your Lightsail contact method. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn set_support_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.support_code = input;
        self
    }
    /// <p>The support code. Include this code in your email to support when you have questions about your Lightsail contact method. This code enables our support team to look up your Lightsail information more easily.</p>
    pub fn get_support_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.support_code
    }
    /// Consumes the builder and constructs a [`ContactMethod`](crate::types::ContactMethod).
    pub fn build(self) -> crate::types::ContactMethod {
        crate::types::ContactMethod {
            contact_endpoint: self.contact_endpoint,
            status: self.status,
            protocol: self.protocol,
            name: self.name,
            arn: self.arn,
            created_at: self.created_at,
            location: self.location,
            resource_type: self.resource_type,
            support_code: self.support_code,
        }
    }
}
