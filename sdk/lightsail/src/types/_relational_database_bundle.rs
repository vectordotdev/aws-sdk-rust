// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a database bundle. A bundle describes the performance specifications of the database.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RelationalDatabaseBundle {
    /// <p>The ID for the database bundle.</p>
    pub bundle_id: ::std::option::Option<::std::string::String>,
    /// <p>The name for the database bundle.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The cost of the database bundle in US currency.</p>
    pub price: ::std::option::Option<f32>,
    /// <p>The amount of RAM in GB (for example, <code>2.0</code>) for the database bundle.</p>
    pub ram_size_in_gb: ::std::option::Option<f32>,
    /// <p>The size of the disk for the database bundle.</p>
    pub disk_size_in_gb: ::std::option::Option<i32>,
    /// <p>The data transfer rate per month in GB for the database bundle.</p>
    pub transfer_per_month_in_gb: ::std::option::Option<i32>,
    /// <p>The number of virtual CPUs (vCPUs) for the database bundle.</p>
    pub cpu_count: ::std::option::Option<i32>,
    /// <p>A Boolean value indicating whether the database bundle is encrypted.</p>
    pub is_encrypted: ::std::option::Option<bool>,
    /// <p>A Boolean value indicating whether the database bundle is active.</p>
    pub is_active: ::std::option::Option<bool>,
}
impl RelationalDatabaseBundle {
    /// <p>The ID for the database bundle.</p>
    pub fn bundle_id(&self) -> ::std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p>The name for the database bundle.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The cost of the database bundle in US currency.</p>
    pub fn price(&self) -> ::std::option::Option<f32> {
        self.price
    }
    /// <p>The amount of RAM in GB (for example, <code>2.0</code>) for the database bundle.</p>
    pub fn ram_size_in_gb(&self) -> ::std::option::Option<f32> {
        self.ram_size_in_gb
    }
    /// <p>The size of the disk for the database bundle.</p>
    pub fn disk_size_in_gb(&self) -> ::std::option::Option<i32> {
        self.disk_size_in_gb
    }
    /// <p>The data transfer rate per month in GB for the database bundle.</p>
    pub fn transfer_per_month_in_gb(&self) -> ::std::option::Option<i32> {
        self.transfer_per_month_in_gb
    }
    /// <p>The number of virtual CPUs (vCPUs) for the database bundle.</p>
    pub fn cpu_count(&self) -> ::std::option::Option<i32> {
        self.cpu_count
    }
    /// <p>A Boolean value indicating whether the database bundle is encrypted.</p>
    pub fn is_encrypted(&self) -> ::std::option::Option<bool> {
        self.is_encrypted
    }
    /// <p>A Boolean value indicating whether the database bundle is active.</p>
    pub fn is_active(&self) -> ::std::option::Option<bool> {
        self.is_active
    }
}
impl RelationalDatabaseBundle {
    /// Creates a new builder-style object to manufacture [`RelationalDatabaseBundle`](crate::types::RelationalDatabaseBundle).
    pub fn builder() -> crate::types::builders::RelationalDatabaseBundleBuilder {
        crate::types::builders::RelationalDatabaseBundleBuilder::default()
    }
}

/// A builder for [`RelationalDatabaseBundle`](crate::types::RelationalDatabaseBundle).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RelationalDatabaseBundleBuilder {
    pub(crate) bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) price: ::std::option::Option<f32>,
    pub(crate) ram_size_in_gb: ::std::option::Option<f32>,
    pub(crate) disk_size_in_gb: ::std::option::Option<i32>,
    pub(crate) transfer_per_month_in_gb: ::std::option::Option<i32>,
    pub(crate) cpu_count: ::std::option::Option<i32>,
    pub(crate) is_encrypted: ::std::option::Option<bool>,
    pub(crate) is_active: ::std::option::Option<bool>,
}
impl RelationalDatabaseBundleBuilder {
    /// <p>The ID for the database bundle.</p>
    pub fn bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the database bundle.</p>
    pub fn set_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p>The ID for the database bundle.</p>
    pub fn get_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bundle_id
    }
    /// <p>The name for the database bundle.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the database bundle.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for the database bundle.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The cost of the database bundle in US currency.</p>
    pub fn price(mut self, input: f32) -> Self {
        self.price = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cost of the database bundle in US currency.</p>
    pub fn set_price(mut self, input: ::std::option::Option<f32>) -> Self {
        self.price = input;
        self
    }
    /// <p>The cost of the database bundle in US currency.</p>
    pub fn get_price(&self) -> &::std::option::Option<f32> {
        &self.price
    }
    /// <p>The amount of RAM in GB (for example, <code>2.0</code>) for the database bundle.</p>
    pub fn ram_size_in_gb(mut self, input: f32) -> Self {
        self.ram_size_in_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of RAM in GB (for example, <code>2.0</code>) for the database bundle.</p>
    pub fn set_ram_size_in_gb(mut self, input: ::std::option::Option<f32>) -> Self {
        self.ram_size_in_gb = input;
        self
    }
    /// <p>The amount of RAM in GB (for example, <code>2.0</code>) for the database bundle.</p>
    pub fn get_ram_size_in_gb(&self) -> &::std::option::Option<f32> {
        &self.ram_size_in_gb
    }
    /// <p>The size of the disk for the database bundle.</p>
    pub fn disk_size_in_gb(mut self, input: i32) -> Self {
        self.disk_size_in_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the disk for the database bundle.</p>
    pub fn set_disk_size_in_gb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.disk_size_in_gb = input;
        self
    }
    /// <p>The size of the disk for the database bundle.</p>
    pub fn get_disk_size_in_gb(&self) -> &::std::option::Option<i32> {
        &self.disk_size_in_gb
    }
    /// <p>The data transfer rate per month in GB for the database bundle.</p>
    pub fn transfer_per_month_in_gb(mut self, input: i32) -> Self {
        self.transfer_per_month_in_gb = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data transfer rate per month in GB for the database bundle.</p>
    pub fn set_transfer_per_month_in_gb(mut self, input: ::std::option::Option<i32>) -> Self {
        self.transfer_per_month_in_gb = input;
        self
    }
    /// <p>The data transfer rate per month in GB for the database bundle.</p>
    pub fn get_transfer_per_month_in_gb(&self) -> &::std::option::Option<i32> {
        &self.transfer_per_month_in_gb
    }
    /// <p>The number of virtual CPUs (vCPUs) for the database bundle.</p>
    pub fn cpu_count(mut self, input: i32) -> Self {
        self.cpu_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of virtual CPUs (vCPUs) for the database bundle.</p>
    pub fn set_cpu_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cpu_count = input;
        self
    }
    /// <p>The number of virtual CPUs (vCPUs) for the database bundle.</p>
    pub fn get_cpu_count(&self) -> &::std::option::Option<i32> {
        &self.cpu_count
    }
    /// <p>A Boolean value indicating whether the database bundle is encrypted.</p>
    pub fn is_encrypted(mut self, input: bool) -> Self {
        self.is_encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value indicating whether the database bundle is encrypted.</p>
    pub fn set_is_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_encrypted = input;
        self
    }
    /// <p>A Boolean value indicating whether the database bundle is encrypted.</p>
    pub fn get_is_encrypted(&self) -> &::std::option::Option<bool> {
        &self.is_encrypted
    }
    /// <p>A Boolean value indicating whether the database bundle is active.</p>
    pub fn is_active(mut self, input: bool) -> Self {
        self.is_active = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value indicating whether the database bundle is active.</p>
    pub fn set_is_active(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_active = input;
        self
    }
    /// <p>A Boolean value indicating whether the database bundle is active.</p>
    pub fn get_is_active(&self) -> &::std::option::Option<bool> {
        &self.is_active
    }
    /// Consumes the builder and constructs a [`RelationalDatabaseBundle`](crate::types::RelationalDatabaseBundle).
    pub fn build(self) -> crate::types::RelationalDatabaseBundle {
        crate::types::RelationalDatabaseBundle {
            bundle_id: self.bundle_id,
            name: self.name,
            price: self.price,
            ram_size_in_gb: self.ram_size_in_gb,
            disk_size_in_gb: self.disk_size_in_gb,
            transfer_per_month_in_gb: self.transfer_per_month_in_gb,
            cpu_count: self.cpu_count,
            is_encrypted: self.is_encrypted,
            is_active: self.is_active,
        }
    }
}
