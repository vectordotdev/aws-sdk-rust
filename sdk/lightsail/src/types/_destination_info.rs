// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the destination of a record.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DestinationInfo {
    /// <p>The ID of the resource created at the destination.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The destination service of the record.</p>
    pub service: ::std::option::Option<::std::string::String>,
}
impl DestinationInfo {
    /// <p>The ID of the resource created at the destination.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The destination service of the record.</p>
    pub fn service(&self) -> ::std::option::Option<&str> {
        self.service.as_deref()
    }
}
impl DestinationInfo {
    /// Creates a new builder-style object to manufacture [`DestinationInfo`](crate::types::DestinationInfo).
    pub fn builder() -> crate::types::builders::DestinationInfoBuilder {
        crate::types::builders::DestinationInfoBuilder::default()
    }
}

/// A builder for [`DestinationInfo`](crate::types::DestinationInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DestinationInfoBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) service: ::std::option::Option<::std::string::String>,
}
impl DestinationInfoBuilder {
    /// <p>The ID of the resource created at the destination.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the resource created at the destination.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the resource created at the destination.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The destination service of the record.</p>
    pub fn service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination service of the record.</p>
    pub fn set_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service = input;
        self
    }
    /// <p>The destination service of the record.</p>
    pub fn get_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.service
    }
    /// Consumes the builder and constructs a [`DestinationInfo`](crate::types::DestinationInfo).
    pub fn build(self) -> crate::types::DestinationInfo {
        crate::types::DestinationInfo {
            id: self.id,
            service: self.service,
        }
    }
}
