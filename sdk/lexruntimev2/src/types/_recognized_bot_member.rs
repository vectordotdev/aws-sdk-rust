// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The bot member that processes the request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecognizedBotMember {
    /// <p>The identifier of the bot member that processes the request.</p>
    pub bot_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the bot member that processes the request.</p>
    pub bot_name: ::std::option::Option<::std::string::String>,
}
impl RecognizedBotMember {
    /// <p>The identifier of the bot member that processes the request.</p>
    pub fn bot_id(&self) -> ::std::option::Option<&str> {
        self.bot_id.as_deref()
    }
    /// <p>The name of the bot member that processes the request.</p>
    pub fn bot_name(&self) -> ::std::option::Option<&str> {
        self.bot_name.as_deref()
    }
}
impl RecognizedBotMember {
    /// Creates a new builder-style object to manufacture [`RecognizedBotMember`](crate::types::RecognizedBotMember).
    pub fn builder() -> crate::types::builders::RecognizedBotMemberBuilder {
        crate::types::builders::RecognizedBotMemberBuilder::default()
    }
}

/// A builder for [`RecognizedBotMember`](crate::types::RecognizedBotMember).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecognizedBotMemberBuilder {
    pub(crate) bot_id: ::std::option::Option<::std::string::String>,
    pub(crate) bot_name: ::std::option::Option<::std::string::String>,
}
impl RecognizedBotMemberBuilder {
    /// <p>The identifier of the bot member that processes the request.</p>
    pub fn bot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the bot member that processes the request.</p>
    pub fn set_bot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_id = input;
        self
    }
    /// <p>The identifier of the bot member that processes the request.</p>
    pub fn get_bot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_id
    }
    /// <p>The name of the bot member that processes the request.</p>
    pub fn bot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the bot member that processes the request.</p>
    pub fn set_bot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_name = input;
        self
    }
    /// <p>The name of the bot member that processes the request.</p>
    pub fn get_bot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_name
    }
    /// Consumes the builder and constructs a [`RecognizedBotMember`](crate::types::RecognizedBotMember).
    pub fn build(self) -> crate::types::RecognizedBotMember {
        crate::types::RecognizedBotMember {
            bot_id: self.bot_id,
            bot_name: self.bot_name,
        }
    }
}
