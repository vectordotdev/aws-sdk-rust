// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The definition for a provisioned capacity unit.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProvisionedCapacityDescription {
    /// <p>The ID that identifies the provisioned capacity unit.</p>
    pub capacity_id: ::std::option::Option<::std::string::String>,
    /// <p>The date that the provisioned capacity unit was purchased, in Universal Coordinated Time (UTC).</p>
    pub start_date: ::std::option::Option<::std::string::String>,
    /// <p>The date that the provisioned capacity unit expires, in Universal Coordinated Time (UTC).</p>
    pub expiration_date: ::std::option::Option<::std::string::String>,
}
impl ProvisionedCapacityDescription {
    /// <p>The ID that identifies the provisioned capacity unit.</p>
    pub fn capacity_id(&self) -> ::std::option::Option<&str> {
        self.capacity_id.as_deref()
    }
    /// <p>The date that the provisioned capacity unit was purchased, in Universal Coordinated Time (UTC).</p>
    pub fn start_date(&self) -> ::std::option::Option<&str> {
        self.start_date.as_deref()
    }
    /// <p>The date that the provisioned capacity unit expires, in Universal Coordinated Time (UTC).</p>
    pub fn expiration_date(&self) -> ::std::option::Option<&str> {
        self.expiration_date.as_deref()
    }
}
impl ProvisionedCapacityDescription {
    /// Creates a new builder-style object to manufacture [`ProvisionedCapacityDescription`](crate::types::ProvisionedCapacityDescription).
    pub fn builder() -> crate::types::builders::ProvisionedCapacityDescriptionBuilder {
        crate::types::builders::ProvisionedCapacityDescriptionBuilder::default()
    }
}

/// A builder for [`ProvisionedCapacityDescription`](crate::types::ProvisionedCapacityDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProvisionedCapacityDescriptionBuilder {
    pub(crate) capacity_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_date: ::std::option::Option<::std::string::String>,
    pub(crate) expiration_date: ::std::option::Option<::std::string::String>,
}
impl ProvisionedCapacityDescriptionBuilder {
    /// <p>The ID that identifies the provisioned capacity unit.</p>
    pub fn capacity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.capacity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID that identifies the provisioned capacity unit.</p>
    pub fn set_capacity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.capacity_id = input;
        self
    }
    /// <p>The ID that identifies the provisioned capacity unit.</p>
    pub fn get_capacity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.capacity_id
    }
    /// <p>The date that the provisioned capacity unit was purchased, in Universal Coordinated Time (UTC).</p>
    pub fn start_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date that the provisioned capacity unit was purchased, in Universal Coordinated Time (UTC).</p>
    pub fn set_start_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_date = input;
        self
    }
    /// <p>The date that the provisioned capacity unit was purchased, in Universal Coordinated Time (UTC).</p>
    pub fn get_start_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_date
    }
    /// <p>The date that the provisioned capacity unit expires, in Universal Coordinated Time (UTC).</p>
    pub fn expiration_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expiration_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date that the provisioned capacity unit expires, in Universal Coordinated Time (UTC).</p>
    pub fn set_expiration_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expiration_date = input;
        self
    }
    /// <p>The date that the provisioned capacity unit expires, in Universal Coordinated Time (UTC).</p>
    pub fn get_expiration_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.expiration_date
    }
    /// Consumes the builder and constructs a [`ProvisionedCapacityDescription`](crate::types::ProvisionedCapacityDescription).
    pub fn build(self) -> crate::types::ProvisionedCapacityDescription {
        crate::types::ProvisionedCapacityDescription {
            capacity_id: self.capacity_id,
            start_date: self.start_date,
            expiration_date: self.expiration_date,
        }
    }
}
