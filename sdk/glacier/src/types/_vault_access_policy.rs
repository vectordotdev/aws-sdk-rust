// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the vault access policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VaultAccessPolicy {
    /// <p>The vault access policy.</p>
    pub policy: ::std::option::Option<::std::string::String>,
}
impl VaultAccessPolicy {
    /// <p>The vault access policy.</p>
    pub fn policy(&self) -> ::std::option::Option<&str> {
        self.policy.as_deref()
    }
}
impl VaultAccessPolicy {
    /// Creates a new builder-style object to manufacture [`VaultAccessPolicy`](crate::types::VaultAccessPolicy).
    pub fn builder() -> crate::types::builders::VaultAccessPolicyBuilder {
        crate::types::builders::VaultAccessPolicyBuilder::default()
    }
}

/// A builder for [`VaultAccessPolicy`](crate::types::VaultAccessPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VaultAccessPolicyBuilder {
    pub(crate) policy: ::std::option::Option<::std::string::String>,
}
impl VaultAccessPolicyBuilder {
    /// <p>The vault access policy.</p>
    pub fn policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The vault access policy.</p>
    pub fn set_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy = input;
        self
    }
    /// <p>The vault access policy.</p>
    pub fn get_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy
    }
    /// Consumes the builder and constructs a [`VaultAccessPolicy`](crate::types::VaultAccessPolicy).
    pub fn build(self) -> crate::types::VaultAccessPolicy {
        crate::types::VaultAccessPolicy { policy: self.policy }
    }
}
